
Car_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000991c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009a30  08009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009dd0  08009dd0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dd0  08009dd0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001e0  08009fb8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08009fb8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e59  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d9  00000000  00000000  00038062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  0003b340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b7d9  00000000  00000000  0003d350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004fb2  00000000  00000000  00048b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0004dadb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000058c8  00000000  00000000  0004db58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a14 	.word	0x08009a14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009a14 	.word	0x08009a14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <CppMain>:
 *      Author: LuYidan
 */

#include "CPPmain.h"

void CppMain() {
 8001110:	b598      	push	{r3, r4, r7, lr}
 8001112:	af00      	add	r7, sp, #0
	//motor.frontRun();
	/* USER CODE BEGIN 1 */
	//int iTempTim4Encoder;///临时存放从TIM4编码器接口捕获到的脉冲数据
//	short accx, accy, accz;	//加速度x轴、y轴、z轴数据
//	short gyrox, gyroy, gyroz;	//陀螺仪x轴、y轴、z轴数据
	if (!MPU_Init())	//如果MPU6050初始化成功，返回0，!0则为1
 8001114:	f003 ff02 	bl	8004f1c <_Z8MPU_Initv>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <CppMain+0x1e>
	{
		printf("MPU-6050 Init Successfully");//成功了则打印 MPU-6050 Init Successfully
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <CppMain+0x38>)
 800112a:	f005 f8d3 	bl	80062d4 <iprintf>
		//button.buttonScan(&motor);
//		MPU_Get_Accelerometer(&accx, &accy, &accz);	//获取MPU6050加速度数据
//		MPU_Get_Gyroscope(&gyrox, &gyroy, &gyroz);	//获取MPU6050陀螺仪数据
//		printf("accx=%d,accy=%d,accz=%d\n", accx, accy, accz);	//打印MPU6050加速度数据
//		printf("gyrox=%d,gyroy=%d,gyroz=%d\n", gyrox, gyroy, gyroz);//打印MPU6050陀螺仪数据
		printf("小车角度 = %f\r\n",g_fCarAngle);//打印实时角度
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <CppMain+0x3c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f978 	bl	8000428 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <CppMain+0x40>)
 8001142:	f005 f8c7 	bl	80062d4 <iprintf>
 8001146:	e7f2      	b.n	800112e <CppMain+0x1e>
 8001148:	08009a30 	.word	0x08009a30
 800114c:	2000021c 	.word	0x2000021c
 8001150:	08009a4c 	.word	0x08009a4c

08001154 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f004 f8a9 	bl	80052b8 <atan2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <GetMpuData>:

#ifdef __cplusplus
extern "C" {
unsigned char g_ucMainEventCount; //主事件计数，会用在中断中
void GetMpuData(void) //获取MPU-6050数据函数
		{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	MPU_Get_Accelerometer(&x_nAcc, &y_nAcc, &z_nAcc); //获取MPU-6050加速度数据
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <GetMpuData+0x1c>)
 8001176:	4906      	ldr	r1, [pc, #24]	; (8001190 <GetMpuData+0x20>)
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <GetMpuData+0x24>)
 800117a:	f003 ffc3 	bl	8005104 <_Z21MPU_Get_AccelerometerPsS_S_>
	MPU_Get_Gyroscope(&x_nGyro, &y_nGyro, &z_nGyro); //获取MPU-6050陀螺仪数据
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <GetMpuData+0x28>)
 8001180:	4906      	ldr	r1, [pc, #24]	; (800119c <GetMpuData+0x2c>)
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <GetMpuData+0x30>)
 8001184:	f003 ff8c 	bl	80050a0 <_Z17MPU_Get_GyroscopePsS_S_>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000200 	.word	0x20000200
 8001190:	200001fe 	.word	0x200001fe
 8001194:	200001fc 	.word	0x200001fc
 8001198:	20000206 	.word	0x20000206
 800119c:	20000204 	.word	0x20000204
 80011a0:	20000202 	.word	0x20000202
 80011a4:	00000000 	.word	0x00000000

080011a8 <AngleCalculate>:

void AngleCalculate(void) //角度计算函数
		{
 80011a8:	b598      	push	{r3, r4, r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	//-------加速度数据处理--------------------------
	//量程为±2g时，灵敏度：16384 LSB/g
	x_fAcc = x_nAcc / 16384.0;
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <AngleCalculate+0x118>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f926 	bl	8000404 <__aeabi_i2d>
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <AngleCalculate+0x11c>)
 80011be:	f7ff fab5 	bl	800072c <__aeabi_ddiv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f7ff fc7d 	bl	8000ac8 <__aeabi_d2f>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <AngleCalculate+0x120>)
 80011d2:	601a      	str	r2, [r3, #0]
	y_fAcc = y_nAcc / 16384.0;
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <AngleCalculate+0x124>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f912 	bl	8000404 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <AngleCalculate+0x11c>)
 80011e6:	f7ff faa1 	bl	800072c <__aeabi_ddiv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fc69 	bl	8000ac8 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <AngleCalculate+0x128>)
 80011fa:	601a      	str	r2, [r3, #0]
	z_fAcc = z_nAcc / 16384.0;
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <AngleCalculate+0x12c>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f8fe 	bl	8000404 <__aeabi_i2d>
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <AngleCalculate+0x11c>)
 800120e:	f7ff fa8d 	bl	800072c <__aeabi_ddiv>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	f7ff fc55 	bl	8000ac8 <__aeabi_d2f>
 800121e:	4602      	mov	r2, r0
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <AngleCalculate+0x130>)
 8001222:	601a      	str	r2, [r3, #0]

	g_fAccAngle = atan2(y_fAcc, z_fAcc) / 3.14 * 180.0;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <AngleCalculate+0x128>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <AngleCalculate+0x130>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4610      	mov	r0, r2
 8001230:	f7ff ff90 	bl	8001154 <_ZSt5atan2ff>
 8001234:	4603      	mov	r3, r0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8f6 	bl	8000428 <__aeabi_f2d>
 800123c:	a31c      	add	r3, pc, #112	; (adr r3, 80012b0 <AngleCalculate+0x108>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fa73 	bl	800072c <__aeabi_ddiv>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	4618      	mov	r0, r3
 800124c:	4621      	mov	r1, r4
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <AngleCalculate+0x134>)
 8001254:	f7ff f940 	bl	80004d8 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4618      	mov	r0, r3
 800125e:	4621      	mov	r1, r4
 8001260:	f7ff fc32 	bl	8000ac8 <__aeabi_d2f>
 8001264:	4602      	mov	r2, r0
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <AngleCalculate+0x138>)
 8001268:	601a      	str	r2, [r3, #0]

	//-------陀螺仪数据处理-------------------------
	//范围为2000deg/s时，换算关系：16.4 LSB/(deg/s)
	g_fGyroAngleSpeed = x_nGyro / 16.4;  //计算角速度值
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <AngleCalculate+0x13c>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8c7 	bl	8000404 <__aeabi_i2d>
 8001276:	a310      	add	r3, pc, #64	; (adr r3, 80012b8 <AngleCalculate+0x110>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fa56 	bl	800072c <__aeabi_ddiv>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc1e 	bl	8000ac8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <AngleCalculate+0x140>)
 8001290:	601a      	str	r2, [r3, #0]

	//-------互补滤波---------------
	g_fCarAngle = ComplementaryFilter(g_fAccAngle, g_fGyroAngleSpeed, dt);
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <AngleCalculate+0x138>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <AngleCalculate+0x140>)
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <AngleCalculate+0x144>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f003 ffc8 	bl	8005234 <_Z19ComplementaryFilterfff>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <AngleCalculate+0x148>)
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	bd98      	pop	{r3, r4, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	51eb851f 	.word	0x51eb851f
 80012b4:	40091eb8 	.word	0x40091eb8
 80012b8:	66666666 	.word	0x66666666
 80012bc:	40306666 	.word	0x40306666
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	40d00000 	.word	0x40d00000
 80012c8:	20000208 	.word	0x20000208
 80012cc:	200001fe 	.word	0x200001fe
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	20000200 	.word	0x20000200
 80012d8:	20000210 	.word	0x20000210
 80012dc:	40668000 	.word	0x40668000
 80012e0:	20000214 	.word	0x20000214
 80012e4:	20000202 	.word	0x20000202
 80012e8:	20000218 	.word	0x20000218
 80012ec:	20000000 	.word	0x20000000
 80012f0:	2000021c 	.word	0x2000021c

080012f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <MX_GPIO_Init+0xf8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a37      	ldr	r2, [pc, #220]	; (80013ec <MX_GPIO_Init+0xf8>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a31      	ldr	r2, [pc, #196]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001326:	f043 0320 	orr.w	r3, r3, #32
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_GPIO_Init+0xf8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0320 	and.w	r3, r3, #32
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_GPIO_Init+0xf8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a2b      	ldr	r2, [pc, #172]	; (80013ec <MX_GPIO_Init+0xf8>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <MX_GPIO_Init+0xf8>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_GPIO_Init+0xf8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2118      	movs	r1, #24
 800136c:	4820      	ldr	r0, [pc, #128]	; (80013f0 <MX_GPIO_Init+0xfc>)
 800136e:	f000 ffcc 	bl	800230a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	481e      	ldr	r0, [pc, #120]	; (80013f4 <MX_GPIO_Init+0x100>)
 800137a:	f000 ffc6 	bl	800230a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 800137e:	2318      	movs	r3, #24
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	4816      	ldr	r0, [pc, #88]	; (80013f0 <MX_GPIO_Init+0xfc>)
 8001396:	f000 fe47 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_GPIO_Init+0x100>)
 80013b4:	f000 fe38 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80013b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_GPIO_Init+0x104>)
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_GPIO_Init+0xfc>)
 80013ce:	f000 fe2b 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2101      	movs	r1, #1
 80013d6:	2017      	movs	r0, #23
 80013d8:	f000 fd79 	bl	8001ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013dc:	2017      	movs	r0, #23
 80013de:	f000 fd92 	bl	8001f06 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	10210000 	.word	0x10210000

080013fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x50>)
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <MX_I2C1_Init+0x54>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x50>)
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_I2C1_Init+0x58>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_I2C1_Init+0x50>)
 800141a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_I2C1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_I2C1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_I2C1_Init+0x50>)
 800143a:	f000 ffaf 	bl	800239c <HAL_I2C_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001444:	f000 f8b0 	bl	80015a8 <Error_Handler>
  }

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000023c 	.word	0x2000023c
 8001450:	40005400 	.word	0x40005400
 8001454:	000186a0 	.word	0x000186a0

08001458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_I2C_MspInit+0x90>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d132      	bne.n	80014de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_I2C_MspInit+0x94>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_I2C_MspInit+0x94>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_I2C_MspInit+0x94>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001490:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001496:	2312      	movs	r3, #18
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <HAL_I2C_MspInit+0x98>)
 80014a6:	f000 fdbf 	bl	8002028 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_I2C_MspInit+0x9c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_I2C_MspInit+0x9c>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40010000 	.word	0x40010000

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fc:	f000 fb8c 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001500:	f000 f80d 	bl	800151e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001504:	f7ff fef6 	bl	80012f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001508:	f000 fad0 	bl	8001aac <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800150c:	f000 f9ec 	bl	80018e8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001510:	f000 f974 	bl	80017fc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001514:	f7ff ff72 	bl	80013fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	CppMain();
 8001518:	f7ff fdfa 	bl	8001110 <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800151c:	e7fe      	b.n	800151c <main+0x24>

0800151e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b090      	sub	sp, #64	; 0x40
 8001522:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	2228      	movs	r2, #40	; 0x28
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f004 f89a 	bl	8005666 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001548:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154e:	2301      	movs	r3, #1
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	4618      	mov	r0, r3
 8001568:	f001 ff06 	bl	8003378 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001572:	f000 f819 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2302      	movs	r3, #2
 800157c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2102      	movs	r1, #2
 8001590:	4618      	mov	r0, r3
 8001592:	f002 f971 	bl	8003878 <HAL_RCC_ClockConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800159c:	f000 f804 	bl	80015a8 <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3740      	adds	r7, #64	; 0x40
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ae:	e7fe      	b.n	80015ae <Error_Handler+0x6>

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_MspInit+0x5c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_MspInit+0x5c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x5c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x5c>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_MspInit+0x60>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_MspInit+0x60>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000

08001614 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */

	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

	extern void GetMpuData();
	extern void AngleCalculate();
	extern unsigned char g_ucMainEventCount;
	/****************************************/
	g_ucMainEventCount++;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <SysTick_Handler+0x30>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <SysTick_Handler+0x30>)
 8001666:	701a      	strb	r2, [r3, #0]
	if (g_ucMainEventCount >= 5) {
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <SysTick_Handler+0x30>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d906      	bls.n	800167e <SysTick_Handler+0x26>
		g_ucMainEventCount = 0;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Handler+0x30>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
		//读取MPU6050数据函数，每5ms执行一次
		GetMpuData();
 8001676:	f7ff fd7b 	bl	8001170 <GetMpuData>
		//角度环计算函数，每5ms执行一次
		AngleCalculate();
 800167a:	f7ff fd95 	bl	80011a8 <AngleCalculate>
	}
	/*************lyd end here***************/
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800167e:	f000 fb11 	bl	8001ca4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000220 	.word	0x20000220

0800168c <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001690:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001694:	f000 fe6a 	bl	800236c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <USART1_IRQHandler+0x10>)
 80016a2:	f003 f903 	bl	80048ac <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000320 	.word	0x20000320

080016b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00a      	b.n	80016d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	4601      	mov	r1, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf0      	blt.n	80016c2 <_read+0x12>
	}

return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e009      	b.n	8001710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fa4f 	bl	8001ba8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf1      	blt.n	80016fc <_write+0x12>
	}
	return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001748:	605a      	str	r2, [r3, #4]
	return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f003 ff22 	bl	80055fc <__errno>
 80017b8:	4602      	mov	r2, r0
 80017ba:	230c      	movs	r3, #12
 80017bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20005000 	.word	0x20005000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000224 	.word	0x20000224
 80017ec:	20000368 	.word	0x20000368

080017f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800182e:	4a2d      	ldr	r2, [pc, #180]	; (80018e4 <MX_TIM3_Init+0xe8>)
 8001830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <MX_TIM3_Init+0xe4>)
 8001834:	2248      	movs	r2, #72	; 0x48
 8001836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_TIM3_Init+0xe4>)
 8001840:	2264      	movs	r2, #100	; 0x64
 8001842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_TIM3_Init+0xe4>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001850:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_TIM3_Init+0xe4>)
 8001852:	f002 f9ad 	bl	8003bb0 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800185c:	f7ff fea4 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	4619      	mov	r1, r3
 800186c:	481c      	ldr	r0, [pc, #112]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800186e:	f002 fba7 	bl	8003fc0 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001878:	f7ff fe96 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800187e:	f002 f9e6 	bl	8003c4e <HAL_TIM_PWM_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001888:	f7ff fe8e 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	4619      	mov	r1, r3
 800189a:	4811      	ldr	r0, [pc, #68]	; (80018e0 <MX_TIM3_Init+0xe4>)
 800189c:	f002 fec8 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80018a6:	f7ff fe7f 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	; 0x60
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM3_Init+0xe4>)
 80018c2:	f002 fabf 	bl	8003e44 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80018cc:	f7ff fe6c 	bl	80015a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM3_Init+0xe4>)
 80018d2:	f000 f8b9 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002d8 	.word	0x200002d8
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2224      	movs	r2, #36	; 0x24
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 feb5 	bl	8005666 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <MX_TIM4_Init+0xa4>)
 8001908:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_TIM4_Init+0xa0>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800192a:	2303      	movs	r3, #3
 800192c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001942:	2301      	movs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001956:	f002 f9d2 	bl	8003cfe <HAL_TIM_Encoder_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001960:	f7ff fe22 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM4_Init+0xa0>)
 8001972:	f002 fe5d 	bl	8004630 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800197c:	f7ff fe14 	bl	80015a8 <Error_Handler>
  }

}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000290 	.word	0x20000290
 800198c:	40000800 	.word	0x40000800

08001990 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_TIM_Base_MspInit+0x34>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10b      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x38>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <HAL_TIM_Base_MspInit+0x38>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_TIM_Base_MspInit+0x38>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x70>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d123      	bne.n	8001a34 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	61d3      	str	r3, [r2, #28]
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x74>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1c:	23c0      	movs	r3, #192	; 0xc0
 8001a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a30:	f000 fafa 	bl	8002028 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_TIM_MspPostInit+0x58>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d117      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_TIM_MspPostInit+0x5c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_TIM_MspPostInit+0x5c>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_TIM_MspPostInit+0x5c>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_TIM_MspPostInit+0x60>)
 8001a94:	f000 fac8 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_USART1_UART_Init+0x50>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	f002 fe02 	bl	80046ec <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aee:	f7ff fd5b 	bl	80015a8 <Error_Handler>
  }

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000320 	.word	0x20000320
 8001afc:	40013800 	.word	0x40013800

08001b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_UART_MspInit+0x9c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d139      	bne.n	8001b94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_UART_MspInit+0xa0>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <HAL_UART_MspInit+0xa4>)
 8001b66:	f000 fa5f 	bl	8002028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HAL_UART_MspInit+0xa4>)
 8001b80:	f000 fa52 	bl	8002028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2025      	movs	r0, #37	; 0x25
 8001b8a:	f000 f9a0 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b8e:	2025      	movs	r0, #37	; 0x25
 8001b90:	f000 f9b9 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <__io_putchar>:
* @brief  Retargets the C library printf function to the USART.
* @param  None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001bb0:	1d39      	adds	r1, r7, #4
 8001bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <__io_putchar+0x20>)
 8001bba:	f002 fde4 	bl	8004786 <HAL_UART_Transmit>

    return ch;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000320 	.word	0x20000320

08001bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bce:	e003      	b.n	8001bd8 <LoopCopyDataInit>

08001bd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bd6:	3104      	adds	r1, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bd8:	480a      	ldr	r0, [pc, #40]	; (8001c04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001be0:	d3f6      	bcc.n	8001bd0 <CopyDataInit>
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001be4:	e002      	b.n	8001bec <LoopFillZerobss>

08001be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001be8:	f842 3b04 	str.w	r3, [r2], #4

08001bec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bf0:	d3f9      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff fdfd 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f003 fd07 	bl	8005608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fc7d 	bl	80014f8 <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r3, =_sidata
 8001c00:	08009dd8 	.word	0x08009dd8
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c08:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001c0c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001c10:	20000368 	.word	0x20000368

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f945 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fcbc 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f95d 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f925 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	2000000c 	.word	0x2000000c
 8001cc4:	20000360 	.word	0x20000360

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000360 	.word	0x20000360

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_Delay+0x40>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffe0 	bl	8001cc8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <__NVIC_EnableIRQ+0x34>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff90 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff2d 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff42 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff35 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	e051      	b.n	8002002 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_DMA_Abort_IT+0xd0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d029      	beq.n	8001fdc <HAL_DMA_Abort_IT+0xa0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_DMA_Abort_IT+0xd4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x9c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_DMA_Abort_IT+0xd8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x96>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_DMA_Abort_IT+0xdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d012      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x90>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_DMA_Abort_IT+0xe0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x8a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_DMA_Abort_IT+0xe4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMA_Abort_IT+0x84>
 8001fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fbe:	e00e      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fc4:	e00b      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	e005      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd6:	e002      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fd8:	2310      	movs	r3, #16
 8001fda:	e000      	b.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_DMA_Abort_IT+0xe8>)
 8001fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    } 
  }
  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020008 	.word	0x40020008
 8002010:	4002001c 	.word	0x4002001c
 8002014:	40020030 	.word	0x40020030
 8002018:	40020044 	.word	0x40020044
 800201c:	40020058 	.word	0x40020058
 8002020:	4002006c 	.word	0x4002006c
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b08b      	sub	sp, #44	; 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e127      	b.n	800228c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800203c:	2201      	movs	r2, #1
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8116 	bne.w	8002286 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b12      	cmp	r3, #18
 8002060:	d034      	beq.n	80020cc <HAL_GPIO_Init+0xa4>
 8002062:	2b12      	cmp	r3, #18
 8002064:	d80d      	bhi.n	8002082 <HAL_GPIO_Init+0x5a>
 8002066:	2b02      	cmp	r3, #2
 8002068:	d02b      	beq.n	80020c2 <HAL_GPIO_Init+0x9a>
 800206a:	2b02      	cmp	r3, #2
 800206c:	d804      	bhi.n	8002078 <HAL_GPIO_Init+0x50>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
 8002072:	2b01      	cmp	r3, #1
 8002074:	d01c      	beq.n	80020b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002076:	e048      	b.n	800210a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002078:	2b03      	cmp	r3, #3
 800207a:	d043      	beq.n	8002104 <HAL_GPIO_Init+0xdc>
 800207c:	2b11      	cmp	r3, #17
 800207e:	d01b      	beq.n	80020b8 <HAL_GPIO_Init+0x90>
          break;
 8002080:	e043      	b.n	800210a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002082:	4a89      	ldr	r2, [pc, #548]	; (80022a8 <HAL_GPIO_Init+0x280>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d026      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
 8002088:	4a87      	ldr	r2, [pc, #540]	; (80022a8 <HAL_GPIO_Init+0x280>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d806      	bhi.n	800209c <HAL_GPIO_Init+0x74>
 800208e:	4a87      	ldr	r2, [pc, #540]	; (80022ac <HAL_GPIO_Init+0x284>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d020      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
 8002094:	4a86      	ldr	r2, [pc, #536]	; (80022b0 <HAL_GPIO_Init+0x288>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01d      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
          break;
 800209a:	e036      	b.n	800210a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800209c:	4a85      	ldr	r2, [pc, #532]	; (80022b4 <HAL_GPIO_Init+0x28c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
 80020a2:	4a85      	ldr	r2, [pc, #532]	; (80022b8 <HAL_GPIO_Init+0x290>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d016      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
 80020a8:	4a84      	ldr	r2, [pc, #528]	; (80022bc <HAL_GPIO_Init+0x294>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0xae>
          break;
 80020ae:	e02c      	b.n	800210a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e028      	b.n	800210a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	3304      	adds	r3, #4
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e023      	b.n	800210a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	3308      	adds	r3, #8
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e01e      	b.n	800210a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	330c      	adds	r3, #12
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e019      	b.n	800210a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020de:	2304      	movs	r3, #4
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e012      	b.n	800210a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	611a      	str	r2, [r3, #16]
          break;
 80020f6:	e008      	b.n	800210a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	615a      	str	r2, [r3, #20]
          break;
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2bff      	cmp	r3, #255	; 0xff
 800210e:	d801      	bhi.n	8002114 <HAL_GPIO_Init+0xec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	e001      	b.n	8002118 <HAL_GPIO_Init+0xf0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2bff      	cmp	r3, #255	; 0xff
 800211e:	d802      	bhi.n	8002126 <HAL_GPIO_Init+0xfe>
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x104>
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	3b08      	subs	r3, #8
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	210f      	movs	r1, #15
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	6a39      	ldr	r1, [r7, #32]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	431a      	orrs	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8096 	beq.w	8002286 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215a:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_GPIO_Init+0x298>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_GPIO_Init+0x298>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_GPIO_Init+0x298>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002172:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_GPIO_Init+0x29c>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x2a0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x19e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x2a4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x19a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a49      	ldr	r2, [pc, #292]	; (80022d0 <HAL_GPIO_Init+0x2a8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x196>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a48      	ldr	r2, [pc, #288]	; (80022d4 <HAL_GPIO_Init+0x2ac>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x192>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x1a0>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x1a0>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x1a0>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x1a0>
 80021c6:	2300      	movs	r3, #0
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d8:	493a      	ldr	r1, [pc, #232]	; (80022c4 <HAL_GPIO_Init+0x29c>)
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4938      	ldr	r1, [pc, #224]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	4933      	ldr	r1, [pc, #204]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	492e      	ldr	r1, [pc, #184]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	43db      	mvns	r3, r3
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002232:	4013      	ands	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4924      	ldr	r1, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
 800224e:	e006      	b.n	800225e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	43db      	mvns	r3, r3
 8002258:	491f      	ldr	r1, [pc, #124]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800225a:	4013      	ands	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	491a      	ldr	r1, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	60cb      	str	r3, [r1, #12]
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	43db      	mvns	r3, r3
 8002280:	4915      	ldr	r1, [pc, #84]	; (80022d8 <HAL_GPIO_Init+0x2b0>)
 8002282:	4013      	ands	r3, r2
 8002284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3301      	adds	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	f47f aed0 	bne.w	800203c <HAL_GPIO_Init+0x14>
  }
}
 800229c:	bf00      	nop
 800229e:	372c      	adds	r7, #44	; 0x2c
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	10210000 	.word	0x10210000
 80022ac:	10110000 	.word	0x10110000
 80022b0:	10120000 	.word	0x10120000
 80022b4:	10310000 	.word	0x10310000
 80022b8:	10320000 	.word	0x10320000
 80022bc:	10220000 	.word	0x10220000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	40010c00 	.word	0x40010c00
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40011400 	.word	0x40011400
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231a:	787b      	ldrb	r3, [r7, #1]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002326:	e003      	b.n	8002330 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43d9      	mvns	r1, r3
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fd9a 	bl	8004ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e11f      	b.n	80025ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff f848 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f001 fb90 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a7b      	ldr	r2, [pc, #492]	; (80025f8 <HAL_I2C_Init+0x25c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_I2C_Init+0x260>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_I2C_Init+0x264>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0db      	b.n	80025ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a72      	ldr	r2, [pc, #456]	; (8002604 <HAL_I2C_Init+0x268>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_I2C_Init+0x25c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_I2C_Init+0x26c>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4956      	ldr	r1, [pc, #344]	; (80025f8 <HAL_I2C_Init+0x25c>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d80d      	bhi.n	80024c0 <HAL_I2C_Init+0x124>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	bf38      	it	cc
 80024bc:	2304      	movcc	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x150>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x176>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x17e>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1a4>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff fb4f 	bl	8001cc8 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 80d9 	bne.w	80027ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	496d      	ldr	r1, [pc, #436]	; (80027f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fcbb 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Mem_Write+0x56>
 800265e:	2302      	movs	r3, #2
 8002660:	e0c5      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d007      	beq.n	8002688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	; 0x21
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a4d      	ldr	r2, [pc, #308]	; (80027fc <HAL_I2C_Mem_Write+0x1f0>)
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 faf2 	bl	8002cc4 <I2C_RequestMemoryWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d052      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e081      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd3c 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Mem_Write+0x180>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1aa      	bne.n	80026ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fd28 	bl	80031ee <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e016      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281e:	f7ff fa53 	bl	8001cc8 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	f040 823d 	bne.w	8002cac <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2319      	movs	r3, #25
 8002838:	2201      	movs	r2, #1
 800283a:	4981      	ldr	r1, [pc, #516]	; (8002a40 <HAL_I2C_Mem_Read+0x240>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fbbf 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	e230      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_I2C_Mem_Read+0x5a>
 8002856:	2302      	movs	r3, #2
 8002858:	e229      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d007      	beq.n	8002880 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2222      	movs	r2, #34	; 0x22
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a61      	ldr	r2, [pc, #388]	; (8002a44 <HAL_I2C_Mem_Read+0x244>)
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c2:	88f8      	ldrh	r0, [r7, #6]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4603      	mov	r3, r0
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fa8c 	bl	8002df0 <I2C_RequestMemoryRead>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1e5      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e1b9      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11d      	bne.n	8002956 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002950:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002952:	b662      	cpsie	i
 8002954:	e197      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11d      	bne.n	800299a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800296e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002994:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002996:	b662      	cpsie	i
 8002998:	e175      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029c0:	e161      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	f200 811a 	bhi.w	8002c00 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d123      	bne.n	8002a1c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fc49 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e162      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a1a:	e134      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d150      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <HAL_I2C_Mem_Read+0x248>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fac6 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e137      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
 8002a3e:	bf00      	nop
 8002a40:	00100002 	.word	0x00100002
 8002a44:	ffff0000 	.word	0xffff0000
 8002a48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a90:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac4:	e0df      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	497a      	ldr	r1, [pc, #488]	; (8002cb8 <HAL_I2C_Mem_Read+0x4b8>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fa75 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0e6      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_I2C_Mem_Read+0x4bc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_I2C_Mem_Read+0x4c0>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0a1a      	lsrs	r2, r3, #8
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00da      	lsls	r2, r3, #3
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d117      	bne.n	8002b7a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e099      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d1da      	bne.n	8002b3e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bca:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bfe:	e042      	b.n	8002c86 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb33 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04c      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d118      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f ae99 	bne.w	80029c2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	00010004 	.word	0x00010004
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	14f8b589 	.word	0x14f8b589

08002cc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	817b      	strh	r3, [r7, #10]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	813b      	strh	r3, [r7, #8]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f960 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d14:	d103      	bne.n	8002d1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e05f      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	492d      	ldr	r1, [pc, #180]	; (8002dec <I2C_RequestMemoryWrite+0x128>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f998 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e04c      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa02 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d107      	bne.n	8002d86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02b      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	e021      	b.n	8002de0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f9dc 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d107      	bne.n	8002dd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e005      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	00010002 	.word	0x00010002

08002df0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8c2 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d103      	bne.n	8002e5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0aa      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	4952      	ldr	r1, [pc, #328]	; (8002fbc <I2C_RequestMemoryRead+0x1cc>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8fa 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e097      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f964 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e076      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e021      	b.n	8002f1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f93e 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e050      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f923 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d107      	bne.n	8002f44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e035      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f82b 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d103      	bne.n	8002f88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e013      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <I2C_RequestMemoryRead+0x1cc>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f863 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	00010002 	.word	0x00010002

08002fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd0:	e025      	b.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d021      	beq.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe fe75 	bl	8001cc8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d116      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e023      	b.n	8003066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10d      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	e00c      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d0b6      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307c:	e051      	b.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d123      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e046      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d021      	beq.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fdf3 	bl	8001cc8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e020      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10c      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e00b      	b.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d18d      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	e02d      	b.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8ce 	bl	800331c <I2C_IsAcknowledgeFailed>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e02d      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d021      	beq.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe fd99 	bl	8001cc8 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d116      	bne.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e007      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d1ca      	bne.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fa:	e02d      	b.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f88d 	bl	800331c <I2C_IsAcknowledgeFailed>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e02d      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d021      	beq.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fe fd58 	bl	8001cc8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b04      	cmp	r3, #4
 8003264:	d1ca      	bne.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800327c:	e042      	b.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d119      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e029      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fe fd02 	bl	8001cc8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d1b5      	bne.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d11b      	bne.n	800336c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e26c      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8087 	beq.w	80034a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d00c      	beq.n	80033be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033a4:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d112      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
 80033b0:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x12c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d168      	bne.n	80034a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e246      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x76>
 80033e0:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a77      	ldr	r2, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0xbc>
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a71      	ldr	r2, [pc, #452]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a67      	ldr	r2, [pc, #412]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fc38 	bl	8001cc8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fc34 	bl	8001cc8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1fa      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xe4>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fc24 	bl	8001cc8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fe fc20 	bl	8001cc8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e6      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x10c>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
 80034ca:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1ba      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4939      	ldr	r1, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e03a      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe fbd9 	bl	8001cc8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fe fbd5 	bl	8001cc8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e19b      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4927      	ldr	r1, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fbb8 	bl	8001cc8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe fbb4 	bl	8001cc8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e17a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d03a      	beq.n	80035fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d019      	beq.n	80035c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fe fb98 	bl	8001cc8 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fe fb94 	bl	8001cc8 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e15a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f000 fada 	bl	8003b74 <RCC_Delay>
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fe fb7e 	bl	8001cc8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ce:	e00f      	b.n	80035f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe fb7a 	bl	8001cc8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e140      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	42420000 	.word	0x42420000
 80035ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e9      	bne.n	80035d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a6 	beq.w	8003756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b97      	ldr	r3, [pc, #604]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b94      	ldr	r3, [pc, #592]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a93      	ldr	r2, [pc, #588]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b91      	ldr	r3, [pc, #580]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fe fb3b 	bl	8001cc8 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe fb37 	bl	8001cc8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0fd      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x312>
 800367c:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x334>
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a75      	ldr	r2, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a72      	ldr	r2, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x356>
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a66      	ldr	r2, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe faeb 	bl	8001cc8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe fae7 	bl	8001cc8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0ab      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x37e>
 8003718:	e014      	b.n	8003744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fe fad5 	bl	8001cc8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe fad1 	bl	8001cc8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e095      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8081 	beq.w	8003862 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d061      	beq.n	8003830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d146      	bne.n	8003802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe faa5 	bl	8001cc8 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe faa1 	bl	8001cc8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e067      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	4b35      	ldr	r3, [pc, #212]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a19      	ldr	r1, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fa75 	bl	8001cc8 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fa71 	bl	8001cc8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e037      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46a>
 8003800:	e02f      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fa5e 	bl	8001cc8 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fa5a 	bl	8001cc8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e020      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x498>
 800382e:	e018      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e013      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420060 	.word	0x42420060

08003878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d0      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d910      	bls.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4965      	ldr	r1, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d040      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e073      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4936      	ldr	r1, [pc, #216]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fe f9ae 	bl	8001cc8 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fe f9aa 	bl	8001cc8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e053      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d210      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1cc>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe f90c 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08009a74 	.word	0x08009a74
 8003a44:	20000004 	.word	0x20000004
 8003a48:	20000008 	.word	0x20000008

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b490      	push	{r4, r7}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a54:	1d3c      	adds	r4, r7, #4
 8003a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a5c:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x46>
 8003a8a:	e02d      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a8e:	623b      	str	r3, [r7, #32]
      break;
 8003a90:	e02d      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003aa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab0:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c5b      	lsrs	r3, r3, #17
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003abe:	4413      	add	r3, r2
 8003ac0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ac4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	623b      	str	r3, [r7, #32]
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc90      	pop	{r4, r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	08009a60 	.word	0x08009a60
 8003b00:	08009a70 	.word	0x08009a70
 8003b04:	40021000 	.word	0x40021000
 8003b08:	007a1200 	.word	0x007a1200
 8003b0c:	003d0900 	.word	0x003d0900

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff2 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08009a84 	.word	0x08009a84

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b54:	4601      	mov	r1, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0adb      	lsrs	r3, r3, #11
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08009a84 	.word	0x08009a84

08003b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <RCC_Delay+0x34>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <RCC_Delay+0x38>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0a5b      	lsrs	r3, r3, #9
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b90:	bf00      	nop
  }
  while (Delay --);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e5a      	subs	r2, r3, #1
 8003b96:	60fa      	str	r2, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f9      	bne.n	8003b90 <RCC_Delay+0x1c>
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	10624dd3 	.word	0x10624dd3

08003bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd feda 	bl	8001990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fa9e 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e041      	b.n	8003ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f839 	bl	8003cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fa4f 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e093      	b.n	8003e3a <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fe50 	bl	80019cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d42:	f023 0307 	bic.w	r3, r3, #7
 8003d46:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 f9ec 	bl	8004130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	f023 0303 	bic.w	r3, r3, #3
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	4313      	orrs	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d9e:	f023 030c 	bic.w	r3, r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	011a      	lsls	r2, r3, #4
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ddc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4313      	orrs	r3, r2
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ac      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f200 809f 	bhi.w	8003fac <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003fad 	.word	0x08003fad
 8003e7c:	08003fad 	.word	0x08003fad
 8003e80:	08003fad 	.word	0x08003fad
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003fad 	.word	0x08003fad
 8003e8c:	08003fad 	.word	0x08003fad
 8003e90:	08003fad 	.word	0x08003fad
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003fad 	.word	0x08003fad
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	08003fad 	.word	0x08003fad
 8003ea4:	08003f6b 	.word	0x08003f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f9a0 	bl	80041f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e062      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f9e6 	bl	80042c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e041      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fa2f 	bl	8004394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e021      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fa79 	bl	8004468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_ConfigClockSource+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e0a6      	b.n	8004126 <HAL_TIM_ConfigClockSource+0x166>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d067      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0x120>
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d80b      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x6c>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d073      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0x140>
 8004018:	2b10      	cmp	r3, #16
 800401a:	d802      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x62>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d06f      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004020:	e078      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004022:	2b20      	cmp	r3, #32
 8004024:	d06c      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0x140>
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d06a      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800402a:	e073      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d00d      	beq.n	800404c <HAL_TIM_ConfigClockSource+0x8c>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d804      	bhi.n	800403e <HAL_TIM_ConfigClockSource+0x7e>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d033      	beq.n	80040a0 <HAL_TIM_ConfigClockSource+0xe0>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d041      	beq.n	80040c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800403c:	e06a      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004042:	d066      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x152>
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d017      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800404a:	e063      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f000 fac9 	bl	80045f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800406e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]
      break;
 8004078:	e04c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6899      	ldr	r1, [r3, #8]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f000 fab2 	bl	80045f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409c:	609a      	str	r2, [r3, #8]
      break;
 800409e:	e039      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	461a      	mov	r2, r3
 80040ae:	f000 fa29 	bl	8004504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2150      	movs	r1, #80	; 0x50
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa80 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 80040be:	e029      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f000 fa47 	bl	8004560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2160      	movs	r1, #96	; 0x60
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fa70 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 80040de:	e019      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	461a      	mov	r2, r3
 80040ee:	f000 fa09 	bl	8004504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2140      	movs	r1, #64	; 0x40
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa60 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 80040fe:	e009      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fa57 	bl	80045be <TIM_ITRx_SetConfig>
        break;
 8004110:	e000      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <TIM_Base_SetConfig+0xb8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_Base_SetConfig+0xbc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <TIM_Base_SetConfig+0xc0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <TIM_Base_SetConfig+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <TIM_Base_SetConfig+0xbc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <TIM_Base_SetConfig+0xc0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <TIM_Base_SetConfig+0xb8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800

080041f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0302 	bic.w	r3, r3, #2
 800423c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <TIM_OC1_SetConfig+0xc8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10c      	bne.n	800426a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0308 	bic.w	r3, r3, #8
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <TIM_OC1_SetConfig+0xc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	621a      	str	r2, [r3, #32]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0210 	bic.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0320 	bic.w	r3, r3, #32
 800430a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <TIM_OC2_SetConfig+0xd0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10d      	bne.n	800433c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC2_SetConfig+0xd0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d113      	bne.n	800436c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00

08004394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <TIM_OC3_SetConfig+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <TIM_OC3_SetConfig+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00

08004468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <TIM_OC4_SetConfig+0x98>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00

08004504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0201 	bic.w	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f023 030a 	bic.w	r3, r3, #10
 8004540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f023 0210 	bic.w	r2, r3, #16
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800458a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	031b      	lsls	r3, r3, #12
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800459c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f043 0307 	orr.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	021a      	lsls	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	431a      	orrs	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e046      	b.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d009      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10c      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03f      	b.n	800477e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd f9f4 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb39 	bl	8004da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b08a      	sub	sp, #40	; 0x28
 800478a:	af02      	add	r7, sp, #8
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d17c      	bne.n	80048a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_Transmit+0x2c>
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e075      	b.n	80048a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Transmit+0x3e>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e06e      	b.n	80048a2 <HAL_UART_Transmit+0x11c>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2221      	movs	r2, #33	; 0x21
 80047d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047da:	f7fd fa75 	bl	8001cc8 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d108      	bne.n	8004808 <HAL_UART_Transmit+0x82>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e003      	b.n	8004810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004818:	e02a      	b.n	8004870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f95c 	bl	8004ae2 <UART_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e036      	b.n	80048a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	3302      	adds	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e007      	b.n	8004862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1cf      	bne.n	800481a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f92c 	bl	8004ae2 <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e006      	b.n	80048a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10d      	bne.n	80048fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_UART_IRQHandler+0x52>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9d5 	bl	8004ca6 <UART_Receive_IT>
      return;
 80048fc:	e0d1      	b.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80b0 	beq.w	8004a66 <HAL_UART_IRQHandler+0x1ba>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_UART_IRQHandler+0x70>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a5 	beq.w	8004a66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_UART_IRQHandler+0x90>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_UART_IRQHandler+0xb0>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	f043 0202 	orr.w	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_UART_IRQHandler+0xd0>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00f      	beq.n	80049a6 <HAL_UART_IRQHandler+0xfa>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_UART_IRQHandler+0xee>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d078      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f96f 	bl	8004ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_UART_IRQHandler+0x144>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d031      	beq.n	8004a54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8c0 	bl	8004b76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d023      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_UART_IRQHandler+0x1fc>)
 8004a22:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fd fa87 	bl	8001f3c <HAL_DMA_Abort_IT>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	e00e      	b.n	8004a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f843 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4a:	e00a      	b.n	8004a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f83f 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a52:	e006      	b.n	8004a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f83b 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a60:	e01e      	b.n	8004aa0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a62:	bf00      	nop
    return;
 8004a64:	e01c      	b.n	8004aa0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_UART_IRQHandler+0x1d6>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8ac 	bl	8004bd8 <UART_Transmit_IT>
    return;
 8004a80:	e00f      	b.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8ed 	bl	8004c76 <UART_EndTransmit_IT>
    return;
 8004a9c:	bf00      	nop
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004aa0:	bf00      	nop
  }
}
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08004bb1 	.word	0x08004bb1

08004aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	4613      	mov	r3, r2
 8004af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	e02c      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d028      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b02:	f7fd f8e1 	bl	8001cc8 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d21d      	bcs.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e00f      	b.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d0c3      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff ff80 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b21      	cmp	r3, #33	; 0x21
 8004bea:	d13e      	bne.n	8004c6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf4:	d114      	bne.n	8004c20 <UART_Transmit_IT+0x48>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d110      	bne.n	8004c20 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]
 8004c1e:	e008      	b.n	8004c32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	1c59      	adds	r1, r3, #1
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6211      	str	r1, [r2, #32]
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e000      	b.n	8004c6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ff08 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b22      	cmp	r3, #34	; 0x22
 8004cb8:	d170      	bne.n	8004d9c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc2:	d117      	bne.n	8004cf4 <UART_Receive_IT+0x4e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d113      	bne.n	8004cf4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8004cf2:	e026      	b.n	8004d42 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	d007      	beq.n	8004d18 <UART_Receive_IT+0x72>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <UART_Receive_IT+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e008      	b.n	8004d38 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d120      	bne.n	8004d98 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0220 	bic.w	r2, r2, #32
 8004d64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fe95 	bl	8004abe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e002      	b.n	8004d9e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004de2:	f023 030c 	bic.w	r3, r3, #12
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	430b      	orrs	r3, r1
 8004dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <UART_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe fe9c 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	e002      	b.n	8004e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe fe84 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009a      	lsls	r2, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <UART_SetConfig+0x118>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	0119      	lsls	r1, r3, #4
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009a      	lsls	r2, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <UART_SetConfig+0x118>)
 8004e56:	fba3 0302 	umull	r0, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2064      	movs	r0, #100	; 0x64
 8004e5e:	fb00 f303 	mul.w	r3, r0, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	3332      	adds	r3, #50	; 0x32
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <UART_SetConfig+0x118>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e74:	4419      	add	r1, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009a      	lsls	r2, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <UART_SetConfig+0x118>)
 8004e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2064      	movs	r0, #100	; 0x64
 8004e96:	fb00 f303 	mul.w	r3, r0, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	3332      	adds	r3, #50	; 0x32
 8004ea0:	4a07      	ldr	r2, [pc, #28]	; (8004ec0 <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40013800 	.word	0x40013800
 8004ec0:	51eb851f 	.word	0x51eb851f

08004ec4 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief: 当检测到外部中断触发并确定其为按键按下时，翻转led灯，按下标记被确定
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed4:	d117      	bne.n	8004f06 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_Delay(5);
 8004ed6:	2005      	movs	r0, #5
 8004ed8:	f7fc ff00 	bl	8001cdc <HAL_Delay>
		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET) {
 8004edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ee0:	480b      	ldr	r0, [pc, #44]	; (8004f10 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004ee2:	f7fd f9fb 	bl	80022dc <HAL_GPIO_ReadPin>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004efa:	4806      	ldr	r0, [pc, #24]	; (8004f14 <HAL_GPIO_EXTI_Callback+0x50>)
 8004efc:	f7fd fa1d 	bl	800233a <HAL_GPIO_TogglePin>
			buttonDownFlag = true;
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_GPIO_EXTI_Callback+0x54>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40010800 	.word	0x40010800
 8004f14:	40010c00 	.word	0x40010c00
 8004f18:	20000228 	.word	0x20000228

08004f1c <_Z8MPU_Initv>:
#include "mpu6050.h"

//初始化MPU6050
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Init(void) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
	uint8_t res;

	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 8004f22:	481f      	ldr	r0, [pc, #124]	; (8004fa0 <_Z8MPU_Initv+0x84>)
 8004f24:	f7fd fa3a 	bl	800239c <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);	//复位MPU6050
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	206b      	movs	r0, #107	; 0x6b
 8004f2c:	f000 f93c 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);	//唤醒MPU6050
 8004f30:	2100      	movs	r1, #0
 8004f32:	206b      	movs	r0, #107	; 0x6b
 8004f34:	f000 f938 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	MPU_Set_Gyro_Fsr(3);						//陀螺仪传感器,±2000dps
 8004f38:	2003      	movs	r0, #3
 8004f3a:	f000 f833 	bl	8004fa4 <_Z16MPU_Set_Gyro_Fsrh>
	MPU_Set_Accel_Fsr(0);						//加速度传感器,±2g
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f000 f841 	bl	8004fc6 <_Z17MPU_Set_Accel_Fsrh>
	MPU_Set_Rate(50);							//设置采样率50Hz
 8004f44:	2032      	movs	r0, #50	; 0x32
 8004f46:	f000 f880 	bl	800504a <_Z12MPU_Set_Ratet>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);		//关闭所有中断
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	2038      	movs	r0, #56	; 0x38
 8004f4e:	f000 f92b 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);	//I2C主模式关闭
 8004f52:	2100      	movs	r1, #0
 8004f54:	206a      	movs	r0, #106	; 0x6a
 8004f56:	f000 f927 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);		//关闭FIFO
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2023      	movs	r0, #35	; 0x23
 8004f5e:	f000 f923 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);	//INT引脚低电平有效
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	2037      	movs	r0, #55	; 0x37
 8004f66:	f000 f91f 	bl	80051a8 <_Z14MPU_Write_Bytehh>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8004f6a:	2075      	movs	r0, #117	; 0x75
 8004f6c:	f000 f942 	bl	80051f4 <_Z13MPU_Read_Byteh>
 8004f70:	4603      	mov	r3, r0
 8004f72:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR)	//器件ID正确
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b68      	cmp	r3, #104	; 0x68
 8004f78:	d10c      	bne.n	8004f94 <_Z8MPU_Initv+0x78>
	{
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);//设置CLKSEL,PLL X轴为参考
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	206b      	movs	r0, #107	; 0x6b
 8004f7e:	f000 f913 	bl	80051a8 <_Z14MPU_Write_Bytehh>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);//加速度与陀螺仪都工作
 8004f82:	2100      	movs	r1, #0
 8004f84:	206c      	movs	r0, #108	; 0x6c
 8004f86:	f000 f90f 	bl	80051a8 <_Z14MPU_Write_Bytehh>
		MPU_Set_Rate(50);						//设置采样率为50Hz
 8004f8a:	2032      	movs	r0, #50	; 0x32
 8004f8c:	f000 f85d 	bl	800504a <_Z12MPU_Set_Ratet>
	} else
		return 1;
	return 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <_Z8MPU_Initv+0x7a>
		return 1;
 8004f94:	2301      	movs	r3, #1
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000023c 	.word	0x2000023c

08004fa4 <_Z16MPU_Set_Gyro_Fsrh>:
//设置MPU6050陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr << 3);				//设置陀螺仪满量程范围
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	201b      	movs	r0, #27
 8004fb8:	f000 f8f6 	bl	80051a8 <_Z14MPU_Write_Bytehh>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_Z17MPU_Set_Accel_Fsrh>:
//设置MPU6050加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr) {
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	4603      	mov	r3, r0
 8004fce:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr << 3);			//设置加速度传感器满量程范围
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	201c      	movs	r0, #28
 8004fda:	f000 f8e5 	bl	80051a8 <_Z14MPU_Write_Bytehh>
 8004fde:	4603      	mov	r3, r0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_Z11MPU_Set_LPFt>:
//设置MPU6050的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_LPF(uint16_t lpf) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
	uint8_t data = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	2bbb      	cmp	r3, #187	; 0xbb
 8004ffa:	d902      	bls.n	8005002 <_Z11MPU_Set_LPFt+0x1a>
		data = 1;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e019      	b.n	8005036 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 98)
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b61      	cmp	r3, #97	; 0x61
 8005006:	d902      	bls.n	800500e <_Z11MPU_Set_LPFt+0x26>
		data = 2;
 8005008:	2302      	movs	r3, #2
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e013      	b.n	8005036 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 42)
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b29      	cmp	r3, #41	; 0x29
 8005012:	d902      	bls.n	800501a <_Z11MPU_Set_LPFt+0x32>
		data = 3;
 8005014:	2303      	movs	r3, #3
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e00d      	b.n	8005036 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 20)
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b13      	cmp	r3, #19
 800501e:	d902      	bls.n	8005026 <_Z11MPU_Set_LPFt+0x3e>
		data = 4;
 8005020:	2304      	movs	r3, #4
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e007      	b.n	8005036 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 10)
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d902      	bls.n	8005032 <_Z11MPU_Set_LPFt+0x4a>
		data = 5;
 800502c:	2305      	movs	r3, #5
 800502e:	73fb      	strb	r3, [r7, #15]
 8005030:	e001      	b.n	8005036 <_Z11MPU_Set_LPFt+0x4e>
	else
		data = 6;
 8005032:	2306      	movs	r3, #6
 8005034:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);						//设置数字低通滤波器
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	4619      	mov	r1, r3
 800503a:	201a      	movs	r0, #26
 800503c:	f000 f8b4 	bl	80051a8 <_Z14MPU_Write_Bytehh>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_Z12MPU_Set_Ratet>:
//设置MPU6050的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Rate(uint16_t rate) {
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	4603      	mov	r3, r0
 8005052:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if (rate > 1000)
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800505a:	d902      	bls.n	8005062 <_Z12MPU_Set_Ratet+0x18>
		rate = 1000;
 800505c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005060:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d801      	bhi.n	800506c <_Z12MPU_Set_Ratet+0x22>
		rate = 4;
 8005068:	2304      	movs	r3, #4
 800506a:	80fb      	strh	r3, [r7, #6]
	data = 1000 / rate - 1;
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005072:	fb92 f3f3 	sdiv	r3, r2, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);	//设置数字低通滤波器
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	4619      	mov	r1, r3
 8005080:	2019      	movs	r0, #25
 8005082:	f000 f891 	bl	80051a8 <_Z14MPU_Write_Bytehh>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
	return MPU_Set_LPF(rate / 2);	//自动设置LPF为采样率的一半
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ffa9 	bl	8004fe8 <_Z11MPU_Set_LPFt>
 8005096:	4603      	mov	r3, r0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_Z17MPU_Get_GyroscopePsS_S_>:
}
//得到陀螺仪值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Gyroscope(short *gx, short *gy, short *gz) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU_GYRO_XOUTH_REG, 6, buf);
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	461a      	mov	r2, r3
 80050b2:	2106      	movs	r1, #6
 80050b4:	2043      	movs	r0, #67	; 0x43
 80050b6:	f000 f857 	bl	8005168 <_Z12MPU_Read_LenhhPh>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]
	if (res == 0) {
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11a      	bne.n	80050fa <_Z17MPU_Get_GyroscopePsS_S_+0x5a>
		*gx = ((uint16_t) buf[0] << 8) | buf[1];
 80050c4:	7c3b      	ldrb	r3, [r7, #16]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	b21a      	sxth	r2, r3
 80050ca:	7c7b      	ldrb	r3, [r7, #17]
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	4313      	orrs	r3, r2
 80050d0:	b21a      	sxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	801a      	strh	r2, [r3, #0]
		*gy = ((uint16_t) buf[2] << 8) | buf[3];
 80050d6:	7cbb      	ldrb	r3, [r7, #18]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	b21a      	sxth	r2, r3
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	b21b      	sxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b21a      	sxth	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	801a      	strh	r2, [r3, #0]
		*gz = ((uint16_t) buf[4] << 8) | buf[5];
 80050e8:	7d3b      	ldrb	r3, [r7, #20]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	b21a      	sxth	r2, r3
 80050ee:	7d7b      	ldrb	r3, [r7, #21]
 80050f0:	b21b      	sxth	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b21a      	sxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	801a      	strh	r2, [r3, #0]
	}
	return res;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_Z21MPU_Get_AccelerometerPsS_S_>:
//得到加速度值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Accelerometer(short *ax, short *ay, short *az) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU_ACCEL_XOUTH_REG, 6, buf);
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	461a      	mov	r2, r3
 8005116:	2106      	movs	r1, #6
 8005118:	203b      	movs	r0, #59	; 0x3b
 800511a:	f000 f825 	bl	8005168 <_Z12MPU_Read_LenhhPh>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
	if (res == 0) {
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11a      	bne.n	800515e <_Z21MPU_Get_AccelerometerPsS_S_+0x5a>
		*ax = ((uint16_t) buf[0] << 8) | buf[1];
 8005128:	7c3b      	ldrb	r3, [r7, #16]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	b21a      	sxth	r2, r3
 800512e:	7c7b      	ldrb	r3, [r7, #17]
 8005130:	b21b      	sxth	r3, r3
 8005132:	4313      	orrs	r3, r2
 8005134:	b21a      	sxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	801a      	strh	r2, [r3, #0]
		*ay = ((uint16_t) buf[2] << 8) | buf[3];
 800513a:	7cbb      	ldrb	r3, [r7, #18]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b21a      	sxth	r2, r3
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	b21b      	sxth	r3, r3
 8005144:	4313      	orrs	r3, r2
 8005146:	b21a      	sxth	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	801a      	strh	r2, [r3, #0]
		*az = ((uint16_t) buf[4] << 8) | buf[5];
 800514c:	7d3b      	ldrb	r3, [r7, #20]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	b21a      	sxth	r2, r3
 8005152:	7d7b      	ldrb	r3, [r7, #21]
 8005154:	b21b      	sxth	r3, r3
 8005156:	4313      	orrs	r3, r2
 8005158:	b21a      	sxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	801a      	strh	r2, [r3, #0]
	}
	return res;;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_Z12MPU_Read_LenhhPh>:
//reg:要读取的寄存器地址
//len:要读取的长度
//buf:读取到的数据存储区
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Read_Len(uint8_t reg, uint8_t len, uint8_t *buf) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af04      	add	r7, sp, #16
 800516e:	4603      	mov	r3, r0
 8005170:	603a      	str	r2, [r7, #0]
 8005172:	71fb      	strb	r3, [r7, #7]
 8005174:	460b      	mov	r3, r1
 8005176:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len,
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	b299      	uxth	r1, r3
 800517c:	79bb      	ldrb	r3, [r7, #6]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005184:	9202      	str	r2, [sp, #8]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	460a      	mov	r2, r1
 8005190:	21d1      	movs	r1, #209	; 0xd1
 8005192:	4804      	ldr	r0, [pc, #16]	; (80051a4 <_Z12MPU_Read_LenhhPh+0x3c>)
 8005194:	f7fd fb34 	bl	8002800 <HAL_I2C_Mem_Read>
			0xfff);
	//HAL_Delay(100);

	return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000023c 	.word	0x2000023c

080051a8 <_Z14MPU_Write_Bytehh>:
//IIC写一个字节
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Byte(uint8_t reg, uint8_t data) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	4603      	mov	r3, r0
 80051b0:	460a      	mov	r2, r1
 80051b2:	71fb      	strb	r3, [r7, #7]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]

	W_Data = data;
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1,
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80051c8:	9302      	str	r3, [sp, #8]
 80051ca:	2301      	movs	r3, #1
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	f107 030f 	add.w	r3, r7, #15
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2301      	movs	r3, #1
 80051d6:	21d0      	movs	r1, #208	; 0xd0
 80051d8:	4805      	ldr	r0, [pc, #20]	; (80051f0 <_Z14MPU_Write_Bytehh+0x48>)
 80051da:	f7fd fa17 	bl	800260c <HAL_I2C_Mem_Write>
			0xfff);
	HAL_Delay(100);
 80051de:	2064      	movs	r0, #100	; 0x64
 80051e0:	f7fc fd7c 	bl	8001cdc <HAL_Delay>

	return 0;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000023c 	.word	0x2000023c

080051f4 <_Z13MPU_Read_Byteh>:
//IIC读一个字节
//reg:寄存器地址
//返回值:读到的数据
uint8_t MPU_Read_Byte(uint8_t reg) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1,
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	b29a      	uxth	r2, r3
 8005206:	f640 73ff 	movw	r3, #4095	; 0xfff
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	2301      	movs	r3, #1
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	f107 030f 	add.w	r3, r7, #15
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	2301      	movs	r3, #1
 8005218:	21d1      	movs	r1, #209	; 0xd1
 800521a:	4805      	ldr	r0, [pc, #20]	; (8005230 <_Z13MPU_Read_Byteh+0x3c>)
 800521c:	f7fd faf0 	bl	8002800 <HAL_I2C_Mem_Read>
			0xfff);
	HAL_Delay(100);
 8005220:	2064      	movs	r0, #100	; 0x64
 8005222:	f7fc fd5b 	bl	8001cdc <HAL_Delay>

	return R_Data;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	2000023c 	.word	0x2000023c

08005234 <_Z19ComplementaryFilterfff>:

float angle;
float a;

float ComplementaryFilter(float acc, float gyro, float dt)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
    a = 0.98;
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <_Z19ComplementaryFilterfff+0x78>)
 8005242:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <_Z19ComplementaryFilterfff+0x7c>)
 8005244:	601a      	str	r2, [r3, #0]
    angle = a * (angle + gyro * dt) + (1 - a) * (acc);
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f7fb fd9b 	bl	8000d84 <__aeabi_fmul>
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <_Z19ComplementaryFilterfff+0x80>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fb fc8b 	bl	8000b74 <__addsf3>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <_Z19ComplementaryFilterfff+0x78>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7fb fd8b 	bl	8000d84 <__aeabi_fmul>
 800526e:	4603      	mov	r3, r0
 8005270:	461c      	mov	r4, r3
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <_Z19ComplementaryFilterfff+0x78>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800527c:	f7fb fc78 	bl	8000b70 <__aeabi_fsub>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f7fb fd7b 	bl	8000d84 <__aeabi_fmul>
 800528e:	4603      	mov	r3, r0
 8005290:	4619      	mov	r1, r3
 8005292:	4620      	mov	r0, r4
 8005294:	f7fb fc6e 	bl	8000b74 <__addsf3>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <_Z19ComplementaryFilterfff+0x80>)
 800529e:	601a      	str	r2, [r3, #0]
    return angle;
 80052a0:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <_Z19ComplementaryFilterfff+0x80>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd90      	pop	{r4, r7, pc}
 80052ac:	20000230 	.word	0x20000230
 80052b0:	3f7ae148 	.word	0x3f7ae148
 80052b4:	2000022c 	.word	0x2000022c

080052b8 <atan2f>:
 80052b8:	f000 b800 	b.w	80052bc <__ieee754_atan2f>

080052bc <__ieee754_atan2f>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80052c2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80052c6:	4603      	mov	r3, r0
 80052c8:	dc05      	bgt.n	80052d6 <__ieee754_atan2f+0x1a>
 80052ca:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80052ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80052d2:	4607      	mov	r7, r0
 80052d4:	dd04      	ble.n	80052e0 <__ieee754_atan2f+0x24>
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb fc4c 	bl	8000b74 <__addsf3>
 80052dc:	4603      	mov	r3, r0
 80052de:	e024      	b.n	800532a <__ieee754_atan2f+0x6e>
 80052e0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80052e4:	d103      	bne.n	80052ee <__ieee754_atan2f+0x32>
 80052e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052ea:	f000 b877 	b.w	80053dc <atanf>
 80052ee:	178c      	asrs	r4, r1, #30
 80052f0:	f004 0402 	and.w	r4, r4, #2
 80052f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80052f8:	b92a      	cbnz	r2, 8005306 <__ieee754_atan2f+0x4a>
 80052fa:	2c02      	cmp	r4, #2
 80052fc:	d057      	beq.n	80053ae <__ieee754_atan2f+0xf2>
 80052fe:	2c03      	cmp	r4, #3
 8005300:	d113      	bne.n	800532a <__ieee754_atan2f+0x6e>
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <__ieee754_atan2f+0xfc>)
 8005304:	e011      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005306:	b91e      	cbnz	r6, 8005310 <__ieee754_atan2f+0x54>
 8005308:	2f00      	cmp	r7, #0
 800530a:	da52      	bge.n	80053b2 <__ieee754_atan2f+0xf6>
 800530c:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <__ieee754_atan2f+0x100>)
 800530e:	e00c      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005310:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005314:	d11a      	bne.n	800534c <__ieee754_atan2f+0x90>
 8005316:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800531a:	d10c      	bne.n	8005336 <__ieee754_atan2f+0x7a>
 800531c:	2c02      	cmp	r4, #2
 800531e:	d006      	beq.n	800532e <__ieee754_atan2f+0x72>
 8005320:	2c03      	cmp	r4, #3
 8005322:	d006      	beq.n	8005332 <__ieee754_atan2f+0x76>
 8005324:	2c01      	cmp	r4, #1
 8005326:	d140      	bne.n	80053aa <__ieee754_atan2f+0xee>
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <__ieee754_atan2f+0x104>)
 800532a:	4618      	mov	r0, r3
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <__ieee754_atan2f+0x108>)
 8005330:	e7fb      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005332:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <__ieee754_atan2f+0x10c>)
 8005334:	e7f9      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005336:	2c02      	cmp	r4, #2
 8005338:	d039      	beq.n	80053ae <__ieee754_atan2f+0xf2>
 800533a:	2c03      	cmp	r4, #3
 800533c:	d0e1      	beq.n	8005302 <__ieee754_atan2f+0x46>
 800533e:	2c01      	cmp	r4, #1
 8005340:	d102      	bne.n	8005348 <__ieee754_atan2f+0x8c>
 8005342:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005346:	e7f0      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005348:	2300      	movs	r3, #0
 800534a:	e7ee      	b.n	800532a <__ieee754_atan2f+0x6e>
 800534c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005350:	d0da      	beq.n	8005308 <__ieee754_atan2f+0x4c>
 8005352:	1b92      	subs	r2, r2, r6
 8005354:	15d2      	asrs	r2, r2, #23
 8005356:	2a3c      	cmp	r2, #60	; 0x3c
 8005358:	dc17      	bgt.n	800538a <__ieee754_atan2f+0xce>
 800535a:	2900      	cmp	r1, #0
 800535c:	da01      	bge.n	8005362 <__ieee754_atan2f+0xa6>
 800535e:	323c      	adds	r2, #60	; 0x3c
 8005360:	db15      	blt.n	800538e <__ieee754_atan2f+0xd2>
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb fdc2 	bl	8000eec <__aeabi_fdiv>
 8005368:	f000 f944 	bl	80055f4 <fabsf>
 800536c:	f000 f836 	bl	80053dc <atanf>
 8005370:	4603      	mov	r3, r0
 8005372:	2c01      	cmp	r4, #1
 8005374:	d00d      	beq.n	8005392 <__ieee754_atan2f+0xd6>
 8005376:	2c02      	cmp	r4, #2
 8005378:	d00e      	beq.n	8005398 <__ieee754_atan2f+0xdc>
 800537a:	2c00      	cmp	r4, #0
 800537c:	d0d5      	beq.n	800532a <__ieee754_atan2f+0x6e>
 800537e:	4913      	ldr	r1, [pc, #76]	; (80053cc <__ieee754_atan2f+0x110>)
 8005380:	4618      	mov	r0, r3
 8005382:	f7fb fbf7 	bl	8000b74 <__addsf3>
 8005386:	4912      	ldr	r1, [pc, #72]	; (80053d0 <__ieee754_atan2f+0x114>)
 8005388:	e00c      	b.n	80053a4 <__ieee754_atan2f+0xe8>
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <__ieee754_atan2f+0x118>)
 800538c:	e7f1      	b.n	8005372 <__ieee754_atan2f+0xb6>
 800538e:	2300      	movs	r3, #0
 8005390:	e7ef      	b.n	8005372 <__ieee754_atan2f+0xb6>
 8005392:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005396:	e7c8      	b.n	800532a <__ieee754_atan2f+0x6e>
 8005398:	490c      	ldr	r1, [pc, #48]	; (80053cc <__ieee754_atan2f+0x110>)
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb fbea 	bl	8000b74 <__addsf3>
 80053a0:	4601      	mov	r1, r0
 80053a2:	480b      	ldr	r0, [pc, #44]	; (80053d0 <__ieee754_atan2f+0x114>)
 80053a4:	f7fb fbe4 	bl	8000b70 <__aeabi_fsub>
 80053a8:	e798      	b.n	80052dc <__ieee754_atan2f+0x20>
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <__ieee754_atan2f+0x11c>)
 80053ac:	e7bd      	b.n	800532a <__ieee754_atan2f+0x6e>
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <__ieee754_atan2f+0x114>)
 80053b0:	e7bb      	b.n	800532a <__ieee754_atan2f+0x6e>
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <__ieee754_atan2f+0x118>)
 80053b4:	e7b9      	b.n	800532a <__ieee754_atan2f+0x6e>
 80053b6:	bf00      	nop
 80053b8:	c0490fdb 	.word	0xc0490fdb
 80053bc:	bfc90fdb 	.word	0xbfc90fdb
 80053c0:	bf490fdb 	.word	0xbf490fdb
 80053c4:	4016cbe4 	.word	0x4016cbe4
 80053c8:	c016cbe4 	.word	0xc016cbe4
 80053cc:	33bbbd2e 	.word	0x33bbbd2e
 80053d0:	40490fdb 	.word	0x40490fdb
 80053d4:	3fc90fdb 	.word	0x3fc90fdb
 80053d8:	3f490fdb 	.word	0x3f490fdb

080053dc <atanf>:
 80053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80053e4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80053e8:	4604      	mov	r4, r0
 80053ea:	4607      	mov	r7, r0
 80053ec:	db0e      	blt.n	800540c <atanf+0x30>
 80053ee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80053f2:	dd04      	ble.n	80053fe <atanf+0x22>
 80053f4:	4601      	mov	r1, r0
 80053f6:	f7fb fbbd 	bl	8000b74 <__addsf3>
 80053fa:	4604      	mov	r4, r0
 80053fc:	e003      	b.n	8005406 <atanf+0x2a>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f340 80cd 	ble.w	800559e <atanf+0x1c2>
 8005404:	4c67      	ldr	r4, [pc, #412]	; (80055a4 <atanf+0x1c8>)
 8005406:	4620      	mov	r0, r4
 8005408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540c:	4b66      	ldr	r3, [pc, #408]	; (80055a8 <atanf+0x1cc>)
 800540e:	429d      	cmp	r5, r3
 8005410:	dc0e      	bgt.n	8005430 <atanf+0x54>
 8005412:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005416:	da08      	bge.n	800542a <atanf+0x4e>
 8005418:	4964      	ldr	r1, [pc, #400]	; (80055ac <atanf+0x1d0>)
 800541a:	f7fb fbab 	bl	8000b74 <__addsf3>
 800541e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005422:	f7fb fe6b 	bl	80010fc <__aeabi_fcmpgt>
 8005426:	2800      	cmp	r0, #0
 8005428:	d1ed      	bne.n	8005406 <atanf+0x2a>
 800542a:	f04f 36ff 	mov.w	r6, #4294967295
 800542e:	e01c      	b.n	800546a <atanf+0x8e>
 8005430:	f000 f8e0 	bl	80055f4 <fabsf>
 8005434:	4b5e      	ldr	r3, [pc, #376]	; (80055b0 <atanf+0x1d4>)
 8005436:	4604      	mov	r4, r0
 8005438:	429d      	cmp	r5, r3
 800543a:	dc7c      	bgt.n	8005536 <atanf+0x15a>
 800543c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005440:	429d      	cmp	r5, r3
 8005442:	dc67      	bgt.n	8005514 <atanf+0x138>
 8005444:	4601      	mov	r1, r0
 8005446:	f7fb fb95 	bl	8000b74 <__addsf3>
 800544a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800544e:	f7fb fb8f 	bl	8000b70 <__aeabi_fsub>
 8005452:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005456:	4605      	mov	r5, r0
 8005458:	4620      	mov	r0, r4
 800545a:	f7fb fb8b 	bl	8000b74 <__addsf3>
 800545e:	4601      	mov	r1, r0
 8005460:	4628      	mov	r0, r5
 8005462:	f7fb fd43 	bl	8000eec <__aeabi_fdiv>
 8005466:	2600      	movs	r6, #0
 8005468:	4604      	mov	r4, r0
 800546a:	4621      	mov	r1, r4
 800546c:	4620      	mov	r0, r4
 800546e:	f7fb fc89 	bl	8000d84 <__aeabi_fmul>
 8005472:	4601      	mov	r1, r0
 8005474:	4680      	mov	r8, r0
 8005476:	f7fb fc85 	bl	8000d84 <__aeabi_fmul>
 800547a:	4605      	mov	r5, r0
 800547c:	494d      	ldr	r1, [pc, #308]	; (80055b4 <atanf+0x1d8>)
 800547e:	f7fb fc81 	bl	8000d84 <__aeabi_fmul>
 8005482:	494d      	ldr	r1, [pc, #308]	; (80055b8 <atanf+0x1dc>)
 8005484:	f7fb fb76 	bl	8000b74 <__addsf3>
 8005488:	4629      	mov	r1, r5
 800548a:	f7fb fc7b 	bl	8000d84 <__aeabi_fmul>
 800548e:	494b      	ldr	r1, [pc, #300]	; (80055bc <atanf+0x1e0>)
 8005490:	f7fb fb70 	bl	8000b74 <__addsf3>
 8005494:	4629      	mov	r1, r5
 8005496:	f7fb fc75 	bl	8000d84 <__aeabi_fmul>
 800549a:	4949      	ldr	r1, [pc, #292]	; (80055c0 <atanf+0x1e4>)
 800549c:	f7fb fb6a 	bl	8000b74 <__addsf3>
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb fc6f 	bl	8000d84 <__aeabi_fmul>
 80054a6:	4947      	ldr	r1, [pc, #284]	; (80055c4 <atanf+0x1e8>)
 80054a8:	f7fb fb64 	bl	8000b74 <__addsf3>
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fb fc69 	bl	8000d84 <__aeabi_fmul>
 80054b2:	4945      	ldr	r1, [pc, #276]	; (80055c8 <atanf+0x1ec>)
 80054b4:	f7fb fb5e 	bl	8000b74 <__addsf3>
 80054b8:	4641      	mov	r1, r8
 80054ba:	f7fb fc63 	bl	8000d84 <__aeabi_fmul>
 80054be:	4943      	ldr	r1, [pc, #268]	; (80055cc <atanf+0x1f0>)
 80054c0:	4680      	mov	r8, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f7fb fc5e 	bl	8000d84 <__aeabi_fmul>
 80054c8:	4941      	ldr	r1, [pc, #260]	; (80055d0 <atanf+0x1f4>)
 80054ca:	f7fb fb51 	bl	8000b70 <__aeabi_fsub>
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fb fc58 	bl	8000d84 <__aeabi_fmul>
 80054d4:	493f      	ldr	r1, [pc, #252]	; (80055d4 <atanf+0x1f8>)
 80054d6:	f7fb fb4b 	bl	8000b70 <__aeabi_fsub>
 80054da:	4629      	mov	r1, r5
 80054dc:	f7fb fc52 	bl	8000d84 <__aeabi_fmul>
 80054e0:	493d      	ldr	r1, [pc, #244]	; (80055d8 <atanf+0x1fc>)
 80054e2:	f7fb fb45 	bl	8000b70 <__aeabi_fsub>
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7fb fc4c 	bl	8000d84 <__aeabi_fmul>
 80054ec:	493b      	ldr	r1, [pc, #236]	; (80055dc <atanf+0x200>)
 80054ee:	f7fb fb3f 	bl	8000b70 <__aeabi_fsub>
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fb fc46 	bl	8000d84 <__aeabi_fmul>
 80054f8:	4601      	mov	r1, r0
 80054fa:	4640      	mov	r0, r8
 80054fc:	f7fb fb3a 	bl	8000b74 <__addsf3>
 8005500:	4621      	mov	r1, r4
 8005502:	f7fb fc3f 	bl	8000d84 <__aeabi_fmul>
 8005506:	1c73      	adds	r3, r6, #1
 8005508:	4601      	mov	r1, r0
 800550a:	d133      	bne.n	8005574 <atanf+0x198>
 800550c:	4620      	mov	r0, r4
 800550e:	f7fb fb2f 	bl	8000b70 <__aeabi_fsub>
 8005512:	e772      	b.n	80053fa <atanf+0x1e>
 8005514:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005518:	f7fb fb2a 	bl	8000b70 <__aeabi_fsub>
 800551c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005520:	4605      	mov	r5, r0
 8005522:	4620      	mov	r0, r4
 8005524:	f7fb fb26 	bl	8000b74 <__addsf3>
 8005528:	4601      	mov	r1, r0
 800552a:	4628      	mov	r0, r5
 800552c:	f7fb fcde 	bl	8000eec <__aeabi_fdiv>
 8005530:	2601      	movs	r6, #1
 8005532:	4604      	mov	r4, r0
 8005534:	e799      	b.n	800546a <atanf+0x8e>
 8005536:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <atanf+0x204>)
 8005538:	429d      	cmp	r5, r3
 800553a:	dc14      	bgt.n	8005566 <atanf+0x18a>
 800553c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005540:	f7fb fb16 	bl	8000b70 <__aeabi_fsub>
 8005544:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005548:	4605      	mov	r5, r0
 800554a:	4620      	mov	r0, r4
 800554c:	f7fb fc1a 	bl	8000d84 <__aeabi_fmul>
 8005550:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005554:	f7fb fb0e 	bl	8000b74 <__addsf3>
 8005558:	4601      	mov	r1, r0
 800555a:	4628      	mov	r0, r5
 800555c:	f7fb fcc6 	bl	8000eec <__aeabi_fdiv>
 8005560:	2602      	movs	r6, #2
 8005562:	4604      	mov	r4, r0
 8005564:	e781      	b.n	800546a <atanf+0x8e>
 8005566:	4601      	mov	r1, r0
 8005568:	481e      	ldr	r0, [pc, #120]	; (80055e4 <atanf+0x208>)
 800556a:	f7fb fcbf 	bl	8000eec <__aeabi_fdiv>
 800556e:	2603      	movs	r6, #3
 8005570:	4604      	mov	r4, r0
 8005572:	e77a      	b.n	800546a <atanf+0x8e>
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <atanf+0x20c>)
 8005576:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800557a:	f7fb faf9 	bl	8000b70 <__aeabi_fsub>
 800557e:	4621      	mov	r1, r4
 8005580:	f7fb faf6 	bl	8000b70 <__aeabi_fsub>
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <atanf+0x210>)
 8005586:	4601      	mov	r1, r0
 8005588:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800558c:	f7fb faf0 	bl	8000b70 <__aeabi_fsub>
 8005590:	2f00      	cmp	r7, #0
 8005592:	4604      	mov	r4, r0
 8005594:	f6bf af37 	bge.w	8005406 <atanf+0x2a>
 8005598:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800559c:	e733      	b.n	8005406 <atanf+0x2a>
 800559e:	4c14      	ldr	r4, [pc, #80]	; (80055f0 <atanf+0x214>)
 80055a0:	e731      	b.n	8005406 <atanf+0x2a>
 80055a2:	bf00      	nop
 80055a4:	3fc90fdb 	.word	0x3fc90fdb
 80055a8:	3edfffff 	.word	0x3edfffff
 80055ac:	7149f2ca 	.word	0x7149f2ca
 80055b0:	3f97ffff 	.word	0x3f97ffff
 80055b4:	3c8569d7 	.word	0x3c8569d7
 80055b8:	3d4bda59 	.word	0x3d4bda59
 80055bc:	3d886b35 	.word	0x3d886b35
 80055c0:	3dba2e6e 	.word	0x3dba2e6e
 80055c4:	3e124925 	.word	0x3e124925
 80055c8:	3eaaaaab 	.word	0x3eaaaaab
 80055cc:	bd15a221 	.word	0xbd15a221
 80055d0:	3d6ef16b 	.word	0x3d6ef16b
 80055d4:	3d9d8795 	.word	0x3d9d8795
 80055d8:	3de38e38 	.word	0x3de38e38
 80055dc:	3e4ccccd 	.word	0x3e4ccccd
 80055e0:	401bffff 	.word	0x401bffff
 80055e4:	bf800000 	.word	0xbf800000
 80055e8:	08009a9c 	.word	0x08009a9c
 80055ec:	08009a8c 	.word	0x08009a8c
 80055f0:	bfc90fdb 	.word	0xbfc90fdb

080055f4 <fabsf>:
 80055f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055f8:	4770      	bx	lr
	...

080055fc <__errno>:
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <__errno+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000010 	.word	0x20000010

08005608 <__libc_init_array>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	2500      	movs	r5, #0
 800560c:	4e0c      	ldr	r6, [pc, #48]	; (8005640 <__libc_init_array+0x38>)
 800560e:	4c0d      	ldr	r4, [pc, #52]	; (8005644 <__libc_init_array+0x3c>)
 8005610:	1ba4      	subs	r4, r4, r6
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	42a5      	cmp	r5, r4
 8005616:	d109      	bne.n	800562c <__libc_init_array+0x24>
 8005618:	f004 f9fc 	bl	8009a14 <_init>
 800561c:	2500      	movs	r5, #0
 800561e:	4e0a      	ldr	r6, [pc, #40]	; (8005648 <__libc_init_array+0x40>)
 8005620:	4c0a      	ldr	r4, [pc, #40]	; (800564c <__libc_init_array+0x44>)
 8005622:	1ba4      	subs	r4, r4, r6
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	42a5      	cmp	r5, r4
 8005628:	d105      	bne.n	8005636 <__libc_init_array+0x2e>
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005630:	4798      	blx	r3
 8005632:	3501      	adds	r5, #1
 8005634:	e7ee      	b.n	8005614 <__libc_init_array+0xc>
 8005636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800563a:	4798      	blx	r3
 800563c:	3501      	adds	r5, #1
 800563e:	e7f2      	b.n	8005626 <__libc_init_array+0x1e>
 8005640:	08009dd0 	.word	0x08009dd0
 8005644:	08009dd0 	.word	0x08009dd0
 8005648:	08009dd0 	.word	0x08009dd0
 800564c:	08009dd4 	.word	0x08009dd4

08005650 <memcpy>:
 8005650:	b510      	push	{r4, lr}
 8005652:	1e43      	subs	r3, r0, #1
 8005654:	440a      	add	r2, r1
 8005656:	4291      	cmp	r1, r2
 8005658:	d100      	bne.n	800565c <memcpy+0xc>
 800565a:	bd10      	pop	{r4, pc}
 800565c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005664:	e7f7      	b.n	8005656 <memcpy+0x6>

08005666 <memset>:
 8005666:	4603      	mov	r3, r0
 8005668:	4402      	add	r2, r0
 800566a:	4293      	cmp	r3, r2
 800566c:	d100      	bne.n	8005670 <memset+0xa>
 800566e:	4770      	bx	lr
 8005670:	f803 1b01 	strb.w	r1, [r3], #1
 8005674:	e7f9      	b.n	800566a <memset+0x4>

08005676 <__cvt>:
 8005676:	2b00      	cmp	r3, #0
 8005678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	461e      	mov	r6, r3
 800567e:	bfbb      	ittet	lt
 8005680:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005684:	461e      	movlt	r6, r3
 8005686:	2300      	movge	r3, #0
 8005688:	232d      	movlt	r3, #45	; 0x2d
 800568a:	b088      	sub	sp, #32
 800568c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800568e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005692:	f027 0720 	bic.w	r7, r7, #32
 8005696:	2f46      	cmp	r7, #70	; 0x46
 8005698:	4614      	mov	r4, r2
 800569a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800569c:	700b      	strb	r3, [r1, #0]
 800569e:	d004      	beq.n	80056aa <__cvt+0x34>
 80056a0:	2f45      	cmp	r7, #69	; 0x45
 80056a2:	d100      	bne.n	80056a6 <__cvt+0x30>
 80056a4:	3501      	adds	r5, #1
 80056a6:	2302      	movs	r3, #2
 80056a8:	e000      	b.n	80056ac <__cvt+0x36>
 80056aa:	2303      	movs	r3, #3
 80056ac:	aa07      	add	r2, sp, #28
 80056ae:	9204      	str	r2, [sp, #16]
 80056b0:	aa06      	add	r2, sp, #24
 80056b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056b6:	e9cd 3500 	strd	r3, r5, [sp]
 80056ba:	4622      	mov	r2, r4
 80056bc:	4633      	mov	r3, r6
 80056be:	f001 fe53 	bl	8007368 <_dtoa_r>
 80056c2:	2f47      	cmp	r7, #71	; 0x47
 80056c4:	4680      	mov	r8, r0
 80056c6:	d102      	bne.n	80056ce <__cvt+0x58>
 80056c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056ca:	07db      	lsls	r3, r3, #31
 80056cc:	d526      	bpl.n	800571c <__cvt+0xa6>
 80056ce:	2f46      	cmp	r7, #70	; 0x46
 80056d0:	eb08 0905 	add.w	r9, r8, r5
 80056d4:	d111      	bne.n	80056fa <__cvt+0x84>
 80056d6:	f898 3000 	ldrb.w	r3, [r8]
 80056da:	2b30      	cmp	r3, #48	; 0x30
 80056dc:	d10a      	bne.n	80056f4 <__cvt+0x7e>
 80056de:	2200      	movs	r2, #0
 80056e0:	2300      	movs	r3, #0
 80056e2:	4620      	mov	r0, r4
 80056e4:	4631      	mov	r1, r6
 80056e6:	f7fb f95f 	bl	80009a8 <__aeabi_dcmpeq>
 80056ea:	b918      	cbnz	r0, 80056f4 <__cvt+0x7e>
 80056ec:	f1c5 0501 	rsb	r5, r5, #1
 80056f0:	f8ca 5000 	str.w	r5, [sl]
 80056f4:	f8da 3000 	ldr.w	r3, [sl]
 80056f8:	4499      	add	r9, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4620      	mov	r0, r4
 8005700:	4631      	mov	r1, r6
 8005702:	f7fb f951 	bl	80009a8 <__aeabi_dcmpeq>
 8005706:	b938      	cbnz	r0, 8005718 <__cvt+0xa2>
 8005708:	2230      	movs	r2, #48	; 0x30
 800570a:	9b07      	ldr	r3, [sp, #28]
 800570c:	454b      	cmp	r3, r9
 800570e:	d205      	bcs.n	800571c <__cvt+0xa6>
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	9107      	str	r1, [sp, #28]
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	e7f8      	b.n	800570a <__cvt+0x94>
 8005718:	f8cd 901c 	str.w	r9, [sp, #28]
 800571c:	4640      	mov	r0, r8
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005722:	eba3 0308 	sub.w	r3, r3, r8
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	b008      	add	sp, #32
 800572a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800572e <__exponent>:
 800572e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005730:	2900      	cmp	r1, #0
 8005732:	bfb4      	ite	lt
 8005734:	232d      	movlt	r3, #45	; 0x2d
 8005736:	232b      	movge	r3, #43	; 0x2b
 8005738:	4604      	mov	r4, r0
 800573a:	bfb8      	it	lt
 800573c:	4249      	neglt	r1, r1
 800573e:	2909      	cmp	r1, #9
 8005740:	f804 2b02 	strb.w	r2, [r4], #2
 8005744:	7043      	strb	r3, [r0, #1]
 8005746:	dd21      	ble.n	800578c <__exponent+0x5e>
 8005748:	f10d 0307 	add.w	r3, sp, #7
 800574c:	461f      	mov	r7, r3
 800574e:	260a      	movs	r6, #10
 8005750:	fb91 f5f6 	sdiv	r5, r1, r6
 8005754:	fb06 1115 	mls	r1, r6, r5, r1
 8005758:	2d09      	cmp	r5, #9
 800575a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800575e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005762:	f103 32ff 	add.w	r2, r3, #4294967295
 8005766:	4629      	mov	r1, r5
 8005768:	dc09      	bgt.n	800577e <__exponent+0x50>
 800576a:	3130      	adds	r1, #48	; 0x30
 800576c:	3b02      	subs	r3, #2
 800576e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005772:	42bb      	cmp	r3, r7
 8005774:	4622      	mov	r2, r4
 8005776:	d304      	bcc.n	8005782 <__exponent+0x54>
 8005778:	1a10      	subs	r0, r2, r0
 800577a:	b003      	add	sp, #12
 800577c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577e:	4613      	mov	r3, r2
 8005780:	e7e6      	b.n	8005750 <__exponent+0x22>
 8005782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005786:	f804 2b01 	strb.w	r2, [r4], #1
 800578a:	e7f2      	b.n	8005772 <__exponent+0x44>
 800578c:	2330      	movs	r3, #48	; 0x30
 800578e:	4419      	add	r1, r3
 8005790:	7083      	strb	r3, [r0, #2]
 8005792:	1d02      	adds	r2, r0, #4
 8005794:	70c1      	strb	r1, [r0, #3]
 8005796:	e7ef      	b.n	8005778 <__exponent+0x4a>

08005798 <_printf_float>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	b091      	sub	sp, #68	; 0x44
 800579e:	460c      	mov	r4, r1
 80057a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80057a2:	4693      	mov	fp, r2
 80057a4:	461e      	mov	r6, r3
 80057a6:	4605      	mov	r5, r0
 80057a8:	f003 f83a 	bl	8008820 <_localeconv_r>
 80057ac:	6803      	ldr	r3, [r0, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	9309      	str	r3, [sp, #36]	; 0x24
 80057b2:	f7fa fccd 	bl	8000150 <strlen>
 80057b6:	2300      	movs	r3, #0
 80057b8:	930e      	str	r3, [sp, #56]	; 0x38
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	900a      	str	r0, [sp, #40]	; 0x28
 80057be:	3307      	adds	r3, #7
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80057cc:	f8d4 a000 	ldr.w	sl, [r4]
 80057d0:	603a      	str	r2, [r7, #0]
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057da:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80057de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	4ba6      	ldr	r3, [pc, #664]	; (8005a84 <_printf_float+0x2ec>)
 80057ea:	4638      	mov	r0, r7
 80057ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ee:	f7fb f90d 	bl	8000a0c <__aeabi_dcmpun>
 80057f2:	bb68      	cbnz	r0, 8005850 <_printf_float+0xb8>
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	4ba2      	ldr	r3, [pc, #648]	; (8005a84 <_printf_float+0x2ec>)
 80057fa:	4638      	mov	r0, r7
 80057fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057fe:	f7fb f8e7 	bl	80009d0 <__aeabi_dcmple>
 8005802:	bb28      	cbnz	r0, 8005850 <_printf_float+0xb8>
 8005804:	2200      	movs	r2, #0
 8005806:	2300      	movs	r3, #0
 8005808:	4638      	mov	r0, r7
 800580a:	4649      	mov	r1, r9
 800580c:	f7fb f8d6 	bl	80009bc <__aeabi_dcmplt>
 8005810:	b110      	cbz	r0, 8005818 <_printf_float+0x80>
 8005812:	232d      	movs	r3, #45	; 0x2d
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	4f9b      	ldr	r7, [pc, #620]	; (8005a88 <_printf_float+0x2f0>)
 800581a:	4b9c      	ldr	r3, [pc, #624]	; (8005a8c <_printf_float+0x2f4>)
 800581c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005820:	bf98      	it	ls
 8005822:	461f      	movls	r7, r3
 8005824:	2303      	movs	r3, #3
 8005826:	f04f 0900 	mov.w	r9, #0
 800582a:	6123      	str	r3, [r4, #16]
 800582c:	f02a 0304 	bic.w	r3, sl, #4
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	9600      	str	r6, [sp, #0]
 8005834:	465b      	mov	r3, fp
 8005836:	aa0f      	add	r2, sp, #60	; 0x3c
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f9e2 	bl	8005c04 <_printf_common>
 8005840:	3001      	adds	r0, #1
 8005842:	f040 8090 	bne.w	8005966 <_printf_float+0x1ce>
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b011      	add	sp, #68	; 0x44
 800584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005850:	463a      	mov	r2, r7
 8005852:	464b      	mov	r3, r9
 8005854:	4638      	mov	r0, r7
 8005856:	4649      	mov	r1, r9
 8005858:	f7fb f8d8 	bl	8000a0c <__aeabi_dcmpun>
 800585c:	b110      	cbz	r0, 8005864 <_printf_float+0xcc>
 800585e:	4f8c      	ldr	r7, [pc, #560]	; (8005a90 <_printf_float+0x2f8>)
 8005860:	4b8c      	ldr	r3, [pc, #560]	; (8005a94 <_printf_float+0x2fc>)
 8005862:	e7db      	b.n	800581c <_printf_float+0x84>
 8005864:	6863      	ldr	r3, [r4, #4]
 8005866:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	a80d      	add	r0, sp, #52	; 0x34
 800586e:	a90e      	add	r1, sp, #56	; 0x38
 8005870:	d140      	bne.n	80058f4 <_printf_float+0x15c>
 8005872:	2306      	movs	r3, #6
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	f04f 0c00 	mov.w	ip, #0
 800587a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800587e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	463a      	mov	r2, r7
 800588e:	464b      	mov	r3, r9
 8005890:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005894:	4628      	mov	r0, r5
 8005896:	f7ff feee 	bl	8005676 <__cvt>
 800589a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800589e:	2b47      	cmp	r3, #71	; 0x47
 80058a0:	4607      	mov	r7, r0
 80058a2:	d109      	bne.n	80058b8 <_printf_float+0x120>
 80058a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058a6:	1cd8      	adds	r0, r3, #3
 80058a8:	db02      	blt.n	80058b0 <_printf_float+0x118>
 80058aa:	6862      	ldr	r2, [r4, #4]
 80058ac:	4293      	cmp	r3, r2
 80058ae:	dd47      	ble.n	8005940 <_printf_float+0x1a8>
 80058b0:	f1a8 0802 	sub.w	r8, r8, #2
 80058b4:	fa5f f888 	uxtb.w	r8, r8
 80058b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80058bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058be:	d824      	bhi.n	800590a <_printf_float+0x172>
 80058c0:	3901      	subs	r1, #1
 80058c2:	4642      	mov	r2, r8
 80058c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058c8:	910d      	str	r1, [sp, #52]	; 0x34
 80058ca:	f7ff ff30 	bl	800572e <__exponent>
 80058ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058d0:	4681      	mov	r9, r0
 80058d2:	1813      	adds	r3, r2, r0
 80058d4:	2a01      	cmp	r2, #1
 80058d6:	6123      	str	r3, [r4, #16]
 80058d8:	dc02      	bgt.n	80058e0 <_printf_float+0x148>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	07d1      	lsls	r1, r2, #31
 80058de:	d501      	bpl.n	80058e4 <_printf_float+0x14c>
 80058e0:	3301      	adds	r3, #1
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0a2      	beq.n	8005832 <_printf_float+0x9a>
 80058ec:	232d      	movs	r3, #45	; 0x2d
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f2:	e79e      	b.n	8005832 <_printf_float+0x9a>
 80058f4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80058f8:	f000 816e 	beq.w	8005bd8 <_printf_float+0x440>
 80058fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005900:	d1b9      	bne.n	8005876 <_printf_float+0xde>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1b7      	bne.n	8005876 <_printf_float+0xde>
 8005906:	2301      	movs	r3, #1
 8005908:	e7b4      	b.n	8005874 <_printf_float+0xdc>
 800590a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800590e:	d119      	bne.n	8005944 <_printf_float+0x1ac>
 8005910:	2900      	cmp	r1, #0
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	dd0c      	ble.n	8005930 <_printf_float+0x198>
 8005916:	6121      	str	r1, [r4, #16]
 8005918:	b913      	cbnz	r3, 8005920 <_printf_float+0x188>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	07d2      	lsls	r2, r2, #31
 800591e:	d502      	bpl.n	8005926 <_printf_float+0x18e>
 8005920:	3301      	adds	r3, #1
 8005922:	440b      	add	r3, r1
 8005924:	6123      	str	r3, [r4, #16]
 8005926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	65a3      	str	r3, [r4, #88]	; 0x58
 800592e:	e7d9      	b.n	80058e4 <_printf_float+0x14c>
 8005930:	b913      	cbnz	r3, 8005938 <_printf_float+0x1a0>
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	07d0      	lsls	r0, r2, #31
 8005936:	d501      	bpl.n	800593c <_printf_float+0x1a4>
 8005938:	3302      	adds	r3, #2
 800593a:	e7f3      	b.n	8005924 <_printf_float+0x18c>
 800593c:	2301      	movs	r3, #1
 800593e:	e7f1      	b.n	8005924 <_printf_float+0x18c>
 8005940:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005944:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005948:	4293      	cmp	r3, r2
 800594a:	db05      	blt.n	8005958 <_printf_float+0x1c0>
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	07d1      	lsls	r1, r2, #31
 8005952:	d5e8      	bpl.n	8005926 <_printf_float+0x18e>
 8005954:	3301      	adds	r3, #1
 8005956:	e7e5      	b.n	8005924 <_printf_float+0x18c>
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfcc      	ite	gt
 800595c:	2301      	movgt	r3, #1
 800595e:	f1c3 0302 	rsble	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	e7de      	b.n	8005924 <_printf_float+0x18c>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	055a      	lsls	r2, r3, #21
 800596a:	d407      	bmi.n	800597c <_printf_float+0x1e4>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	463a      	mov	r2, r7
 8005970:	4659      	mov	r1, fp
 8005972:	4628      	mov	r0, r5
 8005974:	47b0      	blx	r6
 8005976:	3001      	adds	r0, #1
 8005978:	d129      	bne.n	80059ce <_printf_float+0x236>
 800597a:	e764      	b.n	8005846 <_printf_float+0xae>
 800597c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005980:	f240 80d7 	bls.w	8005b32 <_printf_float+0x39a>
 8005984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	f7fb f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8005990:	b388      	cbz	r0, 80059f6 <_printf_float+0x25e>
 8005992:	2301      	movs	r3, #1
 8005994:	4a40      	ldr	r2, [pc, #256]	; (8005a98 <_printf_float+0x300>)
 8005996:	4659      	mov	r1, fp
 8005998:	4628      	mov	r0, r5
 800599a:	47b0      	blx	r6
 800599c:	3001      	adds	r0, #1
 800599e:	f43f af52 	beq.w	8005846 <_printf_float+0xae>
 80059a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059a6:	429a      	cmp	r2, r3
 80059a8:	db02      	blt.n	80059b0 <_printf_float+0x218>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	07d8      	lsls	r0, r3, #31
 80059ae:	d50e      	bpl.n	80059ce <_printf_float+0x236>
 80059b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b4:	4659      	mov	r1, fp
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b0      	blx	r6
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f af43 	beq.w	8005846 <_printf_float+0xae>
 80059c0:	2700      	movs	r7, #0
 80059c2:	f104 081a 	add.w	r8, r4, #26
 80059c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c8:	3b01      	subs	r3, #1
 80059ca:	42bb      	cmp	r3, r7
 80059cc:	dc09      	bgt.n	80059e2 <_printf_float+0x24a>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	079f      	lsls	r7, r3, #30
 80059d2:	f100 80fd 	bmi.w	8005bd0 <_printf_float+0x438>
 80059d6:	68e0      	ldr	r0, [r4, #12]
 80059d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059da:	4298      	cmp	r0, r3
 80059dc:	bfb8      	it	lt
 80059de:	4618      	movlt	r0, r3
 80059e0:	e733      	b.n	800584a <_printf_float+0xb2>
 80059e2:	2301      	movs	r3, #1
 80059e4:	4642      	mov	r2, r8
 80059e6:	4659      	mov	r1, fp
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b0      	blx	r6
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f af2a 	beq.w	8005846 <_printf_float+0xae>
 80059f2:	3701      	adds	r7, #1
 80059f4:	e7e7      	b.n	80059c6 <_printf_float+0x22e>
 80059f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dc2b      	bgt.n	8005a54 <_printf_float+0x2bc>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <_printf_float+0x300>)
 8005a00:	4659      	mov	r1, fp
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b0      	blx	r6
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f af1d 	beq.w	8005846 <_printf_float+0xae>
 8005a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0e:	b923      	cbnz	r3, 8005a1a <_printf_float+0x282>
 8005a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a12:	b913      	cbnz	r3, 8005a1a <_printf_float+0x282>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07d9      	lsls	r1, r3, #31
 8005a18:	d5d9      	bpl.n	80059ce <_printf_float+0x236>
 8005a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a1e:	4659      	mov	r1, fp
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b0      	blx	r6
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f af0e 	beq.w	8005846 <_printf_float+0xae>
 8005a2a:	f04f 0800 	mov.w	r8, #0
 8005a2e:	f104 091a 	add.w	r9, r4, #26
 8005a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a34:	425b      	negs	r3, r3
 8005a36:	4543      	cmp	r3, r8
 8005a38:	dc01      	bgt.n	8005a3e <_printf_float+0x2a6>
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3c:	e797      	b.n	800596e <_printf_float+0x1d6>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	464a      	mov	r2, r9
 8005a42:	4659      	mov	r1, fp
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b0      	blx	r6
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f aefc 	beq.w	8005846 <_printf_float+0xae>
 8005a4e:	f108 0801 	add.w	r8, r8, #1
 8005a52:	e7ee      	b.n	8005a32 <_printf_float+0x29a>
 8005a54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bfa8      	it	ge
 8005a5c:	461a      	movge	r2, r3
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	4690      	mov	r8, r2
 8005a62:	dd07      	ble.n	8005a74 <_printf_float+0x2dc>
 8005a64:	4613      	mov	r3, r2
 8005a66:	4659      	mov	r1, fp
 8005a68:	463a      	mov	r2, r7
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b0      	blx	r6
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f aee9 	beq.w	8005846 <_printf_float+0xae>
 8005a74:	f104 031a 	add.w	r3, r4, #26
 8005a78:	f04f 0a00 	mov.w	sl, #0
 8005a7c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a82:	e015      	b.n	8005ab0 <_printf_float+0x318>
 8005a84:	7fefffff 	.word	0x7fefffff
 8005a88:	08009ab4 	.word	0x08009ab4
 8005a8c:	08009ab0 	.word	0x08009ab0
 8005a90:	08009abc 	.word	0x08009abc
 8005a94:	08009ab8 	.word	0x08009ab8
 8005a98:	08009ac0 	.word	0x08009ac0
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b0      	blx	r6
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f43f aecd 	beq.w	8005846 <_printf_float+0xae>
 8005aac:	f10a 0a01 	add.w	sl, sl, #1
 8005ab0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005ab4:	eba9 0308 	sub.w	r3, r9, r8
 8005ab8:	4553      	cmp	r3, sl
 8005aba:	dcef      	bgt.n	8005a9c <_printf_float+0x304>
 8005abc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	444f      	add	r7, r9
 8005ac4:	db14      	blt.n	8005af0 <_printf_float+0x358>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	07da      	lsls	r2, r3, #31
 8005aca:	d411      	bmi.n	8005af0 <_printf_float+0x358>
 8005acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ace:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ad0:	eba3 0209 	sub.w	r2, r3, r9
 8005ad4:	eba3 0901 	sub.w	r9, r3, r1
 8005ad8:	4591      	cmp	r9, r2
 8005ada:	bfa8      	it	ge
 8005adc:	4691      	movge	r9, r2
 8005ade:	f1b9 0f00 	cmp.w	r9, #0
 8005ae2:	dc0d      	bgt.n	8005b00 <_printf_float+0x368>
 8005ae4:	2700      	movs	r7, #0
 8005ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aea:	f104 081a 	add.w	r8, r4, #26
 8005aee:	e018      	b.n	8005b22 <_printf_float+0x38a>
 8005af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af4:	4659      	mov	r1, fp
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b0      	blx	r6
 8005afa:	3001      	adds	r0, #1
 8005afc:	d1e6      	bne.n	8005acc <_printf_float+0x334>
 8005afe:	e6a2      	b.n	8005846 <_printf_float+0xae>
 8005b00:	464b      	mov	r3, r9
 8005b02:	463a      	mov	r2, r7
 8005b04:	4659      	mov	r1, fp
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b0      	blx	r6
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1ea      	bne.n	8005ae4 <_printf_float+0x34c>
 8005b0e:	e69a      	b.n	8005846 <_printf_float+0xae>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4642      	mov	r2, r8
 8005b14:	4659      	mov	r1, fp
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b0      	blx	r6
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f ae93 	beq.w	8005846 <_printf_float+0xae>
 8005b20:	3701      	adds	r7, #1
 8005b22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	eba3 0309 	sub.w	r3, r3, r9
 8005b2c:	42bb      	cmp	r3, r7
 8005b2e:	dcef      	bgt.n	8005b10 <_printf_float+0x378>
 8005b30:	e74d      	b.n	80059ce <_printf_float+0x236>
 8005b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b34:	2a01      	cmp	r2, #1
 8005b36:	dc01      	bgt.n	8005b3c <_printf_float+0x3a4>
 8005b38:	07db      	lsls	r3, r3, #31
 8005b3a:	d538      	bpl.n	8005bae <_printf_float+0x416>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	463a      	mov	r2, r7
 8005b40:	4659      	mov	r1, fp
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b0      	blx	r6
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f ae7d 	beq.w	8005846 <_printf_float+0xae>
 8005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b50:	4659      	mov	r1, fp
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b0      	blx	r6
 8005b56:	3001      	adds	r0, #1
 8005b58:	f107 0701 	add.w	r7, r7, #1
 8005b5c:	f43f ae73 	beq.w	8005846 <_printf_float+0xae>
 8005b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b66:	2200      	movs	r2, #0
 8005b68:	f103 38ff 	add.w	r8, r3, #4294967295
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f7fa ff1b 	bl	80009a8 <__aeabi_dcmpeq>
 8005b72:	b9c0      	cbnz	r0, 8005ba6 <_printf_float+0x40e>
 8005b74:	4643      	mov	r3, r8
 8005b76:	463a      	mov	r2, r7
 8005b78:	4659      	mov	r1, fp
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b0      	blx	r6
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d10d      	bne.n	8005b9e <_printf_float+0x406>
 8005b82:	e660      	b.n	8005846 <_printf_float+0xae>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4642      	mov	r2, r8
 8005b88:	4659      	mov	r1, fp
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b0      	blx	r6
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f ae59 	beq.w	8005846 <_printf_float+0xae>
 8005b94:	3701      	adds	r7, #1
 8005b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	dcf2      	bgt.n	8005b84 <_printf_float+0x3ec>
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ba4:	e6e4      	b.n	8005970 <_printf_float+0x1d8>
 8005ba6:	2700      	movs	r7, #0
 8005ba8:	f104 081a 	add.w	r8, r4, #26
 8005bac:	e7f3      	b.n	8005b96 <_printf_float+0x3fe>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7e1      	b.n	8005b76 <_printf_float+0x3de>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b0      	blx	r6
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae42 	beq.w	8005846 <_printf_float+0xae>
 8005bc2:	3701      	adds	r7, #1
 8005bc4:	68e3      	ldr	r3, [r4, #12]
 8005bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	dcf1      	bgt.n	8005bb2 <_printf_float+0x41a>
 8005bce:	e702      	b.n	80059d6 <_printf_float+0x23e>
 8005bd0:	2700      	movs	r7, #0
 8005bd2:	f104 0819 	add.w	r8, r4, #25
 8005bd6:	e7f5      	b.n	8005bc4 <_printf_float+0x42c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f43f ae94 	beq.w	8005906 <_printf_float+0x16e>
 8005bde:	f04f 0c00 	mov.w	ip, #0
 8005be2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005be6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005bf0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f7ff fd3b 	bl	8005676 <__cvt>
 8005c00:	4607      	mov	r7, r0
 8005c02:	e64f      	b.n	80058a4 <_printf_float+0x10c>

08005c04 <_printf_common>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	4691      	mov	r9, r2
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	688a      	ldr	r2, [r1, #8]
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	4606      	mov	r6, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	bfb8      	it	lt
 8005c16:	4613      	movlt	r3, r2
 8005c18:	f8c9 3000 	str.w	r3, [r9]
 8005c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c20:	460c      	mov	r4, r1
 8005c22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c26:	b112      	cbz	r2, 8005c2e <_printf_common+0x2a>
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f8c9 3000 	str.w	r3, [r9]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	0699      	lsls	r1, r3, #26
 8005c32:	bf42      	ittt	mi
 8005c34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c38:	3302      	addmi	r3, #2
 8005c3a:	f8c9 3000 	strmi.w	r3, [r9]
 8005c3e:	6825      	ldr	r5, [r4, #0]
 8005c40:	f015 0506 	ands.w	r5, r5, #6
 8005c44:	d107      	bne.n	8005c56 <_printf_common+0x52>
 8005c46:	f104 0a19 	add.w	sl, r4, #25
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	dc29      	bgt.n	8005caa <_printf_common+0xa6>
 8005c56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	3300      	adds	r3, #0
 8005c5e:	bf18      	it	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	0692      	lsls	r2, r2, #26
 8005c64:	d42e      	bmi.n	8005cc4 <_printf_common+0xc0>
 8005c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d021      	beq.n	8005cb8 <_printf_common+0xb4>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	68e5      	ldr	r5, [r4, #12]
 8005c78:	f003 0306 	and.w	r3, r3, #6
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	bf18      	it	ne
 8005c80:	2500      	movne	r5, #0
 8005c82:	f8d9 2000 	ldr.w	r2, [r9]
 8005c86:	f04f 0900 	mov.w	r9, #0
 8005c8a:	bf08      	it	eq
 8005c8c:	1aad      	subeq	r5, r5, r2
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	6922      	ldr	r2, [r4, #16]
 8005c92:	bf08      	it	eq
 8005c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfc4      	itt	gt
 8005c9c:	1a9b      	subgt	r3, r3, r2
 8005c9e:	18ed      	addgt	r5, r5, r3
 8005ca0:	341a      	adds	r4, #26
 8005ca2:	454d      	cmp	r5, r9
 8005ca4:	d11a      	bne.n	8005cdc <_printf_common+0xd8>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e008      	b.n	8005cbc <_printf_common+0xb8>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4639      	mov	r1, r7
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	47c0      	blx	r8
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d103      	bne.n	8005cc0 <_printf_common+0xbc>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7c2      	b.n	8005c4a <_printf_common+0x46>
 8005cc4:	2030      	movs	r0, #48	; 0x30
 8005cc6:	18e1      	adds	r1, r4, r3
 8005cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd2:	4422      	add	r2, r4
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cda:	e7c4      	b.n	8005c66 <_printf_common+0x62>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xb4>
 8005cea:	f109 0901 	add.w	r9, r9, #1
 8005cee:	e7d8      	b.n	8005ca2 <_printf_common+0x9e>

08005cf0 <_printf_i>:
 8005cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	7e09      	ldrb	r1, [r1, #24]
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	296e      	cmp	r1, #110	; 0x6e
 8005d00:	4617      	mov	r7, r2
 8005d02:	4606      	mov	r6, r0
 8005d04:	4698      	mov	r8, r3
 8005d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d08:	f000 80b3 	beq.w	8005e72 <_printf_i+0x182>
 8005d0c:	d822      	bhi.n	8005d54 <_printf_i+0x64>
 8005d0e:	2963      	cmp	r1, #99	; 0x63
 8005d10:	d036      	beq.n	8005d80 <_printf_i+0x90>
 8005d12:	d80a      	bhi.n	8005d2a <_printf_i+0x3a>
 8005d14:	2900      	cmp	r1, #0
 8005d16:	f000 80b9 	beq.w	8005e8c <_printf_i+0x19c>
 8005d1a:	2958      	cmp	r1, #88	; 0x58
 8005d1c:	f000 8083 	beq.w	8005e26 <_printf_i+0x136>
 8005d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d28:	e032      	b.n	8005d90 <_printf_i+0xa0>
 8005d2a:	2964      	cmp	r1, #100	; 0x64
 8005d2c:	d001      	beq.n	8005d32 <_printf_i+0x42>
 8005d2e:	2969      	cmp	r1, #105	; 0x69
 8005d30:	d1f6      	bne.n	8005d20 <_printf_i+0x30>
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	6813      	ldr	r3, [r2, #0]
 8005d36:	0605      	lsls	r5, r0, #24
 8005d38:	f103 0104 	add.w	r1, r3, #4
 8005d3c:	d52a      	bpl.n	8005d94 <_printf_i+0xa4>
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da03      	bge.n	8005d4e <_printf_i+0x5e>
 8005d46:	222d      	movs	r2, #45	; 0x2d
 8005d48:	425b      	negs	r3, r3
 8005d4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d4e:	486f      	ldr	r0, [pc, #444]	; (8005f0c <_printf_i+0x21c>)
 8005d50:	220a      	movs	r2, #10
 8005d52:	e039      	b.n	8005dc8 <_printf_i+0xd8>
 8005d54:	2973      	cmp	r1, #115	; 0x73
 8005d56:	f000 809d 	beq.w	8005e94 <_printf_i+0x1a4>
 8005d5a:	d808      	bhi.n	8005d6e <_printf_i+0x7e>
 8005d5c:	296f      	cmp	r1, #111	; 0x6f
 8005d5e:	d020      	beq.n	8005da2 <_printf_i+0xb2>
 8005d60:	2970      	cmp	r1, #112	; 0x70
 8005d62:	d1dd      	bne.n	8005d20 <_printf_i+0x30>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	f043 0320 	orr.w	r3, r3, #32
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	e003      	b.n	8005d76 <_printf_i+0x86>
 8005d6e:	2975      	cmp	r1, #117	; 0x75
 8005d70:	d017      	beq.n	8005da2 <_printf_i+0xb2>
 8005d72:	2978      	cmp	r1, #120	; 0x78
 8005d74:	d1d4      	bne.n	8005d20 <_printf_i+0x30>
 8005d76:	2378      	movs	r3, #120	; 0x78
 8005d78:	4865      	ldr	r0, [pc, #404]	; (8005f10 <_printf_i+0x220>)
 8005d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d7e:	e055      	b.n	8005e2c <_printf_i+0x13c>
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d86:	1d19      	adds	r1, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6011      	str	r1, [r2, #0]
 8005d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d90:	2301      	movs	r3, #1
 8005d92:	e08c      	b.n	8005eae <_printf_i+0x1be>
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d9a:	6011      	str	r1, [r2, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	b21b      	sxthne	r3, r3
 8005da0:	e7cf      	b.n	8005d42 <_printf_i+0x52>
 8005da2:	6813      	ldr	r3, [r2, #0]
 8005da4:	6825      	ldr	r5, [r4, #0]
 8005da6:	1d18      	adds	r0, r3, #4
 8005da8:	6010      	str	r0, [r2, #0]
 8005daa:	0628      	lsls	r0, r5, #24
 8005dac:	d501      	bpl.n	8005db2 <_printf_i+0xc2>
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	e002      	b.n	8005db8 <_printf_i+0xc8>
 8005db2:	0668      	lsls	r0, r5, #25
 8005db4:	d5fb      	bpl.n	8005dae <_printf_i+0xbe>
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	296f      	cmp	r1, #111	; 0x6f
 8005dba:	bf14      	ite	ne
 8005dbc:	220a      	movne	r2, #10
 8005dbe:	2208      	moveq	r2, #8
 8005dc0:	4852      	ldr	r0, [pc, #328]	; (8005f0c <_printf_i+0x21c>)
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc8:	6865      	ldr	r5, [r4, #4]
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	60a5      	str	r5, [r4, #8]
 8005dce:	f2c0 8095 	blt.w	8005efc <_printf_i+0x20c>
 8005dd2:	6821      	ldr	r1, [r4, #0]
 8005dd4:	f021 0104 	bic.w	r1, r1, #4
 8005dd8:	6021      	str	r1, [r4, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d13d      	bne.n	8005e5a <_printf_i+0x16a>
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	f040 808e 	bne.w	8005f00 <_printf_i+0x210>
 8005de4:	4665      	mov	r5, ip
 8005de6:	2a08      	cmp	r2, #8
 8005de8:	d10b      	bne.n	8005e02 <_printf_i+0x112>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	07db      	lsls	r3, r3, #31
 8005dee:	d508      	bpl.n	8005e02 <_printf_i+0x112>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	bfde      	ittt	le
 8005df8:	2330      	movle	r3, #48	; 0x30
 8005dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e02:	ebac 0305 	sub.w	r3, ip, r5
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	f8cd 8000 	str.w	r8, [sp]
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	aa03      	add	r2, sp, #12
 8005e10:	4621      	mov	r1, r4
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff fef6 	bl	8005c04 <_printf_common>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d14d      	bne.n	8005eb8 <_printf_i+0x1c8>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	b005      	add	sp, #20
 8005e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e26:	4839      	ldr	r0, [pc, #228]	; (8005f0c <_printf_i+0x21c>)
 8005e28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e2c:	6813      	ldr	r3, [r2, #0]
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	1d1d      	adds	r5, r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6015      	str	r5, [r2, #0]
 8005e36:	060a      	lsls	r2, r1, #24
 8005e38:	d50b      	bpl.n	8005e52 <_printf_i+0x162>
 8005e3a:	07ca      	lsls	r2, r1, #31
 8005e3c:	bf44      	itt	mi
 8005e3e:	f041 0120 	orrmi.w	r1, r1, #32
 8005e42:	6021      	strmi	r1, [r4, #0]
 8005e44:	b91b      	cbnz	r3, 8005e4e <_printf_i+0x15e>
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	f022 0220 	bic.w	r2, r2, #32
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	e7b7      	b.n	8005dc2 <_printf_i+0xd2>
 8005e52:	064d      	lsls	r5, r1, #25
 8005e54:	bf48      	it	mi
 8005e56:	b29b      	uxthmi	r3, r3
 8005e58:	e7ef      	b.n	8005e3a <_printf_i+0x14a>
 8005e5a:	4665      	mov	r5, ip
 8005e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e60:	fb02 3311 	mls	r3, r2, r1, r3
 8005e64:	5cc3      	ldrb	r3, [r0, r3]
 8005e66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d1f5      	bne.n	8005e5c <_printf_i+0x16c>
 8005e70:	e7b9      	b.n	8005de6 <_printf_i+0xf6>
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	1d18      	adds	r0, r3, #4
 8005e78:	6961      	ldr	r1, [r4, #20]
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	0628      	lsls	r0, r5, #24
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	d501      	bpl.n	8005e86 <_printf_i+0x196>
 8005e82:	6019      	str	r1, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <_printf_i+0x19c>
 8005e86:	066a      	lsls	r2, r5, #25
 8005e88:	d5fb      	bpl.n	8005e82 <_printf_i+0x192>
 8005e8a:	8019      	strh	r1, [r3, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4665      	mov	r5, ip
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	e7b9      	b.n	8005e08 <_printf_i+0x118>
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	1d19      	adds	r1, r3, #4
 8005e98:	6011      	str	r1, [r2, #0]
 8005e9a:	681d      	ldr	r5, [r3, #0]
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f002 fd49 	bl	8008938 <memchr>
 8005ea6:	b108      	cbz	r0, 8005eac <_printf_i+0x1bc>
 8005ea8:	1b40      	subs	r0, r0, r5
 8005eaa:	6060      	str	r0, [r4, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb6:	e7a7      	b.n	8005e08 <_printf_i+0x118>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	462a      	mov	r2, r5
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0aa      	beq.n	8005e1c <_printf_i+0x12c>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d413      	bmi.n	8005ef4 <_printf_i+0x204>
 8005ecc:	68e0      	ldr	r0, [r4, #12]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	4298      	cmp	r0, r3
 8005ed2:	bfb8      	it	lt
 8005ed4:	4618      	movlt	r0, r3
 8005ed6:	e7a3      	b.n	8005e20 <_printf_i+0x130>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	464a      	mov	r2, r9
 8005edc:	4639      	mov	r1, r7
 8005ede:	4630      	mov	r0, r6
 8005ee0:	47c0      	blx	r8
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d09a      	beq.n	8005e1c <_printf_i+0x12c>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	68e3      	ldr	r3, [r4, #12]
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	42ab      	cmp	r3, r5
 8005ef0:	dcf2      	bgt.n	8005ed8 <_printf_i+0x1e8>
 8005ef2:	e7eb      	b.n	8005ecc <_printf_i+0x1dc>
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	f104 0919 	add.w	r9, r4, #25
 8005efa:	e7f5      	b.n	8005ee8 <_printf_i+0x1f8>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ac      	bne.n	8005e5a <_printf_i+0x16a>
 8005f00:	7803      	ldrb	r3, [r0, #0]
 8005f02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f0a:	e76c      	b.n	8005de6 <_printf_i+0xf6>
 8005f0c:	08009ac2 	.word	0x08009ac2
 8005f10:	08009ad3 	.word	0x08009ad3

08005f14 <_scanf_float>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	469a      	mov	sl, r3
 8005f1a:	688b      	ldr	r3, [r1, #8]
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f24:	bf88      	it	hi
 8005f26:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	bf85      	ittet	hi
 8005f2e:	189b      	addhi	r3, r3, r2
 8005f30:	9301      	strhi	r3, [sp, #4]
 8005f32:	2300      	movls	r3, #0
 8005f34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f38:	4688      	mov	r8, r1
 8005f3a:	f04f 0b00 	mov.w	fp, #0
 8005f3e:	bf8c      	ite	hi
 8005f40:	608b      	strhi	r3, [r1, #8]
 8005f42:	9301      	strls	r3, [sp, #4]
 8005f44:	680b      	ldr	r3, [r1, #0]
 8005f46:	4607      	mov	r7, r0
 8005f48:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f4c:	f848 3b1c 	str.w	r3, [r8], #28
 8005f50:	460c      	mov	r4, r1
 8005f52:	4645      	mov	r5, r8
 8005f54:	465a      	mov	r2, fp
 8005f56:	46d9      	mov	r9, fp
 8005f58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005f5c:	f8cd b008 	str.w	fp, [sp, #8]
 8005f60:	68a1      	ldr	r1, [r4, #8]
 8005f62:	b181      	cbz	r1, 8005f86 <_scanf_float+0x72>
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b49      	cmp	r3, #73	; 0x49
 8005f6a:	d071      	beq.n	8006050 <_scanf_float+0x13c>
 8005f6c:	d84d      	bhi.n	800600a <_scanf_float+0xf6>
 8005f6e:	2b39      	cmp	r3, #57	; 0x39
 8005f70:	d840      	bhi.n	8005ff4 <_scanf_float+0xe0>
 8005f72:	2b31      	cmp	r3, #49	; 0x31
 8005f74:	f080 8088 	bcs.w	8006088 <_scanf_float+0x174>
 8005f78:	2b2d      	cmp	r3, #45	; 0x2d
 8005f7a:	f000 8090 	beq.w	800609e <_scanf_float+0x18a>
 8005f7e:	d815      	bhi.n	8005fac <_scanf_float+0x98>
 8005f80:	2b2b      	cmp	r3, #43	; 0x2b
 8005f82:	f000 808c 	beq.w	800609e <_scanf_float+0x18a>
 8005f86:	f1b9 0f00 	cmp.w	r9, #0
 8005f8a:	d003      	beq.n	8005f94 <_scanf_float+0x80>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	3a01      	subs	r2, #1
 8005f96:	2a01      	cmp	r2, #1
 8005f98:	f200 80ea 	bhi.w	8006170 <_scanf_float+0x25c>
 8005f9c:	4545      	cmp	r5, r8
 8005f9e:	f200 80dc 	bhi.w	800615a <_scanf_float+0x246>
 8005fa2:	2601      	movs	r6, #1
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	b007      	add	sp, #28
 8005fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fac:	2b2e      	cmp	r3, #46	; 0x2e
 8005fae:	f000 809f 	beq.w	80060f0 <_scanf_float+0x1dc>
 8005fb2:	2b30      	cmp	r3, #48	; 0x30
 8005fb4:	d1e7      	bne.n	8005f86 <_scanf_float+0x72>
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005fbc:	d064      	beq.n	8006088 <_scanf_float+0x174>
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005fc4:	6020      	str	r0, [r4, #0]
 8005fc6:	f109 0901 	add.w	r9, r9, #1
 8005fca:	b11b      	cbz	r3, 8005fd4 <_scanf_float+0xc0>
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	3101      	adds	r1, #1
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	60a1      	str	r1, [r4, #8]
 8005fd4:	68a3      	ldr	r3, [r4, #8]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	6123      	str	r3, [r4, #16]
 8005fe0:	6873      	ldr	r3, [r6, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	6073      	str	r3, [r6, #4]
 8005fe8:	f340 80ac 	ble.w	8006144 <_scanf_float+0x230>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	e7b5      	b.n	8005f60 <_scanf_float+0x4c>
 8005ff4:	2b45      	cmp	r3, #69	; 0x45
 8005ff6:	f000 8085 	beq.w	8006104 <_scanf_float+0x1f0>
 8005ffa:	2b46      	cmp	r3, #70	; 0x46
 8005ffc:	d06a      	beq.n	80060d4 <_scanf_float+0x1c0>
 8005ffe:	2b41      	cmp	r3, #65	; 0x41
 8006000:	d1c1      	bne.n	8005f86 <_scanf_float+0x72>
 8006002:	2a01      	cmp	r2, #1
 8006004:	d1bf      	bne.n	8005f86 <_scanf_float+0x72>
 8006006:	2202      	movs	r2, #2
 8006008:	e046      	b.n	8006098 <_scanf_float+0x184>
 800600a:	2b65      	cmp	r3, #101	; 0x65
 800600c:	d07a      	beq.n	8006104 <_scanf_float+0x1f0>
 800600e:	d818      	bhi.n	8006042 <_scanf_float+0x12e>
 8006010:	2b54      	cmp	r3, #84	; 0x54
 8006012:	d066      	beq.n	80060e2 <_scanf_float+0x1ce>
 8006014:	d811      	bhi.n	800603a <_scanf_float+0x126>
 8006016:	2b4e      	cmp	r3, #78	; 0x4e
 8006018:	d1b5      	bne.n	8005f86 <_scanf_float+0x72>
 800601a:	2a00      	cmp	r2, #0
 800601c:	d146      	bne.n	80060ac <_scanf_float+0x198>
 800601e:	f1b9 0f00 	cmp.w	r9, #0
 8006022:	d145      	bne.n	80060b0 <_scanf_float+0x19c>
 8006024:	6821      	ldr	r1, [r4, #0]
 8006026:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800602a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800602e:	d13f      	bne.n	80060b0 <_scanf_float+0x19c>
 8006030:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006034:	6021      	str	r1, [r4, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	e02e      	b.n	8006098 <_scanf_float+0x184>
 800603a:	2b59      	cmp	r3, #89	; 0x59
 800603c:	d01e      	beq.n	800607c <_scanf_float+0x168>
 800603e:	2b61      	cmp	r3, #97	; 0x61
 8006040:	e7de      	b.n	8006000 <_scanf_float+0xec>
 8006042:	2b6e      	cmp	r3, #110	; 0x6e
 8006044:	d0e9      	beq.n	800601a <_scanf_float+0x106>
 8006046:	d815      	bhi.n	8006074 <_scanf_float+0x160>
 8006048:	2b66      	cmp	r3, #102	; 0x66
 800604a:	d043      	beq.n	80060d4 <_scanf_float+0x1c0>
 800604c:	2b69      	cmp	r3, #105	; 0x69
 800604e:	d19a      	bne.n	8005f86 <_scanf_float+0x72>
 8006050:	f1bb 0f00 	cmp.w	fp, #0
 8006054:	d138      	bne.n	80060c8 <_scanf_float+0x1b4>
 8006056:	f1b9 0f00 	cmp.w	r9, #0
 800605a:	d197      	bne.n	8005f8c <_scanf_float+0x78>
 800605c:	6821      	ldr	r1, [r4, #0]
 800605e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006062:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006066:	d195      	bne.n	8005f94 <_scanf_float+0x80>
 8006068:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800606c:	6021      	str	r1, [r4, #0]
 800606e:	f04f 0b01 	mov.w	fp, #1
 8006072:	e011      	b.n	8006098 <_scanf_float+0x184>
 8006074:	2b74      	cmp	r3, #116	; 0x74
 8006076:	d034      	beq.n	80060e2 <_scanf_float+0x1ce>
 8006078:	2b79      	cmp	r3, #121	; 0x79
 800607a:	d184      	bne.n	8005f86 <_scanf_float+0x72>
 800607c:	f1bb 0f07 	cmp.w	fp, #7
 8006080:	d181      	bne.n	8005f86 <_scanf_float+0x72>
 8006082:	f04f 0b08 	mov.w	fp, #8
 8006086:	e007      	b.n	8006098 <_scanf_float+0x184>
 8006088:	eb12 0f0b 	cmn.w	r2, fp
 800608c:	f47f af7b 	bne.w	8005f86 <_scanf_float+0x72>
 8006090:	6821      	ldr	r1, [r4, #0]
 8006092:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006096:	6021      	str	r1, [r4, #0]
 8006098:	702b      	strb	r3, [r5, #0]
 800609a:	3501      	adds	r5, #1
 800609c:	e79a      	b.n	8005fd4 <_scanf_float+0xc0>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	0608      	lsls	r0, r1, #24
 80060a2:	f57f af70 	bpl.w	8005f86 <_scanf_float+0x72>
 80060a6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80060aa:	e7f4      	b.n	8006096 <_scanf_float+0x182>
 80060ac:	2a02      	cmp	r2, #2
 80060ae:	d047      	beq.n	8006140 <_scanf_float+0x22c>
 80060b0:	f1bb 0f01 	cmp.w	fp, #1
 80060b4:	d003      	beq.n	80060be <_scanf_float+0x1aa>
 80060b6:	f1bb 0f04 	cmp.w	fp, #4
 80060ba:	f47f af64 	bne.w	8005f86 <_scanf_float+0x72>
 80060be:	f10b 0b01 	add.w	fp, fp, #1
 80060c2:	fa5f fb8b 	uxtb.w	fp, fp
 80060c6:	e7e7      	b.n	8006098 <_scanf_float+0x184>
 80060c8:	f1bb 0f03 	cmp.w	fp, #3
 80060cc:	d0f7      	beq.n	80060be <_scanf_float+0x1aa>
 80060ce:	f1bb 0f05 	cmp.w	fp, #5
 80060d2:	e7f2      	b.n	80060ba <_scanf_float+0x1a6>
 80060d4:	f1bb 0f02 	cmp.w	fp, #2
 80060d8:	f47f af55 	bne.w	8005f86 <_scanf_float+0x72>
 80060dc:	f04f 0b03 	mov.w	fp, #3
 80060e0:	e7da      	b.n	8006098 <_scanf_float+0x184>
 80060e2:	f1bb 0f06 	cmp.w	fp, #6
 80060e6:	f47f af4e 	bne.w	8005f86 <_scanf_float+0x72>
 80060ea:	f04f 0b07 	mov.w	fp, #7
 80060ee:	e7d3      	b.n	8006098 <_scanf_float+0x184>
 80060f0:	6821      	ldr	r1, [r4, #0]
 80060f2:	0588      	lsls	r0, r1, #22
 80060f4:	f57f af47 	bpl.w	8005f86 <_scanf_float+0x72>
 80060f8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80060fc:	6021      	str	r1, [r4, #0]
 80060fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006102:	e7c9      	b.n	8006098 <_scanf_float+0x184>
 8006104:	6821      	ldr	r1, [r4, #0]
 8006106:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800610a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800610e:	d006      	beq.n	800611e <_scanf_float+0x20a>
 8006110:	0548      	lsls	r0, r1, #21
 8006112:	f57f af38 	bpl.w	8005f86 <_scanf_float+0x72>
 8006116:	f1b9 0f00 	cmp.w	r9, #0
 800611a:	f43f af3b 	beq.w	8005f94 <_scanf_float+0x80>
 800611e:	0588      	lsls	r0, r1, #22
 8006120:	bf58      	it	pl
 8006122:	9802      	ldrpl	r0, [sp, #8]
 8006124:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006128:	bf58      	it	pl
 800612a:	eba9 0000 	subpl.w	r0, r9, r0
 800612e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006132:	bf58      	it	pl
 8006134:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006138:	6021      	str	r1, [r4, #0]
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	e7ab      	b.n	8006098 <_scanf_float+0x184>
 8006140:	2203      	movs	r2, #3
 8006142:	e7a9      	b.n	8006098 <_scanf_float+0x184>
 8006144:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006148:	4631      	mov	r1, r6
 800614a:	4638      	mov	r0, r7
 800614c:	9205      	str	r2, [sp, #20]
 800614e:	4798      	blx	r3
 8006150:	9a05      	ldr	r2, [sp, #20]
 8006152:	2800      	cmp	r0, #0
 8006154:	f43f af04 	beq.w	8005f60 <_scanf_float+0x4c>
 8006158:	e715      	b.n	8005f86 <_scanf_float+0x72>
 800615a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800615e:	4632      	mov	r2, r6
 8006160:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006164:	4638      	mov	r0, r7
 8006166:	4798      	blx	r3
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	3b01      	subs	r3, #1
 800616c:	6123      	str	r3, [r4, #16]
 800616e:	e715      	b.n	8005f9c <_scanf_float+0x88>
 8006170:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006174:	2b06      	cmp	r3, #6
 8006176:	d80a      	bhi.n	800618e <_scanf_float+0x27a>
 8006178:	f1bb 0f02 	cmp.w	fp, #2
 800617c:	d967      	bls.n	800624e <_scanf_float+0x33a>
 800617e:	f1ab 0b03 	sub.w	fp, fp, #3
 8006182:	fa5f fb8b 	uxtb.w	fp, fp
 8006186:	eba5 0b0b 	sub.w	fp, r5, fp
 800618a:	455d      	cmp	r5, fp
 800618c:	d14a      	bne.n	8006224 <_scanf_float+0x310>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	05da      	lsls	r2, r3, #23
 8006192:	d51f      	bpl.n	80061d4 <_scanf_float+0x2c0>
 8006194:	055b      	lsls	r3, r3, #21
 8006196:	d467      	bmi.n	8006268 <_scanf_float+0x354>
 8006198:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	2965      	cmp	r1, #101	; 0x65
 80061a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80061a4:	f105 3bff 	add.w	fp, r5, #4294967295
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	d00d      	beq.n	80061c8 <_scanf_float+0x2b4>
 80061ac:	2945      	cmp	r1, #69	; 0x45
 80061ae:	d00b      	beq.n	80061c8 <_scanf_float+0x2b4>
 80061b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b4:	4632      	mov	r2, r6
 80061b6:	4638      	mov	r0, r7
 80061b8:	4798      	blx	r3
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	f1a5 0b02 	sub.w	fp, r5, #2
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061cc:	4632      	mov	r2, r6
 80061ce:	4638      	mov	r0, r7
 80061d0:	4798      	blx	r3
 80061d2:	465d      	mov	r5, fp
 80061d4:	6826      	ldr	r6, [r4, #0]
 80061d6:	f016 0610 	ands.w	r6, r6, #16
 80061da:	d176      	bne.n	80062ca <_scanf_float+0x3b6>
 80061dc:	702e      	strb	r6, [r5, #0]
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d141      	bne.n	800626e <_scanf_float+0x35a>
 80061ea:	9b02      	ldr	r3, [sp, #8]
 80061ec:	eba9 0303 	sub.w	r3, r9, r3
 80061f0:	425a      	negs	r2, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d148      	bne.n	8006288 <_scanf_float+0x374>
 80061f6:	4641      	mov	r1, r8
 80061f8:	2200      	movs	r2, #0
 80061fa:	4638      	mov	r0, r7
 80061fc:	f000 fec8 	bl	8006f90 <_strtod_r>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	4680      	mov	r8, r0
 8006204:	f015 0f02 	tst.w	r5, #2
 8006208:	4689      	mov	r9, r1
 800620a:	f8da 3000 	ldr.w	r3, [sl]
 800620e:	d046      	beq.n	800629e <_scanf_float+0x38a>
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	f8ca 2000 	str.w	r2, [sl]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	e9c3 8900 	strd	r8, r9, [r3]
 800621c:	68e3      	ldr	r3, [r4, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60e3      	str	r3, [r4, #12]
 8006222:	e6bf      	b.n	8005fa4 <_scanf_float+0x90>
 8006224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006228:	4632      	mov	r2, r6
 800622a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800622e:	4638      	mov	r0, r7
 8006230:	4798      	blx	r3
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	3b01      	subs	r3, #1
 8006236:	6123      	str	r3, [r4, #16]
 8006238:	e7a7      	b.n	800618a <_scanf_float+0x276>
 800623a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800623e:	4632      	mov	r2, r6
 8006240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006244:	4638      	mov	r0, r7
 8006246:	4798      	blx	r3
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	3b01      	subs	r3, #1
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	4545      	cmp	r5, r8
 8006250:	d8f3      	bhi.n	800623a <_scanf_float+0x326>
 8006252:	e6a6      	b.n	8005fa2 <_scanf_float+0x8e>
 8006254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006258:	4632      	mov	r2, r6
 800625a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800625e:	4638      	mov	r0, r7
 8006260:	4798      	blx	r3
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	3b01      	subs	r3, #1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	4545      	cmp	r5, r8
 800626a:	d8f3      	bhi.n	8006254 <_scanf_float+0x340>
 800626c:	e699      	b.n	8005fa2 <_scanf_float+0x8e>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0c0      	beq.n	80061f6 <_scanf_float+0x2e2>
 8006274:	9904      	ldr	r1, [sp, #16]
 8006276:	230a      	movs	r3, #10
 8006278:	4632      	mov	r2, r6
 800627a:	3101      	adds	r1, #1
 800627c:	4638      	mov	r0, r7
 800627e:	f000 ff13 	bl	80070a8 <_strtol_r>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	9d04      	ldr	r5, [sp, #16]
 8006286:	1ac2      	subs	r2, r0, r3
 8006288:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800628c:	429d      	cmp	r5, r3
 800628e:	bf28      	it	cs
 8006290:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006294:	490e      	ldr	r1, [pc, #56]	; (80062d0 <_scanf_float+0x3bc>)
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f838 	bl	800630c <siprintf>
 800629c:	e7ab      	b.n	80061f6 <_scanf_float+0x2e2>
 800629e:	1d1f      	adds	r7, r3, #4
 80062a0:	f015 0504 	ands.w	r5, r5, #4
 80062a4:	f8ca 7000 	str.w	r7, [sl]
 80062a8:	d1b5      	bne.n	8006216 <_scanf_float+0x302>
 80062aa:	681f      	ldr	r7, [r3, #0]
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	f7fa fbac 	bl	8000a0c <__aeabi_dcmpun>
 80062b4:	b120      	cbz	r0, 80062c0 <_scanf_float+0x3ac>
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f824 	bl	8006304 <nanf>
 80062bc:	6038      	str	r0, [r7, #0]
 80062be:	e7ad      	b.n	800621c <_scanf_float+0x308>
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fc00 	bl	8000ac8 <__aeabi_d2f>
 80062c8:	e7f8      	b.n	80062bc <_scanf_float+0x3a8>
 80062ca:	2600      	movs	r6, #0
 80062cc:	e66a      	b.n	8005fa4 <_scanf_float+0x90>
 80062ce:	bf00      	nop
 80062d0:	08009ae4 	.word	0x08009ae4

080062d4 <iprintf>:
 80062d4:	b40f      	push	{r0, r1, r2, r3}
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <iprintf+0x2c>)
 80062d8:	b513      	push	{r0, r1, r4, lr}
 80062da:	681c      	ldr	r4, [r3, #0]
 80062dc:	b124      	cbz	r4, 80062e8 <iprintf+0x14>
 80062de:	69a3      	ldr	r3, [r4, #24]
 80062e0:	b913      	cbnz	r3, 80062e8 <iprintf+0x14>
 80062e2:	4620      	mov	r0, r4
 80062e4:	f001 fee4 	bl	80080b0 <__sinit>
 80062e8:	ab05      	add	r3, sp, #20
 80062ea:	9a04      	ldr	r2, [sp, #16]
 80062ec:	68a1      	ldr	r1, [r4, #8]
 80062ee:	4620      	mov	r0, r4
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	f003 f955 	bl	80095a0 <_vfiprintf_r>
 80062f6:	b002      	add	sp, #8
 80062f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fc:	b004      	add	sp, #16
 80062fe:	4770      	bx	lr
 8006300:	20000010 	.word	0x20000010

08006304 <nanf>:
 8006304:	4800      	ldr	r0, [pc, #0]	; (8006308 <nanf+0x4>)
 8006306:	4770      	bx	lr
 8006308:	7fc00000 	.word	0x7fc00000

0800630c <siprintf>:
 800630c:	b40e      	push	{r1, r2, r3}
 800630e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006312:	b500      	push	{lr}
 8006314:	b09c      	sub	sp, #112	; 0x70
 8006316:	ab1d      	add	r3, sp, #116	; 0x74
 8006318:	9002      	str	r0, [sp, #8]
 800631a:	9006      	str	r0, [sp, #24]
 800631c:	9107      	str	r1, [sp, #28]
 800631e:	9104      	str	r1, [sp, #16]
 8006320:	4808      	ldr	r0, [pc, #32]	; (8006344 <siprintf+0x38>)
 8006322:	4909      	ldr	r1, [pc, #36]	; (8006348 <siprintf+0x3c>)
 8006324:	f853 2b04 	ldr.w	r2, [r3], #4
 8006328:	9105      	str	r1, [sp, #20]
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	a902      	add	r1, sp, #8
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	f003 f816 	bl	8009360 <_svfiprintf_r>
 8006334:	2200      	movs	r2, #0
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	b01c      	add	sp, #112	; 0x70
 800633c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006340:	b003      	add	sp, #12
 8006342:	4770      	bx	lr
 8006344:	20000010 	.word	0x20000010
 8006348:	ffff0208 	.word	0xffff0208

0800634c <sulp>:
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	460f      	mov	r7, r1
 8006352:	4690      	mov	r8, r2
 8006354:	f002 fdc8 	bl	8008ee8 <__ulp>
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	f1b8 0f00 	cmp.w	r8, #0
 8006360:	d011      	beq.n	8006386 <sulp+0x3a>
 8006362:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006366:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd0b      	ble.n	8006386 <sulp+0x3a>
 800636e:	2400      	movs	r4, #0
 8006370:	051b      	lsls	r3, r3, #20
 8006372:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006376:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	f7fa f8ab 	bl	80004d8 <__aeabi_dmul>
 8006382:	4604      	mov	r4, r0
 8006384:	460d      	mov	r5, r1
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006390 <_strtod_l>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	461f      	mov	r7, r3
 8006396:	2300      	movs	r3, #0
 8006398:	b0a1      	sub	sp, #132	; 0x84
 800639a:	4683      	mov	fp, r0
 800639c:	4638      	mov	r0, r7
 800639e:	460e      	mov	r6, r1
 80063a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80063a2:	931c      	str	r3, [sp, #112]	; 0x70
 80063a4:	f002 fa39 	bl	800881a <__localeconv_l>
 80063a8:	4680      	mov	r8, r0
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	f7f9 fed0 	bl	8000150 <strlen>
 80063b0:	f04f 0900 	mov.w	r9, #0
 80063b4:	4604      	mov	r4, r0
 80063b6:	f04f 0a00 	mov.w	sl, #0
 80063ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80063bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	2a0d      	cmp	r2, #13
 80063c2:	d832      	bhi.n	800642a <_strtod_l+0x9a>
 80063c4:	2a09      	cmp	r2, #9
 80063c6:	d236      	bcs.n	8006436 <_strtod_l+0xa6>
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	d03e      	beq.n	800644a <_strtod_l+0xba>
 80063cc:	2300      	movs	r3, #0
 80063ce:	930d      	str	r3, [sp, #52]	; 0x34
 80063d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80063d2:	782b      	ldrb	r3, [r5, #0]
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	f040 80ac 	bne.w	8006532 <_strtod_l+0x1a2>
 80063da:	786b      	ldrb	r3, [r5, #1]
 80063dc:	2b58      	cmp	r3, #88	; 0x58
 80063de:	d001      	beq.n	80063e4 <_strtod_l+0x54>
 80063e0:	2b78      	cmp	r3, #120	; 0x78
 80063e2:	d167      	bne.n	80064b4 <_strtod_l+0x124>
 80063e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e6:	9702      	str	r7, [sp, #8]
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	ab1c      	add	r3, sp, #112	; 0x70
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4a89      	ldr	r2, [pc, #548]	; (8006614 <_strtod_l+0x284>)
 80063f0:	ab1d      	add	r3, sp, #116	; 0x74
 80063f2:	a91b      	add	r1, sp, #108	; 0x6c
 80063f4:	4658      	mov	r0, fp
 80063f6:	f001 ff35 	bl	8008264 <__gethex>
 80063fa:	f010 0407 	ands.w	r4, r0, #7
 80063fe:	4606      	mov	r6, r0
 8006400:	d005      	beq.n	800640e <_strtod_l+0x7e>
 8006402:	2c06      	cmp	r4, #6
 8006404:	d12b      	bne.n	800645e <_strtod_l+0xce>
 8006406:	2300      	movs	r3, #0
 8006408:	3501      	adds	r5, #1
 800640a:	951b      	str	r5, [sp, #108]	; 0x6c
 800640c:	930d      	str	r3, [sp, #52]	; 0x34
 800640e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 85a6 	bne.w	8006f62 <_strtod_l+0xbd2>
 8006416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006418:	b1e3      	cbz	r3, 8006454 <_strtod_l+0xc4>
 800641a:	464a      	mov	r2, r9
 800641c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	b021      	add	sp, #132	; 0x84
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	2a2b      	cmp	r2, #43	; 0x2b
 800642c:	d015      	beq.n	800645a <_strtod_l+0xca>
 800642e:	2a2d      	cmp	r2, #45	; 0x2d
 8006430:	d004      	beq.n	800643c <_strtod_l+0xac>
 8006432:	2a20      	cmp	r2, #32
 8006434:	d1ca      	bne.n	80063cc <_strtod_l+0x3c>
 8006436:	3301      	adds	r3, #1
 8006438:	931b      	str	r3, [sp, #108]	; 0x6c
 800643a:	e7bf      	b.n	80063bc <_strtod_l+0x2c>
 800643c:	2201      	movs	r2, #1
 800643e:	920d      	str	r2, [sp, #52]	; 0x34
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	921b      	str	r2, [sp, #108]	; 0x6c
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1c2      	bne.n	80063d0 <_strtod_l+0x40>
 800644a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800644c:	961b      	str	r6, [sp, #108]	; 0x6c
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 8585 	bne.w	8006f5e <_strtod_l+0xbce>
 8006454:	464a      	mov	r2, r9
 8006456:	4653      	mov	r3, sl
 8006458:	e7e2      	b.n	8006420 <_strtod_l+0x90>
 800645a:	2200      	movs	r2, #0
 800645c:	e7ef      	b.n	800643e <_strtod_l+0xae>
 800645e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006460:	b13a      	cbz	r2, 8006472 <_strtod_l+0xe2>
 8006462:	2135      	movs	r1, #53	; 0x35
 8006464:	a81e      	add	r0, sp, #120	; 0x78
 8006466:	f002 fe32 	bl	80090ce <__copybits>
 800646a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800646c:	4658      	mov	r0, fp
 800646e:	f002 faa5 	bl	80089bc <_Bfree>
 8006472:	3c01      	subs	r4, #1
 8006474:	2c04      	cmp	r4, #4
 8006476:	d806      	bhi.n	8006486 <_strtod_l+0xf6>
 8006478:	e8df f004 	tbb	[pc, r4]
 800647c:	1714030a 	.word	0x1714030a
 8006480:	0a          	.byte	0x0a
 8006481:	00          	.byte	0x00
 8006482:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006486:	0731      	lsls	r1, r6, #28
 8006488:	d5c1      	bpl.n	800640e <_strtod_l+0x7e>
 800648a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800648e:	e7be      	b.n	800640e <_strtod_l+0x7e>
 8006490:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006492:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006496:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800649a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800649e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80064a2:	e7f0      	b.n	8006486 <_strtod_l+0xf6>
 80064a4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006618 <_strtod_l+0x288>
 80064a8:	e7ed      	b.n	8006486 <_strtod_l+0xf6>
 80064aa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80064ae:	f04f 39ff 	mov.w	r9, #4294967295
 80064b2:	e7e8      	b.n	8006486 <_strtod_l+0xf6>
 80064b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b30      	cmp	r3, #48	; 0x30
 80064be:	d0f9      	beq.n	80064b4 <_strtod_l+0x124>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0a4      	beq.n	800640e <_strtod_l+0x7e>
 80064c4:	2301      	movs	r3, #1
 80064c6:	2500      	movs	r5, #0
 80064c8:	220a      	movs	r2, #10
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064ce:	9506      	str	r5, [sp, #24]
 80064d0:	9308      	str	r3, [sp, #32]
 80064d2:	9504      	str	r5, [sp, #16]
 80064d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80064d6:	7807      	ldrb	r7, [r0, #0]
 80064d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80064dc:	b2d9      	uxtb	r1, r3
 80064de:	2909      	cmp	r1, #9
 80064e0:	d929      	bls.n	8006536 <_strtod_l+0x1a6>
 80064e2:	4622      	mov	r2, r4
 80064e4:	f8d8 1000 	ldr.w	r1, [r8]
 80064e8:	f003 f9c3 	bl	8009872 <strncmp>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d031      	beq.n	8006554 <_strtod_l+0x1c4>
 80064f0:	2000      	movs	r0, #0
 80064f2:	463b      	mov	r3, r7
 80064f4:	4602      	mov	r2, r0
 80064f6:	9c04      	ldr	r4, [sp, #16]
 80064f8:	9005      	str	r0, [sp, #20]
 80064fa:	2b65      	cmp	r3, #101	; 0x65
 80064fc:	d001      	beq.n	8006502 <_strtod_l+0x172>
 80064fe:	2b45      	cmp	r3, #69	; 0x45
 8006500:	d114      	bne.n	800652c <_strtod_l+0x19c>
 8006502:	b924      	cbnz	r4, 800650e <_strtod_l+0x17e>
 8006504:	b910      	cbnz	r0, 800650c <_strtod_l+0x17c>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d09e      	beq.n	800644a <_strtod_l+0xba>
 800650c:	2400      	movs	r4, #0
 800650e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006510:	1c73      	adds	r3, r6, #1
 8006512:	931b      	str	r3, [sp, #108]	; 0x6c
 8006514:	7873      	ldrb	r3, [r6, #1]
 8006516:	2b2b      	cmp	r3, #43	; 0x2b
 8006518:	d078      	beq.n	800660c <_strtod_l+0x27c>
 800651a:	2b2d      	cmp	r3, #45	; 0x2d
 800651c:	d070      	beq.n	8006600 <_strtod_l+0x270>
 800651e:	f04f 0c00 	mov.w	ip, #0
 8006522:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006526:	2f09      	cmp	r7, #9
 8006528:	d97c      	bls.n	8006624 <_strtod_l+0x294>
 800652a:	961b      	str	r6, [sp, #108]	; 0x6c
 800652c:	f04f 0e00 	mov.w	lr, #0
 8006530:	e09a      	b.n	8006668 <_strtod_l+0x2d8>
 8006532:	2300      	movs	r3, #0
 8006534:	e7c7      	b.n	80064c6 <_strtod_l+0x136>
 8006536:	9904      	ldr	r1, [sp, #16]
 8006538:	3001      	adds	r0, #1
 800653a:	2908      	cmp	r1, #8
 800653c:	bfd7      	itett	le
 800653e:	9906      	ldrle	r1, [sp, #24]
 8006540:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006544:	fb02 3301 	mlale	r3, r2, r1, r3
 8006548:	9306      	strle	r3, [sp, #24]
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	901b      	str	r0, [sp, #108]	; 0x6c
 800654e:	3301      	adds	r3, #1
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	e7bf      	b.n	80064d4 <_strtod_l+0x144>
 8006554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006556:	191a      	adds	r2, r3, r4
 8006558:	921b      	str	r2, [sp, #108]	; 0x6c
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	5d1b      	ldrb	r3, [r3, r4]
 800655e:	2a00      	cmp	r2, #0
 8006560:	d037      	beq.n	80065d2 <_strtod_l+0x242>
 8006562:	4602      	mov	r2, r0
 8006564:	9c04      	ldr	r4, [sp, #16]
 8006566:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800656a:	2909      	cmp	r1, #9
 800656c:	d913      	bls.n	8006596 <_strtod_l+0x206>
 800656e:	2101      	movs	r1, #1
 8006570:	9105      	str	r1, [sp, #20]
 8006572:	e7c2      	b.n	80064fa <_strtod_l+0x16a>
 8006574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006576:	3001      	adds	r0, #1
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	921b      	str	r2, [sp, #108]	; 0x6c
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b30      	cmp	r3, #48	; 0x30
 8006580:	d0f8      	beq.n	8006574 <_strtod_l+0x1e4>
 8006582:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006586:	2a08      	cmp	r2, #8
 8006588:	f200 84f0 	bhi.w	8006f6c <_strtod_l+0xbdc>
 800658c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800658e:	9208      	str	r2, [sp, #32]
 8006590:	4602      	mov	r2, r0
 8006592:	2000      	movs	r0, #0
 8006594:	4604      	mov	r4, r0
 8006596:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800659a:	f100 0101 	add.w	r1, r0, #1
 800659e:	d012      	beq.n	80065c6 <_strtod_l+0x236>
 80065a0:	440a      	add	r2, r1
 80065a2:	270a      	movs	r7, #10
 80065a4:	4621      	mov	r1, r4
 80065a6:	eb00 0c04 	add.w	ip, r0, r4
 80065aa:	458c      	cmp	ip, r1
 80065ac:	d113      	bne.n	80065d6 <_strtod_l+0x246>
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	2908      	cmp	r1, #8
 80065b2:	f104 0401 	add.w	r4, r4, #1
 80065b6:	4404      	add	r4, r0
 80065b8:	dc19      	bgt.n	80065ee <_strtod_l+0x25e>
 80065ba:	210a      	movs	r1, #10
 80065bc:	9b06      	ldr	r3, [sp, #24]
 80065be:	fb01 e303 	mla	r3, r1, r3, lr
 80065c2:	9306      	str	r3, [sp, #24]
 80065c4:	2100      	movs	r1, #0
 80065c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065c8:	1c58      	adds	r0, r3, #1
 80065ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	4608      	mov	r0, r1
 80065d0:	e7c9      	b.n	8006566 <_strtod_l+0x1d6>
 80065d2:	9804      	ldr	r0, [sp, #16]
 80065d4:	e7d3      	b.n	800657e <_strtod_l+0x1ee>
 80065d6:	2908      	cmp	r1, #8
 80065d8:	f101 0101 	add.w	r1, r1, #1
 80065dc:	dc03      	bgt.n	80065e6 <_strtod_l+0x256>
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	437b      	muls	r3, r7
 80065e2:	9306      	str	r3, [sp, #24]
 80065e4:	e7e1      	b.n	80065aa <_strtod_l+0x21a>
 80065e6:	2910      	cmp	r1, #16
 80065e8:	bfd8      	it	le
 80065ea:	437d      	mulle	r5, r7
 80065ec:	e7dd      	b.n	80065aa <_strtod_l+0x21a>
 80065ee:	2c10      	cmp	r4, #16
 80065f0:	bfdc      	itt	le
 80065f2:	210a      	movle	r1, #10
 80065f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80065f8:	e7e4      	b.n	80065c4 <_strtod_l+0x234>
 80065fa:	2301      	movs	r3, #1
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	e781      	b.n	8006504 <_strtod_l+0x174>
 8006600:	f04f 0c01 	mov.w	ip, #1
 8006604:	1cb3      	adds	r3, r6, #2
 8006606:	931b      	str	r3, [sp, #108]	; 0x6c
 8006608:	78b3      	ldrb	r3, [r6, #2]
 800660a:	e78a      	b.n	8006522 <_strtod_l+0x192>
 800660c:	f04f 0c00 	mov.w	ip, #0
 8006610:	e7f8      	b.n	8006604 <_strtod_l+0x274>
 8006612:	bf00      	nop
 8006614:	08009aec 	.word	0x08009aec
 8006618:	7ff00000 	.word	0x7ff00000
 800661c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800661e:	1c5f      	adds	r7, r3, #1
 8006620:	971b      	str	r7, [sp, #108]	; 0x6c
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	d0f9      	beq.n	800661c <_strtod_l+0x28c>
 8006628:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800662c:	2f08      	cmp	r7, #8
 800662e:	f63f af7d 	bhi.w	800652c <_strtod_l+0x19c>
 8006632:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006638:	9309      	str	r3, [sp, #36]	; 0x24
 800663a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800663c:	1c5f      	adds	r7, r3, #1
 800663e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006646:	f1b8 0f09 	cmp.w	r8, #9
 800664a:	d937      	bls.n	80066bc <_strtod_l+0x32c>
 800664c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800664e:	1a7f      	subs	r7, r7, r1
 8006650:	2f08      	cmp	r7, #8
 8006652:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006656:	dc37      	bgt.n	80066c8 <_strtod_l+0x338>
 8006658:	45be      	cmp	lr, r7
 800665a:	bfa8      	it	ge
 800665c:	46be      	movge	lr, r7
 800665e:	f1bc 0f00 	cmp.w	ip, #0
 8006662:	d001      	beq.n	8006668 <_strtod_l+0x2d8>
 8006664:	f1ce 0e00 	rsb	lr, lr, #0
 8006668:	2c00      	cmp	r4, #0
 800666a:	d151      	bne.n	8006710 <_strtod_l+0x380>
 800666c:	2800      	cmp	r0, #0
 800666e:	f47f aece 	bne.w	800640e <_strtod_l+0x7e>
 8006672:	9a07      	ldr	r2, [sp, #28]
 8006674:	2a00      	cmp	r2, #0
 8006676:	f47f aeca 	bne.w	800640e <_strtod_l+0x7e>
 800667a:	9a05      	ldr	r2, [sp, #20]
 800667c:	2a00      	cmp	r2, #0
 800667e:	f47f aee4 	bne.w	800644a <_strtod_l+0xba>
 8006682:	2b4e      	cmp	r3, #78	; 0x4e
 8006684:	d027      	beq.n	80066d6 <_strtod_l+0x346>
 8006686:	dc21      	bgt.n	80066cc <_strtod_l+0x33c>
 8006688:	2b49      	cmp	r3, #73	; 0x49
 800668a:	f47f aede 	bne.w	800644a <_strtod_l+0xba>
 800668e:	49a4      	ldr	r1, [pc, #656]	; (8006920 <_strtod_l+0x590>)
 8006690:	a81b      	add	r0, sp, #108	; 0x6c
 8006692:	f002 f81b 	bl	80086cc <__match>
 8006696:	2800      	cmp	r0, #0
 8006698:	f43f aed7 	beq.w	800644a <_strtod_l+0xba>
 800669c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800669e:	49a1      	ldr	r1, [pc, #644]	; (8006924 <_strtod_l+0x594>)
 80066a0:	3b01      	subs	r3, #1
 80066a2:	a81b      	add	r0, sp, #108	; 0x6c
 80066a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80066a6:	f002 f811 	bl	80086cc <__match>
 80066aa:	b910      	cbnz	r0, 80066b2 <_strtod_l+0x322>
 80066ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066ae:	3301      	adds	r3, #1
 80066b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80066b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006938 <_strtod_l+0x5a8>
 80066b6:	f04f 0900 	mov.w	r9, #0
 80066ba:	e6a8      	b.n	800640e <_strtod_l+0x7e>
 80066bc:	210a      	movs	r1, #10
 80066be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80066c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80066c6:	e7b8      	b.n	800663a <_strtod_l+0x2aa>
 80066c8:	46be      	mov	lr, r7
 80066ca:	e7c8      	b.n	800665e <_strtod_l+0x2ce>
 80066cc:	2b69      	cmp	r3, #105	; 0x69
 80066ce:	d0de      	beq.n	800668e <_strtod_l+0x2fe>
 80066d0:	2b6e      	cmp	r3, #110	; 0x6e
 80066d2:	f47f aeba 	bne.w	800644a <_strtod_l+0xba>
 80066d6:	4994      	ldr	r1, [pc, #592]	; (8006928 <_strtod_l+0x598>)
 80066d8:	a81b      	add	r0, sp, #108	; 0x6c
 80066da:	f001 fff7 	bl	80086cc <__match>
 80066de:	2800      	cmp	r0, #0
 80066e0:	f43f aeb3 	beq.w	800644a <_strtod_l+0xba>
 80066e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b28      	cmp	r3, #40	; 0x28
 80066ea:	d10e      	bne.n	800670a <_strtod_l+0x37a>
 80066ec:	aa1e      	add	r2, sp, #120	; 0x78
 80066ee:	498f      	ldr	r1, [pc, #572]	; (800692c <_strtod_l+0x59c>)
 80066f0:	a81b      	add	r0, sp, #108	; 0x6c
 80066f2:	f001 ffff 	bl	80086f4 <__hexnan>
 80066f6:	2805      	cmp	r0, #5
 80066f8:	d107      	bne.n	800670a <_strtod_l+0x37a>
 80066fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066fc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006700:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8006704:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006708:	e681      	b.n	800640e <_strtod_l+0x7e>
 800670a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006940 <_strtod_l+0x5b0>
 800670e:	e7d2      	b.n	80066b6 <_strtod_l+0x326>
 8006710:	ebae 0302 	sub.w	r3, lr, r2
 8006714:	9307      	str	r3, [sp, #28]
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	9806      	ldr	r0, [sp, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf08      	it	eq
 800671e:	4623      	moveq	r3, r4
 8006720:	2c10      	cmp	r4, #16
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	46a0      	mov	r8, r4
 8006726:	bfa8      	it	ge
 8006728:	f04f 0810 	movge.w	r8, #16
 800672c:	f7f9 fe5a 	bl	80003e4 <__aeabi_ui2d>
 8006730:	2c09      	cmp	r4, #9
 8006732:	4681      	mov	r9, r0
 8006734:	468a      	mov	sl, r1
 8006736:	dc13      	bgt.n	8006760 <_strtod_l+0x3d0>
 8006738:	9b07      	ldr	r3, [sp, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f43f ae67 	beq.w	800640e <_strtod_l+0x7e>
 8006740:	9b07      	ldr	r3, [sp, #28]
 8006742:	dd7e      	ble.n	8006842 <_strtod_l+0x4b2>
 8006744:	2b16      	cmp	r3, #22
 8006746:	dc65      	bgt.n	8006814 <_strtod_l+0x484>
 8006748:	4a79      	ldr	r2, [pc, #484]	; (8006930 <_strtod_l+0x5a0>)
 800674a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800674e:	464a      	mov	r2, r9
 8006750:	e9de 0100 	ldrd	r0, r1, [lr]
 8006754:	4653      	mov	r3, sl
 8006756:	f7f9 febf 	bl	80004d8 <__aeabi_dmul>
 800675a:	4681      	mov	r9, r0
 800675c:	468a      	mov	sl, r1
 800675e:	e656      	b.n	800640e <_strtod_l+0x7e>
 8006760:	4b73      	ldr	r3, [pc, #460]	; (8006930 <_strtod_l+0x5a0>)
 8006762:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006766:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800676a:	f7f9 feb5 	bl	80004d8 <__aeabi_dmul>
 800676e:	4606      	mov	r6, r0
 8006770:	4628      	mov	r0, r5
 8006772:	460f      	mov	r7, r1
 8006774:	f7f9 fe36 	bl	80003e4 <__aeabi_ui2d>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7f9 fcf4 	bl	800016c <__adddf3>
 8006784:	2c0f      	cmp	r4, #15
 8006786:	4681      	mov	r9, r0
 8006788:	468a      	mov	sl, r1
 800678a:	ddd5      	ble.n	8006738 <_strtod_l+0x3a8>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	eba4 0808 	sub.w	r8, r4, r8
 8006792:	4498      	add	r8, r3
 8006794:	f1b8 0f00 	cmp.w	r8, #0
 8006798:	f340 809a 	ble.w	80068d0 <_strtod_l+0x540>
 800679c:	f018 030f 	ands.w	r3, r8, #15
 80067a0:	d00a      	beq.n	80067b8 <_strtod_l+0x428>
 80067a2:	4963      	ldr	r1, [pc, #396]	; (8006930 <_strtod_l+0x5a0>)
 80067a4:	464a      	mov	r2, r9
 80067a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ae:	4653      	mov	r3, sl
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	4681      	mov	r9, r0
 80067b6:	468a      	mov	sl, r1
 80067b8:	f038 080f 	bics.w	r8, r8, #15
 80067bc:	d077      	beq.n	80068ae <_strtod_l+0x51e>
 80067be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80067c2:	dd4b      	ble.n	800685c <_strtod_l+0x4cc>
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80067cc:	f8cd 8020 	str.w	r8, [sp, #32]
 80067d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80067d4:	2322      	movs	r3, #34	; 0x22
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006938 <_strtod_l+0x5a8>
 80067de:	f8cb 3000 	str.w	r3, [fp]
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f43f ae12 	beq.w	800640e <_strtod_l+0x7e>
 80067ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067ec:	4658      	mov	r0, fp
 80067ee:	f002 f8e5 	bl	80089bc <_Bfree>
 80067f2:	9906      	ldr	r1, [sp, #24]
 80067f4:	4658      	mov	r0, fp
 80067f6:	f002 f8e1 	bl	80089bc <_Bfree>
 80067fa:	9904      	ldr	r1, [sp, #16]
 80067fc:	4658      	mov	r0, fp
 80067fe:	f002 f8dd 	bl	80089bc <_Bfree>
 8006802:	9908      	ldr	r1, [sp, #32]
 8006804:	4658      	mov	r0, fp
 8006806:	f002 f8d9 	bl	80089bc <_Bfree>
 800680a:	4641      	mov	r1, r8
 800680c:	4658      	mov	r0, fp
 800680e:	f002 f8d5 	bl	80089bc <_Bfree>
 8006812:	e5fc      	b.n	800640e <_strtod_l+0x7e>
 8006814:	9a07      	ldr	r2, [sp, #28]
 8006816:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800681a:	4293      	cmp	r3, r2
 800681c:	dbb6      	blt.n	800678c <_strtod_l+0x3fc>
 800681e:	4d44      	ldr	r5, [pc, #272]	; (8006930 <_strtod_l+0x5a0>)
 8006820:	f1c4 040f 	rsb	r4, r4, #15
 8006824:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006828:	464a      	mov	r2, r9
 800682a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682e:	4653      	mov	r3, sl
 8006830:	f7f9 fe52 	bl	80004d8 <__aeabi_dmul>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	1b1c      	subs	r4, r3, r4
 8006838:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800683c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006840:	e789      	b.n	8006756 <_strtod_l+0x3c6>
 8006842:	f113 0f16 	cmn.w	r3, #22
 8006846:	dba1      	blt.n	800678c <_strtod_l+0x3fc>
 8006848:	4a39      	ldr	r2, [pc, #228]	; (8006930 <_strtod_l+0x5a0>)
 800684a:	4648      	mov	r0, r9
 800684c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006850:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006854:	4651      	mov	r1, sl
 8006856:	f7f9 ff69 	bl	800072c <__aeabi_ddiv>
 800685a:	e77e      	b.n	800675a <_strtod_l+0x3ca>
 800685c:	2300      	movs	r3, #0
 800685e:	4648      	mov	r0, r9
 8006860:	4651      	mov	r1, sl
 8006862:	461d      	mov	r5, r3
 8006864:	4e33      	ldr	r6, [pc, #204]	; (8006934 <_strtod_l+0x5a4>)
 8006866:	ea4f 1828 	mov.w	r8, r8, asr #4
 800686a:	f1b8 0f01 	cmp.w	r8, #1
 800686e:	dc21      	bgt.n	80068b4 <_strtod_l+0x524>
 8006870:	b10b      	cbz	r3, 8006876 <_strtod_l+0x4e6>
 8006872:	4681      	mov	r9, r0
 8006874:	468a      	mov	sl, r1
 8006876:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <_strtod_l+0x5a4>)
 8006878:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800687c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006880:	464a      	mov	r2, r9
 8006882:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006886:	4653      	mov	r3, sl
 8006888:	f7f9 fe26 	bl	80004d8 <__aeabi_dmul>
 800688c:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <_strtod_l+0x5a8>)
 800688e:	460a      	mov	r2, r1
 8006890:	400b      	ands	r3, r1
 8006892:	492a      	ldr	r1, [pc, #168]	; (800693c <_strtod_l+0x5ac>)
 8006894:	4681      	mov	r9, r0
 8006896:	428b      	cmp	r3, r1
 8006898:	d894      	bhi.n	80067c4 <_strtod_l+0x434>
 800689a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800689e:	428b      	cmp	r3, r1
 80068a0:	bf86      	itte	hi
 80068a2:	f04f 39ff 	movhi.w	r9, #4294967295
 80068a6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8006944 <_strtod_l+0x5b4>
 80068aa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80068ae:	2300      	movs	r3, #0
 80068b0:	9305      	str	r3, [sp, #20]
 80068b2:	e07b      	b.n	80069ac <_strtod_l+0x61c>
 80068b4:	f018 0f01 	tst.w	r8, #1
 80068b8:	d006      	beq.n	80068c8 <_strtod_l+0x538>
 80068ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	2301      	movs	r3, #1
 80068c8:	3501      	adds	r5, #1
 80068ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068ce:	e7cc      	b.n	800686a <_strtod_l+0x4da>
 80068d0:	d0ed      	beq.n	80068ae <_strtod_l+0x51e>
 80068d2:	f1c8 0800 	rsb	r8, r8, #0
 80068d6:	f018 020f 	ands.w	r2, r8, #15
 80068da:	d00a      	beq.n	80068f2 <_strtod_l+0x562>
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <_strtod_l+0x5a0>)
 80068de:	4648      	mov	r0, r9
 80068e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068e4:	4651      	mov	r1, sl
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 ff1f 	bl	800072c <__aeabi_ddiv>
 80068ee:	4681      	mov	r9, r0
 80068f0:	468a      	mov	sl, r1
 80068f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80068f6:	d0da      	beq.n	80068ae <_strtod_l+0x51e>
 80068f8:	f1b8 0f1f 	cmp.w	r8, #31
 80068fc:	dd24      	ble.n	8006948 <_strtod_l+0x5b8>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	f8cd 8010 	str.w	r8, [sp, #16]
 8006906:	f8cd 8020 	str.w	r8, [sp, #32]
 800690a:	f8cd 8018 	str.w	r8, [sp, #24]
 800690e:	2322      	movs	r3, #34	; 0x22
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	f04f 0a00 	mov.w	sl, #0
 8006918:	f8cb 3000 	str.w	r3, [fp]
 800691c:	e761      	b.n	80067e2 <_strtod_l+0x452>
 800691e:	bf00      	nop
 8006920:	08009ab5 	.word	0x08009ab5
 8006924:	08009b43 	.word	0x08009b43
 8006928:	08009abd 	.word	0x08009abd
 800692c:	08009b00 	.word	0x08009b00
 8006930:	08009be8 	.word	0x08009be8
 8006934:	08009bc0 	.word	0x08009bc0
 8006938:	7ff00000 	.word	0x7ff00000
 800693c:	7ca00000 	.word	0x7ca00000
 8006940:	fff80000 	.word	0xfff80000
 8006944:	7fefffff 	.word	0x7fefffff
 8006948:	f018 0310 	ands.w	r3, r8, #16
 800694c:	bf18      	it	ne
 800694e:	236a      	movne	r3, #106	; 0x6a
 8006950:	4648      	mov	r0, r9
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	4651      	mov	r1, sl
 8006956:	2300      	movs	r3, #0
 8006958:	4da1      	ldr	r5, [pc, #644]	; (8006be0 <_strtod_l+0x850>)
 800695a:	f1b8 0f00 	cmp.w	r8, #0
 800695e:	f300 8113 	bgt.w	8006b88 <_strtod_l+0x7f8>
 8006962:	b10b      	cbz	r3, 8006968 <_strtod_l+0x5d8>
 8006964:	4681      	mov	r9, r0
 8006966:	468a      	mov	sl, r1
 8006968:	9b05      	ldr	r3, [sp, #20]
 800696a:	b1bb      	cbz	r3, 800699c <_strtod_l+0x60c>
 800696c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006974:	2b00      	cmp	r3, #0
 8006976:	4651      	mov	r1, sl
 8006978:	dd10      	ble.n	800699c <_strtod_l+0x60c>
 800697a:	2b1f      	cmp	r3, #31
 800697c:	f340 8110 	ble.w	8006ba0 <_strtod_l+0x810>
 8006980:	2b34      	cmp	r3, #52	; 0x34
 8006982:	bfd8      	it	le
 8006984:	f04f 32ff 	movle.w	r2, #4294967295
 8006988:	f04f 0900 	mov.w	r9, #0
 800698c:	bfcf      	iteee	gt
 800698e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8006992:	3b20      	suble	r3, #32
 8006994:	fa02 f303 	lslle.w	r3, r2, r3
 8006998:	ea03 0a01 	andle.w	sl, r3, r1
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	4648      	mov	r0, r9
 80069a2:	4651      	mov	r1, sl
 80069a4:	f7fa f800 	bl	80009a8 <__aeabi_dcmpeq>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1a8      	bne.n	80068fe <_strtod_l+0x56e>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	9908      	ldr	r1, [sp, #32]
 80069b4:	4623      	mov	r3, r4
 80069b6:	4658      	mov	r0, fp
 80069b8:	f002 f852 	bl	8008a60 <__s2b>
 80069bc:	9008      	str	r0, [sp, #32]
 80069be:	2800      	cmp	r0, #0
 80069c0:	f43f af00 	beq.w	80067c4 <_strtod_l+0x434>
 80069c4:	9a07      	ldr	r2, [sp, #28]
 80069c6:	9b07      	ldr	r3, [sp, #28]
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	f1c3 0300 	rsb	r3, r3, #0
 80069ce:	bfa8      	it	ge
 80069d0:	2300      	movge	r3, #0
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	930e      	str	r3, [sp, #56]	; 0x38
 80069d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069dc:	9316      	str	r3, [sp, #88]	; 0x58
 80069de:	f8cd 8010 	str.w	r8, [sp, #16]
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	4658      	mov	r0, fp
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	f001 ffb4 	bl	8008954 <_Balloc>
 80069ec:	9006      	str	r0, [sp, #24]
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f43f aef0 	beq.w	80067d4 <_strtod_l+0x444>
 80069f4:	9b08      	ldr	r3, [sp, #32]
 80069f6:	300c      	adds	r0, #12
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	f103 010c 	add.w	r1, r3, #12
 80069fe:	3202      	adds	r2, #2
 8006a00:	0092      	lsls	r2, r2, #2
 8006a02:	f7fe fe25 	bl	8005650 <memcpy>
 8006a06:	ab1e      	add	r3, sp, #120	; 0x78
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	464a      	mov	r2, r9
 8006a10:	4653      	mov	r3, sl
 8006a12:	4658      	mov	r0, fp
 8006a14:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006a18:	f002 fadc 	bl	8008fd4 <__d2b>
 8006a1c:	901c      	str	r0, [sp, #112]	; 0x70
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f43f aed8 	beq.w	80067d4 <_strtod_l+0x444>
 8006a24:	2101      	movs	r1, #1
 8006a26:	4658      	mov	r0, fp
 8006a28:	f002 f8a6 	bl	8008b78 <__i2b>
 8006a2c:	9004      	str	r0, [sp, #16]
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f43f aecf 	beq.w	80067d4 <_strtod_l+0x444>
 8006a36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006a38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	bfab      	itete	ge
 8006a3e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006a40:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006a42:	18ee      	addge	r6, r5, r3
 8006a44:	1b5c      	sublt	r4, r3, r5
 8006a46:	9b05      	ldr	r3, [sp, #20]
 8006a48:	bfa8      	it	ge
 8006a4a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006a4c:	eba5 0503 	sub.w	r5, r5, r3
 8006a50:	4415      	add	r5, r2
 8006a52:	4b64      	ldr	r3, [pc, #400]	; (8006be4 <_strtod_l+0x854>)
 8006a54:	f105 35ff 	add.w	r5, r5, #4294967295
 8006a58:	bfb8      	it	lt
 8006a5a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006a5c:	429d      	cmp	r5, r3
 8006a5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a62:	f280 80af 	bge.w	8006bc4 <_strtod_l+0x834>
 8006a66:	1b5b      	subs	r3, r3, r5
 8006a68:	2b1f      	cmp	r3, #31
 8006a6a:	eba2 0203 	sub.w	r2, r2, r3
 8006a6e:	f04f 0701 	mov.w	r7, #1
 8006a72:	f300 809c 	bgt.w	8006bae <_strtod_l+0x81e>
 8006a76:	2500      	movs	r5, #0
 8006a78:	fa07 f303 	lsl.w	r3, r7, r3
 8006a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a7e:	18b7      	adds	r7, r6, r2
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	42be      	cmp	r6, r7
 8006a84:	4414      	add	r4, r2
 8006a86:	441c      	add	r4, r3
 8006a88:	4633      	mov	r3, r6
 8006a8a:	bfa8      	it	ge
 8006a8c:	463b      	movge	r3, r7
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	bfa8      	it	ge
 8006a92:	4623      	movge	r3, r4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfc2      	ittt	gt
 8006a98:	1aff      	subgt	r7, r7, r3
 8006a9a:	1ae4      	subgt	r4, r4, r3
 8006a9c:	1af6      	subgt	r6, r6, r3
 8006a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa0:	b1bb      	cbz	r3, 8006ad2 <_strtod_l+0x742>
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	9904      	ldr	r1, [sp, #16]
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f002 f904 	bl	8008cb4 <__pow5mult>
 8006aac:	9004      	str	r0, [sp, #16]
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f43f ae90 	beq.w	80067d4 <_strtod_l+0x444>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ab8:	4658      	mov	r0, fp
 8006aba:	f002 f866 	bl	8008b8a <__multiply>
 8006abe:	9009      	str	r0, [sp, #36]	; 0x24
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f43f ae87 	beq.w	80067d4 <_strtod_l+0x444>
 8006ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f001 ff77 	bl	80089bc <_Bfree>
 8006ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad0:	931c      	str	r3, [sp, #112]	; 0x70
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	dc7a      	bgt.n	8006bcc <_strtod_l+0x83c>
 8006ad6:	9b07      	ldr	r3, [sp, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dd08      	ble.n	8006aee <_strtod_l+0x75e>
 8006adc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ade:	9906      	ldr	r1, [sp, #24]
 8006ae0:	4658      	mov	r0, fp
 8006ae2:	f002 f8e7 	bl	8008cb4 <__pow5mult>
 8006ae6:	9006      	str	r0, [sp, #24]
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f43f ae73 	beq.w	80067d4 <_strtod_l+0x444>
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	dd08      	ble.n	8006b04 <_strtod_l+0x774>
 8006af2:	4622      	mov	r2, r4
 8006af4:	9906      	ldr	r1, [sp, #24]
 8006af6:	4658      	mov	r0, fp
 8006af8:	f002 f92a 	bl	8008d50 <__lshift>
 8006afc:	9006      	str	r0, [sp, #24]
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f43f ae68 	beq.w	80067d4 <_strtod_l+0x444>
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	dd08      	ble.n	8006b1a <_strtod_l+0x78a>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	9904      	ldr	r1, [sp, #16]
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	f002 f91f 	bl	8008d50 <__lshift>
 8006b12:	9004      	str	r0, [sp, #16]
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f43f ae5d 	beq.w	80067d4 <_strtod_l+0x444>
 8006b1a:	9a06      	ldr	r2, [sp, #24]
 8006b1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b1e:	4658      	mov	r0, fp
 8006b20:	f002 f984 	bl	8008e2c <__mdiff>
 8006b24:	4680      	mov	r8, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f ae54 	beq.w	80067d4 <_strtod_l+0x444>
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	68c3      	ldr	r3, [r0, #12]
 8006b30:	9904      	ldr	r1, [sp, #16]
 8006b32:	60c4      	str	r4, [r0, #12]
 8006b34:	930c      	str	r3, [sp, #48]	; 0x30
 8006b36:	f002 f95f 	bl	8008df8 <__mcmp>
 8006b3a:	42a0      	cmp	r0, r4
 8006b3c:	da54      	bge.n	8006be8 <_strtod_l+0x858>
 8006b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b40:	b9f3      	cbnz	r3, 8006b80 <_strtod_l+0x7f0>
 8006b42:	f1b9 0f00 	cmp.w	r9, #0
 8006b46:	d11b      	bne.n	8006b80 <_strtod_l+0x7f0>
 8006b48:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006b4c:	b9c3      	cbnz	r3, 8006b80 <_strtod_l+0x7f0>
 8006b4e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b52:	0d1b      	lsrs	r3, r3, #20
 8006b54:	051b      	lsls	r3, r3, #20
 8006b56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b5a:	d911      	bls.n	8006b80 <_strtod_l+0x7f0>
 8006b5c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006b60:	b91b      	cbnz	r3, 8006b6a <_strtod_l+0x7da>
 8006b62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	dd0a      	ble.n	8006b80 <_strtod_l+0x7f0>
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f002 f8ee 	bl	8008d50 <__lshift>
 8006b74:	9904      	ldr	r1, [sp, #16]
 8006b76:	4680      	mov	r8, r0
 8006b78:	f002 f93e 	bl	8008df8 <__mcmp>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	dc68      	bgt.n	8006c52 <_strtod_l+0x8c2>
 8006b80:	9b05      	ldr	r3, [sp, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d172      	bne.n	8006c6c <_strtod_l+0x8dc>
 8006b86:	e630      	b.n	80067ea <_strtod_l+0x45a>
 8006b88:	f018 0f01 	tst.w	r8, #1
 8006b8c:	d004      	beq.n	8006b98 <_strtod_l+0x808>
 8006b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b92:	f7f9 fca1 	bl	80004d8 <__aeabi_dmul>
 8006b96:	2301      	movs	r3, #1
 8006b98:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b9c:	3508      	adds	r5, #8
 8006b9e:	e6dc      	b.n	800695a <_strtod_l+0x5ca>
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	ea03 0909 	and.w	r9, r3, r9
 8006bac:	e6f6      	b.n	800699c <_strtod_l+0x60c>
 8006bae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006bb2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006bb6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006bba:	35e2      	adds	r5, #226	; 0xe2
 8006bbc:	fa07 f505 	lsl.w	r5, r7, r5
 8006bc0:	970f      	str	r7, [sp, #60]	; 0x3c
 8006bc2:	e75c      	b.n	8006a7e <_strtod_l+0x6ee>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bca:	e758      	b.n	8006a7e <_strtod_l+0x6ee>
 8006bcc:	463a      	mov	r2, r7
 8006bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f002 f8bd 	bl	8008d50 <__lshift>
 8006bd6:	901c      	str	r0, [sp, #112]	; 0x70
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f47f af7c 	bne.w	8006ad6 <_strtod_l+0x746>
 8006bde:	e5f9      	b.n	80067d4 <_strtod_l+0x444>
 8006be0:	08009b18 	.word	0x08009b18
 8006be4:	fffffc02 	.word	0xfffffc02
 8006be8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006bec:	f040 8089 	bne.w	8006d02 <_strtod_l+0x972>
 8006bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006bf6:	b342      	cbz	r2, 8006c4a <_strtod_l+0x8ba>
 8006bf8:	4aaf      	ldr	r2, [pc, #700]	; (8006eb8 <_strtod_l+0xb28>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d156      	bne.n	8006cac <_strtod_l+0x91c>
 8006bfe:	9b05      	ldr	r3, [sp, #20]
 8006c00:	4648      	mov	r0, r9
 8006c02:	b1eb      	cbz	r3, 8006c40 <_strtod_l+0x8b0>
 8006c04:	4653      	mov	r3, sl
 8006c06:	4aad      	ldr	r2, [pc, #692]	; (8006ebc <_strtod_l+0xb2c>)
 8006c08:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006c12:	d818      	bhi.n	8006c46 <_strtod_l+0x8b6>
 8006c14:	0d12      	lsrs	r2, r2, #20
 8006c16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	d144      	bne.n	8006cac <_strtod_l+0x91c>
 8006c22:	4ba7      	ldr	r3, [pc, #668]	; (8006ec0 <_strtod_l+0xb30>)
 8006c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d102      	bne.n	8006c30 <_strtod_l+0x8a0>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f add2 	beq.w	80067d4 <_strtod_l+0x444>
 8006c30:	4ba2      	ldr	r3, [pc, #648]	; (8006ebc <_strtod_l+0xb2c>)
 8006c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c34:	f04f 0900 	mov.w	r9, #0
 8006c38:	401a      	ands	r2, r3
 8006c3a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006c3e:	e79f      	b.n	8006b80 <_strtod_l+0x7f0>
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	e7eb      	b.n	8006c1e <_strtod_l+0x88e>
 8006c46:	460b      	mov	r3, r1
 8006c48:	e7e9      	b.n	8006c1e <_strtod_l+0x88e>
 8006c4a:	bb7b      	cbnz	r3, 8006cac <_strtod_l+0x91c>
 8006c4c:	f1b9 0f00 	cmp.w	r9, #0
 8006c50:	d12c      	bne.n	8006cac <_strtod_l+0x91c>
 8006c52:	9905      	ldr	r1, [sp, #20]
 8006c54:	4653      	mov	r3, sl
 8006c56:	4a99      	ldr	r2, [pc, #612]	; (8006ebc <_strtod_l+0xb2c>)
 8006c58:	b1f1      	cbz	r1, 8006c98 <_strtod_l+0x908>
 8006c5a:	ea02 010a 	and.w	r1, r2, sl
 8006c5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c62:	dc19      	bgt.n	8006c98 <_strtod_l+0x908>
 8006c64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c68:	f77f ae51 	ble.w	800690e <_strtod_l+0x57e>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4a95      	ldr	r2, [pc, #596]	; (8006ec4 <_strtod_l+0xb34>)
 8006c70:	4648      	mov	r0, r9
 8006c72:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006c76:	4651      	mov	r1, sl
 8006c78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	4681      	mov	r9, r0
 8006c82:	468a      	mov	sl, r1
 8006c84:	2900      	cmp	r1, #0
 8006c86:	f47f adb0 	bne.w	80067ea <_strtod_l+0x45a>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f adad 	bne.w	80067ea <_strtod_l+0x45a>
 8006c90:	2322      	movs	r3, #34	; 0x22
 8006c92:	f8cb 3000 	str.w	r3, [fp]
 8006c96:	e5a8      	b.n	80067ea <_strtod_l+0x45a>
 8006c98:	4013      	ands	r3, r2
 8006c9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c9e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006ca2:	f04f 39ff 	mov.w	r9, #4294967295
 8006ca6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006caa:	e769      	b.n	8006b80 <_strtod_l+0x7f0>
 8006cac:	b19d      	cbz	r5, 8006cd6 <_strtod_l+0x946>
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	421d      	tst	r5, r3
 8006cb2:	f43f af65 	beq.w	8006b80 <_strtod_l+0x7f0>
 8006cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb8:	9a05      	ldr	r2, [sp, #20]
 8006cba:	4648      	mov	r0, r9
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	b173      	cbz	r3, 8006cde <_strtod_l+0x94e>
 8006cc0:	f7ff fb44 	bl	800634c <sulp>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ccc:	f7f9 fa4e 	bl	800016c <__adddf3>
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	468a      	mov	sl, r1
 8006cd4:	e754      	b.n	8006b80 <_strtod_l+0x7f0>
 8006cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cd8:	ea13 0f09 	tst.w	r3, r9
 8006cdc:	e7e9      	b.n	8006cb2 <_strtod_l+0x922>
 8006cde:	f7ff fb35 	bl	800634c <sulp>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cea:	f7f9 fa3d 	bl	8000168 <__aeabi_dsub>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4681      	mov	r9, r0
 8006cf4:	468a      	mov	sl, r1
 8006cf6:	f7f9 fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f47f ae07 	bne.w	800690e <_strtod_l+0x57e>
 8006d00:	e73e      	b.n	8006b80 <_strtod_l+0x7f0>
 8006d02:	9904      	ldr	r1, [sp, #16]
 8006d04:	4640      	mov	r0, r8
 8006d06:	f002 f9b4 	bl	8009072 <__ratio>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	f7f9 fe5c 	bl	80009d0 <__aeabi_dcmple>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d075      	beq.n	8006e08 <_strtod_l+0xa78>
 8006d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d047      	beq.n	8006db2 <_strtod_l+0xa22>
 8006d22:	2600      	movs	r6, #0
 8006d24:	4f68      	ldr	r7, [pc, #416]	; (8006ec8 <_strtod_l+0xb38>)
 8006d26:	4d68      	ldr	r5, [pc, #416]	; (8006ec8 <_strtod_l+0xb38>)
 8006d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	0d1b      	lsrs	r3, r3, #20
 8006d30:	051b      	lsls	r3, r3, #20
 8006d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d36:	4b65      	ldr	r3, [pc, #404]	; (8006ecc <_strtod_l+0xb3c>)
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f040 80cf 	bne.w	8006edc <_strtod_l+0xb4c>
 8006d3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d42:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d48:	4648      	mov	r0, r9
 8006d4a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006d4e:	4651      	mov	r1, sl
 8006d50:	f002 f8ca 	bl	8008ee8 <__ulp>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fbbc 	bl	80004d8 <__aeabi_dmul>
 8006d60:	464a      	mov	r2, r9
 8006d62:	4653      	mov	r3, sl
 8006d64:	f7f9 fa02 	bl	800016c <__adddf3>
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4954      	ldr	r1, [pc, #336]	; (8006ebc <_strtod_l+0xb2c>)
 8006d6c:	4a58      	ldr	r2, [pc, #352]	; (8006ed0 <_strtod_l+0xb40>)
 8006d6e:	4019      	ands	r1, r3
 8006d70:	4291      	cmp	r1, r2
 8006d72:	4681      	mov	r9, r0
 8006d74:	d95e      	bls.n	8006e34 <_strtod_l+0xaa4>
 8006d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <_strtod_l+0x9f8>
 8006d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d82:	3301      	adds	r3, #1
 8006d84:	f43f ad26 	beq.w	80067d4 <_strtod_l+0x444>
 8006d88:	f04f 39ff 	mov.w	r9, #4294967295
 8006d8c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006ec0 <_strtod_l+0xb30>
 8006d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d92:	4658      	mov	r0, fp
 8006d94:	f001 fe12 	bl	80089bc <_Bfree>
 8006d98:	9906      	ldr	r1, [sp, #24]
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f001 fe0e 	bl	80089bc <_Bfree>
 8006da0:	9904      	ldr	r1, [sp, #16]
 8006da2:	4658      	mov	r0, fp
 8006da4:	f001 fe0a 	bl	80089bc <_Bfree>
 8006da8:	4641      	mov	r1, r8
 8006daa:	4658      	mov	r0, fp
 8006dac:	f001 fe06 	bl	80089bc <_Bfree>
 8006db0:	e617      	b.n	80069e2 <_strtod_l+0x652>
 8006db2:	f1b9 0f00 	cmp.w	r9, #0
 8006db6:	d119      	bne.n	8006dec <_strtod_l+0xa5c>
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dbe:	b9e3      	cbnz	r3, 8006dfa <_strtod_l+0xa6a>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4b41      	ldr	r3, [pc, #260]	; (8006ec8 <_strtod_l+0xb38>)
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fdf8 	bl	80009bc <__aeabi_dcmplt>
 8006dcc:	b9c8      	cbnz	r0, 8006e02 <_strtod_l+0xa72>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	4b40      	ldr	r3, [pc, #256]	; (8006ed4 <_strtod_l+0xb44>)
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 fb7f 	bl	80004d8 <__aeabi_dmul>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006de2:	9418      	str	r4, [sp, #96]	; 0x60
 8006de4:	9319      	str	r3, [sp, #100]	; 0x64
 8006de6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006dea:	e79d      	b.n	8006d28 <_strtod_l+0x998>
 8006dec:	f1b9 0f01 	cmp.w	r9, #1
 8006df0:	d103      	bne.n	8006dfa <_strtod_l+0xa6a>
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f43f ad8a 	beq.w	800690e <_strtod_l+0x57e>
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	4f36      	ldr	r7, [pc, #216]	; (8006ed8 <_strtod_l+0xb48>)
 8006dfe:	2400      	movs	r4, #0
 8006e00:	e791      	b.n	8006d26 <_strtod_l+0x996>
 8006e02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006e04:	4d33      	ldr	r5, [pc, #204]	; (8006ed4 <_strtod_l+0xb44>)
 8006e06:	e7ea      	b.n	8006dde <_strtod_l+0xa4e>
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <_strtod_l+0xb44>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e16:	4604      	mov	r4, r0
 8006e18:	460d      	mov	r5, r1
 8006e1a:	b933      	cbnz	r3, 8006e2a <_strtod_l+0xa9a>
 8006e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e20:	9010      	str	r0, [sp, #64]	; 0x40
 8006e22:	9311      	str	r3, [sp, #68]	; 0x44
 8006e24:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e28:	e77e      	b.n	8006d28 <_strtod_l+0x998>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e32:	e7f7      	b.n	8006e24 <_strtod_l+0xa94>
 8006e34:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006e38:	9b05      	ldr	r3, [sp, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1a8      	bne.n	8006d90 <_strtod_l+0xa00>
 8006e3e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e42:	0d1b      	lsrs	r3, r3, #20
 8006e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e46:	051b      	lsls	r3, r3, #20
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	4656      	mov	r6, sl
 8006e4c:	d1a0      	bne.n	8006d90 <_strtod_l+0xa00>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7f9 fdf1 	bl	8000a38 <__aeabi_d2iz>
 8006e56:	f7f9 fad5 	bl	8000404 <__aeabi_i2d>
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7f9 f981 	bl	8000168 <__aeabi_dsub>
 8006e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	b933      	cbnz	r3, 8006e7c <_strtod_l+0xaec>
 8006e6e:	f1b9 0f00 	cmp.w	r9, #0
 8006e72:	d103      	bne.n	8006e7c <_strtod_l+0xaec>
 8006e74:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d06a      	beq.n	8006f52 <_strtod_l+0xbc2>
 8006e7c:	a30a      	add	r3, pc, #40	; (adr r3, 8006ea8 <_strtod_l+0xb18>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 fd99 	bl	80009bc <__aeabi_dcmplt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f47f acad 	bne.w	80067ea <_strtod_l+0x45a>
 8006e90:	a307      	add	r3, pc, #28	; (adr r3, 8006eb0 <_strtod_l+0xb20>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f af76 	beq.w	8006d90 <_strtod_l+0xa00>
 8006ea4:	e4a1      	b.n	80067ea <_strtod_l+0x45a>
 8006ea6:	bf00      	nop
 8006ea8:	94a03595 	.word	0x94a03595
 8006eac:	3fdfffff 	.word	0x3fdfffff
 8006eb0:	35afe535 	.word	0x35afe535
 8006eb4:	3fe00000 	.word	0x3fe00000
 8006eb8:	000fffff 	.word	0x000fffff
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	39500000 	.word	0x39500000
 8006ec8:	3ff00000 	.word	0x3ff00000
 8006ecc:	7fe00000 	.word	0x7fe00000
 8006ed0:	7c9fffff 	.word	0x7c9fffff
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	bff00000 	.word	0xbff00000
 8006edc:	9b05      	ldr	r3, [sp, #20]
 8006ede:	b313      	cbz	r3, 8006f26 <_strtod_l+0xb96>
 8006ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ee2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ee6:	d81e      	bhi.n	8006f26 <_strtod_l+0xb96>
 8006ee8:	a325      	add	r3, pc, #148	; (adr r3, 8006f80 <_strtod_l+0xbf0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fd6d 	bl	80009d0 <__aeabi_dcmple>
 8006ef6:	b190      	cbz	r0, 8006f1e <_strtod_l+0xb8e>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7f9 fdc4 	bl	8000a88 <__aeabi_d2uiz>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	bf08      	it	eq
 8006f04:	2001      	moveq	r0, #1
 8006f06:	f7f9 fa6d 	bl	80003e4 <__aeabi_ui2d>
 8006f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	b9d3      	cbnz	r3, 8006f48 <_strtod_l+0xbb8>
 8006f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f16:	9012      	str	r0, [sp, #72]	; 0x48
 8006f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f1a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006f24:	1a9f      	subs	r7, r3, r2
 8006f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f2a:	f001 ffdd 	bl	8008ee8 <__ulp>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4630      	mov	r0, r6
 8006f34:	4639      	mov	r1, r7
 8006f36:	f7f9 facf 	bl	80004d8 <__aeabi_dmul>
 8006f3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f3e:	f7f9 f915 	bl	800016c <__adddf3>
 8006f42:	4681      	mov	r9, r0
 8006f44:	468a      	mov	sl, r1
 8006f46:	e777      	b.n	8006e38 <_strtod_l+0xaa8>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006f50:	e7e3      	b.n	8006f1a <_strtod_l+0xb8a>
 8006f52:	a30d      	add	r3, pc, #52	; (adr r3, 8006f88 <_strtod_l+0xbf8>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fd30 	bl	80009bc <__aeabi_dcmplt>
 8006f5c:	e79f      	b.n	8006e9e <_strtod_l+0xb0e>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	930d      	str	r3, [sp, #52]	; 0x34
 8006f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	f7ff ba55 	b.w	8006416 <_strtod_l+0x86>
 8006f6c:	2b65      	cmp	r3, #101	; 0x65
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f43f ab42 	beq.w	80065fa <_strtod_l+0x26a>
 8006f76:	2101      	movs	r1, #1
 8006f78:	4614      	mov	r4, r2
 8006f7a:	9105      	str	r1, [sp, #20]
 8006f7c:	f7ff babf 	b.w	80064fe <_strtod_l+0x16e>
 8006f80:	ffc00000 	.word	0xffc00000
 8006f84:	41dfffff 	.word	0x41dfffff
 8006f88:	94a03595 	.word	0x94a03595
 8006f8c:	3fcfffff 	.word	0x3fcfffff

08006f90 <_strtod_r>:
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <_strtod_r+0x18>)
 8006f92:	b410      	push	{r4}
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4c05      	ldr	r4, [pc, #20]	; (8006fac <_strtod_r+0x1c>)
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf08      	it	eq
 8006f9e:	4623      	moveq	r3, r4
 8006fa0:	bc10      	pop	{r4}
 8006fa2:	f7ff b9f5 	b.w	8006390 <_strtod_l>
 8006fa6:	bf00      	nop
 8006fa8:	20000010 	.word	0x20000010
 8006fac:	20000074 	.word	0x20000074

08006fb0 <_strtol_l.isra.0>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4689      	mov	r9, r1
 8006fb8:	4692      	mov	sl, r2
 8006fba:	461e      	mov	r6, r3
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	463d      	mov	r5, r7
 8006fc0:	9808      	ldr	r0, [sp, #32]
 8006fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fc6:	f001 fc25 	bl	8008814 <__locale_ctype_ptr_l>
 8006fca:	4420      	add	r0, r4
 8006fcc:	7843      	ldrb	r3, [r0, #1]
 8006fce:	f013 0308 	ands.w	r3, r3, #8
 8006fd2:	d132      	bne.n	800703a <_strtol_l.isra.0+0x8a>
 8006fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8006fd6:	d132      	bne.n	800703e <_strtol_l.isra.0+0x8e>
 8006fd8:	2201      	movs	r2, #1
 8006fda:	787c      	ldrb	r4, [r7, #1]
 8006fdc:	1cbd      	adds	r5, r7, #2
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d05d      	beq.n	800709e <_strtol_l.isra.0+0xee>
 8006fe2:	2e10      	cmp	r6, #16
 8006fe4:	d109      	bne.n	8006ffa <_strtol_l.isra.0+0x4a>
 8006fe6:	2c30      	cmp	r4, #48	; 0x30
 8006fe8:	d107      	bne.n	8006ffa <_strtol_l.isra.0+0x4a>
 8006fea:	782b      	ldrb	r3, [r5, #0]
 8006fec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ff0:	2b58      	cmp	r3, #88	; 0x58
 8006ff2:	d14f      	bne.n	8007094 <_strtol_l.isra.0+0xe4>
 8006ff4:	2610      	movs	r6, #16
 8006ff6:	786c      	ldrb	r4, [r5, #1]
 8006ff8:	3502      	adds	r5, #2
 8006ffa:	2a00      	cmp	r2, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007002:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007006:	2700      	movs	r7, #0
 8007008:	fbb1 fcf6 	udiv	ip, r1, r6
 800700c:	4638      	mov	r0, r7
 800700e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007012:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007016:	2b09      	cmp	r3, #9
 8007018:	d817      	bhi.n	800704a <_strtol_l.isra.0+0x9a>
 800701a:	461c      	mov	r4, r3
 800701c:	42a6      	cmp	r6, r4
 800701e:	dd23      	ble.n	8007068 <_strtol_l.isra.0+0xb8>
 8007020:	1c7b      	adds	r3, r7, #1
 8007022:	d007      	beq.n	8007034 <_strtol_l.isra.0+0x84>
 8007024:	4584      	cmp	ip, r0
 8007026:	d31c      	bcc.n	8007062 <_strtol_l.isra.0+0xb2>
 8007028:	d101      	bne.n	800702e <_strtol_l.isra.0+0x7e>
 800702a:	45a6      	cmp	lr, r4
 800702c:	db19      	blt.n	8007062 <_strtol_l.isra.0+0xb2>
 800702e:	2701      	movs	r7, #1
 8007030:	fb00 4006 	mla	r0, r0, r6, r4
 8007034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007038:	e7eb      	b.n	8007012 <_strtol_l.isra.0+0x62>
 800703a:	462f      	mov	r7, r5
 800703c:	e7bf      	b.n	8006fbe <_strtol_l.isra.0+0xe>
 800703e:	2c2b      	cmp	r4, #43	; 0x2b
 8007040:	bf04      	itt	eq
 8007042:	1cbd      	addeq	r5, r7, #2
 8007044:	787c      	ldrbeq	r4, [r7, #1]
 8007046:	461a      	mov	r2, r3
 8007048:	e7c9      	b.n	8006fde <_strtol_l.isra.0+0x2e>
 800704a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800704e:	2b19      	cmp	r3, #25
 8007050:	d801      	bhi.n	8007056 <_strtol_l.isra.0+0xa6>
 8007052:	3c37      	subs	r4, #55	; 0x37
 8007054:	e7e2      	b.n	800701c <_strtol_l.isra.0+0x6c>
 8007056:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800705a:	2b19      	cmp	r3, #25
 800705c:	d804      	bhi.n	8007068 <_strtol_l.isra.0+0xb8>
 800705e:	3c57      	subs	r4, #87	; 0x57
 8007060:	e7dc      	b.n	800701c <_strtol_l.isra.0+0x6c>
 8007062:	f04f 37ff 	mov.w	r7, #4294967295
 8007066:	e7e5      	b.n	8007034 <_strtol_l.isra.0+0x84>
 8007068:	1c7b      	adds	r3, r7, #1
 800706a:	d108      	bne.n	800707e <_strtol_l.isra.0+0xce>
 800706c:	2322      	movs	r3, #34	; 0x22
 800706e:	4608      	mov	r0, r1
 8007070:	f8c8 3000 	str.w	r3, [r8]
 8007074:	f1ba 0f00 	cmp.w	sl, #0
 8007078:	d107      	bne.n	800708a <_strtol_l.isra.0+0xda>
 800707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707e:	b102      	cbz	r2, 8007082 <_strtol_l.isra.0+0xd2>
 8007080:	4240      	negs	r0, r0
 8007082:	f1ba 0f00 	cmp.w	sl, #0
 8007086:	d0f8      	beq.n	800707a <_strtol_l.isra.0+0xca>
 8007088:	b10f      	cbz	r7, 800708e <_strtol_l.isra.0+0xde>
 800708a:	f105 39ff 	add.w	r9, r5, #4294967295
 800708e:	f8ca 9000 	str.w	r9, [sl]
 8007092:	e7f2      	b.n	800707a <_strtol_l.isra.0+0xca>
 8007094:	2430      	movs	r4, #48	; 0x30
 8007096:	2e00      	cmp	r6, #0
 8007098:	d1af      	bne.n	8006ffa <_strtol_l.isra.0+0x4a>
 800709a:	2608      	movs	r6, #8
 800709c:	e7ad      	b.n	8006ffa <_strtol_l.isra.0+0x4a>
 800709e:	2c30      	cmp	r4, #48	; 0x30
 80070a0:	d0a3      	beq.n	8006fea <_strtol_l.isra.0+0x3a>
 80070a2:	260a      	movs	r6, #10
 80070a4:	e7a9      	b.n	8006ffa <_strtol_l.isra.0+0x4a>
	...

080070a8 <_strtol_r>:
 80070a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070aa:	4c06      	ldr	r4, [pc, #24]	; (80070c4 <_strtol_r+0x1c>)
 80070ac:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_strtol_r+0x20>)
 80070ae:	6824      	ldr	r4, [r4, #0]
 80070b0:	6a24      	ldr	r4, [r4, #32]
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	bf08      	it	eq
 80070b6:	462c      	moveq	r4, r5
 80070b8:	9400      	str	r4, [sp, #0]
 80070ba:	f7ff ff79 	bl	8006fb0 <_strtol_l.isra.0>
 80070be:	b003      	add	sp, #12
 80070c0:	bd30      	pop	{r4, r5, pc}
 80070c2:	bf00      	nop
 80070c4:	20000010 	.word	0x20000010
 80070c8:	20000074 	.word	0x20000074

080070cc <__swbuf_r>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	460e      	mov	r6, r1
 80070d0:	4614      	mov	r4, r2
 80070d2:	4605      	mov	r5, r0
 80070d4:	b118      	cbz	r0, 80070de <__swbuf_r+0x12>
 80070d6:	6983      	ldr	r3, [r0, #24]
 80070d8:	b90b      	cbnz	r3, 80070de <__swbuf_r+0x12>
 80070da:	f000 ffe9 	bl	80080b0 <__sinit>
 80070de:	4b21      	ldr	r3, [pc, #132]	; (8007164 <__swbuf_r+0x98>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d12a      	bne.n	800713a <__swbuf_r+0x6e>
 80070e4:	686c      	ldr	r4, [r5, #4]
 80070e6:	69a3      	ldr	r3, [r4, #24]
 80070e8:	60a3      	str	r3, [r4, #8]
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	071a      	lsls	r2, r3, #28
 80070ee:	d52e      	bpl.n	800714e <__swbuf_r+0x82>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	b363      	cbz	r3, 800714e <__swbuf_r+0x82>
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	b2f6      	uxtb	r6, r6
 80070fa:	1ac0      	subs	r0, r0, r3
 80070fc:	6963      	ldr	r3, [r4, #20]
 80070fe:	4637      	mov	r7, r6
 8007100:	4283      	cmp	r3, r0
 8007102:	dc04      	bgt.n	800710e <__swbuf_r+0x42>
 8007104:	4621      	mov	r1, r4
 8007106:	4628      	mov	r0, r5
 8007108:	f000 ff68 	bl	8007fdc <_fflush_r>
 800710c:	bb28      	cbnz	r0, 800715a <__swbuf_r+0x8e>
 800710e:	68a3      	ldr	r3, [r4, #8]
 8007110:	3001      	adds	r0, #1
 8007112:	3b01      	subs	r3, #1
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	701e      	strb	r6, [r3, #0]
 800711e:	6963      	ldr	r3, [r4, #20]
 8007120:	4283      	cmp	r3, r0
 8007122:	d004      	beq.n	800712e <__swbuf_r+0x62>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	07db      	lsls	r3, r3, #31
 8007128:	d519      	bpl.n	800715e <__swbuf_r+0x92>
 800712a:	2e0a      	cmp	r6, #10
 800712c:	d117      	bne.n	800715e <__swbuf_r+0x92>
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 ff53 	bl	8007fdc <_fflush_r>
 8007136:	b190      	cbz	r0, 800715e <__swbuf_r+0x92>
 8007138:	e00f      	b.n	800715a <__swbuf_r+0x8e>
 800713a:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <__swbuf_r+0x9c>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d101      	bne.n	8007144 <__swbuf_r+0x78>
 8007140:	68ac      	ldr	r4, [r5, #8]
 8007142:	e7d0      	b.n	80070e6 <__swbuf_r+0x1a>
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <__swbuf_r+0xa0>)
 8007146:	429c      	cmp	r4, r3
 8007148:	bf08      	it	eq
 800714a:	68ec      	ldreq	r4, [r5, #12]
 800714c:	e7cb      	b.n	80070e6 <__swbuf_r+0x1a>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f80d 	bl	8007170 <__swsetup_r>
 8007156:	2800      	cmp	r0, #0
 8007158:	d0cc      	beq.n	80070f4 <__swbuf_r+0x28>
 800715a:	f04f 37ff 	mov.w	r7, #4294967295
 800715e:	4638      	mov	r0, r7
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007162:	bf00      	nop
 8007164:	08009b70 	.word	0x08009b70
 8007168:	08009b90 	.word	0x08009b90
 800716c:	08009b50 	.word	0x08009b50

08007170 <__swsetup_r>:
 8007170:	4b32      	ldr	r3, [pc, #200]	; (800723c <__swsetup_r+0xcc>)
 8007172:	b570      	push	{r4, r5, r6, lr}
 8007174:	681d      	ldr	r5, [r3, #0]
 8007176:	4606      	mov	r6, r0
 8007178:	460c      	mov	r4, r1
 800717a:	b125      	cbz	r5, 8007186 <__swsetup_r+0x16>
 800717c:	69ab      	ldr	r3, [r5, #24]
 800717e:	b913      	cbnz	r3, 8007186 <__swsetup_r+0x16>
 8007180:	4628      	mov	r0, r5
 8007182:	f000 ff95 	bl	80080b0 <__sinit>
 8007186:	4b2e      	ldr	r3, [pc, #184]	; (8007240 <__swsetup_r+0xd0>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d10f      	bne.n	80071ac <__swsetup_r+0x3c>
 800718c:	686c      	ldr	r4, [r5, #4]
 800718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007192:	b29a      	uxth	r2, r3
 8007194:	0715      	lsls	r5, r2, #28
 8007196:	d42c      	bmi.n	80071f2 <__swsetup_r+0x82>
 8007198:	06d0      	lsls	r0, r2, #27
 800719a:	d411      	bmi.n	80071c0 <__swsetup_r+0x50>
 800719c:	2209      	movs	r2, #9
 800719e:	6032      	str	r2, [r6, #0]
 80071a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	e03e      	b.n	800722a <__swsetup_r+0xba>
 80071ac:	4b25      	ldr	r3, [pc, #148]	; (8007244 <__swsetup_r+0xd4>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d101      	bne.n	80071b6 <__swsetup_r+0x46>
 80071b2:	68ac      	ldr	r4, [r5, #8]
 80071b4:	e7eb      	b.n	800718e <__swsetup_r+0x1e>
 80071b6:	4b24      	ldr	r3, [pc, #144]	; (8007248 <__swsetup_r+0xd8>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	bf08      	it	eq
 80071bc:	68ec      	ldreq	r4, [r5, #12]
 80071be:	e7e6      	b.n	800718e <__swsetup_r+0x1e>
 80071c0:	0751      	lsls	r1, r2, #29
 80071c2:	d512      	bpl.n	80071ea <__swsetup_r+0x7a>
 80071c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c6:	b141      	cbz	r1, 80071da <__swsetup_r+0x6a>
 80071c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d002      	beq.n	80071d6 <__swsetup_r+0x66>
 80071d0:	4630      	mov	r0, r6
 80071d2:	f001 ffc5 	bl	8009160 <_free_r>
 80071d6:	2300      	movs	r3, #0
 80071d8:	6363      	str	r3, [r4, #52]	; 0x34
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f043 0308 	orr.w	r3, r3, #8
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	b94b      	cbnz	r3, 800720a <__swsetup_r+0x9a>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007200:	d003      	beq.n	800720a <__swsetup_r+0x9a>
 8007202:	4621      	mov	r1, r4
 8007204:	4630      	mov	r0, r6
 8007206:	f001 fb3d 	bl	8008884 <__smakebuf_r>
 800720a:	89a2      	ldrh	r2, [r4, #12]
 800720c:	f012 0301 	ands.w	r3, r2, #1
 8007210:	d00c      	beq.n	800722c <__swsetup_r+0xbc>
 8007212:	2300      	movs	r3, #0
 8007214:	60a3      	str	r3, [r4, #8]
 8007216:	6963      	ldr	r3, [r4, #20]
 8007218:	425b      	negs	r3, r3
 800721a:	61a3      	str	r3, [r4, #24]
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	b953      	cbnz	r3, 8007236 <__swsetup_r+0xc6>
 8007220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007224:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007228:	d1ba      	bne.n	80071a0 <__swsetup_r+0x30>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	0792      	lsls	r2, r2, #30
 800722e:	bf58      	it	pl
 8007230:	6963      	ldrpl	r3, [r4, #20]
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	e7f2      	b.n	800721c <__swsetup_r+0xac>
 8007236:	2000      	movs	r0, #0
 8007238:	e7f7      	b.n	800722a <__swsetup_r+0xba>
 800723a:	bf00      	nop
 800723c:	20000010 	.word	0x20000010
 8007240:	08009b70 	.word	0x08009b70
 8007244:	08009b90 	.word	0x08009b90
 8007248:	08009b50 	.word	0x08009b50

0800724c <quorem>:
 800724c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	6903      	ldr	r3, [r0, #16]
 8007252:	690c      	ldr	r4, [r1, #16]
 8007254:	4680      	mov	r8, r0
 8007256:	42a3      	cmp	r3, r4
 8007258:	f2c0 8084 	blt.w	8007364 <quorem+0x118>
 800725c:	3c01      	subs	r4, #1
 800725e:	f101 0714 	add.w	r7, r1, #20
 8007262:	f100 0614 	add.w	r6, r0, #20
 8007266:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800726a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800726e:	3501      	adds	r5, #1
 8007270:	fbb0 f5f5 	udiv	r5, r0, r5
 8007274:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007278:	eb06 030c 	add.w	r3, r6, ip
 800727c:	eb07 090c 	add.w	r9, r7, ip
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	b39d      	cbz	r5, 80072ec <quorem+0xa0>
 8007284:	f04f 0a00 	mov.w	sl, #0
 8007288:	4638      	mov	r0, r7
 800728a:	46b6      	mov	lr, r6
 800728c:	46d3      	mov	fp, sl
 800728e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007292:	b293      	uxth	r3, r2
 8007294:	fb05 a303 	mla	r3, r5, r3, sl
 8007298:	0c12      	lsrs	r2, r2, #16
 800729a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800729e:	fb05 a202 	mla	r2, r5, r2, sl
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ebab 0303 	sub.w	r3, fp, r3
 80072a8:	f8de b000 	ldr.w	fp, [lr]
 80072ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072b0:	fa1f fb8b 	uxth.w	fp, fp
 80072b4:	445b      	add	r3, fp
 80072b6:	fa1f fb82 	uxth.w	fp, r2
 80072ba:	f8de 2000 	ldr.w	r2, [lr]
 80072be:	4581      	cmp	r9, r0
 80072c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072d2:	f84e 3b04 	str.w	r3, [lr], #4
 80072d6:	d2da      	bcs.n	800728e <quorem+0x42>
 80072d8:	f856 300c 	ldr.w	r3, [r6, ip]
 80072dc:	b933      	cbnz	r3, 80072ec <quorem+0xa0>
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	3b04      	subs	r3, #4
 80072e2:	429e      	cmp	r6, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	d331      	bcc.n	800734c <quorem+0x100>
 80072e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80072ec:	4640      	mov	r0, r8
 80072ee:	f001 fd83 	bl	8008df8 <__mcmp>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	db26      	blt.n	8007344 <quorem+0xf8>
 80072f6:	4630      	mov	r0, r6
 80072f8:	f04f 0c00 	mov.w	ip, #0
 80072fc:	3501      	adds	r5, #1
 80072fe:	f857 1b04 	ldr.w	r1, [r7], #4
 8007302:	f8d0 e000 	ldr.w	lr, [r0]
 8007306:	b28b      	uxth	r3, r1
 8007308:	ebac 0303 	sub.w	r3, ip, r3
 800730c:	fa1f f28e 	uxth.w	r2, lr
 8007310:	4413      	add	r3, r2
 8007312:	0c0a      	lsrs	r2, r1, #16
 8007314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007322:	45b9      	cmp	r9, r7
 8007324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007328:	f840 3b04 	str.w	r3, [r0], #4
 800732c:	d2e7      	bcs.n	80072fe <quorem+0xb2>
 800732e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007332:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007336:	b92a      	cbnz	r2, 8007344 <quorem+0xf8>
 8007338:	3b04      	subs	r3, #4
 800733a:	429e      	cmp	r6, r3
 800733c:	461a      	mov	r2, r3
 800733e:	d30b      	bcc.n	8007358 <quorem+0x10c>
 8007340:	f8c8 4010 	str.w	r4, [r8, #16]
 8007344:	4628      	mov	r0, r5
 8007346:	b003      	add	sp, #12
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	3b04      	subs	r3, #4
 8007350:	2a00      	cmp	r2, #0
 8007352:	d1c9      	bne.n	80072e8 <quorem+0x9c>
 8007354:	3c01      	subs	r4, #1
 8007356:	e7c4      	b.n	80072e2 <quorem+0x96>
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	3b04      	subs	r3, #4
 800735c:	2a00      	cmp	r2, #0
 800735e:	d1ef      	bne.n	8007340 <quorem+0xf4>
 8007360:	3c01      	subs	r4, #1
 8007362:	e7ea      	b.n	800733a <quorem+0xee>
 8007364:	2000      	movs	r0, #0
 8007366:	e7ee      	b.n	8007346 <quorem+0xfa>

08007368 <_dtoa_r>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	4616      	mov	r6, r2
 800736e:	461f      	mov	r7, r3
 8007370:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007372:	b095      	sub	sp, #84	; 0x54
 8007374:	4604      	mov	r4, r0
 8007376:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800737a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800737e:	b93d      	cbnz	r5, 8007390 <_dtoa_r+0x28>
 8007380:	2010      	movs	r0, #16
 8007382:	f001 fabf 	bl	8008904 <malloc>
 8007386:	6260      	str	r0, [r4, #36]	; 0x24
 8007388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800738c:	6005      	str	r5, [r0, #0]
 800738e:	60c5      	str	r5, [r0, #12]
 8007390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	b151      	cbz	r1, 80073ac <_dtoa_r+0x44>
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	2301      	movs	r3, #1
 800739a:	4093      	lsls	r3, r2
 800739c:	604a      	str	r2, [r1, #4]
 800739e:	608b      	str	r3, [r1, #8]
 80073a0:	4620      	mov	r0, r4
 80073a2:	f001 fb0b 	bl	80089bc <_Bfree>
 80073a6:	2200      	movs	r2, #0
 80073a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	1e3b      	subs	r3, r7, #0
 80073ae:	bfaf      	iteee	ge
 80073b0:	2300      	movge	r3, #0
 80073b2:	2201      	movlt	r2, #1
 80073b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	9303      	strlt	r3, [sp, #12]
 80073ba:	bfac      	ite	ge
 80073bc:	f8c8 3000 	strge.w	r3, [r8]
 80073c0:	f8c8 2000 	strlt.w	r2, [r8]
 80073c4:	4bae      	ldr	r3, [pc, #696]	; (8007680 <_dtoa_r+0x318>)
 80073c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073ca:	ea33 0308 	bics.w	r3, r3, r8
 80073ce:	d11b      	bne.n	8007408 <_dtoa_r+0xa0>
 80073d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80073d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	9b02      	ldr	r3, [sp, #8]
 80073da:	b923      	cbnz	r3, 80073e6 <_dtoa_r+0x7e>
 80073dc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f000 8545 	beq.w	8007e70 <_dtoa_r+0xb08>
 80073e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e8:	b953      	cbnz	r3, 8007400 <_dtoa_r+0x98>
 80073ea:	4ba6      	ldr	r3, [pc, #664]	; (8007684 <_dtoa_r+0x31c>)
 80073ec:	e021      	b.n	8007432 <_dtoa_r+0xca>
 80073ee:	4ba6      	ldr	r3, [pc, #664]	; (8007688 <_dtoa_r+0x320>)
 80073f0:	9306      	str	r3, [sp, #24]
 80073f2:	3308      	adds	r3, #8
 80073f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	9806      	ldr	r0, [sp, #24]
 80073fa:	b015      	add	sp, #84	; 0x54
 80073fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007400:	4ba0      	ldr	r3, [pc, #640]	; (8007684 <_dtoa_r+0x31c>)
 8007402:	9306      	str	r3, [sp, #24]
 8007404:	3303      	adds	r3, #3
 8007406:	e7f5      	b.n	80073f4 <_dtoa_r+0x8c>
 8007408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8007418:	4682      	mov	sl, r0
 800741a:	b160      	cbz	r0, 8007436 <_dtoa_r+0xce>
 800741c:	2301      	movs	r3, #1
 800741e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8520 	beq.w	8007e6a <_dtoa_r+0xb02>
 800742a:	4b98      	ldr	r3, [pc, #608]	; (800768c <_dtoa_r+0x324>)
 800742c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	3b01      	subs	r3, #1
 8007432:	9306      	str	r3, [sp, #24]
 8007434:	e7e0      	b.n	80073f8 <_dtoa_r+0x90>
 8007436:	ab12      	add	r3, sp, #72	; 0x48
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	ab13      	add	r3, sp, #76	; 0x4c
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	4632      	mov	r2, r6
 8007440:	463b      	mov	r3, r7
 8007442:	4620      	mov	r0, r4
 8007444:	f001 fdc6 	bl	8008fd4 <__d2b>
 8007448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800744c:	4683      	mov	fp, r0
 800744e:	2d00      	cmp	r5, #0
 8007450:	d07d      	beq.n	800754e <_dtoa_r+0x1e6>
 8007452:	46b0      	mov	r8, r6
 8007454:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007458:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800745c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007460:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007464:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007468:	2200      	movs	r2, #0
 800746a:	4b89      	ldr	r3, [pc, #548]	; (8007690 <_dtoa_r+0x328>)
 800746c:	4640      	mov	r0, r8
 800746e:	4649      	mov	r1, r9
 8007470:	f7f8 fe7a 	bl	8000168 <__aeabi_dsub>
 8007474:	a37c      	add	r3, pc, #496	; (adr r3, 8007668 <_dtoa_r+0x300>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f9 f82d 	bl	80004d8 <__aeabi_dmul>
 800747e:	a37c      	add	r3, pc, #496	; (adr r3, 8007670 <_dtoa_r+0x308>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f8 fe72 	bl	800016c <__adddf3>
 8007488:	4606      	mov	r6, r0
 800748a:	4628      	mov	r0, r5
 800748c:	460f      	mov	r7, r1
 800748e:	f7f8 ffb9 	bl	8000404 <__aeabi_i2d>
 8007492:	a379      	add	r3, pc, #484	; (adr r3, 8007678 <_dtoa_r+0x310>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f8 fe62 	bl	800016c <__adddf3>
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	f7f9 fac4 	bl	8000a38 <__aeabi_d2iz>
 80074b0:	2200      	movs	r2, #0
 80074b2:	4682      	mov	sl, r0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	f7f9 fa7f 	bl	80009bc <__aeabi_dcmplt>
 80074be:	b148      	cbz	r0, 80074d4 <_dtoa_r+0x16c>
 80074c0:	4650      	mov	r0, sl
 80074c2:	f7f8 ff9f 	bl	8000404 <__aeabi_i2d>
 80074c6:	4632      	mov	r2, r6
 80074c8:	463b      	mov	r3, r7
 80074ca:	f7f9 fa6d 	bl	80009a8 <__aeabi_dcmpeq>
 80074ce:	b908      	cbnz	r0, 80074d4 <_dtoa_r+0x16c>
 80074d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074d4:	f1ba 0f16 	cmp.w	sl, #22
 80074d8:	d85a      	bhi.n	8007590 <_dtoa_r+0x228>
 80074da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074de:	496d      	ldr	r1, [pc, #436]	; (8007694 <_dtoa_r+0x32c>)
 80074e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e8:	f7f9 fa86 	bl	80009f8 <__aeabi_dcmpgt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d051      	beq.n	8007594 <_dtoa_r+0x22c>
 80074f0:	2300      	movs	r3, #0
 80074f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f6:	930d      	str	r3, [sp, #52]	; 0x34
 80074f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074fa:	1b5d      	subs	r5, r3, r5
 80074fc:	1e6b      	subs	r3, r5, #1
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	bf43      	ittte	mi
 8007502:	2300      	movmi	r3, #0
 8007504:	f1c5 0901 	rsbmi	r9, r5, #1
 8007508:	9307      	strmi	r3, [sp, #28]
 800750a:	f04f 0900 	movpl.w	r9, #0
 800750e:	f1ba 0f00 	cmp.w	sl, #0
 8007512:	db41      	blt.n	8007598 <_dtoa_r+0x230>
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800751a:	4453      	add	r3, sl
 800751c:	9307      	str	r3, [sp, #28]
 800751e:	2300      	movs	r3, #0
 8007520:	9308      	str	r3, [sp, #32]
 8007522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007524:	2b09      	cmp	r3, #9
 8007526:	f200 808f 	bhi.w	8007648 <_dtoa_r+0x2e0>
 800752a:	2b05      	cmp	r3, #5
 800752c:	bfc4      	itt	gt
 800752e:	3b04      	subgt	r3, #4
 8007530:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007532:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007534:	bfc8      	it	gt
 8007536:	2500      	movgt	r5, #0
 8007538:	f1a3 0302 	sub.w	r3, r3, #2
 800753c:	bfd8      	it	le
 800753e:	2501      	movle	r5, #1
 8007540:	2b03      	cmp	r3, #3
 8007542:	f200 808d 	bhi.w	8007660 <_dtoa_r+0x2f8>
 8007546:	e8df f003 	tbb	[pc, r3]
 800754a:	7d7b      	.short	0x7d7b
 800754c:	6f2f      	.short	0x6f2f
 800754e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007552:	441d      	add	r5, r3
 8007554:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007558:	2820      	cmp	r0, #32
 800755a:	dd13      	ble.n	8007584 <_dtoa_r+0x21c>
 800755c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	fa08 f800 	lsl.w	r8, r8, r0
 8007566:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800756a:	fa23 f000 	lsr.w	r0, r3, r0
 800756e:	ea48 0000 	orr.w	r0, r8, r0
 8007572:	f7f8 ff37 	bl	80003e4 <__aeabi_ui2d>
 8007576:	2301      	movs	r3, #1
 8007578:	4680      	mov	r8, r0
 800757a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800757e:	3d01      	subs	r5, #1
 8007580:	9310      	str	r3, [sp, #64]	; 0x40
 8007582:	e771      	b.n	8007468 <_dtoa_r+0x100>
 8007584:	9b02      	ldr	r3, [sp, #8]
 8007586:	f1c0 0020 	rsb	r0, r0, #32
 800758a:	fa03 f000 	lsl.w	r0, r3, r0
 800758e:	e7f0      	b.n	8007572 <_dtoa_r+0x20a>
 8007590:	2301      	movs	r3, #1
 8007592:	e7b0      	b.n	80074f6 <_dtoa_r+0x18e>
 8007594:	900d      	str	r0, [sp, #52]	; 0x34
 8007596:	e7af      	b.n	80074f8 <_dtoa_r+0x190>
 8007598:	f1ca 0300 	rsb	r3, sl, #0
 800759c:	9308      	str	r3, [sp, #32]
 800759e:	2300      	movs	r3, #0
 80075a0:	eba9 090a 	sub.w	r9, r9, sl
 80075a4:	930c      	str	r3, [sp, #48]	; 0x30
 80075a6:	e7bc      	b.n	8007522 <_dtoa_r+0x1ba>
 80075a8:	2301      	movs	r3, #1
 80075aa:	9309      	str	r3, [sp, #36]	; 0x24
 80075ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd74      	ble.n	800769c <_dtoa_r+0x334>
 80075b2:	4698      	mov	r8, r3
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	2200      	movs	r2, #0
 80075b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075ba:	6072      	str	r2, [r6, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	f102 0014 	add.w	r0, r2, #20
 80075c2:	4298      	cmp	r0, r3
 80075c4:	6871      	ldr	r1, [r6, #4]
 80075c6:	d96e      	bls.n	80076a6 <_dtoa_r+0x33e>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f001 f9c3 	bl	8008954 <_Balloc>
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	6030      	str	r0, [r6, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f1b8 0f0e 	cmp.w	r8, #14
 80075d8:	9306      	str	r3, [sp, #24]
 80075da:	f200 80ed 	bhi.w	80077b8 <_dtoa_r+0x450>
 80075de:	2d00      	cmp	r5, #0
 80075e0:	f000 80ea 	beq.w	80077b8 <_dtoa_r+0x450>
 80075e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e8:	f1ba 0f00 	cmp.w	sl, #0
 80075ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80075f0:	dd77      	ble.n	80076e2 <_dtoa_r+0x37a>
 80075f2:	4a28      	ldr	r2, [pc, #160]	; (8007694 <_dtoa_r+0x32c>)
 80075f4:	f00a 030f 	and.w	r3, sl, #15
 80075f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80075fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007600:	06f0      	lsls	r0, r6, #27
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800760a:	d568      	bpl.n	80076de <_dtoa_r+0x376>
 800760c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007610:	4b21      	ldr	r3, [pc, #132]	; (8007698 <_dtoa_r+0x330>)
 8007612:	2503      	movs	r5, #3
 8007614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007618:	f7f9 f888 	bl	800072c <__aeabi_ddiv>
 800761c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007620:	f006 060f 	and.w	r6, r6, #15
 8007624:	4f1c      	ldr	r7, [pc, #112]	; (8007698 <_dtoa_r+0x330>)
 8007626:	e04f      	b.n	80076c8 <_dtoa_r+0x360>
 8007628:	2301      	movs	r3, #1
 800762a:	9309      	str	r3, [sp, #36]	; 0x24
 800762c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800762e:	4453      	add	r3, sl
 8007630:	f103 0801 	add.w	r8, r3, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	4643      	mov	r3, r8
 8007638:	2b01      	cmp	r3, #1
 800763a:	bfb8      	it	lt
 800763c:	2301      	movlt	r3, #1
 800763e:	e7ba      	b.n	80075b6 <_dtoa_r+0x24e>
 8007640:	2300      	movs	r3, #0
 8007642:	e7b2      	b.n	80075aa <_dtoa_r+0x242>
 8007644:	2300      	movs	r3, #0
 8007646:	e7f0      	b.n	800762a <_dtoa_r+0x2c2>
 8007648:	2501      	movs	r5, #1
 800764a:	2300      	movs	r3, #0
 800764c:	9509      	str	r5, [sp, #36]	; 0x24
 800764e:	931e      	str	r3, [sp, #120]	; 0x78
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	2200      	movs	r2, #0
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	4698      	mov	r8, r3
 800765a:	2312      	movs	r3, #18
 800765c:	921f      	str	r2, [sp, #124]	; 0x7c
 800765e:	e7aa      	b.n	80075b6 <_dtoa_r+0x24e>
 8007660:	2301      	movs	r3, #1
 8007662:	9309      	str	r3, [sp, #36]	; 0x24
 8007664:	e7f4      	b.n	8007650 <_dtoa_r+0x2e8>
 8007666:	bf00      	nop
 8007668:	636f4361 	.word	0x636f4361
 800766c:	3fd287a7 	.word	0x3fd287a7
 8007670:	8b60c8b3 	.word	0x8b60c8b3
 8007674:	3fc68a28 	.word	0x3fc68a28
 8007678:	509f79fb 	.word	0x509f79fb
 800767c:	3fd34413 	.word	0x3fd34413
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	08009b49 	.word	0x08009b49
 8007688:	08009b40 	.word	0x08009b40
 800768c:	08009ac1 	.word	0x08009ac1
 8007690:	3ff80000 	.word	0x3ff80000
 8007694:	08009be8 	.word	0x08009be8
 8007698:	08009bc0 	.word	0x08009bc0
 800769c:	2301      	movs	r3, #1
 800769e:	9304      	str	r3, [sp, #16]
 80076a0:	4698      	mov	r8, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	e7da      	b.n	800765c <_dtoa_r+0x2f4>
 80076a6:	3101      	adds	r1, #1
 80076a8:	6071      	str	r1, [r6, #4]
 80076aa:	0052      	lsls	r2, r2, #1
 80076ac:	e787      	b.n	80075be <_dtoa_r+0x256>
 80076ae:	07f1      	lsls	r1, r6, #31
 80076b0:	d508      	bpl.n	80076c4 <_dtoa_r+0x35c>
 80076b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ba:	f7f8 ff0d 	bl	80004d8 <__aeabi_dmul>
 80076be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076c2:	3501      	adds	r5, #1
 80076c4:	1076      	asrs	r6, r6, #1
 80076c6:	3708      	adds	r7, #8
 80076c8:	2e00      	cmp	r6, #0
 80076ca:	d1f0      	bne.n	80076ae <_dtoa_r+0x346>
 80076cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d4:	f7f9 f82a 	bl	800072c <__aeabi_ddiv>
 80076d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076dc:	e01b      	b.n	8007716 <_dtoa_r+0x3ae>
 80076de:	2502      	movs	r5, #2
 80076e0:	e7a0      	b.n	8007624 <_dtoa_r+0x2bc>
 80076e2:	f000 80a4 	beq.w	800782e <_dtoa_r+0x4c6>
 80076e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80076ea:	f1ca 0600 	rsb	r6, sl, #0
 80076ee:	4ba0      	ldr	r3, [pc, #640]	; (8007970 <_dtoa_r+0x608>)
 80076f0:	f006 020f 	and.w	r2, r6, #15
 80076f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 feec 	bl	80004d8 <__aeabi_dmul>
 8007700:	2502      	movs	r5, #2
 8007702:	2300      	movs	r3, #0
 8007704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007708:	4f9a      	ldr	r7, [pc, #616]	; (8007974 <_dtoa_r+0x60c>)
 800770a:	1136      	asrs	r6, r6, #4
 800770c:	2e00      	cmp	r6, #0
 800770e:	f040 8083 	bne.w	8007818 <_dtoa_r+0x4b0>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e0      	bne.n	80076d8 <_dtoa_r+0x370>
 8007716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 808a 	beq.w	8007832 <_dtoa_r+0x4ca>
 800771e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007722:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800772a:	2200      	movs	r2, #0
 800772c:	4b92      	ldr	r3, [pc, #584]	; (8007978 <_dtoa_r+0x610>)
 800772e:	f7f9 f945 	bl	80009bc <__aeabi_dcmplt>
 8007732:	2800      	cmp	r0, #0
 8007734:	d07d      	beq.n	8007832 <_dtoa_r+0x4ca>
 8007736:	f1b8 0f00 	cmp.w	r8, #0
 800773a:	d07a      	beq.n	8007832 <_dtoa_r+0x4ca>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dd36      	ble.n	80077b0 <_dtoa_r+0x448>
 8007742:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007746:	2200      	movs	r2, #0
 8007748:	4b8c      	ldr	r3, [pc, #560]	; (800797c <_dtoa_r+0x614>)
 800774a:	f7f8 fec5 	bl	80004d8 <__aeabi_dmul>
 800774e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007752:	9e04      	ldr	r6, [sp, #16]
 8007754:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007758:	3501      	adds	r5, #1
 800775a:	4628      	mov	r0, r5
 800775c:	f7f8 fe52 	bl	8000404 <__aeabi_i2d>
 8007760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007764:	f7f8 feb8 	bl	80004d8 <__aeabi_dmul>
 8007768:	2200      	movs	r2, #0
 800776a:	4b85      	ldr	r3, [pc, #532]	; (8007980 <_dtoa_r+0x618>)
 800776c:	f7f8 fcfe 	bl	800016c <__adddf3>
 8007770:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007778:	950b      	str	r5, [sp, #44]	; 0x2c
 800777a:	2e00      	cmp	r6, #0
 800777c:	d15c      	bne.n	8007838 <_dtoa_r+0x4d0>
 800777e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	4b7f      	ldr	r3, [pc, #508]	; (8007984 <_dtoa_r+0x61c>)
 8007786:	f7f8 fcef 	bl	8000168 <__aeabi_dsub>
 800778a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800778c:	462b      	mov	r3, r5
 800778e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007792:	f7f9 f931 	bl	80009f8 <__aeabi_dcmpgt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f040 8281 	bne.w	8007c9e <_dtoa_r+0x936>
 800779c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077a6:	f7f9 f909 	bl	80009bc <__aeabi_dcmplt>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f040 8275 	bne.w	8007c9a <_dtoa_r+0x932>
 80077b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f2c0 814b 	blt.w	8007a56 <_dtoa_r+0x6ee>
 80077c0:	f1ba 0f0e 	cmp.w	sl, #14
 80077c4:	f300 8147 	bgt.w	8007a56 <_dtoa_r+0x6ee>
 80077c8:	4b69      	ldr	r3, [pc, #420]	; (8007970 <_dtoa_r+0x608>)
 80077ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f280 80d7 	bge.w	800798c <_dtoa_r+0x624>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	f300 80d3 	bgt.w	800798c <_dtoa_r+0x624>
 80077e6:	f040 8257 	bne.w	8007c98 <_dtoa_r+0x930>
 80077ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ee:	2200      	movs	r2, #0
 80077f0:	4b64      	ldr	r3, [pc, #400]	; (8007984 <_dtoa_r+0x61c>)
 80077f2:	f7f8 fe71 	bl	80004d8 <__aeabi_dmul>
 80077f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077fa:	f7f9 f8f3 	bl	80009e4 <__aeabi_dcmpge>
 80077fe:	4646      	mov	r6, r8
 8007800:	4647      	mov	r7, r8
 8007802:	2800      	cmp	r0, #0
 8007804:	f040 822d 	bne.w	8007c62 <_dtoa_r+0x8fa>
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	9a06      	ldr	r2, [sp, #24]
 800780c:	1c5d      	adds	r5, r3, #1
 800780e:	2331      	movs	r3, #49	; 0x31
 8007810:	f10a 0a01 	add.w	sl, sl, #1
 8007814:	7013      	strb	r3, [r2, #0]
 8007816:	e228      	b.n	8007c6a <_dtoa_r+0x902>
 8007818:	07f2      	lsls	r2, r6, #31
 800781a:	d505      	bpl.n	8007828 <_dtoa_r+0x4c0>
 800781c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007820:	f7f8 fe5a 	bl	80004d8 <__aeabi_dmul>
 8007824:	2301      	movs	r3, #1
 8007826:	3501      	adds	r5, #1
 8007828:	1076      	asrs	r6, r6, #1
 800782a:	3708      	adds	r7, #8
 800782c:	e76e      	b.n	800770c <_dtoa_r+0x3a4>
 800782e:	2502      	movs	r5, #2
 8007830:	e771      	b.n	8007716 <_dtoa_r+0x3ae>
 8007832:	4657      	mov	r7, sl
 8007834:	4646      	mov	r6, r8
 8007836:	e790      	b.n	800775a <_dtoa_r+0x3f2>
 8007838:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <_dtoa_r+0x608>)
 800783a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800783e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d048      	beq.n	80078da <_dtoa_r+0x572>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	2000      	movs	r0, #0
 800784e:	494e      	ldr	r1, [pc, #312]	; (8007988 <_dtoa_r+0x620>)
 8007850:	f7f8 ff6c 	bl	800072c <__aeabi_ddiv>
 8007854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007858:	f7f8 fc86 	bl	8000168 <__aeabi_dsub>
 800785c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007860:	9d06      	ldr	r5, [sp, #24]
 8007862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007866:	f7f9 f8e7 	bl	8000a38 <__aeabi_d2iz>
 800786a:	9011      	str	r0, [sp, #68]	; 0x44
 800786c:	f7f8 fdca 	bl	8000404 <__aeabi_i2d>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007878:	f7f8 fc76 	bl	8000168 <__aeabi_dsub>
 800787c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007882:	3330      	adds	r3, #48	; 0x30
 8007884:	f805 3b01 	strb.w	r3, [r5], #1
 8007888:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800788c:	f7f9 f896 	bl	80009bc <__aeabi_dcmplt>
 8007890:	2800      	cmp	r0, #0
 8007892:	d163      	bne.n	800795c <_dtoa_r+0x5f4>
 8007894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007898:	2000      	movs	r0, #0
 800789a:	4937      	ldr	r1, [pc, #220]	; (8007978 <_dtoa_r+0x610>)
 800789c:	f7f8 fc64 	bl	8000168 <__aeabi_dsub>
 80078a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078a4:	f7f9 f88a 	bl	80009bc <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f040 80b5 	bne.w	8007a18 <_dtoa_r+0x6b0>
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	1aeb      	subs	r3, r5, r3
 80078b2:	429e      	cmp	r6, r3
 80078b4:	f77f af7c 	ble.w	80077b0 <_dtoa_r+0x448>
 80078b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078bc:	2200      	movs	r2, #0
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <_dtoa_r+0x614>)
 80078c0:	f7f8 fe0a 	bl	80004d8 <__aeabi_dmul>
 80078c4:	2200      	movs	r2, #0
 80078c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <_dtoa_r+0x614>)
 80078d0:	f7f8 fe02 	bl	80004d8 <__aeabi_dmul>
 80078d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d8:	e7c3      	b.n	8007862 <_dtoa_r+0x4fa>
 80078da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078de:	f7f8 fdfb 	bl	80004d8 <__aeabi_dmul>
 80078e2:	9b06      	ldr	r3, [sp, #24]
 80078e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078e8:	199d      	adds	r5, r3, r6
 80078ea:	461e      	mov	r6, r3
 80078ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f0:	f7f9 f8a2 	bl	8000a38 <__aeabi_d2iz>
 80078f4:	9011      	str	r0, [sp, #68]	; 0x44
 80078f6:	f7f8 fd85 	bl	8000404 <__aeabi_i2d>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	f7f8 fc31 	bl	8000168 <__aeabi_dsub>
 8007906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790c:	3330      	adds	r3, #48	; 0x30
 800790e:	f806 3b01 	strb.w	r3, [r6], #1
 8007912:	42ae      	cmp	r6, r5
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	d124      	bne.n	8007964 <_dtoa_r+0x5fc>
 800791a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800791e:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <_dtoa_r+0x620>)
 8007920:	f7f8 fc24 	bl	800016c <__adddf3>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792c:	f7f9 f864 	bl	80009f8 <__aeabi_dcmpgt>
 8007930:	2800      	cmp	r0, #0
 8007932:	d171      	bne.n	8007a18 <_dtoa_r+0x6b0>
 8007934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007938:	2000      	movs	r0, #0
 800793a:	4913      	ldr	r1, [pc, #76]	; (8007988 <_dtoa_r+0x620>)
 800793c:	f7f8 fc14 	bl	8000168 <__aeabi_dsub>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007948:	f7f9 f838 	bl	80009bc <__aeabi_dcmplt>
 800794c:	2800      	cmp	r0, #0
 800794e:	f43f af2f 	beq.w	80077b0 <_dtoa_r+0x448>
 8007952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007956:	1e6a      	subs	r2, r5, #1
 8007958:	2b30      	cmp	r3, #48	; 0x30
 800795a:	d001      	beq.n	8007960 <_dtoa_r+0x5f8>
 800795c:	46ba      	mov	sl, r7
 800795e:	e04a      	b.n	80079f6 <_dtoa_r+0x68e>
 8007960:	4615      	mov	r5, r2
 8007962:	e7f6      	b.n	8007952 <_dtoa_r+0x5ea>
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <_dtoa_r+0x614>)
 8007966:	f7f8 fdb7 	bl	80004d8 <__aeabi_dmul>
 800796a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800796e:	e7bd      	b.n	80078ec <_dtoa_r+0x584>
 8007970:	08009be8 	.word	0x08009be8
 8007974:	08009bc0 	.word	0x08009bc0
 8007978:	3ff00000 	.word	0x3ff00000
 800797c:	40240000 	.word	0x40240000
 8007980:	401c0000 	.word	0x401c0000
 8007984:	40140000 	.word	0x40140000
 8007988:	3fe00000 	.word	0x3fe00000
 800798c:	9d06      	ldr	r5, [sp, #24]
 800798e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fec7 	bl	800072c <__aeabi_ddiv>
 800799e:	f7f9 f84b 	bl	8000a38 <__aeabi_d2iz>
 80079a2:	4681      	mov	r9, r0
 80079a4:	f7f8 fd2e 	bl	8000404 <__aeabi_i2d>
 80079a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ac:	f7f8 fd94 	bl	80004d8 <__aeabi_dmul>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4630      	mov	r0, r6
 80079b6:	4639      	mov	r1, r7
 80079b8:	f7f8 fbd6 	bl	8000168 <__aeabi_dsub>
 80079bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80079c0:	f805 6b01 	strb.w	r6, [r5], #1
 80079c4:	9e06      	ldr	r6, [sp, #24]
 80079c6:	4602      	mov	r2, r0
 80079c8:	1bae      	subs	r6, r5, r6
 80079ca:	45b0      	cmp	r8, r6
 80079cc:	460b      	mov	r3, r1
 80079ce:	d135      	bne.n	8007a3c <_dtoa_r+0x6d4>
 80079d0:	f7f8 fbcc 	bl	800016c <__adddf3>
 80079d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d8:	4606      	mov	r6, r0
 80079da:	460f      	mov	r7, r1
 80079dc:	f7f9 f80c 	bl	80009f8 <__aeabi_dcmpgt>
 80079e0:	b9c8      	cbnz	r0, 8007a16 <_dtoa_r+0x6ae>
 80079e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 ffdd 	bl	80009a8 <__aeabi_dcmpeq>
 80079ee:	b110      	cbz	r0, 80079f6 <_dtoa_r+0x68e>
 80079f0:	f019 0f01 	tst.w	r9, #1
 80079f4:	d10f      	bne.n	8007a16 <_dtoa_r+0x6ae>
 80079f6:	4659      	mov	r1, fp
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 ffdf 	bl	80089bc <_Bfree>
 80079fe:	2300      	movs	r3, #0
 8007a00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a02:	702b      	strb	r3, [r5, #0]
 8007a04:	f10a 0301 	add.w	r3, sl, #1
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f43f acf3 	beq.w	80073f8 <_dtoa_r+0x90>
 8007a12:	601d      	str	r5, [r3, #0]
 8007a14:	e4f0      	b.n	80073f8 <_dtoa_r+0x90>
 8007a16:	4657      	mov	r7, sl
 8007a18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a1c:	1e6b      	subs	r3, r5, #1
 8007a1e:	2a39      	cmp	r2, #57	; 0x39
 8007a20:	d106      	bne.n	8007a30 <_dtoa_r+0x6c8>
 8007a22:	9a06      	ldr	r2, [sp, #24]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d107      	bne.n	8007a38 <_dtoa_r+0x6d0>
 8007a28:	2330      	movs	r3, #48	; 0x30
 8007a2a:	7013      	strb	r3, [r2, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	3701      	adds	r7, #1
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	3201      	adds	r2, #1
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e791      	b.n	800795c <_dtoa_r+0x5f4>
 8007a38:	461d      	mov	r5, r3
 8007a3a:	e7ed      	b.n	8007a18 <_dtoa_r+0x6b0>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b99      	ldr	r3, [pc, #612]	; (8007ca4 <_dtoa_r+0x93c>)
 8007a40:	f7f8 fd4a 	bl	80004d8 <__aeabi_dmul>
 8007a44:	2200      	movs	r2, #0
 8007a46:	2300      	movs	r3, #0
 8007a48:	4606      	mov	r6, r0
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	f7f8 ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d09e      	beq.n	8007992 <_dtoa_r+0x62a>
 8007a54:	e7cf      	b.n	80079f6 <_dtoa_r+0x68e>
 8007a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	f000 8088 	beq.w	8007b6e <_dtoa_r+0x806>
 8007a5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a60:	2a01      	cmp	r2, #1
 8007a62:	dc6d      	bgt.n	8007b40 <_dtoa_r+0x7d8>
 8007a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	d066      	beq.n	8007b38 <_dtoa_r+0x7d0>
 8007a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a6e:	464d      	mov	r5, r9
 8007a70:	9e08      	ldr	r6, [sp, #32]
 8007a72:	9a07      	ldr	r2, [sp, #28]
 8007a74:	2101      	movs	r1, #1
 8007a76:	441a      	add	r2, r3
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4499      	add	r9, r3
 8007a7c:	9207      	str	r2, [sp, #28]
 8007a7e:	f001 f87b 	bl	8008b78 <__i2b>
 8007a82:	4607      	mov	r7, r0
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	dd0b      	ble.n	8007aa0 <_dtoa_r+0x738>
 8007a88:	9b07      	ldr	r3, [sp, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd08      	ble.n	8007aa0 <_dtoa_r+0x738>
 8007a8e:	42ab      	cmp	r3, r5
 8007a90:	bfa8      	it	ge
 8007a92:	462b      	movge	r3, r5
 8007a94:	9a07      	ldr	r2, [sp, #28]
 8007a96:	eba9 0903 	sub.w	r9, r9, r3
 8007a9a:	1aed      	subs	r5, r5, r3
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	9b08      	ldr	r3, [sp, #32]
 8007aa2:	b1eb      	cbz	r3, 8007ae0 <_dtoa_r+0x778>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d065      	beq.n	8007b76 <_dtoa_r+0x80e>
 8007aaa:	b18e      	cbz	r6, 8007ad0 <_dtoa_r+0x768>
 8007aac:	4639      	mov	r1, r7
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f001 f8ff 	bl	8008cb4 <__pow5mult>
 8007ab6:	465a      	mov	r2, fp
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4607      	mov	r7, r0
 8007abc:	4620      	mov	r0, r4
 8007abe:	f001 f864 	bl	8008b8a <__multiply>
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 ff78 	bl	80089bc <_Bfree>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	469b      	mov	fp, r3
 8007ad0:	9b08      	ldr	r3, [sp, #32]
 8007ad2:	1b9a      	subs	r2, r3, r6
 8007ad4:	d004      	beq.n	8007ae0 <_dtoa_r+0x778>
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f001 f8eb 	bl	8008cb4 <__pow5mult>
 8007ade:	4683      	mov	fp, r0
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f001 f848 	bl	8008b78 <__i2b>
 8007ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aea:	4606      	mov	r6, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 81c6 	beq.w	8007e7e <_dtoa_r+0xb16>
 8007af2:	461a      	mov	r2, r3
 8007af4:	4601      	mov	r1, r0
 8007af6:	4620      	mov	r0, r4
 8007af8:	f001 f8dc 	bl	8008cb4 <__pow5mult>
 8007afc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007afe:	4606      	mov	r6, r0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	dc3e      	bgt.n	8007b82 <_dtoa_r+0x81a>
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d137      	bne.n	8007b7a <_dtoa_r+0x812>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d134      	bne.n	8007b7e <_dtoa_r+0x816>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b1a:	0d1b      	lsrs	r3, r3, #20
 8007b1c:	051b      	lsls	r3, r3, #20
 8007b1e:	b12b      	cbz	r3, 8007b2c <_dtoa_r+0x7c4>
 8007b20:	9b07      	ldr	r3, [sp, #28]
 8007b22:	f109 0901 	add.w	r9, r9, #1
 8007b26:	3301      	adds	r3, #1
 8007b28:	9307      	str	r3, [sp, #28]
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d128      	bne.n	8007b86 <_dtoa_r+0x81e>
 8007b34:	2001      	movs	r0, #1
 8007b36:	e02e      	b.n	8007b96 <_dtoa_r+0x82e>
 8007b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b3e:	e796      	b.n	8007a6e <_dtoa_r+0x706>
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	f108 36ff 	add.w	r6, r8, #4294967295
 8007b46:	42b3      	cmp	r3, r6
 8007b48:	bfb7      	itett	lt
 8007b4a:	9b08      	ldrlt	r3, [sp, #32]
 8007b4c:	1b9e      	subge	r6, r3, r6
 8007b4e:	1af2      	sublt	r2, r6, r3
 8007b50:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007b52:	bfbf      	itttt	lt
 8007b54:	9608      	strlt	r6, [sp, #32]
 8007b56:	189b      	addlt	r3, r3, r2
 8007b58:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007b5a:	2600      	movlt	r6, #0
 8007b5c:	f1b8 0f00 	cmp.w	r8, #0
 8007b60:	bfb9      	ittee	lt
 8007b62:	eba9 0508 	sublt.w	r5, r9, r8
 8007b66:	2300      	movlt	r3, #0
 8007b68:	464d      	movge	r5, r9
 8007b6a:	4643      	movge	r3, r8
 8007b6c:	e781      	b.n	8007a72 <_dtoa_r+0x70a>
 8007b6e:	9e08      	ldr	r6, [sp, #32]
 8007b70:	464d      	mov	r5, r9
 8007b72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b74:	e786      	b.n	8007a84 <_dtoa_r+0x71c>
 8007b76:	9a08      	ldr	r2, [sp, #32]
 8007b78:	e7ad      	b.n	8007ad6 <_dtoa_r+0x76e>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e7d6      	b.n	8007b2c <_dtoa_r+0x7c4>
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	e7d4      	b.n	8007b2c <_dtoa_r+0x7c4>
 8007b82:	2300      	movs	r3, #0
 8007b84:	9308      	str	r3, [sp, #32]
 8007b86:	6933      	ldr	r3, [r6, #16]
 8007b88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b8c:	6918      	ldr	r0, [r3, #16]
 8007b8e:	f000 ffa5 	bl	8008adc <__hi0bits>
 8007b92:	f1c0 0020 	rsb	r0, r0, #32
 8007b96:	9b07      	ldr	r3, [sp, #28]
 8007b98:	4418      	add	r0, r3
 8007b9a:	f010 001f 	ands.w	r0, r0, #31
 8007b9e:	d047      	beq.n	8007c30 <_dtoa_r+0x8c8>
 8007ba0:	f1c0 0320 	rsb	r3, r0, #32
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	dd3b      	ble.n	8007c20 <_dtoa_r+0x8b8>
 8007ba8:	9b07      	ldr	r3, [sp, #28]
 8007baa:	f1c0 001c 	rsb	r0, r0, #28
 8007bae:	4481      	add	r9, r0
 8007bb0:	4405      	add	r5, r0
 8007bb2:	4403      	add	r3, r0
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	f1b9 0f00 	cmp.w	r9, #0
 8007bba:	dd05      	ble.n	8007bc8 <_dtoa_r+0x860>
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	464a      	mov	r2, r9
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f001 f8c5 	bl	8008d50 <__lshift>
 8007bc6:	4683      	mov	fp, r0
 8007bc8:	9b07      	ldr	r3, [sp, #28]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd05      	ble.n	8007bda <_dtoa_r+0x872>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f001 f8bc 	bl	8008d50 <__lshift>
 8007bd8:	4606      	mov	r6, r0
 8007bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bdc:	b353      	cbz	r3, 8007c34 <_dtoa_r+0x8cc>
 8007bde:	4631      	mov	r1, r6
 8007be0:	4658      	mov	r0, fp
 8007be2:	f001 f909 	bl	8008df8 <__mcmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	da24      	bge.n	8007c34 <_dtoa_r+0x8cc>
 8007bea:	2300      	movs	r3, #0
 8007bec:	4659      	mov	r1, fp
 8007bee:	220a      	movs	r2, #10
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fefa 	bl	80089ea <__multadd>
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfc:	4683      	mov	fp, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8144 	beq.w	8007e8c <_dtoa_r+0xb24>
 8007c04:	2300      	movs	r3, #0
 8007c06:	4639      	mov	r1, r7
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 feed 	bl	80089ea <__multadd>
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	4607      	mov	r7, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc4d      	bgt.n	8007cb4 <_dtoa_r+0x94c>
 8007c18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	dd4a      	ble.n	8007cb4 <_dtoa_r+0x94c>
 8007c1e:	e011      	b.n	8007c44 <_dtoa_r+0x8dc>
 8007c20:	d0c9      	beq.n	8007bb6 <_dtoa_r+0x84e>
 8007c22:	9a07      	ldr	r2, [sp, #28]
 8007c24:	331c      	adds	r3, #28
 8007c26:	441a      	add	r2, r3
 8007c28:	4499      	add	r9, r3
 8007c2a:	441d      	add	r5, r3
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	e7c1      	b.n	8007bb4 <_dtoa_r+0x84c>
 8007c30:	4603      	mov	r3, r0
 8007c32:	e7f6      	b.n	8007c22 <_dtoa_r+0x8ba>
 8007c34:	f1b8 0f00 	cmp.w	r8, #0
 8007c38:	dc36      	bgt.n	8007ca8 <_dtoa_r+0x940>
 8007c3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	dd33      	ble.n	8007ca8 <_dtoa_r+0x940>
 8007c40:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	b963      	cbnz	r3, 8007c62 <_dtoa_r+0x8fa>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fecc 	bl	80089ea <__multadd>
 8007c52:	4601      	mov	r1, r0
 8007c54:	4606      	mov	r6, r0
 8007c56:	4658      	mov	r0, fp
 8007c58:	f001 f8ce 	bl	8008df8 <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f73f add3 	bgt.w	8007808 <_dtoa_r+0x4a0>
 8007c62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c64:	9d06      	ldr	r5, [sp, #24]
 8007c66:	ea6f 0a03 	mvn.w	sl, r3
 8007c6a:	f04f 0900 	mov.w	r9, #0
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fea3 	bl	80089bc <_Bfree>
 8007c76:	2f00      	cmp	r7, #0
 8007c78:	f43f aebd 	beq.w	80079f6 <_dtoa_r+0x68e>
 8007c7c:	f1b9 0f00 	cmp.w	r9, #0
 8007c80:	d005      	beq.n	8007c8e <_dtoa_r+0x926>
 8007c82:	45b9      	cmp	r9, r7
 8007c84:	d003      	beq.n	8007c8e <_dtoa_r+0x926>
 8007c86:	4649      	mov	r1, r9
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fe97 	bl	80089bc <_Bfree>
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fe93 	bl	80089bc <_Bfree>
 8007c96:	e6ae      	b.n	80079f6 <_dtoa_r+0x68e>
 8007c98:	2600      	movs	r6, #0
 8007c9a:	4637      	mov	r7, r6
 8007c9c:	e7e1      	b.n	8007c62 <_dtoa_r+0x8fa>
 8007c9e:	46ba      	mov	sl, r7
 8007ca0:	4637      	mov	r7, r6
 8007ca2:	e5b1      	b.n	8007808 <_dtoa_r+0x4a0>
 8007ca4:	40240000 	.word	0x40240000
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	f8cd 8010 	str.w	r8, [sp, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80f3 	beq.w	8007e9a <_dtoa_r+0xb32>
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	dd05      	ble.n	8007cc4 <_dtoa_r+0x95c>
 8007cb8:	4639      	mov	r1, r7
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f001 f847 	bl	8008d50 <__lshift>
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d04c      	beq.n	8007d64 <_dtoa_r+0x9fc>
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fe41 	bl	8008954 <_Balloc>
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	f107 010c 	add.w	r1, r7, #12
 8007cda:	3202      	adds	r2, #2
 8007cdc:	0092      	lsls	r2, r2, #2
 8007cde:	300c      	adds	r0, #12
 8007ce0:	f7fd fcb6 	bl	8005650 <memcpy>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f001 f831 	bl	8008d50 <__lshift>
 8007cee:	46b9      	mov	r9, r7
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	9307      	str	r3, [sp, #28]
 8007cf6:	9b02      	ldr	r3, [sp, #8]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	9308      	str	r3, [sp, #32]
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4658      	mov	r0, fp
 8007d02:	f7ff faa3 	bl	800724c <quorem>
 8007d06:	4649      	mov	r1, r9
 8007d08:	4605      	mov	r5, r0
 8007d0a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f001 f872 	bl	8008df8 <__mcmp>
 8007d14:	463a      	mov	r2, r7
 8007d16:	9002      	str	r0, [sp, #8]
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 f886 	bl	8008e2c <__mdiff>
 8007d20:	68c3      	ldr	r3, [r0, #12]
 8007d22:	4602      	mov	r2, r0
 8007d24:	bb03      	cbnz	r3, 8007d68 <_dtoa_r+0xa00>
 8007d26:	4601      	mov	r1, r0
 8007d28:	9009      	str	r0, [sp, #36]	; 0x24
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f001 f864 	bl	8008df8 <__mcmp>
 8007d30:	4603      	mov	r3, r0
 8007d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d34:	4611      	mov	r1, r2
 8007d36:	4620      	mov	r0, r4
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	f000 fe3f 	bl	80089bc <_Bfree>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	b9a3      	cbnz	r3, 8007d6c <_dtoa_r+0xa04>
 8007d42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d44:	b992      	cbnz	r2, 8007d6c <_dtoa_r+0xa04>
 8007d46:	9a08      	ldr	r2, [sp, #32]
 8007d48:	b982      	cbnz	r2, 8007d6c <_dtoa_r+0xa04>
 8007d4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d4e:	d029      	beq.n	8007da4 <_dtoa_r+0xa3c>
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dd01      	ble.n	8007d5a <_dtoa_r+0x9f2>
 8007d56:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	1c5d      	adds	r5, r3, #1
 8007d5e:	f883 8000 	strb.w	r8, [r3]
 8007d62:	e784      	b.n	8007c6e <_dtoa_r+0x906>
 8007d64:	4638      	mov	r0, r7
 8007d66:	e7c2      	b.n	8007cee <_dtoa_r+0x986>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e7e3      	b.n	8007d34 <_dtoa_r+0x9cc>
 8007d6c:	9a02      	ldr	r2, [sp, #8]
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	db04      	blt.n	8007d7c <_dtoa_r+0xa14>
 8007d72:	d123      	bne.n	8007dbc <_dtoa_r+0xa54>
 8007d74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d76:	bb0a      	cbnz	r2, 8007dbc <_dtoa_r+0xa54>
 8007d78:	9a08      	ldr	r2, [sp, #32]
 8007d7a:	b9fa      	cbnz	r2, 8007dbc <_dtoa_r+0xa54>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	ddec      	ble.n	8007d5a <_dtoa_r+0x9f2>
 8007d80:	4659      	mov	r1, fp
 8007d82:	2201      	movs	r2, #1
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 ffe3 	bl	8008d50 <__lshift>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4683      	mov	fp, r0
 8007d8e:	f001 f833 	bl	8008df8 <__mcmp>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	dc03      	bgt.n	8007d9e <_dtoa_r+0xa36>
 8007d96:	d1e0      	bne.n	8007d5a <_dtoa_r+0x9f2>
 8007d98:	f018 0f01 	tst.w	r8, #1
 8007d9c:	d0dd      	beq.n	8007d5a <_dtoa_r+0x9f2>
 8007d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007da2:	d1d8      	bne.n	8007d56 <_dtoa_r+0x9ee>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	1c5d      	adds	r5, r3, #1
 8007daa:	2339      	movs	r3, #57	; 0x39
 8007dac:	7013      	strb	r3, [r2, #0]
 8007dae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007db2:	1e6a      	subs	r2, r5, #1
 8007db4:	2b39      	cmp	r3, #57	; 0x39
 8007db6:	d04d      	beq.n	8007e54 <_dtoa_r+0xaec>
 8007db8:	3301      	adds	r3, #1
 8007dba:	e052      	b.n	8007e62 <_dtoa_r+0xafa>
 8007dbc:	9a07      	ldr	r2, [sp, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f102 0501 	add.w	r5, r2, #1
 8007dc4:	dd06      	ble.n	8007dd4 <_dtoa_r+0xa6c>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dca:	d0eb      	beq.n	8007da4 <_dtoa_r+0xa3c>
 8007dcc:	f108 0801 	add.w	r8, r8, #1
 8007dd0:	9b07      	ldr	r3, [sp, #28]
 8007dd2:	e7c4      	b.n	8007d5e <_dtoa_r+0x9f6>
 8007dd4:	9b06      	ldr	r3, [sp, #24]
 8007dd6:	9a04      	ldr	r2, [sp, #16]
 8007dd8:	1aeb      	subs	r3, r5, r3
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007de0:	d021      	beq.n	8007e26 <_dtoa_r+0xabe>
 8007de2:	4659      	mov	r1, fp
 8007de4:	2300      	movs	r3, #0
 8007de6:	220a      	movs	r2, #10
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 fdfe 	bl	80089ea <__multadd>
 8007dee:	45b9      	cmp	r9, r7
 8007df0:	4683      	mov	fp, r0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	f04f 020a 	mov.w	r2, #10
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	d105      	bne.n	8007e0c <_dtoa_r+0xaa4>
 8007e00:	f000 fdf3 	bl	80089ea <__multadd>
 8007e04:	4681      	mov	r9, r0
 8007e06:	4607      	mov	r7, r0
 8007e08:	9507      	str	r5, [sp, #28]
 8007e0a:	e778      	b.n	8007cfe <_dtoa_r+0x996>
 8007e0c:	f000 fded 	bl	80089ea <__multadd>
 8007e10:	4639      	mov	r1, r7
 8007e12:	4681      	mov	r9, r0
 8007e14:	2300      	movs	r3, #0
 8007e16:	220a      	movs	r2, #10
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fde6 	bl	80089ea <__multadd>
 8007e1e:	4607      	mov	r7, r0
 8007e20:	e7f2      	b.n	8007e08 <_dtoa_r+0xaa0>
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	4659      	mov	r1, fp
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 ff90 	bl	8008d50 <__lshift>
 8007e30:	4631      	mov	r1, r6
 8007e32:	4683      	mov	fp, r0
 8007e34:	f000 ffe0 	bl	8008df8 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	dcb8      	bgt.n	8007dae <_dtoa_r+0xa46>
 8007e3c:	d102      	bne.n	8007e44 <_dtoa_r+0xadc>
 8007e3e:	f018 0f01 	tst.w	r8, #1
 8007e42:	d1b4      	bne.n	8007dae <_dtoa_r+0xa46>
 8007e44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e48:	1e6a      	subs	r2, r5, #1
 8007e4a:	2b30      	cmp	r3, #48	; 0x30
 8007e4c:	f47f af0f 	bne.w	8007c6e <_dtoa_r+0x906>
 8007e50:	4615      	mov	r5, r2
 8007e52:	e7f7      	b.n	8007e44 <_dtoa_r+0xadc>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d105      	bne.n	8007e66 <_dtoa_r+0xafe>
 8007e5a:	2331      	movs	r3, #49	; 0x31
 8007e5c:	9a06      	ldr	r2, [sp, #24]
 8007e5e:	f10a 0a01 	add.w	sl, sl, #1
 8007e62:	7013      	strb	r3, [r2, #0]
 8007e64:	e703      	b.n	8007c6e <_dtoa_r+0x906>
 8007e66:	4615      	mov	r5, r2
 8007e68:	e7a1      	b.n	8007dae <_dtoa_r+0xa46>
 8007e6a:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <_dtoa_r+0xb60>)
 8007e6c:	f7ff bae1 	b.w	8007432 <_dtoa_r+0xca>
 8007e70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f47f aabb 	bne.w	80073ee <_dtoa_r+0x86>
 8007e78:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <_dtoa_r+0xb64>)
 8007e7a:	f7ff bada 	b.w	8007432 <_dtoa_r+0xca>
 8007e7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f77f ae3f 	ble.w	8007b04 <_dtoa_r+0x79c>
 8007e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e88:	9308      	str	r3, [sp, #32]
 8007e8a:	e653      	b.n	8007b34 <_dtoa_r+0x7cc>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc03      	bgt.n	8007e9a <_dtoa_r+0xb32>
 8007e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	f73f aed5 	bgt.w	8007c44 <_dtoa_r+0x8dc>
 8007e9a:	9d06      	ldr	r5, [sp, #24]
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f7ff f9d4 	bl	800724c <quorem>
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eaa:	f805 8b01 	strb.w	r8, [r5], #1
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	1aeb      	subs	r3, r5, r3
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	ddb5      	ble.n	8007e22 <_dtoa_r+0xaba>
 8007eb6:	4659      	mov	r1, fp
 8007eb8:	2300      	movs	r3, #0
 8007eba:	220a      	movs	r2, #10
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fd94 	bl	80089ea <__multadd>
 8007ec2:	4683      	mov	fp, r0
 8007ec4:	e7ea      	b.n	8007e9c <_dtoa_r+0xb34>
 8007ec6:	bf00      	nop
 8007ec8:	08009ac0 	.word	0x08009ac0
 8007ecc:	08009b40 	.word	0x08009b40

08007ed0 <__sflush_r>:
 8007ed0:	898a      	ldrh	r2, [r1, #12]
 8007ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	0710      	lsls	r0, r2, #28
 8007eda:	460c      	mov	r4, r1
 8007edc:	d458      	bmi.n	8007f90 <__sflush_r+0xc0>
 8007ede:	684b      	ldr	r3, [r1, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dc05      	bgt.n	8007ef0 <__sflush_r+0x20>
 8007ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc02      	bgt.n	8007ef0 <__sflush_r+0x20>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d0f9      	beq.n	8007eea <__sflush_r+0x1a>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007efc:	682f      	ldr	r7, [r5, #0]
 8007efe:	6a21      	ldr	r1, [r4, #32]
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	d032      	beq.n	8007f6a <__sflush_r+0x9a>
 8007f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	075a      	lsls	r2, r3, #29
 8007f0a:	d505      	bpl.n	8007f18 <__sflush_r+0x48>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	1ac0      	subs	r0, r0, r3
 8007f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f12:	b10b      	cbz	r3, 8007f18 <__sflush_r+0x48>
 8007f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f16:	1ac0      	subs	r0, r0, r3
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f1e:	6a21      	ldr	r1, [r4, #32]
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b0      	blx	r6
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	d106      	bne.n	8007f38 <__sflush_r+0x68>
 8007f2a:	6829      	ldr	r1, [r5, #0]
 8007f2c:	291d      	cmp	r1, #29
 8007f2e:	d848      	bhi.n	8007fc2 <__sflush_r+0xf2>
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <__sflush_r+0x108>)
 8007f32:	40ca      	lsrs	r2, r1
 8007f34:	07d6      	lsls	r6, r2, #31
 8007f36:	d544      	bpl.n	8007fc2 <__sflush_r+0xf2>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	6062      	str	r2, [r4, #4]
 8007f3c:	6922      	ldr	r2, [r4, #16]
 8007f3e:	04d9      	lsls	r1, r3, #19
 8007f40:	6022      	str	r2, [r4, #0]
 8007f42:	d504      	bpl.n	8007f4e <__sflush_r+0x7e>
 8007f44:	1c42      	adds	r2, r0, #1
 8007f46:	d101      	bne.n	8007f4c <__sflush_r+0x7c>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b903      	cbnz	r3, 8007f4e <__sflush_r+0x7e>
 8007f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8007f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f50:	602f      	str	r7, [r5, #0]
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d0c9      	beq.n	8007eea <__sflush_r+0x1a>
 8007f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d002      	beq.n	8007f64 <__sflush_r+0x94>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f001 f8fe 	bl	8009160 <_free_r>
 8007f64:	2000      	movs	r0, #0
 8007f66:	6360      	str	r0, [r4, #52]	; 0x34
 8007f68:	e7c0      	b.n	8007eec <__sflush_r+0x1c>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b0      	blx	r6
 8007f70:	1c41      	adds	r1, r0, #1
 8007f72:	d1c8      	bne.n	8007f06 <__sflush_r+0x36>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c5      	beq.n	8007f06 <__sflush_r+0x36>
 8007f7a:	2b1d      	cmp	r3, #29
 8007f7c:	d001      	beq.n	8007f82 <__sflush_r+0xb2>
 8007f7e:	2b16      	cmp	r3, #22
 8007f80:	d101      	bne.n	8007f86 <__sflush_r+0xb6>
 8007f82:	602f      	str	r7, [r5, #0]
 8007f84:	e7b1      	b.n	8007eea <__sflush_r+0x1a>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	e7ad      	b.n	8007eec <__sflush_r+0x1c>
 8007f90:	690f      	ldr	r7, [r1, #16]
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	d0a9      	beq.n	8007eea <__sflush_r+0x1a>
 8007f96:	0793      	lsls	r3, r2, #30
 8007f98:	bf18      	it	ne
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	680e      	ldr	r6, [r1, #0]
 8007f9e:	bf08      	it	eq
 8007fa0:	694b      	ldreq	r3, [r1, #20]
 8007fa2:	eba6 0807 	sub.w	r8, r6, r7
 8007fa6:	600f      	str	r7, [r1, #0]
 8007fa8:	608b      	str	r3, [r1, #8]
 8007faa:	f1b8 0f00 	cmp.w	r8, #0
 8007fae:	dd9c      	ble.n	8007eea <__sflush_r+0x1a>
 8007fb0:	4643      	mov	r3, r8
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	6a21      	ldr	r1, [r4, #32]
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fba:	47b0      	blx	r6
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	dc06      	bgt.n	8007fce <__sflush_r+0xfe>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	e78e      	b.n	8007eec <__sflush_r+0x1c>
 8007fce:	4407      	add	r7, r0
 8007fd0:	eba8 0800 	sub.w	r8, r8, r0
 8007fd4:	e7e9      	b.n	8007faa <__sflush_r+0xda>
 8007fd6:	bf00      	nop
 8007fd8:	20400001 	.word	0x20400001

08007fdc <_fflush_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	690b      	ldr	r3, [r1, #16]
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	b1db      	cbz	r3, 800801e <_fflush_r+0x42>
 8007fe6:	b118      	cbz	r0, 8007ff0 <_fflush_r+0x14>
 8007fe8:	6983      	ldr	r3, [r0, #24]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <_fflush_r+0x14>
 8007fec:	f000 f860 	bl	80080b0 <__sinit>
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <_fflush_r+0x48>)
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d109      	bne.n	800800a <_fflush_r+0x2e>
 8007ff6:	686c      	ldr	r4, [r5, #4]
 8007ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffc:	b17b      	cbz	r3, 800801e <_fflush_r+0x42>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4628      	mov	r0, r5
 8008002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008006:	f7ff bf63 	b.w	8007ed0 <__sflush_r>
 800800a:	4b07      	ldr	r3, [pc, #28]	; (8008028 <_fflush_r+0x4c>)
 800800c:	429c      	cmp	r4, r3
 800800e:	d101      	bne.n	8008014 <_fflush_r+0x38>
 8008010:	68ac      	ldr	r4, [r5, #8]
 8008012:	e7f1      	b.n	8007ff8 <_fflush_r+0x1c>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <_fflush_r+0x50>)
 8008016:	429c      	cmp	r4, r3
 8008018:	bf08      	it	eq
 800801a:	68ec      	ldreq	r4, [r5, #12]
 800801c:	e7ec      	b.n	8007ff8 <_fflush_r+0x1c>
 800801e:	2000      	movs	r0, #0
 8008020:	bd38      	pop	{r3, r4, r5, pc}
 8008022:	bf00      	nop
 8008024:	08009b70 	.word	0x08009b70
 8008028:	08009b90 	.word	0x08009b90
 800802c:	08009b50 	.word	0x08009b50

08008030 <std>:
 8008030:	2300      	movs	r3, #0
 8008032:	b510      	push	{r4, lr}
 8008034:	4604      	mov	r4, r0
 8008036:	e9c0 3300 	strd	r3, r3, [r0]
 800803a:	6083      	str	r3, [r0, #8]
 800803c:	8181      	strh	r1, [r0, #12]
 800803e:	6643      	str	r3, [r0, #100]	; 0x64
 8008040:	81c2      	strh	r2, [r0, #14]
 8008042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008046:	6183      	str	r3, [r0, #24]
 8008048:	4619      	mov	r1, r3
 800804a:	2208      	movs	r2, #8
 800804c:	305c      	adds	r0, #92	; 0x5c
 800804e:	f7fd fb0a 	bl	8005666 <memset>
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x38>)
 8008054:	6224      	str	r4, [r4, #32]
 8008056:	6263      	str	r3, [r4, #36]	; 0x24
 8008058:	4b04      	ldr	r3, [pc, #16]	; (800806c <std+0x3c>)
 800805a:	62a3      	str	r3, [r4, #40]	; 0x28
 800805c:	4b04      	ldr	r3, [pc, #16]	; (8008070 <std+0x40>)
 800805e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <std+0x44>)
 8008062:	6323      	str	r3, [r4, #48]	; 0x30
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	080097ed 	.word	0x080097ed
 800806c:	0800980f 	.word	0x0800980f
 8008070:	08009847 	.word	0x08009847
 8008074:	0800986b 	.word	0x0800986b

08008078 <_cleanup_r>:
 8008078:	4901      	ldr	r1, [pc, #4]	; (8008080 <_cleanup_r+0x8>)
 800807a:	f000 b885 	b.w	8008188 <_fwalk_reent>
 800807e:	bf00      	nop
 8008080:	08007fdd 	.word	0x08007fdd

08008084 <__sfmoreglue>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	2568      	movs	r5, #104	; 0x68
 8008088:	1e4a      	subs	r2, r1, #1
 800808a:	4355      	muls	r5, r2
 800808c:	460e      	mov	r6, r1
 800808e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008092:	f001 f8b1 	bl	80091f8 <_malloc_r>
 8008096:	4604      	mov	r4, r0
 8008098:	b140      	cbz	r0, 80080ac <__sfmoreglue+0x28>
 800809a:	2100      	movs	r1, #0
 800809c:	e9c0 1600 	strd	r1, r6, [r0]
 80080a0:	300c      	adds	r0, #12
 80080a2:	60a0      	str	r0, [r4, #8]
 80080a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080a8:	f7fd fadd 	bl	8005666 <memset>
 80080ac:	4620      	mov	r0, r4
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <__sinit>:
 80080b0:	6983      	ldr	r3, [r0, #24]
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	bb33      	cbnz	r3, 8008106 <__sinit+0x56>
 80080b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80080bc:	6503      	str	r3, [r0, #80]	; 0x50
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <__sinit+0x58>)
 80080c0:	4a12      	ldr	r2, [pc, #72]	; (800810c <__sinit+0x5c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6282      	str	r2, [r0, #40]	; 0x28
 80080c6:	4298      	cmp	r0, r3
 80080c8:	bf04      	itt	eq
 80080ca:	2301      	moveq	r3, #1
 80080cc:	6183      	streq	r3, [r0, #24]
 80080ce:	f000 f81f 	bl	8008110 <__sfp>
 80080d2:	6060      	str	r0, [r4, #4]
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f81b 	bl	8008110 <__sfp>
 80080da:	60a0      	str	r0, [r4, #8]
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 f817 	bl	8008110 <__sfp>
 80080e2:	2200      	movs	r2, #0
 80080e4:	60e0      	str	r0, [r4, #12]
 80080e6:	2104      	movs	r1, #4
 80080e8:	6860      	ldr	r0, [r4, #4]
 80080ea:	f7ff ffa1 	bl	8008030 <std>
 80080ee:	2201      	movs	r2, #1
 80080f0:	2109      	movs	r1, #9
 80080f2:	68a0      	ldr	r0, [r4, #8]
 80080f4:	f7ff ff9c 	bl	8008030 <std>
 80080f8:	2202      	movs	r2, #2
 80080fa:	2112      	movs	r1, #18
 80080fc:	68e0      	ldr	r0, [r4, #12]
 80080fe:	f7ff ff97 	bl	8008030 <std>
 8008102:	2301      	movs	r3, #1
 8008104:	61a3      	str	r3, [r4, #24]
 8008106:	bd10      	pop	{r4, pc}
 8008108:	08009aac 	.word	0x08009aac
 800810c:	08008079 	.word	0x08008079

08008110 <__sfp>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <__sfp+0x70>)
 8008114:	4607      	mov	r7, r0
 8008116:	681e      	ldr	r6, [r3, #0]
 8008118:	69b3      	ldr	r3, [r6, #24]
 800811a:	b913      	cbnz	r3, 8008122 <__sfp+0x12>
 800811c:	4630      	mov	r0, r6
 800811e:	f7ff ffc7 	bl	80080b0 <__sinit>
 8008122:	3648      	adds	r6, #72	; 0x48
 8008124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008128:	3b01      	subs	r3, #1
 800812a:	d503      	bpl.n	8008134 <__sfp+0x24>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	b133      	cbz	r3, 800813e <__sfp+0x2e>
 8008130:	6836      	ldr	r6, [r6, #0]
 8008132:	e7f7      	b.n	8008124 <__sfp+0x14>
 8008134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008138:	b16d      	cbz	r5, 8008156 <__sfp+0x46>
 800813a:	3468      	adds	r4, #104	; 0x68
 800813c:	e7f4      	b.n	8008128 <__sfp+0x18>
 800813e:	2104      	movs	r1, #4
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ff9f 	bl	8008084 <__sfmoreglue>
 8008146:	6030      	str	r0, [r6, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d1f1      	bne.n	8008130 <__sfp+0x20>
 800814c:	230c      	movs	r3, #12
 800814e:	4604      	mov	r4, r0
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	4620      	mov	r0, r4
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <__sfp+0x74>)
 8008158:	6665      	str	r5, [r4, #100]	; 0x64
 800815a:	e9c4 5500 	strd	r5, r5, [r4]
 800815e:	60a5      	str	r5, [r4, #8]
 8008160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008168:	2208      	movs	r2, #8
 800816a:	4629      	mov	r1, r5
 800816c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008170:	f7fd fa79 	bl	8005666 <memset>
 8008174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800817c:	e7e9      	b.n	8008152 <__sfp+0x42>
 800817e:	bf00      	nop
 8008180:	08009aac 	.word	0x08009aac
 8008184:	ffff0001 	.word	0xffff0001

08008188 <_fwalk_reent>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	4680      	mov	r8, r0
 800818e:	4689      	mov	r9, r1
 8008190:	2600      	movs	r6, #0
 8008192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008196:	b914      	cbnz	r4, 800819e <_fwalk_reent+0x16>
 8008198:	4630      	mov	r0, r6
 800819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081a2:	3f01      	subs	r7, #1
 80081a4:	d501      	bpl.n	80081aa <_fwalk_reent+0x22>
 80081a6:	6824      	ldr	r4, [r4, #0]
 80081a8:	e7f5      	b.n	8008196 <_fwalk_reent+0xe>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d907      	bls.n	80081c0 <_fwalk_reent+0x38>
 80081b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081b4:	3301      	adds	r3, #1
 80081b6:	d003      	beq.n	80081c0 <_fwalk_reent+0x38>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4640      	mov	r0, r8
 80081bc:	47c8      	blx	r9
 80081be:	4306      	orrs	r6, r0
 80081c0:	3568      	adds	r5, #104	; 0x68
 80081c2:	e7ee      	b.n	80081a2 <_fwalk_reent+0x1a>

080081c4 <rshift>:
 80081c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c6:	6906      	ldr	r6, [r0, #16]
 80081c8:	114b      	asrs	r3, r1, #5
 80081ca:	429e      	cmp	r6, r3
 80081cc:	f100 0414 	add.w	r4, r0, #20
 80081d0:	dd31      	ble.n	8008236 <rshift+0x72>
 80081d2:	f011 011f 	ands.w	r1, r1, #31
 80081d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80081da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80081de:	d108      	bne.n	80081f2 <rshift+0x2e>
 80081e0:	4621      	mov	r1, r4
 80081e2:	42b2      	cmp	r2, r6
 80081e4:	460b      	mov	r3, r1
 80081e6:	d211      	bcs.n	800820c <rshift+0x48>
 80081e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80081ec:	f841 3b04 	str.w	r3, [r1], #4
 80081f0:	e7f7      	b.n	80081e2 <rshift+0x1e>
 80081f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80081f6:	4623      	mov	r3, r4
 80081f8:	f1c1 0c20 	rsb	ip, r1, #32
 80081fc:	40cd      	lsrs	r5, r1
 80081fe:	3204      	adds	r2, #4
 8008200:	42b2      	cmp	r2, r6
 8008202:	4617      	mov	r7, r2
 8008204:	d30d      	bcc.n	8008222 <rshift+0x5e>
 8008206:	601d      	str	r5, [r3, #0]
 8008208:	b105      	cbz	r5, 800820c <rshift+0x48>
 800820a:	3304      	adds	r3, #4
 800820c:	42a3      	cmp	r3, r4
 800820e:	eba3 0204 	sub.w	r2, r3, r4
 8008212:	bf08      	it	eq
 8008214:	2300      	moveq	r3, #0
 8008216:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800821a:	6102      	str	r2, [r0, #16]
 800821c:	bf08      	it	eq
 800821e:	6143      	streq	r3, [r0, #20]
 8008220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008222:	683f      	ldr	r7, [r7, #0]
 8008224:	fa07 f70c 	lsl.w	r7, r7, ip
 8008228:	433d      	orrs	r5, r7
 800822a:	f843 5b04 	str.w	r5, [r3], #4
 800822e:	f852 5b04 	ldr.w	r5, [r2], #4
 8008232:	40cd      	lsrs	r5, r1
 8008234:	e7e4      	b.n	8008200 <rshift+0x3c>
 8008236:	4623      	mov	r3, r4
 8008238:	e7e8      	b.n	800820c <rshift+0x48>

0800823a <__hexdig_fun>:
 800823a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800823e:	2b09      	cmp	r3, #9
 8008240:	d802      	bhi.n	8008248 <__hexdig_fun+0xe>
 8008242:	3820      	subs	r0, #32
 8008244:	b2c0      	uxtb	r0, r0
 8008246:	4770      	bx	lr
 8008248:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800824c:	2b05      	cmp	r3, #5
 800824e:	d801      	bhi.n	8008254 <__hexdig_fun+0x1a>
 8008250:	3847      	subs	r0, #71	; 0x47
 8008252:	e7f7      	b.n	8008244 <__hexdig_fun+0xa>
 8008254:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008258:	2b05      	cmp	r3, #5
 800825a:	d801      	bhi.n	8008260 <__hexdig_fun+0x26>
 800825c:	3827      	subs	r0, #39	; 0x27
 800825e:	e7f1      	b.n	8008244 <__hexdig_fun+0xa>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr

08008264 <__gethex>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	b08b      	sub	sp, #44	; 0x2c
 800826a:	9002      	str	r0, [sp, #8]
 800826c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800826e:	468a      	mov	sl, r1
 8008270:	4690      	mov	r8, r2
 8008272:	9306      	str	r3, [sp, #24]
 8008274:	f000 fad1 	bl	800881a <__localeconv_l>
 8008278:	6803      	ldr	r3, [r0, #0]
 800827a:	f04f 0b00 	mov.w	fp, #0
 800827e:	4618      	mov	r0, r3
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	f7f7 ff65 	bl	8000150 <strlen>
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	9001      	str	r0, [sp, #4]
 800828a:	4403      	add	r3, r0
 800828c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	f8da 3000 	ldr.w	r3, [sl]
 8008296:	3302      	adds	r3, #2
 8008298:	461f      	mov	r7, r3
 800829a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800829e:	2830      	cmp	r0, #48	; 0x30
 80082a0:	d06c      	beq.n	800837c <__gethex+0x118>
 80082a2:	f7ff ffca 	bl	800823a <__hexdig_fun>
 80082a6:	4604      	mov	r4, r0
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d16a      	bne.n	8008382 <__gethex+0x11e>
 80082ac:	9a01      	ldr	r2, [sp, #4]
 80082ae:	9903      	ldr	r1, [sp, #12]
 80082b0:	4638      	mov	r0, r7
 80082b2:	f001 fade 	bl	8009872 <strncmp>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d166      	bne.n	8008388 <__gethex+0x124>
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	5cf8      	ldrb	r0, [r7, r3]
 80082be:	18fe      	adds	r6, r7, r3
 80082c0:	f7ff ffbb 	bl	800823a <__hexdig_fun>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d062      	beq.n	800838e <__gethex+0x12a>
 80082c8:	4633      	mov	r3, r6
 80082ca:	7818      	ldrb	r0, [r3, #0]
 80082cc:	461f      	mov	r7, r3
 80082ce:	2830      	cmp	r0, #48	; 0x30
 80082d0:	f103 0301 	add.w	r3, r3, #1
 80082d4:	d0f9      	beq.n	80082ca <__gethex+0x66>
 80082d6:	f7ff ffb0 	bl	800823a <__hexdig_fun>
 80082da:	fab0 f580 	clz	r5, r0
 80082de:	4634      	mov	r4, r6
 80082e0:	f04f 0b01 	mov.w	fp, #1
 80082e4:	096d      	lsrs	r5, r5, #5
 80082e6:	463a      	mov	r2, r7
 80082e8:	4616      	mov	r6, r2
 80082ea:	7830      	ldrb	r0, [r6, #0]
 80082ec:	3201      	adds	r2, #1
 80082ee:	f7ff ffa4 	bl	800823a <__hexdig_fun>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d1f8      	bne.n	80082e8 <__gethex+0x84>
 80082f6:	9a01      	ldr	r2, [sp, #4]
 80082f8:	9903      	ldr	r1, [sp, #12]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f001 fab9 	bl	8009872 <strncmp>
 8008300:	b950      	cbnz	r0, 8008318 <__gethex+0xb4>
 8008302:	b954      	cbnz	r4, 800831a <__gethex+0xb6>
 8008304:	9b01      	ldr	r3, [sp, #4]
 8008306:	18f4      	adds	r4, r6, r3
 8008308:	4622      	mov	r2, r4
 800830a:	4616      	mov	r6, r2
 800830c:	7830      	ldrb	r0, [r6, #0]
 800830e:	3201      	adds	r2, #1
 8008310:	f7ff ff93 	bl	800823a <__hexdig_fun>
 8008314:	2800      	cmp	r0, #0
 8008316:	d1f8      	bne.n	800830a <__gethex+0xa6>
 8008318:	b10c      	cbz	r4, 800831e <__gethex+0xba>
 800831a:	1ba4      	subs	r4, r4, r6
 800831c:	00a4      	lsls	r4, r4, #2
 800831e:	7833      	ldrb	r3, [r6, #0]
 8008320:	2b50      	cmp	r3, #80	; 0x50
 8008322:	d001      	beq.n	8008328 <__gethex+0xc4>
 8008324:	2b70      	cmp	r3, #112	; 0x70
 8008326:	d140      	bne.n	80083aa <__gethex+0x146>
 8008328:	7873      	ldrb	r3, [r6, #1]
 800832a:	2b2b      	cmp	r3, #43	; 0x2b
 800832c:	d031      	beq.n	8008392 <__gethex+0x12e>
 800832e:	2b2d      	cmp	r3, #45	; 0x2d
 8008330:	d033      	beq.n	800839a <__gethex+0x136>
 8008332:	f04f 0900 	mov.w	r9, #0
 8008336:	1c71      	adds	r1, r6, #1
 8008338:	7808      	ldrb	r0, [r1, #0]
 800833a:	f7ff ff7e 	bl	800823a <__hexdig_fun>
 800833e:	1e43      	subs	r3, r0, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b18      	cmp	r3, #24
 8008344:	d831      	bhi.n	80083aa <__gethex+0x146>
 8008346:	f1a0 0210 	sub.w	r2, r0, #16
 800834a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800834e:	f7ff ff74 	bl	800823a <__hexdig_fun>
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b18      	cmp	r3, #24
 8008358:	d922      	bls.n	80083a0 <__gethex+0x13c>
 800835a:	f1b9 0f00 	cmp.w	r9, #0
 800835e:	d000      	beq.n	8008362 <__gethex+0xfe>
 8008360:	4252      	negs	r2, r2
 8008362:	4414      	add	r4, r2
 8008364:	f8ca 1000 	str.w	r1, [sl]
 8008368:	b30d      	cbz	r5, 80083ae <__gethex+0x14a>
 800836a:	f1bb 0f00 	cmp.w	fp, #0
 800836e:	bf0c      	ite	eq
 8008370:	2706      	moveq	r7, #6
 8008372:	2700      	movne	r7, #0
 8008374:	4638      	mov	r0, r7
 8008376:	b00b      	add	sp, #44	; 0x2c
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	f10b 0b01 	add.w	fp, fp, #1
 8008380:	e78a      	b.n	8008298 <__gethex+0x34>
 8008382:	2500      	movs	r5, #0
 8008384:	462c      	mov	r4, r5
 8008386:	e7ae      	b.n	80082e6 <__gethex+0x82>
 8008388:	463e      	mov	r6, r7
 800838a:	2501      	movs	r5, #1
 800838c:	e7c7      	b.n	800831e <__gethex+0xba>
 800838e:	4604      	mov	r4, r0
 8008390:	e7fb      	b.n	800838a <__gethex+0x126>
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	1cb1      	adds	r1, r6, #2
 8008398:	e7ce      	b.n	8008338 <__gethex+0xd4>
 800839a:	f04f 0901 	mov.w	r9, #1
 800839e:	e7fa      	b.n	8008396 <__gethex+0x132>
 80083a0:	230a      	movs	r3, #10
 80083a2:	fb03 0202 	mla	r2, r3, r2, r0
 80083a6:	3a10      	subs	r2, #16
 80083a8:	e7cf      	b.n	800834a <__gethex+0xe6>
 80083aa:	4631      	mov	r1, r6
 80083ac:	e7da      	b.n	8008364 <__gethex+0x100>
 80083ae:	4629      	mov	r1, r5
 80083b0:	1bf3      	subs	r3, r6, r7
 80083b2:	3b01      	subs	r3, #1
 80083b4:	2b07      	cmp	r3, #7
 80083b6:	dc49      	bgt.n	800844c <__gethex+0x1e8>
 80083b8:	9802      	ldr	r0, [sp, #8]
 80083ba:	f000 facb 	bl	8008954 <_Balloc>
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	4605      	mov	r5, r0
 80083c4:	46da      	mov	sl, fp
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	f100 0914 	add.w	r9, r0, #20
 80083cc:	f1c3 0301 	rsb	r3, r3, #1
 80083d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80083d4:	9308      	str	r3, [sp, #32]
 80083d6:	42b7      	cmp	r7, r6
 80083d8:	d33b      	bcc.n	8008452 <__gethex+0x1ee>
 80083da:	9804      	ldr	r0, [sp, #16]
 80083dc:	f840 ab04 	str.w	sl, [r0], #4
 80083e0:	eba0 0009 	sub.w	r0, r0, r9
 80083e4:	1080      	asrs	r0, r0, #2
 80083e6:	6128      	str	r0, [r5, #16]
 80083e8:	0147      	lsls	r7, r0, #5
 80083ea:	4650      	mov	r0, sl
 80083ec:	f000 fb76 	bl	8008adc <__hi0bits>
 80083f0:	f8d8 6000 	ldr.w	r6, [r8]
 80083f4:	1a3f      	subs	r7, r7, r0
 80083f6:	42b7      	cmp	r7, r6
 80083f8:	dd64      	ble.n	80084c4 <__gethex+0x260>
 80083fa:	1bbf      	subs	r7, r7, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 fe7f 	bl	8009102 <__any_on>
 8008404:	4682      	mov	sl, r0
 8008406:	b178      	cbz	r0, 8008428 <__gethex+0x1c4>
 8008408:	f04f 0a01 	mov.w	sl, #1
 800840c:	1e7b      	subs	r3, r7, #1
 800840e:	1159      	asrs	r1, r3, #5
 8008410:	f003 021f 	and.w	r2, r3, #31
 8008414:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008418:	fa0a f202 	lsl.w	r2, sl, r2
 800841c:	420a      	tst	r2, r1
 800841e:	d003      	beq.n	8008428 <__gethex+0x1c4>
 8008420:	4553      	cmp	r3, sl
 8008422:	dc46      	bgt.n	80084b2 <__gethex+0x24e>
 8008424:	f04f 0a02 	mov.w	sl, #2
 8008428:	4639      	mov	r1, r7
 800842a:	4628      	mov	r0, r5
 800842c:	f7ff feca 	bl	80081c4 <rshift>
 8008430:	443c      	add	r4, r7
 8008432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008436:	42a3      	cmp	r3, r4
 8008438:	da52      	bge.n	80084e0 <__gethex+0x27c>
 800843a:	4629      	mov	r1, r5
 800843c:	9802      	ldr	r0, [sp, #8]
 800843e:	f000 fabd 	bl	80089bc <_Bfree>
 8008442:	2300      	movs	r3, #0
 8008444:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008446:	27a3      	movs	r7, #163	; 0xa3
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e793      	b.n	8008374 <__gethex+0x110>
 800844c:	3101      	adds	r1, #1
 800844e:	105b      	asrs	r3, r3, #1
 8008450:	e7b0      	b.n	80083b4 <__gethex+0x150>
 8008452:	1e73      	subs	r3, r6, #1
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	9a07      	ldr	r2, [sp, #28]
 8008458:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800845c:	4293      	cmp	r3, r2
 800845e:	d018      	beq.n	8008492 <__gethex+0x22e>
 8008460:	f1bb 0f20 	cmp.w	fp, #32
 8008464:	d107      	bne.n	8008476 <__gethex+0x212>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	f8c3 a000 	str.w	sl, [r3]
 800846c:	f04f 0a00 	mov.w	sl, #0
 8008470:	46d3      	mov	fp, sl
 8008472:	3304      	adds	r3, #4
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800847a:	f7ff fede 	bl	800823a <__hexdig_fun>
 800847e:	f000 000f 	and.w	r0, r0, #15
 8008482:	fa00 f00b 	lsl.w	r0, r0, fp
 8008486:	ea4a 0a00 	orr.w	sl, sl, r0
 800848a:	f10b 0b04 	add.w	fp, fp, #4
 800848e:	9b05      	ldr	r3, [sp, #20]
 8008490:	e00d      	b.n	80084ae <__gethex+0x24a>
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	9a08      	ldr	r2, [sp, #32]
 8008496:	4413      	add	r3, r2
 8008498:	42bb      	cmp	r3, r7
 800849a:	d3e1      	bcc.n	8008460 <__gethex+0x1fc>
 800849c:	4618      	mov	r0, r3
 800849e:	9a01      	ldr	r2, [sp, #4]
 80084a0:	9903      	ldr	r1, [sp, #12]
 80084a2:	9309      	str	r3, [sp, #36]	; 0x24
 80084a4:	f001 f9e5 	bl	8009872 <strncmp>
 80084a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1d8      	bne.n	8008460 <__gethex+0x1fc>
 80084ae:	461e      	mov	r6, r3
 80084b0:	e791      	b.n	80083d6 <__gethex+0x172>
 80084b2:	1eb9      	subs	r1, r7, #2
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 fe24 	bl	8009102 <__any_on>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d0b2      	beq.n	8008424 <__gethex+0x1c0>
 80084be:	f04f 0a03 	mov.w	sl, #3
 80084c2:	e7b1      	b.n	8008428 <__gethex+0x1c4>
 80084c4:	da09      	bge.n	80084da <__gethex+0x276>
 80084c6:	1bf7      	subs	r7, r6, r7
 80084c8:	4629      	mov	r1, r5
 80084ca:	463a      	mov	r2, r7
 80084cc:	9802      	ldr	r0, [sp, #8]
 80084ce:	f000 fc3f 	bl	8008d50 <__lshift>
 80084d2:	4605      	mov	r5, r0
 80084d4:	1be4      	subs	r4, r4, r7
 80084d6:	f100 0914 	add.w	r9, r0, #20
 80084da:	f04f 0a00 	mov.w	sl, #0
 80084de:	e7a8      	b.n	8008432 <__gethex+0x1ce>
 80084e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	dd6b      	ble.n	80085c0 <__gethex+0x35c>
 80084e8:	1b04      	subs	r4, r0, r4
 80084ea:	42a6      	cmp	r6, r4
 80084ec:	dc2e      	bgt.n	800854c <__gethex+0x2e8>
 80084ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d022      	beq.n	800853c <__gethex+0x2d8>
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d024      	beq.n	8008544 <__gethex+0x2e0>
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d115      	bne.n	800852a <__gethex+0x2c6>
 80084fe:	42a6      	cmp	r6, r4
 8008500:	d113      	bne.n	800852a <__gethex+0x2c6>
 8008502:	2e01      	cmp	r6, #1
 8008504:	dc0b      	bgt.n	800851e <__gethex+0x2ba>
 8008506:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800850a:	9a06      	ldr	r2, [sp, #24]
 800850c:	2762      	movs	r7, #98	; 0x62
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	2301      	movs	r3, #1
 8008512:	612b      	str	r3, [r5, #16]
 8008514:	f8c9 3000 	str.w	r3, [r9]
 8008518:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800851a:	601d      	str	r5, [r3, #0]
 800851c:	e72a      	b.n	8008374 <__gethex+0x110>
 800851e:	1e71      	subs	r1, r6, #1
 8008520:	4628      	mov	r0, r5
 8008522:	f000 fdee 	bl	8009102 <__any_on>
 8008526:	2800      	cmp	r0, #0
 8008528:	d1ed      	bne.n	8008506 <__gethex+0x2a2>
 800852a:	4629      	mov	r1, r5
 800852c:	9802      	ldr	r0, [sp, #8]
 800852e:	f000 fa45 	bl	80089bc <_Bfree>
 8008532:	2300      	movs	r3, #0
 8008534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008536:	2750      	movs	r7, #80	; 0x50
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	e71b      	b.n	8008374 <__gethex+0x110>
 800853c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0e1      	beq.n	8008506 <__gethex+0x2a2>
 8008542:	e7f2      	b.n	800852a <__gethex+0x2c6>
 8008544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1dd      	bne.n	8008506 <__gethex+0x2a2>
 800854a:	e7ee      	b.n	800852a <__gethex+0x2c6>
 800854c:	1e67      	subs	r7, r4, #1
 800854e:	f1ba 0f00 	cmp.w	sl, #0
 8008552:	d132      	bne.n	80085ba <__gethex+0x356>
 8008554:	b127      	cbz	r7, 8008560 <__gethex+0x2fc>
 8008556:	4639      	mov	r1, r7
 8008558:	4628      	mov	r0, r5
 800855a:	f000 fdd2 	bl	8009102 <__any_on>
 800855e:	4682      	mov	sl, r0
 8008560:	2301      	movs	r3, #1
 8008562:	117a      	asrs	r2, r7, #5
 8008564:	f007 071f 	and.w	r7, r7, #31
 8008568:	fa03 f707 	lsl.w	r7, r3, r7
 800856c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008570:	4621      	mov	r1, r4
 8008572:	421f      	tst	r7, r3
 8008574:	f04f 0702 	mov.w	r7, #2
 8008578:	4628      	mov	r0, r5
 800857a:	bf18      	it	ne
 800857c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008580:	1b36      	subs	r6, r6, r4
 8008582:	f7ff fe1f 	bl	80081c4 <rshift>
 8008586:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800858a:	f1ba 0f00 	cmp.w	sl, #0
 800858e:	d048      	beq.n	8008622 <__gethex+0x3be>
 8008590:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d015      	beq.n	80085c4 <__gethex+0x360>
 8008598:	2b03      	cmp	r3, #3
 800859a:	d017      	beq.n	80085cc <__gethex+0x368>
 800859c:	2b01      	cmp	r3, #1
 800859e:	d109      	bne.n	80085b4 <__gethex+0x350>
 80085a0:	f01a 0f02 	tst.w	sl, #2
 80085a4:	d006      	beq.n	80085b4 <__gethex+0x350>
 80085a6:	f8d9 3000 	ldr.w	r3, [r9]
 80085aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80085ae:	f01a 0f01 	tst.w	sl, #1
 80085b2:	d10e      	bne.n	80085d2 <__gethex+0x36e>
 80085b4:	f047 0710 	orr.w	r7, r7, #16
 80085b8:	e033      	b.n	8008622 <__gethex+0x3be>
 80085ba:	f04f 0a01 	mov.w	sl, #1
 80085be:	e7cf      	b.n	8008560 <__gethex+0x2fc>
 80085c0:	2701      	movs	r7, #1
 80085c2:	e7e2      	b.n	800858a <__gethex+0x326>
 80085c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c6:	f1c3 0301 	rsb	r3, r3, #1
 80085ca:	9315      	str	r3, [sp, #84]	; 0x54
 80085cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f0      	beq.n	80085b4 <__gethex+0x350>
 80085d2:	f04f 0c00 	mov.w	ip, #0
 80085d6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80085da:	f105 0314 	add.w	r3, r5, #20
 80085de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80085e2:	eb03 010a 	add.w	r1, r3, sl
 80085e6:	4618      	mov	r0, r3
 80085e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085f0:	d01c      	beq.n	800862c <__gethex+0x3c8>
 80085f2:	3201      	adds	r2, #1
 80085f4:	6002      	str	r2, [r0, #0]
 80085f6:	2f02      	cmp	r7, #2
 80085f8:	f105 0314 	add.w	r3, r5, #20
 80085fc:	d138      	bne.n	8008670 <__gethex+0x40c>
 80085fe:	f8d8 2000 	ldr.w	r2, [r8]
 8008602:	3a01      	subs	r2, #1
 8008604:	42b2      	cmp	r2, r6
 8008606:	d10a      	bne.n	800861e <__gethex+0x3ba>
 8008608:	2201      	movs	r2, #1
 800860a:	1171      	asrs	r1, r6, #5
 800860c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008610:	f006 061f 	and.w	r6, r6, #31
 8008614:	fa02 f606 	lsl.w	r6, r2, r6
 8008618:	421e      	tst	r6, r3
 800861a:	bf18      	it	ne
 800861c:	4617      	movne	r7, r2
 800861e:	f047 0720 	orr.w	r7, r7, #32
 8008622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008624:	601d      	str	r5, [r3, #0]
 8008626:	9b06      	ldr	r3, [sp, #24]
 8008628:	601c      	str	r4, [r3, #0]
 800862a:	e6a3      	b.n	8008374 <__gethex+0x110>
 800862c:	4299      	cmp	r1, r3
 800862e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008632:	d8d8      	bhi.n	80085e6 <__gethex+0x382>
 8008634:	68ab      	ldr	r3, [r5, #8]
 8008636:	4599      	cmp	r9, r3
 8008638:	db12      	blt.n	8008660 <__gethex+0x3fc>
 800863a:	6869      	ldr	r1, [r5, #4]
 800863c:	9802      	ldr	r0, [sp, #8]
 800863e:	3101      	adds	r1, #1
 8008640:	f000 f988 	bl	8008954 <_Balloc>
 8008644:	4683      	mov	fp, r0
 8008646:	692a      	ldr	r2, [r5, #16]
 8008648:	f105 010c 	add.w	r1, r5, #12
 800864c:	3202      	adds	r2, #2
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	300c      	adds	r0, #12
 8008652:	f7fc fffd 	bl	8005650 <memcpy>
 8008656:	4629      	mov	r1, r5
 8008658:	9802      	ldr	r0, [sp, #8]
 800865a:	f000 f9af 	bl	80089bc <_Bfree>
 800865e:	465d      	mov	r5, fp
 8008660:	692b      	ldr	r3, [r5, #16]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	612a      	str	r2, [r5, #16]
 8008666:	2201      	movs	r2, #1
 8008668:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800866c:	615a      	str	r2, [r3, #20]
 800866e:	e7c2      	b.n	80085f6 <__gethex+0x392>
 8008670:	692a      	ldr	r2, [r5, #16]
 8008672:	454a      	cmp	r2, r9
 8008674:	dd0b      	ble.n	800868e <__gethex+0x42a>
 8008676:	2101      	movs	r1, #1
 8008678:	4628      	mov	r0, r5
 800867a:	f7ff fda3 	bl	80081c4 <rshift>
 800867e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008682:	3401      	adds	r4, #1
 8008684:	42a3      	cmp	r3, r4
 8008686:	f6ff aed8 	blt.w	800843a <__gethex+0x1d6>
 800868a:	2701      	movs	r7, #1
 800868c:	e7c7      	b.n	800861e <__gethex+0x3ba>
 800868e:	f016 061f 	ands.w	r6, r6, #31
 8008692:	d0fa      	beq.n	800868a <__gethex+0x426>
 8008694:	449a      	add	sl, r3
 8008696:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800869a:	f000 fa1f 	bl	8008adc <__hi0bits>
 800869e:	f1c6 0620 	rsb	r6, r6, #32
 80086a2:	42b0      	cmp	r0, r6
 80086a4:	dbe7      	blt.n	8008676 <__gethex+0x412>
 80086a6:	e7f0      	b.n	800868a <__gethex+0x426>

080086a8 <L_shift>:
 80086a8:	f1c2 0208 	rsb	r2, r2, #8
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	b570      	push	{r4, r5, r6, lr}
 80086b0:	f1c2 0620 	rsb	r6, r2, #32
 80086b4:	6843      	ldr	r3, [r0, #4]
 80086b6:	6804      	ldr	r4, [r0, #0]
 80086b8:	fa03 f506 	lsl.w	r5, r3, r6
 80086bc:	432c      	orrs	r4, r5
 80086be:	40d3      	lsrs	r3, r2
 80086c0:	6004      	str	r4, [r0, #0]
 80086c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80086c6:	4288      	cmp	r0, r1
 80086c8:	d3f4      	bcc.n	80086b4 <L_shift+0xc>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}

080086cc <__match>:
 80086cc:	b530      	push	{r4, r5, lr}
 80086ce:	6803      	ldr	r3, [r0, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d6:	b914      	cbnz	r4, 80086de <__match+0x12>
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	2001      	movs	r0, #1
 80086dc:	bd30      	pop	{r4, r5, pc}
 80086de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086e6:	2d19      	cmp	r5, #25
 80086e8:	bf98      	it	ls
 80086ea:	3220      	addls	r2, #32
 80086ec:	42a2      	cmp	r2, r4
 80086ee:	d0f0      	beq.n	80086d2 <__match+0x6>
 80086f0:	2000      	movs	r0, #0
 80086f2:	e7f3      	b.n	80086dc <__match+0x10>

080086f4 <__hexnan>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	2500      	movs	r5, #0
 80086fa:	680b      	ldr	r3, [r1, #0]
 80086fc:	4682      	mov	sl, r0
 80086fe:	115f      	asrs	r7, r3, #5
 8008700:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008704:	f013 031f 	ands.w	r3, r3, #31
 8008708:	bf18      	it	ne
 800870a:	3704      	addne	r7, #4
 800870c:	1f3e      	subs	r6, r7, #4
 800870e:	4690      	mov	r8, r2
 8008710:	46b1      	mov	r9, r6
 8008712:	4634      	mov	r4, r6
 8008714:	46ab      	mov	fp, r5
 8008716:	b087      	sub	sp, #28
 8008718:	6801      	ldr	r1, [r0, #0]
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f847 5c04 	str.w	r5, [r7, #-4]
 8008720:	9502      	str	r5, [sp, #8]
 8008722:	784a      	ldrb	r2, [r1, #1]
 8008724:	1c4b      	adds	r3, r1, #1
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	b342      	cbz	r2, 800877c <__hexnan+0x88>
 800872a:	4610      	mov	r0, r2
 800872c:	9105      	str	r1, [sp, #20]
 800872e:	9204      	str	r2, [sp, #16]
 8008730:	f7ff fd83 	bl	800823a <__hexdig_fun>
 8008734:	2800      	cmp	r0, #0
 8008736:	d143      	bne.n	80087c0 <__hexnan+0xcc>
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	9905      	ldr	r1, [sp, #20]
 800873c:	2a20      	cmp	r2, #32
 800873e:	d818      	bhi.n	8008772 <__hexnan+0x7e>
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	459b      	cmp	fp, r3
 8008744:	dd13      	ble.n	800876e <__hexnan+0x7a>
 8008746:	454c      	cmp	r4, r9
 8008748:	d206      	bcs.n	8008758 <__hexnan+0x64>
 800874a:	2d07      	cmp	r5, #7
 800874c:	dc04      	bgt.n	8008758 <__hexnan+0x64>
 800874e:	462a      	mov	r2, r5
 8008750:	4649      	mov	r1, r9
 8008752:	4620      	mov	r0, r4
 8008754:	f7ff ffa8 	bl	80086a8 <L_shift>
 8008758:	4544      	cmp	r4, r8
 800875a:	d944      	bls.n	80087e6 <__hexnan+0xf2>
 800875c:	2300      	movs	r3, #0
 800875e:	f1a4 0904 	sub.w	r9, r4, #4
 8008762:	f844 3c04 	str.w	r3, [r4, #-4]
 8008766:	461d      	mov	r5, r3
 8008768:	464c      	mov	r4, r9
 800876a:	f8cd b008 	str.w	fp, [sp, #8]
 800876e:	9903      	ldr	r1, [sp, #12]
 8008770:	e7d7      	b.n	8008722 <__hexnan+0x2e>
 8008772:	2a29      	cmp	r2, #41	; 0x29
 8008774:	d14a      	bne.n	800880c <__hexnan+0x118>
 8008776:	3102      	adds	r1, #2
 8008778:	f8ca 1000 	str.w	r1, [sl]
 800877c:	f1bb 0f00 	cmp.w	fp, #0
 8008780:	d044      	beq.n	800880c <__hexnan+0x118>
 8008782:	454c      	cmp	r4, r9
 8008784:	d206      	bcs.n	8008794 <__hexnan+0xa0>
 8008786:	2d07      	cmp	r5, #7
 8008788:	dc04      	bgt.n	8008794 <__hexnan+0xa0>
 800878a:	462a      	mov	r2, r5
 800878c:	4649      	mov	r1, r9
 800878e:	4620      	mov	r0, r4
 8008790:	f7ff ff8a 	bl	80086a8 <L_shift>
 8008794:	4544      	cmp	r4, r8
 8008796:	d928      	bls.n	80087ea <__hexnan+0xf6>
 8008798:	4643      	mov	r3, r8
 800879a:	f854 2b04 	ldr.w	r2, [r4], #4
 800879e:	42a6      	cmp	r6, r4
 80087a0:	f843 2b04 	str.w	r2, [r3], #4
 80087a4:	d2f9      	bcs.n	800879a <__hexnan+0xa6>
 80087a6:	2200      	movs	r2, #0
 80087a8:	f843 2b04 	str.w	r2, [r3], #4
 80087ac:	429e      	cmp	r6, r3
 80087ae:	d2fb      	bcs.n	80087a8 <__hexnan+0xb4>
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	b91b      	cbnz	r3, 80087bc <__hexnan+0xc8>
 80087b4:	4546      	cmp	r6, r8
 80087b6:	d127      	bne.n	8008808 <__hexnan+0x114>
 80087b8:	2301      	movs	r3, #1
 80087ba:	6033      	str	r3, [r6, #0]
 80087bc:	2005      	movs	r0, #5
 80087be:	e026      	b.n	800880e <__hexnan+0x11a>
 80087c0:	3501      	adds	r5, #1
 80087c2:	2d08      	cmp	r5, #8
 80087c4:	f10b 0b01 	add.w	fp, fp, #1
 80087c8:	dd06      	ble.n	80087d8 <__hexnan+0xe4>
 80087ca:	4544      	cmp	r4, r8
 80087cc:	d9cf      	bls.n	800876e <__hexnan+0x7a>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2501      	movs	r5, #1
 80087d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80087d6:	3c04      	subs	r4, #4
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	f000 000f 	and.w	r0, r0, #15
 80087de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	e7c3      	b.n	800876e <__hexnan+0x7a>
 80087e6:	2508      	movs	r5, #8
 80087e8:	e7c1      	b.n	800876e <__hexnan+0x7a>
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d0df      	beq.n	80087b0 <__hexnan+0xbc>
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	f1c3 0320 	rsb	r3, r3, #32
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
 80087fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008800:	401a      	ands	r2, r3
 8008802:	f847 2c04 	str.w	r2, [r7, #-4]
 8008806:	e7d3      	b.n	80087b0 <__hexnan+0xbc>
 8008808:	3e04      	subs	r6, #4
 800880a:	e7d1      	b.n	80087b0 <__hexnan+0xbc>
 800880c:	2004      	movs	r0, #4
 800880e:	b007      	add	sp, #28
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008814 <__locale_ctype_ptr_l>:
 8008814:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008818:	4770      	bx	lr

0800881a <__localeconv_l>:
 800881a:	30f0      	adds	r0, #240	; 0xf0
 800881c:	4770      	bx	lr
	...

08008820 <_localeconv_r>:
 8008820:	4b04      	ldr	r3, [pc, #16]	; (8008834 <_localeconv_r+0x14>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6a18      	ldr	r0, [r3, #32]
 8008826:	4b04      	ldr	r3, [pc, #16]	; (8008838 <_localeconv_r+0x18>)
 8008828:	2800      	cmp	r0, #0
 800882a:	bf08      	it	eq
 800882c:	4618      	moveq	r0, r3
 800882e:	30f0      	adds	r0, #240	; 0xf0
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000010 	.word	0x20000010
 8008838:	20000074 	.word	0x20000074

0800883c <__swhatbuf_r>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	460e      	mov	r6, r1
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	b096      	sub	sp, #88	; 0x58
 8008846:	2900      	cmp	r1, #0
 8008848:	4614      	mov	r4, r2
 800884a:	461d      	mov	r5, r3
 800884c:	da07      	bge.n	800885e <__swhatbuf_r+0x22>
 800884e:	2300      	movs	r3, #0
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	89b3      	ldrh	r3, [r6, #12]
 8008854:	061a      	lsls	r2, r3, #24
 8008856:	d410      	bmi.n	800887a <__swhatbuf_r+0x3e>
 8008858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800885c:	e00e      	b.n	800887c <__swhatbuf_r+0x40>
 800885e:	466a      	mov	r2, sp
 8008860:	f001 f848 	bl	80098f4 <_fstat_r>
 8008864:	2800      	cmp	r0, #0
 8008866:	dbf2      	blt.n	800884e <__swhatbuf_r+0x12>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800886e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008872:	425a      	negs	r2, r3
 8008874:	415a      	adcs	r2, r3
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	e7ee      	b.n	8008858 <__swhatbuf_r+0x1c>
 800887a:	2340      	movs	r3, #64	; 0x40
 800887c:	2000      	movs	r0, #0
 800887e:	6023      	str	r3, [r4, #0]
 8008880:	b016      	add	sp, #88	; 0x58
 8008882:	bd70      	pop	{r4, r5, r6, pc}

08008884 <__smakebuf_r>:
 8008884:	898b      	ldrh	r3, [r1, #12]
 8008886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008888:	079d      	lsls	r5, r3, #30
 800888a:	4606      	mov	r6, r0
 800888c:	460c      	mov	r4, r1
 800888e:	d507      	bpl.n	80088a0 <__smakebuf_r+0x1c>
 8008890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	2301      	movs	r3, #1
 800889a:	6163      	str	r3, [r4, #20]
 800889c:	b002      	add	sp, #8
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	ab01      	add	r3, sp, #4
 80088a2:	466a      	mov	r2, sp
 80088a4:	f7ff ffca 	bl	800883c <__swhatbuf_r>
 80088a8:	9900      	ldr	r1, [sp, #0]
 80088aa:	4605      	mov	r5, r0
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 fca3 	bl	80091f8 <_malloc_r>
 80088b2:	b948      	cbnz	r0, 80088c8 <__smakebuf_r+0x44>
 80088b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b8:	059a      	lsls	r2, r3, #22
 80088ba:	d4ef      	bmi.n	800889c <__smakebuf_r+0x18>
 80088bc:	f023 0303 	bic.w	r3, r3, #3
 80088c0:	f043 0302 	orr.w	r3, r3, #2
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	e7e3      	b.n	8008890 <__smakebuf_r+0xc>
 80088c8:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <__smakebuf_r+0x7c>)
 80088ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	6020      	str	r0, [r4, #0]
 80088d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d4:	81a3      	strh	r3, [r4, #12]
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	6120      	str	r0, [r4, #16]
 80088da:	6163      	str	r3, [r4, #20]
 80088dc:	9b01      	ldr	r3, [sp, #4]
 80088de:	b15b      	cbz	r3, 80088f8 <__smakebuf_r+0x74>
 80088e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e4:	4630      	mov	r0, r6
 80088e6:	f001 f817 	bl	8009918 <_isatty_r>
 80088ea:	b128      	cbz	r0, 80088f8 <__smakebuf_r+0x74>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	431d      	orrs	r5, r3
 80088fc:	81a5      	strh	r5, [r4, #12]
 80088fe:	e7cd      	b.n	800889c <__smakebuf_r+0x18>
 8008900:	08008079 	.word	0x08008079

08008904 <malloc>:
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <malloc+0xc>)
 8008906:	4601      	mov	r1, r0
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	f000 bc75 	b.w	80091f8 <_malloc_r>
 800890e:	bf00      	nop
 8008910:	20000010 	.word	0x20000010

08008914 <__ascii_mbtowc>:
 8008914:	b082      	sub	sp, #8
 8008916:	b901      	cbnz	r1, 800891a <__ascii_mbtowc+0x6>
 8008918:	a901      	add	r1, sp, #4
 800891a:	b142      	cbz	r2, 800892e <__ascii_mbtowc+0x1a>
 800891c:	b14b      	cbz	r3, 8008932 <__ascii_mbtowc+0x1e>
 800891e:	7813      	ldrb	r3, [r2, #0]
 8008920:	600b      	str	r3, [r1, #0]
 8008922:	7812      	ldrb	r2, [r2, #0]
 8008924:	1c10      	adds	r0, r2, #0
 8008926:	bf18      	it	ne
 8008928:	2001      	movne	r0, #1
 800892a:	b002      	add	sp, #8
 800892c:	4770      	bx	lr
 800892e:	4610      	mov	r0, r2
 8008930:	e7fb      	b.n	800892a <__ascii_mbtowc+0x16>
 8008932:	f06f 0001 	mvn.w	r0, #1
 8008936:	e7f8      	b.n	800892a <__ascii_mbtowc+0x16>

08008938 <memchr>:
 8008938:	b510      	push	{r4, lr}
 800893a:	b2c9      	uxtb	r1, r1
 800893c:	4402      	add	r2, r0
 800893e:	4290      	cmp	r0, r2
 8008940:	4603      	mov	r3, r0
 8008942:	d101      	bne.n	8008948 <memchr+0x10>
 8008944:	2300      	movs	r3, #0
 8008946:	e003      	b.n	8008950 <memchr+0x18>
 8008948:	781c      	ldrb	r4, [r3, #0]
 800894a:	3001      	adds	r0, #1
 800894c:	428c      	cmp	r4, r1
 800894e:	d1f6      	bne.n	800893e <memchr+0x6>
 8008950:	4618      	mov	r0, r3
 8008952:	bd10      	pop	{r4, pc}

08008954 <_Balloc>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008958:	4604      	mov	r4, r0
 800895a:	460e      	mov	r6, r1
 800895c:	b93d      	cbnz	r5, 800896e <_Balloc+0x1a>
 800895e:	2010      	movs	r0, #16
 8008960:	f7ff ffd0 	bl	8008904 <malloc>
 8008964:	6260      	str	r0, [r4, #36]	; 0x24
 8008966:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800896a:	6005      	str	r5, [r0, #0]
 800896c:	60c5      	str	r5, [r0, #12]
 800896e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008970:	68eb      	ldr	r3, [r5, #12]
 8008972:	b183      	cbz	r3, 8008996 <_Balloc+0x42>
 8008974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800897c:	b9b8      	cbnz	r0, 80089ae <_Balloc+0x5a>
 800897e:	2101      	movs	r1, #1
 8008980:	fa01 f506 	lsl.w	r5, r1, r6
 8008984:	1d6a      	adds	r2, r5, #5
 8008986:	0092      	lsls	r2, r2, #2
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fbdb 	bl	8009144 <_calloc_r>
 800898e:	b160      	cbz	r0, 80089aa <_Balloc+0x56>
 8008990:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008994:	e00e      	b.n	80089b4 <_Balloc+0x60>
 8008996:	2221      	movs	r2, #33	; 0x21
 8008998:	2104      	movs	r1, #4
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fbd2 	bl	8009144 <_calloc_r>
 80089a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a2:	60e8      	str	r0, [r5, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e4      	bne.n	8008974 <_Balloc+0x20>
 80089aa:	2000      	movs	r0, #0
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	6802      	ldr	r2, [r0, #0]
 80089b0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089b4:	2300      	movs	r3, #0
 80089b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ba:	e7f7      	b.n	80089ac <_Balloc+0x58>

080089bc <_Bfree>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089c0:	4606      	mov	r6, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	b93c      	cbnz	r4, 80089d6 <_Bfree+0x1a>
 80089c6:	2010      	movs	r0, #16
 80089c8:	f7ff ff9c 	bl	8008904 <malloc>
 80089cc:	6270      	str	r0, [r6, #36]	; 0x24
 80089ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089d2:	6004      	str	r4, [r0, #0]
 80089d4:	60c4      	str	r4, [r0, #12]
 80089d6:	b13d      	cbz	r5, 80089e8 <_Bfree+0x2c>
 80089d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80089da:	686a      	ldr	r2, [r5, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e2:	6029      	str	r1, [r5, #0]
 80089e4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80089e8:	bd70      	pop	{r4, r5, r6, pc}

080089ea <__multadd>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	4606      	mov	r6, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	2300      	movs	r3, #0
 80089f6:	690d      	ldr	r5, [r1, #16]
 80089f8:	f101 0c14 	add.w	ip, r1, #20
 80089fc:	f8dc 0000 	ldr.w	r0, [ip]
 8008a00:	3301      	adds	r3, #1
 8008a02:	b281      	uxth	r1, r0
 8008a04:	fb02 7101 	mla	r1, r2, r1, r7
 8008a08:	0c00      	lsrs	r0, r0, #16
 8008a0a:	0c0f      	lsrs	r7, r1, #16
 8008a0c:	fb02 7000 	mla	r0, r2, r0, r7
 8008a10:	b289      	uxth	r1, r1
 8008a12:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a16:	429d      	cmp	r5, r3
 8008a18:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a1c:	f84c 1b04 	str.w	r1, [ip], #4
 8008a20:	dcec      	bgt.n	80089fc <__multadd+0x12>
 8008a22:	b1d7      	cbz	r7, 8008a5a <__multadd+0x70>
 8008a24:	68a3      	ldr	r3, [r4, #8]
 8008a26:	42ab      	cmp	r3, r5
 8008a28:	dc12      	bgt.n	8008a50 <__multadd+0x66>
 8008a2a:	6861      	ldr	r1, [r4, #4]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	3101      	adds	r1, #1
 8008a30:	f7ff ff90 	bl	8008954 <_Balloc>
 8008a34:	4680      	mov	r8, r0
 8008a36:	6922      	ldr	r2, [r4, #16]
 8008a38:	f104 010c 	add.w	r1, r4, #12
 8008a3c:	3202      	adds	r2, #2
 8008a3e:	0092      	lsls	r2, r2, #2
 8008a40:	300c      	adds	r0, #12
 8008a42:	f7fc fe05 	bl	8005650 <memcpy>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ffb7 	bl	80089bc <_Bfree>
 8008a4e:	4644      	mov	r4, r8
 8008a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a54:	3501      	adds	r5, #1
 8008a56:	615f      	str	r7, [r3, #20]
 8008a58:	6125      	str	r5, [r4, #16]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a60 <__s2b>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	4615      	mov	r5, r2
 8008a66:	2209      	movs	r2, #9
 8008a68:	461f      	mov	r7, r3
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a72:	4606      	mov	r6, r0
 8008a74:	2201      	movs	r2, #1
 8008a76:	2100      	movs	r1, #0
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	db20      	blt.n	8008abe <__s2b+0x5e>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ff69 	bl	8008954 <_Balloc>
 8008a82:	9b08      	ldr	r3, [sp, #32]
 8008a84:	2d09      	cmp	r5, #9
 8008a86:	6143      	str	r3, [r0, #20]
 8008a88:	f04f 0301 	mov.w	r3, #1
 8008a8c:	6103      	str	r3, [r0, #16]
 8008a8e:	dd19      	ble.n	8008ac4 <__s2b+0x64>
 8008a90:	f104 0809 	add.w	r8, r4, #9
 8008a94:	46c1      	mov	r9, r8
 8008a96:	442c      	add	r4, r5
 8008a98:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	3b30      	subs	r3, #48	; 0x30
 8008aa0:	220a      	movs	r2, #10
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffa1 	bl	80089ea <__multadd>
 8008aa8:	45a1      	cmp	r9, r4
 8008aaa:	d1f5      	bne.n	8008a98 <__s2b+0x38>
 8008aac:	eb08 0405 	add.w	r4, r8, r5
 8008ab0:	3c08      	subs	r4, #8
 8008ab2:	1b2d      	subs	r5, r5, r4
 8008ab4:	1963      	adds	r3, r4, r5
 8008ab6:	42bb      	cmp	r3, r7
 8008ab8:	db07      	blt.n	8008aca <__s2b+0x6a>
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	0052      	lsls	r2, r2, #1
 8008ac0:	3101      	adds	r1, #1
 8008ac2:	e7d9      	b.n	8008a78 <__s2b+0x18>
 8008ac4:	340a      	adds	r4, #10
 8008ac6:	2509      	movs	r5, #9
 8008ac8:	e7f3      	b.n	8008ab2 <__s2b+0x52>
 8008aca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ace:	4601      	mov	r1, r0
 8008ad0:	3b30      	subs	r3, #48	; 0x30
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff ff88 	bl	80089ea <__multadd>
 8008ada:	e7eb      	b.n	8008ab4 <__s2b+0x54>

08008adc <__hi0bits>:
 8008adc:	0c02      	lsrs	r2, r0, #16
 8008ade:	0412      	lsls	r2, r2, #16
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b9b2      	cbnz	r2, 8008b12 <__hi0bits+0x36>
 8008ae4:	0403      	lsls	r3, r0, #16
 8008ae6:	2010      	movs	r0, #16
 8008ae8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008aec:	bf04      	itt	eq
 8008aee:	021b      	lsleq	r3, r3, #8
 8008af0:	3008      	addeq	r0, #8
 8008af2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008af6:	bf04      	itt	eq
 8008af8:	011b      	lsleq	r3, r3, #4
 8008afa:	3004      	addeq	r0, #4
 8008afc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b00:	bf04      	itt	eq
 8008b02:	009b      	lsleq	r3, r3, #2
 8008b04:	3002      	addeq	r0, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db06      	blt.n	8008b18 <__hi0bits+0x3c>
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	d503      	bpl.n	8008b16 <__hi0bits+0x3a>
 8008b0e:	3001      	adds	r0, #1
 8008b10:	4770      	bx	lr
 8008b12:	2000      	movs	r0, #0
 8008b14:	e7e8      	b.n	8008ae8 <__hi0bits+0xc>
 8008b16:	2020      	movs	r0, #32
 8008b18:	4770      	bx	lr

08008b1a <__lo0bits>:
 8008b1a:	6803      	ldr	r3, [r0, #0]
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	f013 0207 	ands.w	r2, r3, #7
 8008b22:	d00b      	beq.n	8008b3c <__lo0bits+0x22>
 8008b24:	07da      	lsls	r2, r3, #31
 8008b26:	d423      	bmi.n	8008b70 <__lo0bits+0x56>
 8008b28:	0798      	lsls	r0, r3, #30
 8008b2a:	bf49      	itett	mi
 8008b2c:	085b      	lsrmi	r3, r3, #1
 8008b2e:	089b      	lsrpl	r3, r3, #2
 8008b30:	2001      	movmi	r0, #1
 8008b32:	600b      	strmi	r3, [r1, #0]
 8008b34:	bf5c      	itt	pl
 8008b36:	600b      	strpl	r3, [r1, #0]
 8008b38:	2002      	movpl	r0, #2
 8008b3a:	4770      	bx	lr
 8008b3c:	b298      	uxth	r0, r3
 8008b3e:	b9a8      	cbnz	r0, 8008b6c <__lo0bits+0x52>
 8008b40:	2010      	movs	r0, #16
 8008b42:	0c1b      	lsrs	r3, r3, #16
 8008b44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b48:	bf04      	itt	eq
 8008b4a:	0a1b      	lsreq	r3, r3, #8
 8008b4c:	3008      	addeq	r0, #8
 8008b4e:	071a      	lsls	r2, r3, #28
 8008b50:	bf04      	itt	eq
 8008b52:	091b      	lsreq	r3, r3, #4
 8008b54:	3004      	addeq	r0, #4
 8008b56:	079a      	lsls	r2, r3, #30
 8008b58:	bf04      	itt	eq
 8008b5a:	089b      	lsreq	r3, r3, #2
 8008b5c:	3002      	addeq	r0, #2
 8008b5e:	07da      	lsls	r2, r3, #31
 8008b60:	d402      	bmi.n	8008b68 <__lo0bits+0x4e>
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	d006      	beq.n	8008b74 <__lo0bits+0x5a>
 8008b66:	3001      	adds	r0, #1
 8008b68:	600b      	str	r3, [r1, #0]
 8008b6a:	4770      	bx	lr
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	e7e9      	b.n	8008b44 <__lo0bits+0x2a>
 8008b70:	2000      	movs	r0, #0
 8008b72:	4770      	bx	lr
 8008b74:	2020      	movs	r0, #32
 8008b76:	4770      	bx	lr

08008b78 <__i2b>:
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	f7ff fee9 	bl	8008954 <_Balloc>
 8008b82:	2201      	movs	r2, #1
 8008b84:	6144      	str	r4, [r0, #20]
 8008b86:	6102      	str	r2, [r0, #16]
 8008b88:	bd10      	pop	{r4, pc}

08008b8a <__multiply>:
 8008b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8e:	4614      	mov	r4, r2
 8008b90:	690a      	ldr	r2, [r1, #16]
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	4688      	mov	r8, r1
 8008b96:	429a      	cmp	r2, r3
 8008b98:	bfbe      	ittt	lt
 8008b9a:	460b      	movlt	r3, r1
 8008b9c:	46a0      	movlt	r8, r4
 8008b9e:	461c      	movlt	r4, r3
 8008ba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ba8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bb0:	eb07 0609 	add.w	r6, r7, r9
 8008bb4:	42b3      	cmp	r3, r6
 8008bb6:	bfb8      	it	lt
 8008bb8:	3101      	addlt	r1, #1
 8008bba:	f7ff fecb 	bl	8008954 <_Balloc>
 8008bbe:	f100 0514 	add.w	r5, r0, #20
 8008bc2:	462b      	mov	r3, r5
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008bca:	4573      	cmp	r3, lr
 8008bcc:	d316      	bcc.n	8008bfc <__multiply+0x72>
 8008bce:	f104 0214 	add.w	r2, r4, #20
 8008bd2:	f108 0114 	add.w	r1, r8, #20
 8008bd6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008bda:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	9b00      	ldr	r3, [sp, #0]
 8008be2:	9201      	str	r2, [sp, #4]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d80c      	bhi.n	8008c02 <__multiply+0x78>
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	dd03      	ble.n	8008bf4 <__multiply+0x6a>
 8008bec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d05d      	beq.n	8008cb0 <__multiply+0x126>
 8008bf4:	6106      	str	r6, [r0, #16]
 8008bf6:	b003      	add	sp, #12
 8008bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfc:	f843 2b04 	str.w	r2, [r3], #4
 8008c00:	e7e3      	b.n	8008bca <__multiply+0x40>
 8008c02:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c06:	f1bb 0f00 	cmp.w	fp, #0
 8008c0a:	d023      	beq.n	8008c54 <__multiply+0xca>
 8008c0c:	4689      	mov	r9, r1
 8008c0e:	46ac      	mov	ip, r5
 8008c10:	f04f 0800 	mov.w	r8, #0
 8008c14:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c18:	f8dc a000 	ldr.w	sl, [ip]
 8008c1c:	b2a3      	uxth	r3, r4
 8008c1e:	fa1f fa8a 	uxth.w	sl, sl
 8008c22:	fb0b a303 	mla	r3, fp, r3, sl
 8008c26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c2a:	f8dc 4000 	ldr.w	r4, [ip]
 8008c2e:	4443      	add	r3, r8
 8008c30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c34:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c38:	46e2      	mov	sl, ip
 8008c3a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c44:	454f      	cmp	r7, r9
 8008c46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c4a:	f84a 3b04 	str.w	r3, [sl], #4
 8008c4e:	d82b      	bhi.n	8008ca8 <__multiply+0x11e>
 8008c50:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	3204      	adds	r2, #4
 8008c58:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c5c:	f1ba 0f00 	cmp.w	sl, #0
 8008c60:	d020      	beq.n	8008ca4 <__multiply+0x11a>
 8008c62:	4689      	mov	r9, r1
 8008c64:	46a8      	mov	r8, r5
 8008c66:	f04f 0b00 	mov.w	fp, #0
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c70:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c7a:	46c4      	mov	ip, r8
 8008c7c:	445c      	add	r4, fp
 8008c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c82:	f84c 3b04 	str.w	r3, [ip], #4
 8008c86:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c8a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	fb0a b303 	mla	r3, sl, r3, fp
 8008c94:	454f      	cmp	r7, r9
 8008c96:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008c9a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008c9e:	d805      	bhi.n	8008cac <__multiply+0x122>
 8008ca0:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ca4:	3504      	adds	r5, #4
 8008ca6:	e79b      	b.n	8008be0 <__multiply+0x56>
 8008ca8:	46d4      	mov	ip, sl
 8008caa:	e7b3      	b.n	8008c14 <__multiply+0x8a>
 8008cac:	46e0      	mov	r8, ip
 8008cae:	e7dd      	b.n	8008c6c <__multiply+0xe2>
 8008cb0:	3e01      	subs	r6, #1
 8008cb2:	e799      	b.n	8008be8 <__multiply+0x5e>

08008cb4 <__pow5mult>:
 8008cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	4615      	mov	r5, r2
 8008cba:	f012 0203 	ands.w	r2, r2, #3
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	d007      	beq.n	8008cd4 <__pow5mult+0x20>
 8008cc4:	4c21      	ldr	r4, [pc, #132]	; (8008d4c <__pow5mult+0x98>)
 8008cc6:	3a01      	subs	r2, #1
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cce:	f7ff fe8c 	bl	80089ea <__multadd>
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	10ad      	asrs	r5, r5, #2
 8008cd6:	d035      	beq.n	8008d44 <__pow5mult+0x90>
 8008cd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cda:	b93c      	cbnz	r4, 8008cec <__pow5mult+0x38>
 8008cdc:	2010      	movs	r0, #16
 8008cde:	f7ff fe11 	bl	8008904 <malloc>
 8008ce2:	6270      	str	r0, [r6, #36]	; 0x24
 8008ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ce8:	6004      	str	r4, [r0, #0]
 8008cea:	60c4      	str	r4, [r0, #12]
 8008cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf4:	b94c      	cbnz	r4, 8008d0a <__pow5mult+0x56>
 8008cf6:	f240 2171 	movw	r1, #625	; 0x271
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ff3c 	bl	8008b78 <__i2b>
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	f04f 0800 	mov.w	r8, #0
 8008d0e:	07eb      	lsls	r3, r5, #31
 8008d10:	d50a      	bpl.n	8008d28 <__pow5mult+0x74>
 8008d12:	4639      	mov	r1, r7
 8008d14:	4622      	mov	r2, r4
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff ff37 	bl	8008b8a <__multiply>
 8008d1c:	4681      	mov	r9, r0
 8008d1e:	4639      	mov	r1, r7
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff fe4b 	bl	80089bc <_Bfree>
 8008d26:	464f      	mov	r7, r9
 8008d28:	106d      	asrs	r5, r5, #1
 8008d2a:	d00b      	beq.n	8008d44 <__pow5mult+0x90>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	b938      	cbnz	r0, 8008d40 <__pow5mult+0x8c>
 8008d30:	4622      	mov	r2, r4
 8008d32:	4621      	mov	r1, r4
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff ff28 	bl	8008b8a <__multiply>
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f8c0 8000 	str.w	r8, [r0]
 8008d40:	4604      	mov	r4, r0
 8008d42:	e7e4      	b.n	8008d0e <__pow5mult+0x5a>
 8008d44:	4638      	mov	r0, r7
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009cb0 	.word	0x08009cb0

08008d50 <__lshift>:
 8008d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	460c      	mov	r4, r1
 8008d56:	4607      	mov	r7, r0
 8008d58:	4616      	mov	r6, r2
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d60:	eb0a 0903 	add.w	r9, sl, r3
 8008d64:	6849      	ldr	r1, [r1, #4]
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	f109 0501 	add.w	r5, r9, #1
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	db32      	blt.n	8008dd6 <__lshift+0x86>
 8008d70:	4638      	mov	r0, r7
 8008d72:	f7ff fdef 	bl	8008954 <_Balloc>
 8008d76:	2300      	movs	r3, #0
 8008d78:	4680      	mov	r8, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f100 0114 	add.w	r1, r0, #20
 8008d80:	4553      	cmp	r3, sl
 8008d82:	db2b      	blt.n	8008ddc <__lshift+0x8c>
 8008d84:	6920      	ldr	r0, [r4, #16]
 8008d86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d8a:	f104 0314 	add.w	r3, r4, #20
 8008d8e:	f016 021f 	ands.w	r2, r6, #31
 8008d92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d9a:	d025      	beq.n	8008de8 <__lshift+0x98>
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f1c2 0e20 	rsb	lr, r2, #32
 8008da2:	468a      	mov	sl, r1
 8008da4:	681e      	ldr	r6, [r3, #0]
 8008da6:	4096      	lsls	r6, r2
 8008da8:	4330      	orrs	r0, r6
 8008daa:	f84a 0b04 	str.w	r0, [sl], #4
 8008dae:	f853 0b04 	ldr.w	r0, [r3], #4
 8008db2:	459c      	cmp	ip, r3
 8008db4:	fa20 f00e 	lsr.w	r0, r0, lr
 8008db8:	d814      	bhi.n	8008de4 <__lshift+0x94>
 8008dba:	6048      	str	r0, [r1, #4]
 8008dbc:	b108      	cbz	r0, 8008dc2 <__lshift+0x72>
 8008dbe:	f109 0502 	add.w	r5, r9, #2
 8008dc2:	3d01      	subs	r5, #1
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f7ff fdf6 	bl	80089bc <_Bfree>
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd6:	3101      	adds	r1, #1
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	e7c7      	b.n	8008d6c <__lshift+0x1c>
 8008ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008de0:	3301      	adds	r3, #1
 8008de2:	e7cd      	b.n	8008d80 <__lshift+0x30>
 8008de4:	4651      	mov	r1, sl
 8008de6:	e7dc      	b.n	8008da2 <__lshift+0x52>
 8008de8:	3904      	subs	r1, #4
 8008dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dee:	459c      	cmp	ip, r3
 8008df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008df4:	d8f9      	bhi.n	8008dea <__lshift+0x9a>
 8008df6:	e7e4      	b.n	8008dc2 <__lshift+0x72>

08008df8 <__mcmp>:
 8008df8:	6903      	ldr	r3, [r0, #16]
 8008dfa:	690a      	ldr	r2, [r1, #16]
 8008dfc:	b530      	push	{r4, r5, lr}
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	d10c      	bne.n	8008e1c <__mcmp+0x24>
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	3014      	adds	r0, #20
 8008e06:	3114      	adds	r1, #20
 8008e08:	1884      	adds	r4, r0, r2
 8008e0a:	4411      	add	r1, r2
 8008e0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e14:	4295      	cmp	r5, r2
 8008e16:	d003      	beq.n	8008e20 <__mcmp+0x28>
 8008e18:	d305      	bcc.n	8008e26 <__mcmp+0x2e>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd30      	pop	{r4, r5, pc}
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d3f3      	bcc.n	8008e0c <__mcmp+0x14>
 8008e24:	e7fa      	b.n	8008e1c <__mcmp+0x24>
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2a:	e7f7      	b.n	8008e1c <__mcmp+0x24>

08008e2c <__mdiff>:
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	460d      	mov	r5, r1
 8008e32:	4607      	mov	r7, r0
 8008e34:	4611      	mov	r1, r2
 8008e36:	4628      	mov	r0, r5
 8008e38:	4614      	mov	r4, r2
 8008e3a:	f7ff ffdd 	bl	8008df8 <__mcmp>
 8008e3e:	1e06      	subs	r6, r0, #0
 8008e40:	d108      	bne.n	8008e54 <__mdiff+0x28>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4638      	mov	r0, r7
 8008e46:	f7ff fd85 	bl	8008954 <_Balloc>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	bfa4      	itt	ge
 8008e56:	4623      	movge	r3, r4
 8008e58:	462c      	movge	r4, r5
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	6861      	ldr	r1, [r4, #4]
 8008e5e:	bfa6      	itte	ge
 8008e60:	461d      	movge	r5, r3
 8008e62:	2600      	movge	r6, #0
 8008e64:	2601      	movlt	r6, #1
 8008e66:	f7ff fd75 	bl	8008954 <_Balloc>
 8008e6a:	f04f 0e00 	mov.w	lr, #0
 8008e6e:	60c6      	str	r6, [r0, #12]
 8008e70:	692b      	ldr	r3, [r5, #16]
 8008e72:	6926      	ldr	r6, [r4, #16]
 8008e74:	f104 0214 	add.w	r2, r4, #20
 8008e78:	f105 0914 	add.w	r9, r5, #20
 8008e7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008e84:	f100 0114 	add.w	r1, r0, #20
 8008e88:	f852 ab04 	ldr.w	sl, [r2], #4
 8008e8c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008e90:	fa1f f38a 	uxth.w	r3, sl
 8008e94:	4473      	add	r3, lr
 8008e96:	b2ac      	uxth	r4, r5
 8008e98:	1b1b      	subs	r3, r3, r4
 8008e9a:	0c2c      	lsrs	r4, r5, #16
 8008e9c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008ea0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008eaa:	45c8      	cmp	r8, r9
 8008eac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008eb0:	4694      	mov	ip, r2
 8008eb2:	f841 4b04 	str.w	r4, [r1], #4
 8008eb6:	d8e7      	bhi.n	8008e88 <__mdiff+0x5c>
 8008eb8:	45bc      	cmp	ip, r7
 8008eba:	d304      	bcc.n	8008ec6 <__mdiff+0x9a>
 8008ebc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ec0:	b183      	cbz	r3, 8008ee4 <__mdiff+0xb8>
 8008ec2:	6106      	str	r6, [r0, #16]
 8008ec4:	e7c4      	b.n	8008e50 <__mdiff+0x24>
 8008ec6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008eca:	b2a2      	uxth	r2, r4
 8008ecc:	4472      	add	r2, lr
 8008ece:	1413      	asrs	r3, r2, #16
 8008ed0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008eda:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ede:	f841 2b04 	str.w	r2, [r1], #4
 8008ee2:	e7e9      	b.n	8008eb8 <__mdiff+0x8c>
 8008ee4:	3e01      	subs	r6, #1
 8008ee6:	e7e9      	b.n	8008ebc <__mdiff+0x90>

08008ee8 <__ulp>:
 8008ee8:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <__ulp+0x44>)
 8008eea:	400b      	ands	r3, r1
 8008eec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dd02      	ble.n	8008efa <__ulp+0x12>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4770      	bx	lr
 8008efa:	425b      	negs	r3, r3
 8008efc:	151b      	asrs	r3, r3, #20
 8008efe:	2b13      	cmp	r3, #19
 8008f00:	f04f 0000 	mov.w	r0, #0
 8008f04:	f04f 0100 	mov.w	r1, #0
 8008f08:	dc04      	bgt.n	8008f14 <__ulp+0x2c>
 8008f0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f0e:	fa42 f103 	asr.w	r1, r2, r3
 8008f12:	4770      	bx	lr
 8008f14:	2201      	movs	r2, #1
 8008f16:	3b14      	subs	r3, #20
 8008f18:	2b1e      	cmp	r3, #30
 8008f1a:	bfce      	itee	gt
 8008f1c:	4613      	movgt	r3, r2
 8008f1e:	f1c3 031f 	rsble	r3, r3, #31
 8008f22:	fa02 f303 	lslle.w	r3, r2, r3
 8008f26:	4618      	mov	r0, r3
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	7ff00000 	.word	0x7ff00000

08008f30 <__b2d>:
 8008f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	6907      	ldr	r7, [r0, #16]
 8008f36:	f100 0914 	add.w	r9, r0, #20
 8008f3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008f3e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008f42:	f1a7 0804 	sub.w	r8, r7, #4
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7ff fdc8 	bl	8008adc <__hi0bits>
 8008f4c:	f1c0 0320 	rsb	r3, r0, #32
 8008f50:	280a      	cmp	r0, #10
 8008f52:	600b      	str	r3, [r1, #0]
 8008f54:	491e      	ldr	r1, [pc, #120]	; (8008fd0 <__b2d+0xa0>)
 8008f56:	dc17      	bgt.n	8008f88 <__b2d+0x58>
 8008f58:	45c1      	cmp	r9, r8
 8008f5a:	bf28      	it	cs
 8008f5c:	2200      	movcs	r2, #0
 8008f5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f62:	fa26 f30c 	lsr.w	r3, r6, ip
 8008f66:	bf38      	it	cc
 8008f68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f6c:	ea43 0501 	orr.w	r5, r3, r1
 8008f70:	f100 0315 	add.w	r3, r0, #21
 8008f74:	fa06 f303 	lsl.w	r3, r6, r3
 8008f78:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f7c:	ea43 0402 	orr.w	r4, r3, r2
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f88:	45c1      	cmp	r9, r8
 8008f8a:	bf3a      	itte	cc
 8008f8c:	f1a7 0808 	subcc.w	r8, r7, #8
 8008f90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f94:	2200      	movcs	r2, #0
 8008f96:	f1b0 030b 	subs.w	r3, r0, #11
 8008f9a:	d015      	beq.n	8008fc8 <__b2d+0x98>
 8008f9c:	409e      	lsls	r6, r3
 8008f9e:	f1c3 0720 	rsb	r7, r3, #32
 8008fa2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008fa6:	fa22 f107 	lsr.w	r1, r2, r7
 8008faa:	45c8      	cmp	r8, r9
 8008fac:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008fb0:	ea46 0501 	orr.w	r5, r6, r1
 8008fb4:	bf94      	ite	ls
 8008fb6:	2100      	movls	r1, #0
 8008fb8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008fbc:	fa02 f003 	lsl.w	r0, r2, r3
 8008fc0:	40f9      	lsrs	r1, r7
 8008fc2:	ea40 0401 	orr.w	r4, r0, r1
 8008fc6:	e7db      	b.n	8008f80 <__b2d+0x50>
 8008fc8:	ea46 0501 	orr.w	r5, r6, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	e7d7      	b.n	8008f80 <__b2d+0x50>
 8008fd0:	3ff00000 	.word	0x3ff00000

08008fd4 <__d2b>:
 8008fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008fd8:	461c      	mov	r4, r3
 8008fda:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4690      	mov	r8, r2
 8008fe2:	f7ff fcb7 	bl	8008954 <_Balloc>
 8008fe6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008fea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008fee:	4607      	mov	r7, r0
 8008ff0:	bb34      	cbnz	r4, 8009040 <__d2b+0x6c>
 8008ff2:	9201      	str	r2, [sp, #4]
 8008ff4:	f1b8 0200 	subs.w	r2, r8, #0
 8008ff8:	d027      	beq.n	800904a <__d2b+0x76>
 8008ffa:	a802      	add	r0, sp, #8
 8008ffc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009000:	f7ff fd8b 	bl	8008b1a <__lo0bits>
 8009004:	9900      	ldr	r1, [sp, #0]
 8009006:	b1f0      	cbz	r0, 8009046 <__d2b+0x72>
 8009008:	9a01      	ldr	r2, [sp, #4]
 800900a:	f1c0 0320 	rsb	r3, r0, #32
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	430b      	orrs	r3, r1
 8009014:	40c2      	lsrs	r2, r0
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	9201      	str	r2, [sp, #4]
 800901a:	9b01      	ldr	r3, [sp, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	bf14      	ite	ne
 8009020:	2102      	movne	r1, #2
 8009022:	2101      	moveq	r1, #1
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	6139      	str	r1, [r7, #16]
 8009028:	b1c4      	cbz	r4, 800905c <__d2b+0x88>
 800902a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800902e:	4404      	add	r4, r0
 8009030:	6034      	str	r4, [r6, #0]
 8009032:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009036:	6028      	str	r0, [r5, #0]
 8009038:	4638      	mov	r0, r7
 800903a:	b002      	add	sp, #8
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009044:	e7d5      	b.n	8008ff2 <__d2b+0x1e>
 8009046:	6179      	str	r1, [r7, #20]
 8009048:	e7e7      	b.n	800901a <__d2b+0x46>
 800904a:	a801      	add	r0, sp, #4
 800904c:	f7ff fd65 	bl	8008b1a <__lo0bits>
 8009050:	2101      	movs	r1, #1
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	6139      	str	r1, [r7, #16]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	3020      	adds	r0, #32
 800905a:	e7e5      	b.n	8009028 <__d2b+0x54>
 800905c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009060:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	6918      	ldr	r0, [r3, #16]
 8009068:	f7ff fd38 	bl	8008adc <__hi0bits>
 800906c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009070:	e7e1      	b.n	8009036 <__d2b+0x62>

08009072 <__ratio>:
 8009072:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009076:	4688      	mov	r8, r1
 8009078:	4669      	mov	r1, sp
 800907a:	4681      	mov	r9, r0
 800907c:	f7ff ff58 	bl	8008f30 <__b2d>
 8009080:	468b      	mov	fp, r1
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	4640      	mov	r0, r8
 8009088:	a901      	add	r1, sp, #4
 800908a:	f7ff ff51 	bl	8008f30 <__b2d>
 800908e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009092:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009096:	460d      	mov	r5, r1
 8009098:	eba3 0c02 	sub.w	ip, r3, r2
 800909c:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bfd5      	itete	le
 80090aa:	460a      	movle	r2, r1
 80090ac:	463a      	movgt	r2, r7
 80090ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80090b6:	bfd8      	it	le
 80090b8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80090bc:	462b      	mov	r3, r5
 80090be:	4602      	mov	r2, r0
 80090c0:	4659      	mov	r1, fp
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7f7 fb32 	bl	800072c <__aeabi_ddiv>
 80090c8:	b003      	add	sp, #12
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090ce <__copybits>:
 80090ce:	3901      	subs	r1, #1
 80090d0:	b510      	push	{r4, lr}
 80090d2:	1149      	asrs	r1, r1, #5
 80090d4:	6914      	ldr	r4, [r2, #16]
 80090d6:	3101      	adds	r1, #1
 80090d8:	f102 0314 	add.w	r3, r2, #20
 80090dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	4602      	mov	r2, r0
 80090e8:	d303      	bcc.n	80090f2 <__copybits+0x24>
 80090ea:	2300      	movs	r3, #0
 80090ec:	428a      	cmp	r2, r1
 80090ee:	d305      	bcc.n	80090fc <__copybits+0x2e>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	f840 2b04 	str.w	r2, [r0], #4
 80090fa:	e7f3      	b.n	80090e4 <__copybits+0x16>
 80090fc:	f842 3b04 	str.w	r3, [r2], #4
 8009100:	e7f4      	b.n	80090ec <__copybits+0x1e>

08009102 <__any_on>:
 8009102:	f100 0214 	add.w	r2, r0, #20
 8009106:	6900      	ldr	r0, [r0, #16]
 8009108:	114b      	asrs	r3, r1, #5
 800910a:	4298      	cmp	r0, r3
 800910c:	b510      	push	{r4, lr}
 800910e:	db11      	blt.n	8009134 <__any_on+0x32>
 8009110:	dd0a      	ble.n	8009128 <__any_on+0x26>
 8009112:	f011 011f 	ands.w	r1, r1, #31
 8009116:	d007      	beq.n	8009128 <__any_on+0x26>
 8009118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800911c:	fa24 f001 	lsr.w	r0, r4, r1
 8009120:	fa00 f101 	lsl.w	r1, r0, r1
 8009124:	428c      	cmp	r4, r1
 8009126:	d10b      	bne.n	8009140 <__any_on+0x3e>
 8009128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800912c:	4293      	cmp	r3, r2
 800912e:	d803      	bhi.n	8009138 <__any_on+0x36>
 8009130:	2000      	movs	r0, #0
 8009132:	bd10      	pop	{r4, pc}
 8009134:	4603      	mov	r3, r0
 8009136:	e7f7      	b.n	8009128 <__any_on+0x26>
 8009138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800913c:	2900      	cmp	r1, #0
 800913e:	d0f5      	beq.n	800912c <__any_on+0x2a>
 8009140:	2001      	movs	r0, #1
 8009142:	e7f6      	b.n	8009132 <__any_on+0x30>

08009144 <_calloc_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	fb02 f401 	mul.w	r4, r2, r1
 800914a:	4621      	mov	r1, r4
 800914c:	f000 f854 	bl	80091f8 <_malloc_r>
 8009150:	4605      	mov	r5, r0
 8009152:	b118      	cbz	r0, 800915c <_calloc_r+0x18>
 8009154:	4622      	mov	r2, r4
 8009156:	2100      	movs	r1, #0
 8009158:	f7fc fa85 	bl	8005666 <memset>
 800915c:	4628      	mov	r0, r5
 800915e:	bd38      	pop	{r3, r4, r5, pc}

08009160 <_free_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	2900      	cmp	r1, #0
 8009166:	d043      	beq.n	80091f0 <_free_r+0x90>
 8009168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916c:	1f0c      	subs	r4, r1, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfb8      	it	lt
 8009172:	18e4      	addlt	r4, r4, r3
 8009174:	f000 fc0b 	bl	800998e <__malloc_lock>
 8009178:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <_free_r+0x94>)
 800917a:	6813      	ldr	r3, [r2, #0]
 800917c:	4610      	mov	r0, r2
 800917e:	b933      	cbnz	r3, 800918e <_free_r+0x2e>
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6014      	str	r4, [r2, #0]
 8009184:	4628      	mov	r0, r5
 8009186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918a:	f000 bc01 	b.w	8009990 <__malloc_unlock>
 800918e:	42a3      	cmp	r3, r4
 8009190:	d90b      	bls.n	80091aa <_free_r+0x4a>
 8009192:	6821      	ldr	r1, [r4, #0]
 8009194:	1862      	adds	r2, r4, r1
 8009196:	4293      	cmp	r3, r2
 8009198:	bf01      	itttt	eq
 800919a:	681a      	ldreq	r2, [r3, #0]
 800919c:	685b      	ldreq	r3, [r3, #4]
 800919e:	1852      	addeq	r2, r2, r1
 80091a0:	6022      	streq	r2, [r4, #0]
 80091a2:	6063      	str	r3, [r4, #4]
 80091a4:	6004      	str	r4, [r0, #0]
 80091a6:	e7ed      	b.n	8009184 <_free_r+0x24>
 80091a8:	4613      	mov	r3, r2
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	b10a      	cbz	r2, 80091b2 <_free_r+0x52>
 80091ae:	42a2      	cmp	r2, r4
 80091b0:	d9fa      	bls.n	80091a8 <_free_r+0x48>
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	1858      	adds	r0, r3, r1
 80091b6:	42a0      	cmp	r0, r4
 80091b8:	d10b      	bne.n	80091d2 <_free_r+0x72>
 80091ba:	6820      	ldr	r0, [r4, #0]
 80091bc:	4401      	add	r1, r0
 80091be:	1858      	adds	r0, r3, r1
 80091c0:	4282      	cmp	r2, r0
 80091c2:	6019      	str	r1, [r3, #0]
 80091c4:	d1de      	bne.n	8009184 <_free_r+0x24>
 80091c6:	6810      	ldr	r0, [r2, #0]
 80091c8:	6852      	ldr	r2, [r2, #4]
 80091ca:	4401      	add	r1, r0
 80091cc:	6019      	str	r1, [r3, #0]
 80091ce:	605a      	str	r2, [r3, #4]
 80091d0:	e7d8      	b.n	8009184 <_free_r+0x24>
 80091d2:	d902      	bls.n	80091da <_free_r+0x7a>
 80091d4:	230c      	movs	r3, #12
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	e7d4      	b.n	8009184 <_free_r+0x24>
 80091da:	6820      	ldr	r0, [r4, #0]
 80091dc:	1821      	adds	r1, r4, r0
 80091de:	428a      	cmp	r2, r1
 80091e0:	bf01      	itttt	eq
 80091e2:	6811      	ldreq	r1, [r2, #0]
 80091e4:	6852      	ldreq	r2, [r2, #4]
 80091e6:	1809      	addeq	r1, r1, r0
 80091e8:	6021      	streq	r1, [r4, #0]
 80091ea:	6062      	str	r2, [r4, #4]
 80091ec:	605c      	str	r4, [r3, #4]
 80091ee:	e7c9      	b.n	8009184 <_free_r+0x24>
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	bf00      	nop
 80091f4:	20000234 	.word	0x20000234

080091f8 <_malloc_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	1ccd      	adds	r5, r1, #3
 80091fc:	f025 0503 	bic.w	r5, r5, #3
 8009200:	3508      	adds	r5, #8
 8009202:	2d0c      	cmp	r5, #12
 8009204:	bf38      	it	cc
 8009206:	250c      	movcc	r5, #12
 8009208:	2d00      	cmp	r5, #0
 800920a:	4606      	mov	r6, r0
 800920c:	db01      	blt.n	8009212 <_malloc_r+0x1a>
 800920e:	42a9      	cmp	r1, r5
 8009210:	d903      	bls.n	800921a <_malloc_r+0x22>
 8009212:	230c      	movs	r3, #12
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	2000      	movs	r0, #0
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	f000 fbb8 	bl	800998e <__malloc_lock>
 800921e:	4a21      	ldr	r2, [pc, #132]	; (80092a4 <_malloc_r+0xac>)
 8009220:	6814      	ldr	r4, [r2, #0]
 8009222:	4621      	mov	r1, r4
 8009224:	b991      	cbnz	r1, 800924c <_malloc_r+0x54>
 8009226:	4c20      	ldr	r4, [pc, #128]	; (80092a8 <_malloc_r+0xb0>)
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	b91b      	cbnz	r3, 8009234 <_malloc_r+0x3c>
 800922c:	4630      	mov	r0, r6
 800922e:	f000 facd 	bl	80097cc <_sbrk_r>
 8009232:	6020      	str	r0, [r4, #0]
 8009234:	4629      	mov	r1, r5
 8009236:	4630      	mov	r0, r6
 8009238:	f000 fac8 	bl	80097cc <_sbrk_r>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d124      	bne.n	800928a <_malloc_r+0x92>
 8009240:	230c      	movs	r3, #12
 8009242:	4630      	mov	r0, r6
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	f000 fba3 	bl	8009990 <__malloc_unlock>
 800924a:	e7e4      	b.n	8009216 <_malloc_r+0x1e>
 800924c:	680b      	ldr	r3, [r1, #0]
 800924e:	1b5b      	subs	r3, r3, r5
 8009250:	d418      	bmi.n	8009284 <_malloc_r+0x8c>
 8009252:	2b0b      	cmp	r3, #11
 8009254:	d90f      	bls.n	8009276 <_malloc_r+0x7e>
 8009256:	600b      	str	r3, [r1, #0]
 8009258:	18cc      	adds	r4, r1, r3
 800925a:	50cd      	str	r5, [r1, r3]
 800925c:	4630      	mov	r0, r6
 800925e:	f000 fb97 	bl	8009990 <__malloc_unlock>
 8009262:	f104 000b 	add.w	r0, r4, #11
 8009266:	1d23      	adds	r3, r4, #4
 8009268:	f020 0007 	bic.w	r0, r0, #7
 800926c:	1ac3      	subs	r3, r0, r3
 800926e:	d0d3      	beq.n	8009218 <_malloc_r+0x20>
 8009270:	425a      	negs	r2, r3
 8009272:	50e2      	str	r2, [r4, r3]
 8009274:	e7d0      	b.n	8009218 <_malloc_r+0x20>
 8009276:	684b      	ldr	r3, [r1, #4]
 8009278:	428c      	cmp	r4, r1
 800927a:	bf16      	itet	ne
 800927c:	6063      	strne	r3, [r4, #4]
 800927e:	6013      	streq	r3, [r2, #0]
 8009280:	460c      	movne	r4, r1
 8009282:	e7eb      	b.n	800925c <_malloc_r+0x64>
 8009284:	460c      	mov	r4, r1
 8009286:	6849      	ldr	r1, [r1, #4]
 8009288:	e7cc      	b.n	8009224 <_malloc_r+0x2c>
 800928a:	1cc4      	adds	r4, r0, #3
 800928c:	f024 0403 	bic.w	r4, r4, #3
 8009290:	42a0      	cmp	r0, r4
 8009292:	d005      	beq.n	80092a0 <_malloc_r+0xa8>
 8009294:	1a21      	subs	r1, r4, r0
 8009296:	4630      	mov	r0, r6
 8009298:	f000 fa98 	bl	80097cc <_sbrk_r>
 800929c:	3001      	adds	r0, #1
 800929e:	d0cf      	beq.n	8009240 <_malloc_r+0x48>
 80092a0:	6025      	str	r5, [r4, #0]
 80092a2:	e7db      	b.n	800925c <_malloc_r+0x64>
 80092a4:	20000234 	.word	0x20000234
 80092a8:	20000238 	.word	0x20000238

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	4682      	mov	sl, r0
 80092b4:	429e      	cmp	r6, r3
 80092b6:	460c      	mov	r4, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	4699      	mov	r9, r3
 80092bc:	d837      	bhi.n	800932e <__ssputs_r+0x82>
 80092be:	898a      	ldrh	r2, [r1, #12]
 80092c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c4:	d031      	beq.n	800932a <__ssputs_r+0x7e>
 80092c6:	2302      	movs	r3, #2
 80092c8:	6825      	ldr	r5, [r4, #0]
 80092ca:	6909      	ldr	r1, [r1, #16]
 80092cc:	1a6f      	subs	r7, r5, r1
 80092ce:	6965      	ldr	r5, [r4, #20]
 80092d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80092d8:	f109 0301 	add.w	r3, r9, #1
 80092dc:	443b      	add	r3, r7
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d530      	bpl.n	800934a <__ssputs_r+0x9e>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7ff ff85 	bl	80091f8 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b950      	cbnz	r0, 8009308 <__ssputs_r+0x5c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	f8ca 3000 	str.w	r3, [sl]
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	463a      	mov	r2, r7
 800930a:	6921      	ldr	r1, [r4, #16]
 800930c:	f7fc f9a0 	bl	8005650 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	443e      	add	r6, r7
 8009320:	6026      	str	r6, [r4, #0]
 8009322:	464e      	mov	r6, r9
 8009324:	6165      	str	r5, [r4, #20]
 8009326:	1bed      	subs	r5, r5, r7
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	454e      	cmp	r6, r9
 800932c:	d900      	bls.n	8009330 <__ssputs_r+0x84>
 800932e:	464e      	mov	r6, r9
 8009330:	4632      	mov	r2, r6
 8009332:	4641      	mov	r1, r8
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	f000 fb11 	bl	800995c <memmove>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	2000      	movs	r0, #0
 800933e:	1b9b      	subs	r3, r3, r6
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	441e      	add	r6, r3
 8009346:	6026      	str	r6, [r4, #0]
 8009348:	e7dc      	b.n	8009304 <__ssputs_r+0x58>
 800934a:	462a      	mov	r2, r5
 800934c:	f000 fb21 	bl	8009992 <_realloc_r>
 8009350:	4606      	mov	r6, r0
 8009352:	2800      	cmp	r0, #0
 8009354:	d1e2      	bne.n	800931c <__ssputs_r+0x70>
 8009356:	6921      	ldr	r1, [r4, #16]
 8009358:	4650      	mov	r0, sl
 800935a:	f7ff ff01 	bl	8009160 <_free_r>
 800935e:	e7c8      	b.n	80092f2 <__ssputs_r+0x46>

08009360 <_svfiprintf_r>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	461d      	mov	r5, r3
 8009366:	898b      	ldrh	r3, [r1, #12]
 8009368:	b09d      	sub	sp, #116	; 0x74
 800936a:	061f      	lsls	r7, r3, #24
 800936c:	4680      	mov	r8, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4616      	mov	r6, r2
 8009372:	d50f      	bpl.n	8009394 <_svfiprintf_r+0x34>
 8009374:	690b      	ldr	r3, [r1, #16]
 8009376:	b96b      	cbnz	r3, 8009394 <_svfiprintf_r+0x34>
 8009378:	2140      	movs	r1, #64	; 0x40
 800937a:	f7ff ff3d 	bl	80091f8 <_malloc_r>
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	6120      	str	r0, [r4, #16]
 8009382:	b928      	cbnz	r0, 8009390 <_svfiprintf_r+0x30>
 8009384:	230c      	movs	r3, #12
 8009386:	f8c8 3000 	str.w	r3, [r8]
 800938a:	f04f 30ff 	mov.w	r0, #4294967295
 800938e:	e0c8      	b.n	8009522 <_svfiprintf_r+0x1c2>
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	6163      	str	r3, [r4, #20]
 8009394:	2300      	movs	r3, #0
 8009396:	9309      	str	r3, [sp, #36]	; 0x24
 8009398:	2320      	movs	r3, #32
 800939a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800939e:	2330      	movs	r3, #48	; 0x30
 80093a0:	f04f 0b01 	mov.w	fp, #1
 80093a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093a8:	9503      	str	r5, [sp, #12]
 80093aa:	4637      	mov	r7, r6
 80093ac:	463d      	mov	r5, r7
 80093ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093b2:	b10b      	cbz	r3, 80093b8 <_svfiprintf_r+0x58>
 80093b4:	2b25      	cmp	r3, #37	; 0x25
 80093b6:	d13e      	bne.n	8009436 <_svfiprintf_r+0xd6>
 80093b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80093bc:	d00b      	beq.n	80093d6 <_svfiprintf_r+0x76>
 80093be:	4653      	mov	r3, sl
 80093c0:	4632      	mov	r2, r6
 80093c2:	4621      	mov	r1, r4
 80093c4:	4640      	mov	r0, r8
 80093c6:	f7ff ff71 	bl	80092ac <__ssputs_r>
 80093ca:	3001      	adds	r0, #1
 80093cc:	f000 80a4 	beq.w	8009518 <_svfiprintf_r+0x1b8>
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	4453      	add	r3, sl
 80093d4:	9309      	str	r3, [sp, #36]	; 0x24
 80093d6:	783b      	ldrb	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 809d 	beq.w	8009518 <_svfiprintf_r+0x1b8>
 80093de:	2300      	movs	r3, #0
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093f0:	931a      	str	r3, [sp, #104]	; 0x68
 80093f2:	462f      	mov	r7, r5
 80093f4:	2205      	movs	r2, #5
 80093f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093fa:	4850      	ldr	r0, [pc, #320]	; (800953c <_svfiprintf_r+0x1dc>)
 80093fc:	f7ff fa9c 	bl	8008938 <memchr>
 8009400:	9b04      	ldr	r3, [sp, #16]
 8009402:	b9d0      	cbnz	r0, 800943a <_svfiprintf_r+0xda>
 8009404:	06d9      	lsls	r1, r3, #27
 8009406:	bf44      	itt	mi
 8009408:	2220      	movmi	r2, #32
 800940a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800940e:	071a      	lsls	r2, r3, #28
 8009410:	bf44      	itt	mi
 8009412:	222b      	movmi	r2, #43	; 0x2b
 8009414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009418:	782a      	ldrb	r2, [r5, #0]
 800941a:	2a2a      	cmp	r2, #42	; 0x2a
 800941c:	d015      	beq.n	800944a <_svfiprintf_r+0xea>
 800941e:	462f      	mov	r7, r5
 8009420:	2000      	movs	r0, #0
 8009422:	250a      	movs	r5, #10
 8009424:	9a07      	ldr	r2, [sp, #28]
 8009426:	4639      	mov	r1, r7
 8009428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942c:	3b30      	subs	r3, #48	; 0x30
 800942e:	2b09      	cmp	r3, #9
 8009430:	d94d      	bls.n	80094ce <_svfiprintf_r+0x16e>
 8009432:	b1b8      	cbz	r0, 8009464 <_svfiprintf_r+0x104>
 8009434:	e00f      	b.n	8009456 <_svfiprintf_r+0xf6>
 8009436:	462f      	mov	r7, r5
 8009438:	e7b8      	b.n	80093ac <_svfiprintf_r+0x4c>
 800943a:	4a40      	ldr	r2, [pc, #256]	; (800953c <_svfiprintf_r+0x1dc>)
 800943c:	463d      	mov	r5, r7
 800943e:	1a80      	subs	r0, r0, r2
 8009440:	fa0b f000 	lsl.w	r0, fp, r0
 8009444:	4318      	orrs	r0, r3
 8009446:	9004      	str	r0, [sp, #16]
 8009448:	e7d3      	b.n	80093f2 <_svfiprintf_r+0x92>
 800944a:	9a03      	ldr	r2, [sp, #12]
 800944c:	1d11      	adds	r1, r2, #4
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	9103      	str	r1, [sp, #12]
 8009452:	2a00      	cmp	r2, #0
 8009454:	db01      	blt.n	800945a <_svfiprintf_r+0xfa>
 8009456:	9207      	str	r2, [sp, #28]
 8009458:	e004      	b.n	8009464 <_svfiprintf_r+0x104>
 800945a:	4252      	negs	r2, r2
 800945c:	f043 0302 	orr.w	r3, r3, #2
 8009460:	9207      	str	r2, [sp, #28]
 8009462:	9304      	str	r3, [sp, #16]
 8009464:	783b      	ldrb	r3, [r7, #0]
 8009466:	2b2e      	cmp	r3, #46	; 0x2e
 8009468:	d10c      	bne.n	8009484 <_svfiprintf_r+0x124>
 800946a:	787b      	ldrb	r3, [r7, #1]
 800946c:	2b2a      	cmp	r3, #42	; 0x2a
 800946e:	d133      	bne.n	80094d8 <_svfiprintf_r+0x178>
 8009470:	9b03      	ldr	r3, [sp, #12]
 8009472:	3702      	adds	r7, #2
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	9203      	str	r2, [sp, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfb8      	it	lt
 800947e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	4d2e      	ldr	r5, [pc, #184]	; (8009540 <_svfiprintf_r+0x1e0>)
 8009486:	2203      	movs	r2, #3
 8009488:	7839      	ldrb	r1, [r7, #0]
 800948a:	4628      	mov	r0, r5
 800948c:	f7ff fa54 	bl	8008938 <memchr>
 8009490:	b138      	cbz	r0, 80094a2 <_svfiprintf_r+0x142>
 8009492:	2340      	movs	r3, #64	; 0x40
 8009494:	1b40      	subs	r0, r0, r5
 8009496:	fa03 f000 	lsl.w	r0, r3, r0
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	3701      	adds	r7, #1
 800949e:	4303      	orrs	r3, r0
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	7839      	ldrb	r1, [r7, #0]
 80094a4:	2206      	movs	r2, #6
 80094a6:	4827      	ldr	r0, [pc, #156]	; (8009544 <_svfiprintf_r+0x1e4>)
 80094a8:	1c7e      	adds	r6, r7, #1
 80094aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ae:	f7ff fa43 	bl	8008938 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d038      	beq.n	8009528 <_svfiprintf_r+0x1c8>
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <_svfiprintf_r+0x1e8>)
 80094b8:	bb13      	cbnz	r3, 8009500 <_svfiprintf_r+0x1a0>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	444b      	add	r3, r9
 80094ca:	9309      	str	r3, [sp, #36]	; 0x24
 80094cc:	e76d      	b.n	80093aa <_svfiprintf_r+0x4a>
 80094ce:	fb05 3202 	mla	r2, r5, r2, r3
 80094d2:	2001      	movs	r0, #1
 80094d4:	460f      	mov	r7, r1
 80094d6:	e7a6      	b.n	8009426 <_svfiprintf_r+0xc6>
 80094d8:	2300      	movs	r3, #0
 80094da:	250a      	movs	r5, #10
 80094dc:	4619      	mov	r1, r3
 80094de:	3701      	adds	r7, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	4638      	mov	r0, r7
 80094e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e8:	3a30      	subs	r2, #48	; 0x30
 80094ea:	2a09      	cmp	r2, #9
 80094ec:	d903      	bls.n	80094f6 <_svfiprintf_r+0x196>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0c8      	beq.n	8009484 <_svfiprintf_r+0x124>
 80094f2:	9105      	str	r1, [sp, #20]
 80094f4:	e7c6      	b.n	8009484 <_svfiprintf_r+0x124>
 80094f6:	fb05 2101 	mla	r1, r5, r1, r2
 80094fa:	2301      	movs	r3, #1
 80094fc:	4607      	mov	r7, r0
 80094fe:	e7f0      	b.n	80094e2 <_svfiprintf_r+0x182>
 8009500:	ab03      	add	r3, sp, #12
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	4622      	mov	r2, r4
 8009506:	4b11      	ldr	r3, [pc, #68]	; (800954c <_svfiprintf_r+0x1ec>)
 8009508:	a904      	add	r1, sp, #16
 800950a:	4640      	mov	r0, r8
 800950c:	f7fc f944 	bl	8005798 <_printf_float>
 8009510:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009514:	4681      	mov	r9, r0
 8009516:	d1d6      	bne.n	80094c6 <_svfiprintf_r+0x166>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	065b      	lsls	r3, r3, #25
 800951c:	f53f af35 	bmi.w	800938a <_svfiprintf_r+0x2a>
 8009520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009522:	b01d      	add	sp, #116	; 0x74
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	ab03      	add	r3, sp, #12
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4622      	mov	r2, r4
 800952e:	4b07      	ldr	r3, [pc, #28]	; (800954c <_svfiprintf_r+0x1ec>)
 8009530:	a904      	add	r1, sp, #16
 8009532:	4640      	mov	r0, r8
 8009534:	f7fc fbdc 	bl	8005cf0 <_printf_i>
 8009538:	e7ea      	b.n	8009510 <_svfiprintf_r+0x1b0>
 800953a:	bf00      	nop
 800953c:	08009cbc 	.word	0x08009cbc
 8009540:	08009cc2 	.word	0x08009cc2
 8009544:	08009cc6 	.word	0x08009cc6
 8009548:	08005799 	.word	0x08005799
 800954c:	080092ad 	.word	0x080092ad

08009550 <__sfputc_r>:
 8009550:	6893      	ldr	r3, [r2, #8]
 8009552:	b410      	push	{r4}
 8009554:	3b01      	subs	r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	6093      	str	r3, [r2, #8]
 800955a:	da07      	bge.n	800956c <__sfputc_r+0x1c>
 800955c:	6994      	ldr	r4, [r2, #24]
 800955e:	42a3      	cmp	r3, r4
 8009560:	db01      	blt.n	8009566 <__sfputc_r+0x16>
 8009562:	290a      	cmp	r1, #10
 8009564:	d102      	bne.n	800956c <__sfputc_r+0x1c>
 8009566:	bc10      	pop	{r4}
 8009568:	f7fd bdb0 	b.w	80070cc <__swbuf_r>
 800956c:	6813      	ldr	r3, [r2, #0]
 800956e:	1c58      	adds	r0, r3, #1
 8009570:	6010      	str	r0, [r2, #0]
 8009572:	7019      	strb	r1, [r3, #0]
 8009574:	4608      	mov	r0, r1
 8009576:	bc10      	pop	{r4}
 8009578:	4770      	bx	lr

0800957a <__sfputs_r>:
 800957a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	4614      	mov	r4, r2
 8009582:	18d5      	adds	r5, r2, r3
 8009584:	42ac      	cmp	r4, r5
 8009586:	d101      	bne.n	800958c <__sfputs_r+0x12>
 8009588:	2000      	movs	r0, #0
 800958a:	e007      	b.n	800959c <__sfputs_r+0x22>
 800958c:	463a      	mov	r2, r7
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff ffdc 	bl	8009550 <__sfputc_r>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d1f3      	bne.n	8009584 <__sfputs_r+0xa>
 800959c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095a0 <_vfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	460c      	mov	r4, r1
 80095a6:	b09d      	sub	sp, #116	; 0x74
 80095a8:	4617      	mov	r7, r2
 80095aa:	461d      	mov	r5, r3
 80095ac:	4606      	mov	r6, r0
 80095ae:	b118      	cbz	r0, 80095b8 <_vfiprintf_r+0x18>
 80095b0:	6983      	ldr	r3, [r0, #24]
 80095b2:	b90b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x18>
 80095b4:	f7fe fd7c 	bl	80080b0 <__sinit>
 80095b8:	4b7c      	ldr	r3, [pc, #496]	; (80097ac <_vfiprintf_r+0x20c>)
 80095ba:	429c      	cmp	r4, r3
 80095bc:	d158      	bne.n	8009670 <_vfiprintf_r+0xd0>
 80095be:	6874      	ldr	r4, [r6, #4]
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	0718      	lsls	r0, r3, #28
 80095c4:	d55e      	bpl.n	8009684 <_vfiprintf_r+0xe4>
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05b      	beq.n	8009684 <_vfiprintf_r+0xe4>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9309      	str	r3, [sp, #36]	; 0x24
 80095d0:	2320      	movs	r3, #32
 80095d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095d6:	2330      	movs	r3, #48	; 0x30
 80095d8:	f04f 0b01 	mov.w	fp, #1
 80095dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095e0:	9503      	str	r5, [sp, #12]
 80095e2:	46b8      	mov	r8, r7
 80095e4:	4645      	mov	r5, r8
 80095e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095ea:	b10b      	cbz	r3, 80095f0 <_vfiprintf_r+0x50>
 80095ec:	2b25      	cmp	r3, #37	; 0x25
 80095ee:	d154      	bne.n	800969a <_vfiprintf_r+0xfa>
 80095f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80095f4:	d00b      	beq.n	800960e <_vfiprintf_r+0x6e>
 80095f6:	4653      	mov	r3, sl
 80095f8:	463a      	mov	r2, r7
 80095fa:	4621      	mov	r1, r4
 80095fc:	4630      	mov	r0, r6
 80095fe:	f7ff ffbc 	bl	800957a <__sfputs_r>
 8009602:	3001      	adds	r0, #1
 8009604:	f000 80c2 	beq.w	800978c <_vfiprintf_r+0x1ec>
 8009608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960a:	4453      	add	r3, sl
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	f898 3000 	ldrb.w	r3, [r8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80ba 	beq.w	800978c <_vfiprintf_r+0x1ec>
 8009618:	2300      	movs	r3, #0
 800961a:	f04f 32ff 	mov.w	r2, #4294967295
 800961e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009622:	9304      	str	r3, [sp, #16]
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800962a:	931a      	str	r3, [sp, #104]	; 0x68
 800962c:	46a8      	mov	r8, r5
 800962e:	2205      	movs	r2, #5
 8009630:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009634:	485e      	ldr	r0, [pc, #376]	; (80097b0 <_vfiprintf_r+0x210>)
 8009636:	f7ff f97f 	bl	8008938 <memchr>
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	bb78      	cbnz	r0, 800969e <_vfiprintf_r+0xfe>
 800963e:	06d9      	lsls	r1, r3, #27
 8009640:	bf44      	itt	mi
 8009642:	2220      	movmi	r2, #32
 8009644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009648:	071a      	lsls	r2, r3, #28
 800964a:	bf44      	itt	mi
 800964c:	222b      	movmi	r2, #43	; 0x2b
 800964e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009652:	782a      	ldrb	r2, [r5, #0]
 8009654:	2a2a      	cmp	r2, #42	; 0x2a
 8009656:	d02a      	beq.n	80096ae <_vfiprintf_r+0x10e>
 8009658:	46a8      	mov	r8, r5
 800965a:	2000      	movs	r0, #0
 800965c:	250a      	movs	r5, #10
 800965e:	9a07      	ldr	r2, [sp, #28]
 8009660:	4641      	mov	r1, r8
 8009662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009666:	3b30      	subs	r3, #48	; 0x30
 8009668:	2b09      	cmp	r3, #9
 800966a:	d969      	bls.n	8009740 <_vfiprintf_r+0x1a0>
 800966c:	b360      	cbz	r0, 80096c8 <_vfiprintf_r+0x128>
 800966e:	e024      	b.n	80096ba <_vfiprintf_r+0x11a>
 8009670:	4b50      	ldr	r3, [pc, #320]	; (80097b4 <_vfiprintf_r+0x214>)
 8009672:	429c      	cmp	r4, r3
 8009674:	d101      	bne.n	800967a <_vfiprintf_r+0xda>
 8009676:	68b4      	ldr	r4, [r6, #8]
 8009678:	e7a2      	b.n	80095c0 <_vfiprintf_r+0x20>
 800967a:	4b4f      	ldr	r3, [pc, #316]	; (80097b8 <_vfiprintf_r+0x218>)
 800967c:	429c      	cmp	r4, r3
 800967e:	bf08      	it	eq
 8009680:	68f4      	ldreq	r4, [r6, #12]
 8009682:	e79d      	b.n	80095c0 <_vfiprintf_r+0x20>
 8009684:	4621      	mov	r1, r4
 8009686:	4630      	mov	r0, r6
 8009688:	f7fd fd72 	bl	8007170 <__swsetup_r>
 800968c:	2800      	cmp	r0, #0
 800968e:	d09d      	beq.n	80095cc <_vfiprintf_r+0x2c>
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	b01d      	add	sp, #116	; 0x74
 8009696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969a:	46a8      	mov	r8, r5
 800969c:	e7a2      	b.n	80095e4 <_vfiprintf_r+0x44>
 800969e:	4a44      	ldr	r2, [pc, #272]	; (80097b0 <_vfiprintf_r+0x210>)
 80096a0:	4645      	mov	r5, r8
 80096a2:	1a80      	subs	r0, r0, r2
 80096a4:	fa0b f000 	lsl.w	r0, fp, r0
 80096a8:	4318      	orrs	r0, r3
 80096aa:	9004      	str	r0, [sp, #16]
 80096ac:	e7be      	b.n	800962c <_vfiprintf_r+0x8c>
 80096ae:	9a03      	ldr	r2, [sp, #12]
 80096b0:	1d11      	adds	r1, r2, #4
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	9103      	str	r1, [sp, #12]
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	db01      	blt.n	80096be <_vfiprintf_r+0x11e>
 80096ba:	9207      	str	r2, [sp, #28]
 80096bc:	e004      	b.n	80096c8 <_vfiprintf_r+0x128>
 80096be:	4252      	negs	r2, r2
 80096c0:	f043 0302 	orr.w	r3, r3, #2
 80096c4:	9207      	str	r2, [sp, #28]
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	f898 3000 	ldrb.w	r3, [r8]
 80096cc:	2b2e      	cmp	r3, #46	; 0x2e
 80096ce:	d10e      	bne.n	80096ee <_vfiprintf_r+0x14e>
 80096d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096d4:	2b2a      	cmp	r3, #42	; 0x2a
 80096d6:	d138      	bne.n	800974a <_vfiprintf_r+0x1aa>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	f108 0802 	add.w	r8, r8, #2
 80096de:	1d1a      	adds	r2, r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	9203      	str	r2, [sp, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfb8      	it	lt
 80096e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4d33      	ldr	r5, [pc, #204]	; (80097bc <_vfiprintf_r+0x21c>)
 80096f0:	2203      	movs	r2, #3
 80096f2:	f898 1000 	ldrb.w	r1, [r8]
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7ff f91e 	bl	8008938 <memchr>
 80096fc:	b140      	cbz	r0, 8009710 <_vfiprintf_r+0x170>
 80096fe:	2340      	movs	r3, #64	; 0x40
 8009700:	1b40      	subs	r0, r0, r5
 8009702:	fa03 f000 	lsl.w	r0, r3, r0
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	f108 0801 	add.w	r8, r8, #1
 800970c:	4303      	orrs	r3, r0
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	f898 1000 	ldrb.w	r1, [r8]
 8009714:	2206      	movs	r2, #6
 8009716:	482a      	ldr	r0, [pc, #168]	; (80097c0 <_vfiprintf_r+0x220>)
 8009718:	f108 0701 	add.w	r7, r8, #1
 800971c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009720:	f7ff f90a 	bl	8008938 <memchr>
 8009724:	2800      	cmp	r0, #0
 8009726:	d037      	beq.n	8009798 <_vfiprintf_r+0x1f8>
 8009728:	4b26      	ldr	r3, [pc, #152]	; (80097c4 <_vfiprintf_r+0x224>)
 800972a:	bb1b      	cbnz	r3, 8009774 <_vfiprintf_r+0x1d4>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	3307      	adds	r3, #7
 8009730:	f023 0307 	bic.w	r3, r3, #7
 8009734:	3308      	adds	r3, #8
 8009736:	9303      	str	r3, [sp, #12]
 8009738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973a:	444b      	add	r3, r9
 800973c:	9309      	str	r3, [sp, #36]	; 0x24
 800973e:	e750      	b.n	80095e2 <_vfiprintf_r+0x42>
 8009740:	fb05 3202 	mla	r2, r5, r2, r3
 8009744:	2001      	movs	r0, #1
 8009746:	4688      	mov	r8, r1
 8009748:	e78a      	b.n	8009660 <_vfiprintf_r+0xc0>
 800974a:	2300      	movs	r3, #0
 800974c:	250a      	movs	r5, #10
 800974e:	4619      	mov	r1, r3
 8009750:	f108 0801 	add.w	r8, r8, #1
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	4640      	mov	r0, r8
 8009758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800975c:	3a30      	subs	r2, #48	; 0x30
 800975e:	2a09      	cmp	r2, #9
 8009760:	d903      	bls.n	800976a <_vfiprintf_r+0x1ca>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c3      	beq.n	80096ee <_vfiprintf_r+0x14e>
 8009766:	9105      	str	r1, [sp, #20]
 8009768:	e7c1      	b.n	80096ee <_vfiprintf_r+0x14e>
 800976a:	fb05 2101 	mla	r1, r5, r1, r2
 800976e:	2301      	movs	r3, #1
 8009770:	4680      	mov	r8, r0
 8009772:	e7f0      	b.n	8009756 <_vfiprintf_r+0x1b6>
 8009774:	ab03      	add	r3, sp, #12
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4622      	mov	r2, r4
 800977a:	4b13      	ldr	r3, [pc, #76]	; (80097c8 <_vfiprintf_r+0x228>)
 800977c:	a904      	add	r1, sp, #16
 800977e:	4630      	mov	r0, r6
 8009780:	f7fc f80a 	bl	8005798 <_printf_float>
 8009784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009788:	4681      	mov	r9, r0
 800978a:	d1d5      	bne.n	8009738 <_vfiprintf_r+0x198>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	065b      	lsls	r3, r3, #25
 8009790:	f53f af7e 	bmi.w	8009690 <_vfiprintf_r+0xf0>
 8009794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009796:	e77d      	b.n	8009694 <_vfiprintf_r+0xf4>
 8009798:	ab03      	add	r3, sp, #12
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4622      	mov	r2, r4
 800979e:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <_vfiprintf_r+0x228>)
 80097a0:	a904      	add	r1, sp, #16
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7fc faa4 	bl	8005cf0 <_printf_i>
 80097a8:	e7ec      	b.n	8009784 <_vfiprintf_r+0x1e4>
 80097aa:	bf00      	nop
 80097ac:	08009b70 	.word	0x08009b70
 80097b0:	08009cbc 	.word	0x08009cbc
 80097b4:	08009b90 	.word	0x08009b90
 80097b8:	08009b50 	.word	0x08009b50
 80097bc:	08009cc2 	.word	0x08009cc2
 80097c0:	08009cc6 	.word	0x08009cc6
 80097c4:	08005799 	.word	0x08005799
 80097c8:	0800957b 	.word	0x0800957b

080097cc <_sbrk_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	2300      	movs	r3, #0
 80097d0:	4c05      	ldr	r4, [pc, #20]	; (80097e8 <_sbrk_r+0x1c>)
 80097d2:	4605      	mov	r5, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	f7f7 ffd4 	bl	8001784 <_sbrk>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_sbrk_r+0x1a>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_sbrk_r+0x1a>
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	20000364 	.word	0x20000364

080097ec <__sread>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	460c      	mov	r4, r1
 80097f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f4:	f000 f8f4 	bl	80099e0 <_read_r>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	bfab      	itete	ge
 80097fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009800:	181b      	addge	r3, r3, r0
 8009802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009806:	bfac      	ite	ge
 8009808:	6563      	strge	r3, [r4, #84]	; 0x54
 800980a:	81a3      	strhlt	r3, [r4, #12]
 800980c:	bd10      	pop	{r4, pc}

0800980e <__swrite>:
 800980e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	461f      	mov	r7, r3
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	4605      	mov	r5, r0
 8009818:	05db      	lsls	r3, r3, #23
 800981a:	460c      	mov	r4, r1
 800981c:	4616      	mov	r6, r2
 800981e:	d505      	bpl.n	800982c <__swrite+0x1e>
 8009820:	2302      	movs	r3, #2
 8009822:	2200      	movs	r2, #0
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	f000 f886 	bl	8009938 <_lseek_r>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	4632      	mov	r2, r6
 8009830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800983a:	463b      	mov	r3, r7
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	f000 b835 	b.w	80098b0 <_write_r>

08009846 <__sseek>:
 8009846:	b510      	push	{r4, lr}
 8009848:	460c      	mov	r4, r1
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 f873 	bl	8009938 <_lseek_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	bf15      	itete	ne
 8009858:	6560      	strne	r0, [r4, #84]	; 0x54
 800985a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800985e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009862:	81a3      	strheq	r3, [r4, #12]
 8009864:	bf18      	it	ne
 8009866:	81a3      	strhne	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__sclose>:
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	f000 b831 	b.w	80098d4 <_close_r>

08009872 <strncmp>:
 8009872:	b510      	push	{r4, lr}
 8009874:	b16a      	cbz	r2, 8009892 <strncmp+0x20>
 8009876:	3901      	subs	r1, #1
 8009878:	1884      	adds	r4, r0, r2
 800987a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800987e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009882:	4293      	cmp	r3, r2
 8009884:	d103      	bne.n	800988e <strncmp+0x1c>
 8009886:	42a0      	cmp	r0, r4
 8009888:	d001      	beq.n	800988e <strncmp+0x1c>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f5      	bne.n	800987a <strncmp+0x8>
 800988e:	1a98      	subs	r0, r3, r2
 8009890:	bd10      	pop	{r4, pc}
 8009892:	4610      	mov	r0, r2
 8009894:	e7fc      	b.n	8009890 <strncmp+0x1e>

08009896 <__ascii_wctomb>:
 8009896:	b149      	cbz	r1, 80098ac <__ascii_wctomb+0x16>
 8009898:	2aff      	cmp	r2, #255	; 0xff
 800989a:	bf8b      	itete	hi
 800989c:	238a      	movhi	r3, #138	; 0x8a
 800989e:	700a      	strbls	r2, [r1, #0]
 80098a0:	6003      	strhi	r3, [r0, #0]
 80098a2:	2001      	movls	r0, #1
 80098a4:	bf88      	it	hi
 80098a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80098aa:	4770      	bx	lr
 80098ac:	4608      	mov	r0, r1
 80098ae:	4770      	bx	lr

080098b0 <_write_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4605      	mov	r5, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	4c05      	ldr	r4, [pc, #20]	; (80098d0 <_write_r+0x20>)
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	f7f7 ff13 	bl	80016ea <_write>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_write_r+0x1e>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_write_r+0x1e>
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	20000364 	.word	0x20000364

080098d4 <_close_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	2300      	movs	r3, #0
 80098d8:	4c05      	ldr	r4, [pc, #20]	; (80098f0 <_close_r+0x1c>)
 80098da:	4605      	mov	r5, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	f7f7 ff1f 	bl	8001722 <_close>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_close_r+0x1a>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_close_r+0x1a>
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20000364 	.word	0x20000364

080098f4 <_fstat_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	2300      	movs	r3, #0
 80098f8:	4c06      	ldr	r4, [pc, #24]	; (8009914 <_fstat_r+0x20>)
 80098fa:	4605      	mov	r5, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	f7f7 ff19 	bl	8001738 <_fstat>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_fstat_r+0x1c>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	b103      	cbz	r3, 8009910 <_fstat_r+0x1c>
 800990e:	602b      	str	r3, [r5, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20000364 	.word	0x20000364

08009918 <_isatty_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	2300      	movs	r3, #0
 800991c:	4c05      	ldr	r4, [pc, #20]	; (8009934 <_isatty_r+0x1c>)
 800991e:	4605      	mov	r5, r0
 8009920:	4608      	mov	r0, r1
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	f7f7 ff17 	bl	8001756 <_isatty>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_isatty_r+0x1a>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	b103      	cbz	r3, 8009932 <_isatty_r+0x1a>
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20000364 	.word	0x20000364

08009938 <_lseek_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4605      	mov	r5, r0
 800993c:	4608      	mov	r0, r1
 800993e:	4611      	mov	r1, r2
 8009940:	2200      	movs	r2, #0
 8009942:	4c05      	ldr	r4, [pc, #20]	; (8009958 <_lseek_r+0x20>)
 8009944:	6022      	str	r2, [r4, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	f7f7 ff0f 	bl	800176a <_lseek>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_lseek_r+0x1e>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	b103      	cbz	r3, 8009956 <_lseek_r+0x1e>
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	20000364 	.word	0x20000364

0800995c <memmove>:
 800995c:	4288      	cmp	r0, r1
 800995e:	b510      	push	{r4, lr}
 8009960:	eb01 0302 	add.w	r3, r1, r2
 8009964:	d807      	bhi.n	8009976 <memmove+0x1a>
 8009966:	1e42      	subs	r2, r0, #1
 8009968:	4299      	cmp	r1, r3
 800996a:	d00a      	beq.n	8009982 <memmove+0x26>
 800996c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009970:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009974:	e7f8      	b.n	8009968 <memmove+0xc>
 8009976:	4283      	cmp	r3, r0
 8009978:	d9f5      	bls.n	8009966 <memmove+0xa>
 800997a:	1881      	adds	r1, r0, r2
 800997c:	1ad2      	subs	r2, r2, r3
 800997e:	42d3      	cmn	r3, r2
 8009980:	d100      	bne.n	8009984 <memmove+0x28>
 8009982:	bd10      	pop	{r4, pc}
 8009984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009988:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800998c:	e7f7      	b.n	800997e <memmove+0x22>

0800998e <__malloc_lock>:
 800998e:	4770      	bx	lr

08009990 <__malloc_unlock>:
 8009990:	4770      	bx	lr

08009992 <_realloc_r>:
 8009992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009994:	4607      	mov	r7, r0
 8009996:	4614      	mov	r4, r2
 8009998:	460e      	mov	r6, r1
 800999a:	b921      	cbnz	r1, 80099a6 <_realloc_r+0x14>
 800999c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099a0:	4611      	mov	r1, r2
 80099a2:	f7ff bc29 	b.w	80091f8 <_malloc_r>
 80099a6:	b922      	cbnz	r2, 80099b2 <_realloc_r+0x20>
 80099a8:	f7ff fbda 	bl	8009160 <_free_r>
 80099ac:	4625      	mov	r5, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b2:	f000 f827 	bl	8009a04 <_malloc_usable_size_r>
 80099b6:	42a0      	cmp	r0, r4
 80099b8:	d20f      	bcs.n	80099da <_realloc_r+0x48>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff fc1b 	bl	80091f8 <_malloc_r>
 80099c2:	4605      	mov	r5, r0
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d0f2      	beq.n	80099ae <_realloc_r+0x1c>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4622      	mov	r2, r4
 80099cc:	f7fb fe40 	bl	8005650 <memcpy>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff fbc4 	bl	8009160 <_free_r>
 80099d8:	e7e9      	b.n	80099ae <_realloc_r+0x1c>
 80099da:	4635      	mov	r5, r6
 80099dc:	e7e7      	b.n	80099ae <_realloc_r+0x1c>
	...

080099e0 <_read_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4605      	mov	r5, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	2200      	movs	r2, #0
 80099ea:	4c05      	ldr	r4, [pc, #20]	; (8009a00 <_read_r+0x20>)
 80099ec:	6022      	str	r2, [r4, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f7 fe5e 	bl	80016b0 <_read>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_read_r+0x1e>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_read_r+0x1e>
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20000364 	.word	0x20000364

08009a04 <_malloc_usable_size_r>:
 8009a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a08:	1f18      	subs	r0, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bfbc      	itt	lt
 8009a0e:	580b      	ldrlt	r3, [r1, r0]
 8009a10:	18c0      	addlt	r0, r0, r3
 8009a12:	4770      	bx	lr

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
