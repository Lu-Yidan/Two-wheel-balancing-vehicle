
Car_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a290  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800a3a0  0800a3a0  0001a3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a728  0800a728  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a728  0800a728  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a728  0800a728  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e0  0800a910  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800a910  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183c5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000335f  00000000  00000000  000385ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  0003b930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b95d  00000000  00000000  0003d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000051fd  00000000  00000000  0004931d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0004e51a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005a08  00000000  00000000  0004e598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a388 	.word	0x0800a388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a388 	.word	0x0800a388

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <CppMain>:
#include "CPPmain.h"




void CppMain() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if (!MPU_Init())	//如果MPU6050初始化成功，返回0，!0则为1
 8001160:	f004 fb94 	bl	800588c <_Z8MPU_Initv>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <CppMain+0x1e>
	{
		printf("MPU-6050 Init Successfully");//成功了则打印 MPU-6050 Init Successfully
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <CppMain+0x48>)
 8001176:	f005 fd65 	bl	8006c44 <iprintf>
//	Button button(Button_GPIO_Port, Button_Pin);
//	Motor motor(&htim3, TIM_CHANNEL_2, BIN1_GPIO_Port, BIN1_Pin, BIN2_GPIO_Port,
//	BIN2_Pin);
//	Encoder encoder(&htim4);
//	motor.frontRun();
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//开启TIM4的编码器接口模式
 800117a:	213c      	movs	r1, #60	; 0x3c
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <CppMain+0x4c>)
 800117e:	f003 fa67 	bl	8004650 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//开启TIM2的编码器接口模式
 8001182:	213c      	movs	r1, #60	; 0x3c
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <CppMain+0x50>)
 8001186:	f003 fa63 	bl	8004650 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);//开启TIM3_CH1的PWM输出
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <CppMain+0x54>)
 800118e:	f003 f91b 	bl	80043c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);//开启TIM3_CH2的PWM输出
 8001192:	2104      	movs	r1, #4
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <CppMain+0x54>)
 8001196:	f003 f917 	bl	80043c8 <HAL_TIM_PWM_Start>
//		MPU_Get_Accelerometer(&accx, &accy, &accz);	//获取MPU6050加速度数据
//		MPU_Get_Gyroscope(&gyrox, &gyroy, &gyroz);	//获取MPU6050陀螺仪数据
//		printf("accx=%d,accy=%d,accz=%d\n", accx, accy, accz);	//打印MPU6050加速度数据
//		printf("gyrox=%d,gyroy=%d,gyroz=%d\n", gyrox, gyroy, gyroz);//打印MPU6050陀螺仪数据
//		printf("小车角度 = %f\r\n",g_fCarAngle);//打印实时角度
		HAL_Delay(5);    //延时0.5s，防止打印发送数据太快
 800119a:	2005      	movs	r0, #5
 800119c:	f001 f902 	bl	80023a4 <HAL_Delay>
 80011a0:	e7fb      	b.n	800119a <CppMain+0x3e>
 80011a2:	bf00      	nop
 80011a4:	0800a3a0 	.word	0x0800a3a0
 80011a8:	200002cc 	.word	0x200002cc
 80011ac:	2000035c 	.word	0x2000035c
 80011b0:	20000314 	.word	0x20000314

080011b4 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f004 fd31 	bl	8005c28 <atan2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <GetMpuData>:
float g_fSpeedControlOut, g_fSpeedControlOutNew, g_fSpeedControlOutOld; //速度环输出

int g_nSpeedControlPeriod; //速度环控制周期计算量

void GetMpuData(void) //读取MPU-6050数据
		{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	MPU_Get_Accelerometer(&x_nAcc, &y_nAcc, &z_nAcc); //获取MPU6050加速度数据
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <GetMpuData+0x1c>)
 80011d6:	4906      	ldr	r1, [pc, #24]	; (80011f0 <GetMpuData+0x20>)
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <GetMpuData+0x24>)
 80011da:	f004 fc4b 	bl	8005a74 <_Z21MPU_Get_AccelerometerPsS_S_>
	MPU_Get_Gyroscope(&x_nGyro, &y_nGyro, &z_nGyro); //获取MPU6050陀螺仪数据
 80011de:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <GetMpuData+0x28>)
 80011e0:	4906      	ldr	r1, [pc, #24]	; (80011fc <GetMpuData+0x2c>)
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <GetMpuData+0x30>)
 80011e4:	f004 fc14 	bl	8005a10 <_Z17MPU_Get_GyroscopePsS_S_>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000200 	.word	0x20000200
 80011f0:	200001fe 	.word	0x200001fe
 80011f4:	200001fc 	.word	0x200001fc
 80011f8:	20000206 	.word	0x20000206
 80011fc:	20000204 	.word	0x20000204
 8001200:	20000202 	.word	0x20000202
 8001204:	00000000 	.word	0x00000000

08001208 <AngleCalculate>:

void AngleCalculate(void) //角度计算
		{
 8001208:	b598      	push	{r3, r4, r7, lr}
 800120a:	af00      	add	r7, sp, #0
	//-------加速度数据处理--------------------------
	//量程为±2g时，灵敏度：16384 LSB/g
	x_fAcc = x_nAcc / 16384.0;
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <AngleCalculate+0x118>)
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f8f6 	bl	8000404 <__aeabi_i2d>
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <AngleCalculate+0x11c>)
 800121e:	f7ff fa85 	bl	800072c <__aeabi_ddiv>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	4618      	mov	r0, r3
 8001228:	4621      	mov	r1, r4
 800122a:	f7ff fc4d 	bl	8000ac8 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <AngleCalculate+0x120>)
 8001232:	601a      	str	r2, [r3, #0]
	y_fAcc = y_nAcc / 16384.0;
 8001234:	4b3d      	ldr	r3, [pc, #244]	; (800132c <AngleCalculate+0x124>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f8e2 	bl	8000404 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b37      	ldr	r3, [pc, #220]	; (8001324 <AngleCalculate+0x11c>)
 8001246:	f7ff fa71 	bl	800072c <__aeabi_ddiv>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fc39 	bl	8000ac8 <__aeabi_d2f>
 8001256:	4602      	mov	r2, r0
 8001258:	4b35      	ldr	r3, [pc, #212]	; (8001330 <AngleCalculate+0x128>)
 800125a:	601a      	str	r2, [r3, #0]
	z_fAcc = z_nAcc / 16384.0;
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <AngleCalculate+0x12c>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f8ce 	bl	8000404 <__aeabi_i2d>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <AngleCalculate+0x11c>)
 800126e:	f7ff fa5d 	bl	800072c <__aeabi_ddiv>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4618      	mov	r0, r3
 8001278:	4621      	mov	r1, r4
 800127a:	f7ff fc25 	bl	8000ac8 <__aeabi_d2f>
 800127e:	4602      	mov	r2, r0
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <AngleCalculate+0x130>)
 8001282:	601a      	str	r2, [r3, #0]

	g_fAccAngle = atan2(y_fAcc, z_fAcc) * 180.0 / 3.14;
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <AngleCalculate+0x128>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <AngleCalculate+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f7ff ff90 	bl	80011b4 <_ZSt5atan2ff>
 8001294:	4603      	mov	r3, r0
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8c6 	bl	8000428 <__aeabi_f2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <AngleCalculate+0x134>)
 80012a2:	f7ff f919 	bl	80004d8 <__aeabi_dmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	4618      	mov	r0, r3
 80012ac:	4621      	mov	r1, r4
 80012ae:	a318      	add	r3, pc, #96	; (adr r3, 8001310 <AngleCalculate+0x108>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff fa3a 	bl	800072c <__aeabi_ddiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fc02 	bl	8000ac8 <__aeabi_d2f>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <AngleCalculate+0x138>)
 80012c8:	601a      	str	r2, [r3, #0]

	//-------陀螺仪数据处理-------------------------
	//范围为2000deg/s时，换算关系：16.4 LSB/(deg/s)
	g_fGyroAngleSpeed = x_nGyro / 16.4;  //计算角速度值
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <AngleCalculate+0x13c>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f897 	bl	8000404 <__aeabi_i2d>
 80012d6:	a310      	add	r3, pc, #64	; (adr r3, 8001318 <AngleCalculate+0x110>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fa26 	bl	800072c <__aeabi_ddiv>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	4618      	mov	r0, r3
 80012e6:	4621      	mov	r1, r4
 80012e8:	f7ff fbee 	bl	8000ac8 <__aeabi_d2f>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <AngleCalculate+0x140>)
 80012f0:	601a      	str	r2, [r3, #0]

	//-------互补滤波---------------
	g_fCarAngle = ComplementaryFilter(g_fAccAngle, g_fGyroAngleSpeed, dt);
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <AngleCalculate+0x138>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <AngleCalculate+0x140>)
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <AngleCalculate+0x144>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	f004 fc50 	bl	8005ba4 <_Z19ComplementaryFilterfff>
 8001304:	4602      	mov	r2, r0
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <AngleCalculate+0x148>)
 8001308:	601a      	str	r2, [r3, #0]

	//OutData[0]=g_fAccAngle;//发送加速度初步计算的角度
	//OutData[1]=g_fGyroAngleSpeed;//发送陀螺仪角速度
	//OutData[2]=g_fCarAngle;//发送数据融合得到的角度
}
 800130a:	bf00      	nop
 800130c:	bd98      	pop	{r3, r4, r7, pc}
 800130e:	bf00      	nop
 8001310:	51eb851f 	.word	0x51eb851f
 8001314:	40091eb8 	.word	0x40091eb8
 8001318:	66666666 	.word	0x66666666
 800131c:	40306666 	.word	0x40306666
 8001320:	200001fc 	.word	0x200001fc
 8001324:	40d00000 	.word	0x40d00000
 8001328:	20000208 	.word	0x20000208
 800132c:	200001fe 	.word	0x200001fe
 8001330:	2000020c 	.word	0x2000020c
 8001334:	20000200 	.word	0x20000200
 8001338:	20000210 	.word	0x20000210
 800133c:	40668000 	.word	0x40668000
 8001340:	20000214 	.word	0x20000214
 8001344:	20000202 	.word	0x20000202
 8001348:	20000218 	.word	0x20000218
 800134c:	20000000 	.word	0x20000000
 8001350:	2000021c 	.word	0x2000021c

08001354 <GetMotorPulse>:

void GetMotorPulse(void)	//读取电机脉冲
		{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	g_nRightMotorPulse = (short) (__HAL_TIM_GET_COUNTER(&htim4));	//获取计数器值
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <GetMotorPulse+0x68>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	b21b      	sxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <GetMotorPulse+0x6c>)
 8001364:	601a      	str	r2, [r3, #0]
	g_nRightMotorPulse = (-g_nRightMotorPulse);
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <GetMotorPulse+0x6c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	425b      	negs	r3, r3
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <GetMotorPulse+0x6c>)
 800136e:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);	//TIM4计数器清零
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <GetMotorPulse+0x68>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
	g_nLeftMotorPulse = (short) (__HAL_TIM_GET_COUNTER(&htim2));	//获取计数器值
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <GetMotorPulse+0x70>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	b21b      	sxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <GetMotorPulse+0x74>)
 8001384:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);	//TIM2计数器清零
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <GetMotorPulse+0x70>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

	g_lLeftMotorPulseSigma += g_nLeftMotorPulse;	//速度外环使用的脉冲累积
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <GetMotorPulse+0x78>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <GetMotorPulse+0x74>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4413      	add	r3, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <GetMotorPulse+0x78>)
 800139e:	601a      	str	r2, [r3, #0]
	g_lRightMotorPulseSigma += g_nRightMotorPulse;	//速度外环使用的脉冲累积
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <GetMotorPulse+0x7c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <GetMotorPulse+0x6c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <GetMotorPulse+0x7c>)
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200002cc 	.word	0x200002cc
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	2000035c 	.word	0x2000035c
 80013c8:	20000228 	.word	0x20000228
 80013cc:	20000248 	.word	0x20000248
 80013d0:	2000024c 	.word	0x2000024c

080013d4 <SetMotorVoltageAndDirection>:

	return nPwm;	//返回输出值
}

void SetMotorVoltageAndDirection(int nLeftMotorPwm, int nRightMotorPwm)	//设置电机电压和方向
		{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	if (nRightMotorPwm < 0)	//反转
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da11      	bge.n	8001408 <SetMotorVoltageAndDirection+0x34>
			{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2101      	movs	r1, #1
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <SetMotorVoltageAndDirection+0xa0>)
 80013ea:	f001 faf2 	bl	80029d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2102      	movs	r1, #2
 80013f2:	4820      	ldr	r0, [pc, #128]	; (8001474 <SetMotorVoltageAndDirection+0xa0>)
 80013f4:	f001 faed 	bl	80029d2 <HAL_GPIO_WritePin>
		nRightMotorPwm = (-nRightMotorPwm);	//如果计算值是负值，负值只是表示反转，先转负为正，因为PWM寄存器只能是正值
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	425b      	negs	r3, r3
 80013fc:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nRightMotorPwm);
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <SetMotorVoltageAndDirection+0xa4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e00d      	b.n	8001424 <SetMotorVoltageAndDirection+0x50>
	} else	//正转
	{
		HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2101      	movs	r1, #1
 800140c:	4819      	ldr	r0, [pc, #100]	; (8001474 <SetMotorVoltageAndDirection+0xa0>)
 800140e:	f001 fae0 	bl	80029d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2102      	movs	r1, #2
 8001416:	4817      	ldr	r0, [pc, #92]	; (8001474 <SetMotorVoltageAndDirection+0xa0>)
 8001418:	f001 fadb 	bl	80029d2 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nRightMotorPwm);
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <SetMotorVoltageAndDirection+0xa4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (nLeftMotorPwm < 0)	//反转
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da11      	bge.n	800144e <SetMotorVoltageAndDirection+0x7a>
			{
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <SetMotorVoltageAndDirection+0xa8>)
 8001430:	f001 facf 	bl	80029d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2110      	movs	r1, #16
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <SetMotorVoltageAndDirection+0xa8>)
 800143a:	f001 faca 	bl	80029d2 <HAL_GPIO_WritePin>
		nLeftMotorPwm = (-nLeftMotorPwm);//如果计算值是负值，负值只是表示反转，先转负为正，因为PWM寄存器只能是正值
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	425b      	negs	r3, r3
 8001442:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nLeftMotorPwm);
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <SetMotorVoltageAndDirection+0xa4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nLeftMotorPwm);
	}

}
 800144c:	e00d      	b.n	800146a <SetMotorVoltageAndDirection+0x96>
		HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2108      	movs	r1, #8
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <SetMotorVoltageAndDirection+0xa8>)
 8001454:	f001 fabd 	bl	80029d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2110      	movs	r1, #16
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <SetMotorVoltageAndDirection+0xa8>)
 800145e:	f001 fab8 	bl	80029d2 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nLeftMotorPwm);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SetMotorVoltageAndDirection+0xa4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40010c00 	.word	0x40010c00
 8001478:	20000314 	.word	0x20000314
 800147c:	40010800 	.word	0x40010800

08001480 <MotorOutput>:

void MotorOutput(void)	//电机输出函数,将直立控制、速度控制、方向控制的输出量进行叠加,并加入死区常量，对输出饱和作出处理。
		{
 8001480:	b598      	push	{r3, r4, r7, lr}
 8001482:	af00      	add	r7, sp, #0

	g_fLeftMotorOut = g_fAngleControlOut - g_fSpeedControlOut;//这里的电机输出等于角度环控制量 + 速度环外环,这里的 - g_fSpeedControlOut 是因为速度环的极性跟角度环不一样，角度环是负反馈，速度环是正反馈
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <MotorOutput+0x138>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <MotorOutput+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f7ff fb6e 	bl	8000b70 <__aeabi_fsub>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <MotorOutput+0x140>)
 800149a:	601a      	str	r2, [r3, #0]
	g_fRightMotorOut = g_fAngleControlOut - g_fSpeedControlOut;
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <MotorOutput+0x138>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b46      	ldr	r3, [pc, #280]	; (80015bc <MotorOutput+0x13c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4610      	mov	r0, r2
 80014a8:	f7ff fb62 	bl	8000b70 <__aeabi_fsub>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <MotorOutput+0x144>)
 80014b2:	601a      	str	r2, [r3, #0]

	/*增加电机死区常数*/
	if ((int) g_fLeftMotorOut > 0)
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <MotorOutput+0x140>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe29 	bl	8001110 <__aeabi_f2iz>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd0b      	ble.n	80014dc <MotorOutput+0x5c>
		g_fLeftMotorOut += MOTOR_OUT_DEAD_VAL;
 80014c4:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <MotorOutput+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f04f 0100 	mov.w	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fb51 	bl	8000b74 <__addsf3>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <MotorOutput+0x140>)
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e00b      	b.n	80014f4 <MotorOutput+0x74>
	else if ((int) g_fLeftMotorOut < 0)
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <MotorOutput+0x140>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe15 	bl	8001110 <__aeabi_f2iz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da03      	bge.n	80014f4 <MotorOutput+0x74>
		g_fLeftMotorOut -= MOTOR_OUT_DEAD_VAL;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <MotorOutput+0x140>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <MotorOutput+0x140>)
 80014f2:	6013      	str	r3, [r2, #0]
	if ((int) g_fRightMotorOut > 0)
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MotorOutput+0x144>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe09 	bl	8001110 <__aeabi_f2iz>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd0b      	ble.n	800151c <MotorOutput+0x9c>
		g_fRightMotorOut += MOTOR_OUT_DEAD_VAL;
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <MotorOutput+0x144>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 0100 	mov.w	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fb31 	bl	8000b74 <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MotorOutput+0x144>)
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e00b      	b.n	8001534 <MotorOutput+0xb4>
	else if ((int) g_fRightMotorOut < 0)
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MotorOutput+0x144>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fdf5 	bl	8001110 <__aeabi_f2iz>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	da03      	bge.n	8001534 <MotorOutput+0xb4>
		g_fRightMotorOut -= MOTOR_OUT_DEAD_VAL;
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MotorOutput+0x144>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <MotorOutput+0x144>)
 8001532:	6013      	str	r3, [r2, #0]

	/*输出饱和处理，防止超出PWM范围*/
	if ((int) g_fLeftMotorOut > MOTOR_OUT_MAX)
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MotorOutput+0x140>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fde9 	bl	8001110 <__aeabi_f2iz>
 800153e:	4603      	mov	r3, r0
 8001540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001544:	dd02      	ble.n	800154c <MotorOutput+0xcc>
		g_fLeftMotorOut = MOTOR_OUT_MAX;
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <MotorOutput+0x140>)
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <MotorOutput+0x148>)
 800154a:	601a      	str	r2, [r3, #0]
	if ((int) g_fLeftMotorOut < MOTOR_OUT_MIN)
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MotorOutput+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fddd 	bl	8001110 <__aeabi_f2iz>
 8001556:	4603      	mov	r3, r0
 8001558:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800155c:	da02      	bge.n	8001564 <MotorOutput+0xe4>
		g_fLeftMotorOut = MOTOR_OUT_MIN;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MotorOutput+0x140>)
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <MotorOutput+0x14c>)
 8001562:	601a      	str	r2, [r3, #0]
	if ((int) g_fRightMotorOut > MOTOR_OUT_MAX)
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MotorOutput+0x144>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fdd1 	bl	8001110 <__aeabi_f2iz>
 800156e:	4603      	mov	r3, r0
 8001570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001574:	dd02      	ble.n	800157c <MotorOutput+0xfc>
		g_fRightMotorOut = MOTOR_OUT_MAX;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MotorOutput+0x144>)
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MotorOutput+0x148>)
 800157a:	601a      	str	r2, [r3, #0]
	if ((int) g_fRightMotorOut < MOTOR_OUT_MIN)
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MotorOutput+0x144>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fdc5 	bl	8001110 <__aeabi_f2iz>
 8001586:	4603      	mov	r3, r0
 8001588:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800158c:	da02      	bge.n	8001594 <MotorOutput+0x114>
		g_fRightMotorOut = MOTOR_OUT_MIN;
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MotorOutput+0x144>)
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <MotorOutput+0x14c>)
 8001592:	601a      	str	r2, [r3, #0]

	SetMotorVoltageAndDirection((int) g_fLeftMotorOut, (int) g_fRightMotorOut);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MotorOutput+0x140>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fdb9 	bl	8001110 <__aeabi_f2iz>
 800159e:	4604      	mov	r4, r0
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MotorOutput+0x144>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdb3 	bl	8001110 <__aeabi_f2iz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ff10 	bl	80013d4 <SetMotorVoltageAndDirection>
}
 80015b4:	bf00      	nop
 80015b6:	bd98      	pop	{r3, r4, r7, pc}
 80015b8:	20000238 	.word	0x20000238
 80015bc:	20000250 	.word	0x20000250
 80015c0:	20000230 	.word	0x20000230
 80015c4:	20000234 	.word	0x20000234
 80015c8:	447a0000 	.word	0x447a0000
 80015cc:	c47a0000 	.word	0xc47a0000

080015d0 <AngleControl>:

void AngleControl(void)	 //角度环控制函数
		{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	float fP = 65.0;	 //角度环P参数
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <AngleControl+0x5c>)
 80015d8:	607b      	str	r3, [r7, #4]
	float fD = 2.3;	 //角度环D参数
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <AngleControl+0x60>)
 80015dc:	603b      	str	r3, [r7, #0]

	g_fAngleControlOut = (CAR_ANGLE_SET - g_fCarAngle) * fP
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <AngleControl+0x64>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 0000 	mov.w	r0, #0
 80015e8:	f7ff fac2 	bl	8000b70 <__aeabi_fsub>
 80015ec:	4603      	mov	r3, r0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fbc7 	bl	8000d84 <__aeabi_fmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461c      	mov	r4, r3
			+ (CAR_ANGLE_SPEED_SET - g_fGyroAngleSpeed) * fD;	 //PD控制器
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <AngleControl+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0000 	mov.w	r0, #0
 8001604:	f7ff fab4 	bl	8000b70 <__aeabi_fsub>
 8001608:	4603      	mov	r3, r0
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fbb9 	bl	8000d84 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff faac 	bl	8000b74 <__addsf3>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
	g_fAngleControlOut = (CAR_ANGLE_SET - g_fCarAngle) * fP
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <AngleControl+0x6c>)
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	42820000 	.word	0x42820000
 8001630:	40133333 	.word	0x40133333
 8001634:	2000021c 	.word	0x2000021c
 8001638:	20000218 	.word	0x20000218
 800163c:	20000238 	.word	0x20000238

08001640 <SpeedControl>:

void SpeedControl(void)	 //速度外环控制函数
		{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
	float fP = 10.25, fI = 0.108; //速度环PI参数，
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <SpeedControl+0x130>)
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <SpeedControl+0x134>)
 800164c:	60bb      	str	r3, [r7, #8]
	float fDelta; //临时变量，用于存储误差

	g_fCarSpeed = (g_lLeftMotorPulseSigma + g_lRightMotorPulseSigma) / 2; //左轮和右轮的速度平均值等于小车速度
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <SpeedControl+0x138>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <SpeedControl+0x13c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	0fda      	lsrs	r2, r3, #31
 800165a:	4413      	add	r3, r2
 800165c:	105b      	asrs	r3, r3, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fb3c 	bl	8000cdc <__aeabi_i2f>
 8001664:	4602      	mov	r2, r0
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <SpeedControl+0x140>)
 8001668:	601a      	str	r2, [r3, #0]
	g_lLeftMotorPulseSigma = g_lRightMotorPulseSigma = 0;	  //全局变量，注意及时清零
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <SpeedControl+0x13c>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <SpeedControl+0x13c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a40      	ldr	r2, [pc, #256]	; (8001778 <SpeedControl+0x138>)
 8001676:	6013      	str	r3, [r2, #0]

	g_fCarSpeed = 0.7 * g_fCarSpeedPrev + 0.3 * g_fCarSpeed;	  //低通滤波，使速度更平滑
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <SpeedControl+0x144>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fed3 	bl	8000428 <__aeabi_f2d>
 8001682:	a337      	add	r3, pc, #220	; (adr r3, 8001760 <SpeedControl+0x120>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff26 	bl	80004d8 <__aeabi_dmul>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4625      	mov	r5, r4
 8001692:	461c      	mov	r4, r3
 8001694:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <SpeedControl+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fec5 	bl	8000428 <__aeabi_f2d>
 800169e:	a332      	add	r3, pc, #200	; (adr r3, 8001768 <SpeedControl+0x128>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ff18 	bl	80004d8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7fe fd5c 	bl	800016c <__adddf3>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	4618      	mov	r0, r3
 80016ba:	4621      	mov	r1, r4
 80016bc:	f7ff fa04 	bl	8000ac8 <__aeabi_d2f>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <SpeedControl+0x140>)
 80016c4:	601a      	str	r2, [r3, #0]
	g_fCarSpeedPrev = g_fCarSpeed; //保存前一次速度
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <SpeedControl+0x140>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <SpeedControl+0x144>)
 80016cc:	6013      	str	r3, [r2, #0]

	fDelta = CAR_SPEED_SET - g_fCarSpeed; //误差=目标速度-实际速度
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <SpeedControl+0x140>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f7ff fa4a 	bl	8000b70 <__aeabi_fsub>
 80016dc:	4603      	mov	r3, r0
 80016de:	607b      	str	r3, [r7, #4]
	g_fCarPosition += fDelta; //对速度误差进行积分
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <SpeedControl+0x148>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa44 	bl	8000b74 <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <SpeedControl+0x148>)
 80016f2:	601a      	str	r2, [r3, #0]

	//设置积分上限设限
	if ((int) g_fCarPosition > CAR_POSITION_MAX)
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <SpeedControl+0x148>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd09 	bl	8001110 <__aeabi_f2iz>
 80016fe:	4603      	mov	r3, r0
 8001700:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001704:	dd02      	ble.n	800170c <SpeedControl+0xcc>
		g_fCarPosition = CAR_POSITION_MAX;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <SpeedControl+0x148>)
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <SpeedControl+0x14c>)
 800170a:	601a      	str	r2, [r3, #0]
	if ((int) g_fCarPosition < CAR_POSITION_MIN)
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <SpeedControl+0x148>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fcfd 	bl	8001110 <__aeabi_f2iz>
 8001716:	4603      	mov	r3, r0
 8001718:	f513 7f61 	cmn.w	r3, #900	; 0x384
 800171c:	da02      	bge.n	8001724 <SpeedControl+0xe4>
		g_fCarPosition = CAR_POSITION_MIN;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <SpeedControl+0x148>)
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <SpeedControl+0x150>)
 8001722:	601a      	str	r2, [r3, #0]

	g_fSpeedControlOutOld = g_fSpeedControlOutNew; //保存上一次输出
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SpeedControl+0x154>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <SpeedControl+0x158>)
 800172a:	6013      	str	r3, [r2, #0]

	g_fSpeedControlOutNew = fDelta * fP + g_fCarPosition * fI; //PI控制器，输出=误差*P+误差积分*I
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fb28 	bl	8000d84 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461c      	mov	r4, r3
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <SpeedControl+0x148>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb20 	bl	8000d84 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4619      	mov	r1, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fa13 	bl	8000b74 <__addsf3>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <SpeedControl+0x154>)
 8001754:	601a      	str	r2, [r3, #0]

}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bdb0      	pop	{r4, r5, r7, pc}
 800175e:	bf00      	nop
 8001760:	66666666 	.word	0x66666666
 8001764:	3fe66666 	.word	0x3fe66666
 8001768:	33333333 	.word	0x33333333
 800176c:	3fd33333 	.word	0x3fd33333
 8001770:	41240000 	.word	0x41240000
 8001774:	3ddd2f1b 	.word	0x3ddd2f1b
 8001778:	20000248 	.word	0x20000248
 800177c:	2000024c 	.word	0x2000024c
 8001780:	2000023c 	.word	0x2000023c
 8001784:	20000240 	.word	0x20000240
 8001788:	20000244 	.word	0x20000244
 800178c:	44610000 	.word	0x44610000
 8001790:	c4610000 	.word	0xc4610000
 8001794:	20000254 	.word	0x20000254
 8001798:	20000258 	.word	0x20000258

0800179c <SpeedControlOutput>:

void SpeedControlOutput(void) //速度外环平滑输出函数，速度的PWM改变量如果在25ms时刻计算出后立刻输出，会造成不平滑抖动等，这段代码就是把这个25ms周期计算一次得到的PWM分配到5个5ms时间去输出，平滑地逐步逼近输出最后的计算值！
		{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	float fValue;
	fValue = g_fSpeedControlOutNew - g_fSpeedControlOutOld; //速度计算量差值=本次速度计算量-上次速度计算量
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <SpeedControlOutput+0x5c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <SpeedControlOutput+0x60>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7ff f9df 	bl	8000b70 <__aeabi_fsub>
 80017b2:	4603      	mov	r3, r0
 80017b4:	607b      	str	r3, [r7, #4]
	g_fSpeedControlOut = fValue * (g_nSpeedControlPeriod + 1)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <SpeedControlOutput+0x64>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa8d 	bl	8000cdc <__aeabi_i2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fadc 	bl	8000d84 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
			/ SPEED_CONTROL_PERIOD + g_fSpeedControlOutOld; //速度计算量差值*
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <SpeedControlOutput+0x68>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fb8b 	bl	8000eec <__aeabi_fdiv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SpeedControlOutput+0x60>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f7ff f9c7 	bl	8000b74 <__addsf3>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
	g_fSpeedControlOut = fValue * (g_nSpeedControlPeriod + 1)
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <SpeedControlOutput+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000254 	.word	0x20000254
 80017fc:	20000258 	.word	0x20000258
 8001800:	2000025c 	.word	0x2000025c
 8001804:	41c80000 	.word	0x41c80000
 8001808:	20000250 	.word	0x20000250

0800180c <ShowPlus>:

void ShowPlus() {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	g_nMainEventCount++; //每进一次中断，主事件函数自动加1
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <ShowPlus+0x8c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <ShowPlus+0x8c>)
 8001818:	6013      	str	r3, [r2, #0]

	g_nSpeedControlPeriod++; //速度环控制周期计算量自动加1
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <ShowPlus+0x90>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a1e      	ldr	r2, [pc, #120]	; (800189c <ShowPlus+0x90>)
 8001822:	6013      	str	r3, [r2, #0]
	SpeedControlOutput(); //速度环控制平滑输出处理，速度的pwm改变量如果在25ms时刻计算出后立刻输出，会造成不平滑抖动等，这段代码就是把这个25ms周期计算一次得到的pwm分配到5个5ms时间去输出，平滑地逐步逼近输出最后的计算值！
 8001824:	f7ff ffba 	bl	800179c <SpeedControlOutput>
	if (g_nMainEventCount >= 5) //SysTick是1ms一次，这里判断语句大于5就是5ms运行一次
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <ShowPlus+0x8c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d905      	bls.n	800183c <ShowPlus+0x30>
			{
		g_nMainEventCount = 0; //主事件循环每5ms循环一次，这里清零，重新计时。
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <ShowPlus+0x8c>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
		GetMotorPulse();
 8001836:	f7ff fd8d 	bl	8001354 <GetMotorPulse>

	} else if (g_nMainEventCount == 4) {
		MotorOutput();         //电机输出函数，每5ms执行一次
	}

}
 800183a:	e02b      	b.n	8001894 <ShowPlus+0x88>
	} else if (g_nMainEventCount == 1) { //这1ms时间片段获取数据和角度计算
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <ShowPlus+0x8c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d104      	bne.n	800184e <ShowPlus+0x42>
		GetMpuData(); //获取MPU-6050数据
 8001844:	f7ff fcc4 	bl	80011d0 <GetMpuData>
		AngleCalculate();    //进行角度计算
 8001848:	f7ff fcde 	bl	8001208 <AngleCalculate>
}
 800184c:	e022      	b.n	8001894 <ShowPlus+0x88>
	} else if (g_nMainEventCount == 2) {
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <ShowPlus+0x8c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d102      	bne.n	800185c <ShowPlus+0x50>
		AngleControl();        //这1ms时间片段进行角度控制
 8001856:	f7ff febb 	bl	80015d0 <AngleControl>
}
 800185a:	e01b      	b.n	8001894 <ShowPlus+0x88>
	} else if (g_nMainEventCount == 3) {
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <ShowPlus+0x8c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d111      	bne.n	8001888 <ShowPlus+0x7c>
		g_nSpeedControlCount++;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <ShowPlus+0x94>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <ShowPlus+0x94>)
 800186c:	6013      	str	r3, [r2, #0]
		if (g_nSpeedControlCount >= 5) {
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <ShowPlus+0x94>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b04      	cmp	r3, #4
 8001874:	d90e      	bls.n	8001894 <ShowPlus+0x88>
			SpeedControl();     //速度控制，25ms进行一次
 8001876:	f7ff fee3 	bl	8001640 <SpeedControl>
			g_nSpeedControlCount = 0; //清零
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <ShowPlus+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
			g_nSpeedControlPeriod = 0; //清零
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <ShowPlus+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	e005      	b.n	8001894 <ShowPlus+0x88>
	} else if (g_nMainEventCount == 4) {
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <ShowPlus+0x8c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d101      	bne.n	8001894 <ShowPlus+0x88>
		MotorOutput();         //电机输出函数，每5ms执行一次
 8001890:	f7ff fdf6 	bl	8001480 <MotorOutput>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000220 	.word	0x20000220
 800189c:	2000025c 	.word	0x2000025c
 80018a0:	20000224 	.word	0x20000224

080018a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a32      	ldr	r2, [pc, #200]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <MX_GPIO_Init+0x114>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_GPIO_Init+0x114>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <MX_GPIO_Init+0x114>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_GPIO_Init+0x114>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	2118      	movs	r1, #24
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <MX_GPIO_Init+0x118>)
 800191e:	f001 f858 	bl	80029d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AIN1_Pin|AIN2_Pin|LED_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f241 0103 	movw	r1, #4099	; 0x1003
 8001928:	4825      	ldr	r0, [pc, #148]	; (80019c0 <MX_GPIO_Init+0x11c>)
 800192a:	f001 f852 	bl	80029d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 800192e:	2318      	movs	r3, #24
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <MX_GPIO_Init+0x118>)
 8001946:	f000 fed3 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin;
 800194a:	2303      	movs	r3, #3
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2302      	movs	r3, #2
 8001958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4619      	mov	r1, r3
 8001960:	4817      	ldr	r0, [pc, #92]	; (80019c0 <MX_GPIO_Init+0x11c>)
 8001962:	f000 fec5 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4619      	mov	r1, r3
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <MX_GPIO_Init+0x11c>)
 8001980:	f000 feb6 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_GPIO_Init+0x120>)
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4619      	mov	r1, r3
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <MX_GPIO_Init+0x118>)
 800199a:	f000 fea9 	bl	80026f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2101      	movs	r1, #1
 80019a2:	2017      	movs	r0, #23
 80019a4:	f000 fdf7 	bl	8002596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019a8:	2017      	movs	r0, #23
 80019aa:	f000 fe10 	bl	80025ce <HAL_NVIC_EnableIRQ>

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010800 	.word	0x40010800
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	10210000 	.word	0x10210000

080019c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <MX_I2C1_Init+0x54>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x58>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_I2C1_Init+0x50>)
 8001a06:	f001 f82d 	bl	8002a64 <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a10:	f000 f8b2 	bl	8001b78 <Error_Handler>
  }

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000278 	.word	0x20000278
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_I2C_MspInit+0x90>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d132      	bne.n	8001aaa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <HAL_I2C_MspInit+0x98>)
 8001a72:	f000 fe3d 	bl	80026f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_I2C_MspInit+0x9c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_I2C_MspInit+0x9c>)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_I2C_MspInit+0x94>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	40010000 	.word	0x40010000

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac8:	f000 fc0a 	bl	80022e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001acc:	f000 f80f 	bl	8001aee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad0:	f7ff fee8 	bl	80018a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001ad4:	f000 fb4e 	bl	8002174 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001ad8:	f000 fa3e 	bl	8001f58 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001adc:	f000 f9b8 	bl	8001e50 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001ae0:	f7ff ff72 	bl	80019c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ae4:	f000 f960 	bl	8001da8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	CppMain();
 8001ae8:	f7ff fb38 	bl	800115c <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001aec:	e7fe      	b.n	8001aec <main+0x28>

08001aee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b090      	sub	sp, #64	; 0x40
 8001af2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2228      	movs	r2, #40	; 0x28
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fa6a 	bl	8005fd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	2302      	movs	r3, #2
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 ff82 	bl	8003a40 <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b42:	f000 f819 	bl	8001b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 f9ed 	bl	8003f40 <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b6c:	f000 f804 	bl	8001b78 <Error_Handler>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3740      	adds	r7, #64	; 0x40
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b7e:	e7fe      	b.n	8001b7e <Error_Handler+0x6>

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_MspInit+0x60>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x60>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/*************lyd add here***************/
	extern void ShowPlus();

	ShowPlus();
 8001c2a:	f7ff fdef 	bl	800180c <ShowPlus>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2e:	f000 fb9d 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c3e:	f000 fef9 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART1_IRQHandler+0x10>)
 8001c4e:	f003 fae5 	bl	800521c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200003a4 	.word	0x200003a4

08001c5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
	}

return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fadd 	bl	8002270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
	}
	return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf4:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
	return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f004 f904 	bl	8005f6c <__errno>
 8001d64:	4602      	mov	r2, r0
 8001d66:	230c      	movs	r3, #12
 8001d68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20005000 	.word	0x20005000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000260 	.word	0x20000260
 8001d98:	200003f0 	.word	0x200003f0

08001d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 f90d 	bl	8005fd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dec:	2303      	movs	r3, #3
 8001dee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001e18:	f002 fb78 	bl	800450c <HAL_TIM_Encoder_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e22:	f7ff fea9 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <MX_TIM2_Init+0xa4>)
 8001e34:	f003 f8b4 	bl	8004fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e3e:	f7ff fe9b 	bl	8001b78 <Error_Handler>
  }

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	; 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000035c 	.word	0x2000035c

08001e50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	615a      	str	r2, [r3, #20]
 8001e7e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001e82:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <MX_TIM3_Init+0x104>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001e88:	2203      	movs	r2, #3
 8001e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ea6:	482a      	ldr	r0, [pc, #168]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001ea8:	f002 f9e6 	bl	8004278 <HAL_TIM_Base_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001eb2:	f7ff fe61 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4823      	ldr	r0, [pc, #140]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001ec4:	f002 fd10 	bl	80048e8 <HAL_TIM_ConfigClockSource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ece:	f7ff fe53 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ed2:	481f      	ldr	r0, [pc, #124]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001ed4:	f002 fa1f 	bl	8004316 <HAL_TIM_PWM_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ede:	f7ff fe4b 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001ef2:	f003 f855 	bl	8004fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001efc:	f7ff fe3c 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	480e      	ldr	r0, [pc, #56]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001f18:	f002 fc28 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f22:	f7ff fe29 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001f32:	f002 fc1b 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001f3c:	f7ff fe1c 	bl	8001b78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <MX_TIM3_Init+0x100>)
 8001f42:	f000 f8e5 	bl	8002110 <HAL_TIM_MspPostInit>

}
 8001f46:	bf00      	nop
 8001f48:	3738      	adds	r7, #56	; 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000314 	.word	0x20000314
 8001f54:	40000400 	.word	0x40000400

08001f58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 f835 	bl	8005fd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f76:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <MX_TIM4_Init+0xa4>)
 8001f78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001fc6:	f002 faa1 	bl	800450c <HAL_TIM_Encoder_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f7ff fdd2 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM4_Init+0xa0>)
 8001fe2:	f002 ffdd 	bl	8004fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001fec:	f7ff fdc4 	bl	8001b78 <Error_Handler>
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3730      	adds	r7, #48	; 0x30
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200002cc 	.word	0x200002cc
 8001ffc:	40000800 	.word	0x40000800

08002000 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d124      	bne.n	800206a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	61d3      	str	r3, [r2, #28]
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002050:	2303      	movs	r3, #3
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	4619      	mov	r1, r3
 8002062:	4819      	ldr	r0, [pc, #100]	; (80020c8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002064:	f000 fb44 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002068:	e028      	b.n	80020bc <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d123      	bne.n	80020bc <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	61d3      	str	r3, [r2, #28]
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0318 	add.w	r3, r7, #24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80020b8:	f000 fb1a 	bl	80026f0 <HAL_GPIO_Init>
}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40010c00 	.word	0x40010c00

080020d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_TIM_Base_MspInit+0x34>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10b      	bne.n	80020fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_TIM_Base_MspInit+0x38>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_TIM_Base_MspInit+0x38>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_TIM_Base_MspInit+0x38>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40000400 	.word	0x40000400
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_TIM_MspPostInit+0x58>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d117      	bne.n	8002160 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_TIM_MspPostInit+0x5c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_TIM_MspPostInit+0x5c>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_TIM_MspPostInit+0x5c>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2302      	movs	r3, #2
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4619      	mov	r1, r3
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_TIM_MspPostInit+0x60>)
 800215c:	f000 fac8 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40000400 	.word	0x40000400
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800

08002174 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021ac:	f002 ff56 	bl	800505c <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f7ff fcdf 	bl	8001b78 <Error_Handler>
  }

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200003a4 	.word	0x200003a4
 80021c4:	40013800 	.word	0x40013800

080021c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_UART_MspInit+0x9c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d139      	bne.n	800225c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_MspInit+0xa0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_UART_MspInit+0xa0>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_UART_MspInit+0xa0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <HAL_UART_MspInit+0xa4>)
 800222e:	f000 fa5f 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	4809      	ldr	r0, [pc, #36]	; (800226c <HAL_UART_MspInit+0xa4>)
 8002248:	f000 fa52 	bl	80026f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2025      	movs	r0, #37	; 0x25
 8002252:	f000 f9a0 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002256:	2025      	movs	r0, #37	; 0x25
 8002258:	f000 f9b9 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40013800 	.word	0x40013800
 8002268:	40021000 	.word	0x40021000
 800226c:	40010800 	.word	0x40010800

08002270 <__io_putchar>:
* @brief  Retargets the C library printf function to the USART.
* @param  None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002278:	1d39      	adds	r1, r7, #4
 800227a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800227e:	2201      	movs	r2, #1
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <__io_putchar+0x20>)
 8002282:	f002 ff38 	bl	80050f6 <HAL_UART_Transmit>

    return ch;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200003a4 	.word	0x200003a4

08002294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002294:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002296:	e003      	b.n	80022a0 <LoopCopyDataInit>

08002298 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800229a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800229c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800229e:	3104      	adds	r1, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022a0:	480a      	ldr	r0, [pc, #40]	; (80022cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022a8:	d3f6      	bcc.n	8002298 <CopyDataInit>
  ldr r2, =_sbss
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022ac:	e002      	b.n	80022b4 <LoopFillZerobss>

080022ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022b0:	f842 3b04 	str.w	r3, [r2], #4

080022b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022b8:	d3f9      	bcc.n	80022ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ba:	f7ff fd6f 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f003 fe5b 	bl	8005f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022c2:	f7ff fbff 	bl	8001ac4 <main>
  bx lr
 80022c6:	4770      	bx	lr
  ldr r3, =_sidata
 80022c8:	0800a730 	.word	0x0800a730
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80022d4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80022d8:	200003ec 	.word	0x200003ec

080022dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC1_2_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_Init+0x28>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_Init+0x28>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 f945 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7ff fc40 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f95d 	bl	80025ea <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 f925 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000004 	.word	0x20000004
 8002364:	2000000c 	.word	0x2000000c
 8002368:	20000008 	.word	0x20000008

0800236c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_IncTick+0x1c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x20>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_IncTick+0x20>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	2000000c 	.word	0x2000000c
 800238c:	200003e4 	.word	0x200003e4

08002390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_GetTick+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	200003e4 	.word	0x200003e4

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fff0 	bl	8002390 <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_Delay+0x40>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffe0 	bl	8002390 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000000c 	.word	0x2000000c

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4906      	ldr	r1, [pc, #24]	; (8002480 <__NVIC_EnableIRQ+0x34>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff90 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff2d 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff42 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff90 	bl	80024d8 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5f 	bl	8002484 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff35 	bl	800244c <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa2 	bl	800253c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002616:	2b02      	cmp	r3, #2
 8002618:	d005      	beq.n	8002626 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e051      	b.n	80026ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 020e 	bic.w	r2, r2, #14
 8002634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_DMA_Abort_IT+0xd0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d029      	beq.n	80026a4 <HAL_DMA_Abort_IT+0xa0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <HAL_DMA_Abort_IT+0xd4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x9c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_DMA_Abort_IT+0xd8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01a      	beq.n	800269a <HAL_DMA_Abort_IT+0x96>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_DMA_Abort_IT+0xdc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d012      	beq.n	8002694 <HAL_DMA_Abort_IT+0x90>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_DMA_Abort_IT+0xe0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00a      	beq.n	800268e <HAL_DMA_Abort_IT+0x8a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_DMA_Abort_IT+0xe4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d102      	bne.n	8002688 <HAL_DMA_Abort_IT+0x84>
 8002682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002686:	e00e      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 8002688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800268c:	e00b      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 800268e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002692:	e008      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 8002694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002698:	e005      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 800269a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269e:	e002      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 80026a0:	2310      	movs	r3, #16
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_Abort_IT+0xa2>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_DMA_Abort_IT+0xe8>)
 80026a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
    } 
  }
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40020008 	.word	0x40020008
 80026d8:	4002001c 	.word	0x4002001c
 80026dc:	40020030 	.word	0x40020030
 80026e0:	40020044 	.word	0x40020044
 80026e4:	40020058 	.word	0x40020058
 80026e8:	4002006c 	.word	0x4002006c
 80026ec:	40020000 	.word	0x40020000

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b08b      	sub	sp, #44	; 0x2c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	e127      	b.n	8002954 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002704:	2201      	movs	r2, #1
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8116 	bne.w	800294e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b12      	cmp	r3, #18
 8002728:	d034      	beq.n	8002794 <HAL_GPIO_Init+0xa4>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d80d      	bhi.n	800274a <HAL_GPIO_Init+0x5a>
 800272e:	2b02      	cmp	r3, #2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x9a>
 8002732:	2b02      	cmp	r3, #2
 8002734:	d804      	bhi.n	8002740 <HAL_GPIO_Init+0x50>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d031      	beq.n	800279e <HAL_GPIO_Init+0xae>
 800273a:	2b01      	cmp	r3, #1
 800273c:	d01c      	beq.n	8002778 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800273e:	e048      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002740:	2b03      	cmp	r3, #3
 8002742:	d043      	beq.n	80027cc <HAL_GPIO_Init+0xdc>
 8002744:	2b11      	cmp	r3, #17
 8002746:	d01b      	beq.n	8002780 <HAL_GPIO_Init+0x90>
          break;
 8002748:	e043      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800274a:	4a89      	ldr	r2, [pc, #548]	; (8002970 <HAL_GPIO_Init+0x280>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d026      	beq.n	800279e <HAL_GPIO_Init+0xae>
 8002750:	4a87      	ldr	r2, [pc, #540]	; (8002970 <HAL_GPIO_Init+0x280>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d806      	bhi.n	8002764 <HAL_GPIO_Init+0x74>
 8002756:	4a87      	ldr	r2, [pc, #540]	; (8002974 <HAL_GPIO_Init+0x284>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d020      	beq.n	800279e <HAL_GPIO_Init+0xae>
 800275c:	4a86      	ldr	r2, [pc, #536]	; (8002978 <HAL_GPIO_Init+0x288>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_GPIO_Init+0xae>
          break;
 8002762:	e036      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002764:	4a85      	ldr	r2, [pc, #532]	; (800297c <HAL_GPIO_Init+0x28c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0xae>
 800276a:	4a85      	ldr	r2, [pc, #532]	; (8002980 <HAL_GPIO_Init+0x290>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d016      	beq.n	800279e <HAL_GPIO_Init+0xae>
 8002770:	4a84      	ldr	r2, [pc, #528]	; (8002984 <HAL_GPIO_Init+0x294>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0xae>
          break;
 8002776:	e02c      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e028      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	3304      	adds	r3, #4
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e023      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	3308      	adds	r3, #8
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e01e      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	330c      	adds	r3, #12
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e019      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027a6:	2304      	movs	r3, #4
 80027a8:	623b      	str	r3, [r7, #32]
          break;
 80027aa:	e012      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b4:	2308      	movs	r3, #8
 80027b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	611a      	str	r2, [r3, #16]
          break;
 80027be:	e008      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c0:	2308      	movs	r3, #8
 80027c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	615a      	str	r2, [r3, #20]
          break;
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2bff      	cmp	r3, #255	; 0xff
 80027d6:	d801      	bhi.n	80027dc <HAL_GPIO_Init+0xec>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	e001      	b.n	80027e0 <HAL_GPIO_Init+0xf0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2bff      	cmp	r3, #255	; 0xff
 80027e6:	d802      	bhi.n	80027ee <HAL_GPIO_Init+0xfe>
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x104>
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3b08      	subs	r3, #8
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	210f      	movs	r1, #15
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	401a      	ands	r2, r3
 8002806:	6a39      	ldr	r1, [r7, #32]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	431a      	orrs	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8096 	beq.w	800294e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002822:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_GPIO_Init+0x298>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_GPIO_Init+0x298>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6193      	str	r3, [r2, #24]
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_GPIO_Init+0x298>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800283a:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_GPIO_Init+0x29c>)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4b      	ldr	r2, [pc, #300]	; (8002990 <HAL_GPIO_Init+0x2a0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x19e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <HAL_GPIO_Init+0x2a4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x19a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a49      	ldr	r2, [pc, #292]	; (8002998 <HAL_GPIO_Init+0x2a8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x196>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a48      	ldr	r2, [pc, #288]	; (800299c <HAL_GPIO_Init+0x2ac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x192>
 800287e:	2303      	movs	r3, #3
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x1a0>
 8002882:	2304      	movs	r3, #4
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x1a0>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x1a0>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x1a0>
 800288e:	2300      	movs	r3, #0
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028a0:	493a      	ldr	r1, [pc, #232]	; (800298c <HAL_GPIO_Init+0x29c>)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4938      	ldr	r1, [pc, #224]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	4933      	ldr	r1, [pc, #204]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	492e      	ldr	r1, [pc, #184]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
 80028ee:	e006      	b.n	80028fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	4929      	ldr	r1, [pc, #164]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	4924      	ldr	r1, [pc, #144]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
 8002916:	e006      	b.n	8002926 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	43db      	mvns	r3, r3
 8002920:	491f      	ldr	r1, [pc, #124]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002922:	4013      	ands	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	491a      	ldr	r1, [pc, #104]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]
 800293e:	e006      	b.n	800294e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	43db      	mvns	r3, r3
 8002948:	4915      	ldr	r1, [pc, #84]	; (80029a0 <HAL_GPIO_Init+0x2b0>)
 800294a:	4013      	ands	r3, r2
 800294c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	3301      	adds	r3, #1
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	f47f aed0 	bne.w	8002704 <HAL_GPIO_Init+0x14>
  }
}
 8002964:	bf00      	nop
 8002966:	372c      	adds	r7, #44	; 0x2c
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	10210000 	.word	0x10210000
 8002974:	10110000 	.word	0x10110000
 8002978:	10120000 	.word	0x10120000
 800297c:	10310000 	.word	0x10310000
 8002980:	10320000 	.word	0x10320000
 8002984:	10220000 	.word	0x10220000
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000
 8002990:	40010800 	.word	0x40010800
 8002994:	40010c00 	.word	0x40010c00
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e001      	b.n	80029c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	807b      	strh	r3, [r7, #2]
 80029de:	4613      	mov	r3, r2
 80029e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e2:	787b      	ldrb	r3, [r7, #1]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ee:	e003      	b.n	80029f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	611a      	str	r2, [r3, #16]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	041a      	lsls	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 feee 	bl	8005834 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e11f      	b.n	8002cb6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe ffca 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2224      	movs	r2, #36	; 0x24
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac8:	f001 fb90 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8002acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a7b      	ldr	r2, [pc, #492]	; (8002cc0 <HAL_I2C_Init+0x25c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d807      	bhi.n	8002ae8 <HAL_I2C_Init+0x84>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <HAL_I2C_Init+0x260>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bf94      	ite	ls
 8002ae0:	2301      	movls	r3, #1
 8002ae2:	2300      	movhi	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e006      	b.n	8002af6 <HAL_I2C_Init+0x92>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a77      	ldr	r2, [pc, #476]	; (8002cc8 <HAL_I2C_Init+0x264>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bf94      	ite	ls
 8002af0:	2301      	movls	r3, #1
 8002af2:	2300      	movhi	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0db      	b.n	8002cb6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a72      	ldr	r2, [pc, #456]	; (8002ccc <HAL_I2C_Init+0x268>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0c9b      	lsrs	r3, r3, #18
 8002b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a64      	ldr	r2, [pc, #400]	; (8002cc0 <HAL_I2C_Init+0x25c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d802      	bhi.n	8002b38 <HAL_I2C_Init+0xd4>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3301      	adds	r3, #1
 8002b36:	e009      	b.n	8002b4c <HAL_I2C_Init+0xe8>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	4a63      	ldr	r2, [pc, #396]	; (8002cd0 <HAL_I2C_Init+0x26c>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	430b      	orrs	r3, r1
 8002b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4956      	ldr	r1, [pc, #344]	; (8002cc0 <HAL_I2C_Init+0x25c>)
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	d80d      	bhi.n	8002b88 <HAL_I2C_Init+0x124>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e59      	subs	r1, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	bf38      	it	cc
 8002b84:	2304      	movcc	r3, #4
 8002b86:	e04f      	b.n	8002c28 <HAL_I2C_Init+0x1c4>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <HAL_I2C_Init+0x150>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_I2C_Init+0x176>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x17e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_I2C_Init+0x1c4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <HAL_I2C_Init+0x1a4>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e58      	subs	r0, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Init+0x1c4>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6809      	ldr	r1, [r1, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6911      	ldr	r1, [r2, #16]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cee:	f7ff fb4f 	bl	8002390 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f040 80d9 	bne.w	8002eb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2319      	movs	r3, #25
 8002d08:	2201      	movs	r2, #1
 8002d0a:	496d      	ldr	r1, [pc, #436]	; (8002ec0 <HAL_I2C_Mem_Write+0x1ec>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fcbb 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Mem_Write+0x56>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0c5      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d007      	beq.n	8002d50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2221      	movs	r2, #33	; 0x21
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a4d      	ldr	r2, [pc, #308]	; (8002ec4 <HAL_I2C_Mem_Write+0x1f0>)
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d92:	88f8      	ldrh	r0, [r7, #6]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4603      	mov	r3, r0
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 faf2 	bl	800338c <I2C_RequestMemoryWrite>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d052      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e081      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fd3c 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d107      	bne.n	8002dda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06b      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d11b      	bne.n	8002e54 <HAL_I2C_Mem_Write+0x180>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d017      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1aa      	bne.n	8002db2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fd28 	bl	80038b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e016      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00100002 	.word	0x00100002
 8002ec4:	ffff0000 	.word	0xffff0000

08002ec8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	460b      	mov	r3, r1
 8002edc:	813b      	strh	r3, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f7ff fa53 	bl	8002390 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f040 823d 	bne.w	8003374 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2319      	movs	r3, #25
 8002f00:	2201      	movs	r2, #1
 8002f02:	4981      	ldr	r1, [pc, #516]	; (8003108 <HAL_I2C_Mem_Read+0x240>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fbbf 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
 8002f12:	e230      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2C_Mem_Read+0x5a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e229      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d007      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2222      	movs	r2, #34	; 0x22
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_I2C_Mem_Read+0x244>)
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f8a:	88f8      	ldrh	r0, [r7, #6]
 8002f8c:	893a      	ldrh	r2, [r7, #8]
 8002f8e:	8979      	ldrh	r1, [r7, #10]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4603      	mov	r3, r0
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa8c 	bl	80034b8 <I2C_RequestMemoryRead>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1e5      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d113      	bne.n	8002fda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e1b9      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d11d      	bne.n	800301e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800301a:	b662      	cpsie	i
 800301c:	e197      	b.n	800334e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b02      	cmp	r3, #2
 8003024:	d11d      	bne.n	8003062 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003036:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800305e:	b662      	cpsie	i
 8003060:	e175      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003088:	e161      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	2b03      	cmp	r3, #3
 8003090:	f200 811a 	bhi.w	80032c8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b01      	cmp	r3, #1
 800309a:	d123      	bne.n	80030e4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fc49 	bl	8003938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e162      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e2:	e134      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d150      	bne.n	800318e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	2200      	movs	r2, #0
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <HAL_I2C_Mem_Read+0x248>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fac6 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e137      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
 8003106:	bf00      	nop
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000
 8003110:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003158:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800318c:	e0df      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2200      	movs	r2, #0
 8003196:	497a      	ldr	r1, [pc, #488]	; (8003380 <HAL_I2C_Mem_Read+0x4b8>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa75 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0e6      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_I2C_Mem_Read+0x4bc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_I2C_Mem_Read+0x4c0>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0a1a      	lsrs	r2, r3, #8
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	3b01      	subs	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d117      	bne.n	8003242 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003234:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e099      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d1da      	bne.n	8003206 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003292:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032c6:	e042      	b.n	800334e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb33 	bl	8003938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04c      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d118      	bne.n	800334e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	2b00      	cmp	r3, #0
 8003354:	f47f ae99 	bne.w	800308a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3728      	adds	r7, #40	; 0x28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00010004 	.word	0x00010004
 8003384:	20000004 	.word	0x20000004
 8003388:	14f8b589 	.word	0x14f8b589

0800338c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	460b      	mov	r3, r1
 80033a0:	813b      	strh	r3, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2200      	movs	r2, #0
 80033be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f960 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033dc:	d103      	bne.n	80033e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e05f      	b.n	80034aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	492d      	ldr	r1, [pc, #180]	; (80034b4 <I2C_RequestMemoryWrite+0x128>)
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f998 	bl	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e04c      	b.n	80034aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fa02 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b04      	cmp	r3, #4
 800343c:	d107      	bne.n	800344e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02b      	b.n	80034aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003458:	893b      	ldrh	r3, [r7, #8]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	e021      	b.n	80034a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003474:	6a39      	ldr	r1, [r7, #32]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f9dc 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e005      	b.n	80034aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800349e:	893b      	ldrh	r3, [r7, #8]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	00010002 	.word	0x00010002

080034b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8c2 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003518:	d103      	bne.n	8003522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0aa      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003526:	897b      	ldrh	r3, [r7, #10]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	4952      	ldr	r1, [pc, #328]	; (8003684 <I2C_RequestMemoryRead+0x1cc>)
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f8fa 	bl	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e097      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	6a39      	ldr	r1, [r7, #32]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f964 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b04      	cmp	r3, #4
 8003578:	d107      	bne.n	800358a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e076      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	e021      	b.n	80035e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f93e 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d107      	bne.n	80035d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e050      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035da:	893b      	ldrh	r3, [r7, #8]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	6a39      	ldr	r1, [r7, #32]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f923 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d107      	bne.n	800360c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e035      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2200      	movs	r2, #0
 8003628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f82b 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d103      	bne.n	8003650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e013      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	4906      	ldr	r1, [pc, #24]	; (8003684 <I2C_RequestMemoryRead+0x1cc>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f863 	bl	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	00010002 	.word	0x00010002

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e025      	b.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d021      	beq.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe fe75 	bl	8002390 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e023      	b.n	800372e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10d      	bne.n	800370c <I2C_WaitOnFlagUntilTimeout+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	e00c      	b.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0b6      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003744:	e051      	b.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003754:	d123      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e046      	b.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d021      	beq.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fe fdf3 	bl	8002390 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e020      	b.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10c      	bne.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	e00b      	b.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d18d      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003840:	e02d      	b.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8ce 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e02d      	b.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d021      	beq.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe fd99 	bl	8002390 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d1ca      	bne.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c2:	e02d      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f88d 	bl	80039e4 <I2C_IsAcknowledgeFailed>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e02d      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d021      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038dc:	f7fe fd58 	bl	8002390 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d1ca      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003944:	e042      	b.n	80039cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d119      	bne.n	8003988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e029      	b.n	80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fe fd02 	bl	8002390 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d1b5      	bne.n	8003946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d11b      	bne.n	8003a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e26c      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a60:	4b92      	ldr	r3, [pc, #584]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d00c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a6c:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d112      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5e>
 8003a78:	4b8c      	ldr	r3, [pc, #560]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	4b89      	ldr	r3, [pc, #548]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d06c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x12c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d168      	bne.n	8003b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e246      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x76>
 8003aa8:	4b80      	ldr	r3, [pc, #512]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7f      	ldr	r2, [pc, #508]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e02e      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x98>
 8003abe:	4b7b      	ldr	r3, [pc, #492]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7a      	ldr	r2, [pc, #488]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b78      	ldr	r3, [pc, #480]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a77      	ldr	r2, [pc, #476]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0xbc>
 8003ae2:	4b72      	ldr	r3, [pc, #456]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a71      	ldr	r2, [pc, #452]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xd4>
 8003afc:	4b6b      	ldr	r3, [pc, #428]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6a      	ldr	r2, [pc, #424]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a67      	ldr	r2, [pc, #412]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fc38 	bl	8002390 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe fc34 	bl	8002390 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1fa      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b5d      	ldr	r3, [pc, #372]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe4>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe fc24 	bl	8002390 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fc20 	bl	8002390 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1e6      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x10c>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b86:	4b49      	ldr	r3, [pc, #292]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x18c>
 8003b92:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b43      	ldr	r3, [pc, #268]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x176>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1ba      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4939      	ldr	r1, [pc, #228]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fe fbd9 	bl	8002390 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fe fbd5 	bl	8002390 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e19b      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4927      	ldr	r1, [pc, #156]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCC_OscConfig+0x270>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fe fbb8 	bl	8002390 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fbb4 	bl	8002390 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e17a      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03a      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d019      	beq.n	8003c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fb98 	bl	8002390 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe fb94 	bl	8002390 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e15a      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_RCC_OscConfig+0x26c>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c82:	2001      	movs	r0, #1
 8003c84:	f000 fada 	bl	800423c <RCC_Delay>
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c90:	f7fe fb7e 	bl	8002390 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe fb7a 	bl	8002390 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d908      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e140      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	42420000 	.word	0x42420000
 8003cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	4b9e      	ldr	r3, [pc, #632]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e9      	bne.n	8003c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a6 	beq.w	8003e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b97      	ldr	r3, [pc, #604]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a93      	ldr	r2, [pc, #588]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	61d3      	str	r3, [r2, #28]
 8003cee:	4b91      	ldr	r3, [pc, #580]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b8b      	ldr	r3, [pc, #556]	; (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a8a      	ldr	r2, [pc, #552]	; (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe fb3b 	bl	8002390 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe fb37 	bl	8002390 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	; 0x64
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0fd      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x312>
 8003d44:	4b7b      	ldr	r3, [pc, #492]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a7a      	ldr	r2, [pc, #488]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	e02d      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x334>
 8003d5a:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6213      	str	r3, [r2, #32]
 8003d66:	4b73      	ldr	r3, [pc, #460]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4a72      	ldr	r2, [pc, #456]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6213      	str	r3, [r2, #32]
 8003d72:	e01c      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x356>
 8003d7c:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a6c      	ldr	r2, [pc, #432]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a69      	ldr	r2, [pc, #420]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	e00b      	b.n	8003dae <HAL_RCC_OscConfig+0x36e>
 8003d96:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a66      	ldr	r2, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	4b64      	ldr	r3, [pc, #400]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a63      	ldr	r2, [pc, #396]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d015      	beq.n	8003de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fe faeb 	bl	8002390 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fe fae7 	bl	8002390 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0ab      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCC_OscConfig+0x37e>
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fe fad5 	bl	8002390 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe fad1 	bl	8002390 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e095      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ee      	bne.n	8003dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4b48      	ldr	r3, [pc, #288]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4a47      	ldr	r2, [pc, #284]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8081 	beq.w	8003f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d061      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d146      	bne.n	8003eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0x4fc>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe faa5 	bl	8002390 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe faa1 	bl	8002390 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e067      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e72:	4b30      	ldr	r3, [pc, #192]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	492d      	ldr	r1, [pc, #180]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a19      	ldr	r1, [r3, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	430b      	orrs	r3, r1
 8003e96:	4927      	ldr	r1, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_OscConfig+0x4fc>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fa75 	bl	8002390 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe fa71 	bl	8002390 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e037      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x46a>
 8003ec8:	e02f      	b.n	8003f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <HAL_RCC_OscConfig+0x4fc>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fa5e 	bl	8002390 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fa5a 	bl	8002390 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e020      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x498>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e013      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42420060 	.word	0x42420060

08003f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0d0      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d910      	bls.n	8003f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b67      	ldr	r3, [pc, #412]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 0207 	bic.w	r2, r3, #7
 8003f6a:	4965      	ldr	r1, [pc, #404]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0b8      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f9c:	4b59      	ldr	r3, [pc, #356]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	494d      	ldr	r1, [pc, #308]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d040      	beq.n	8004060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07f      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e073      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06b      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4936      	ldr	r1, [pc, #216]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004030:	f7fe f9ae 	bl	8002390 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fe f9aa 	bl	8002390 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e053      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d210      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	4922      	ldr	r1, [pc, #136]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e032      	b.n	80040f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4916      	ldr	r1, [pc, #88]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	490e      	ldr	r1, [pc, #56]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ce:	f000 f821 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040d2:	4601      	mov	r1, r0
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	fa21 f303 	lsr.w	r3, r1, r3
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1cc>)
 80040e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f90c 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40022000 	.word	0x40022000
 8004104:	40021000 	.word	0x40021000
 8004108:	0800a3d0 	.word	0x0800a3d0
 800410c:	20000004 	.word	0x20000004
 8004110:	20000008 	.word	0x20000008

08004114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b490      	push	{r4, r7}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800411c:	1d3c      	adds	r4, r7, #4
 800411e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b04      	cmp	r3, #4
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x40>
 800414e:	2b08      	cmp	r3, #8
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x46>
 8004152:	e02d      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004156:	623b      	str	r3, [r7, #32]
      break;
 8004158:	e02d      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004166:	4413      	add	r3, r2
 8004168:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800416c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004178:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	0c5b      	lsrs	r3, r3, #17
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004186:	4413      	add	r3, r2
 8004188:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800418c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004192:	fb02 f203 	mul.w	r2, r2, r3
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e004      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	623b      	str	r3, [r7, #32]
      break;
 80041ae:	e002      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041b2:	623b      	str	r3, [r7, #32]
      break;
 80041b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b6:	6a3b      	ldr	r3, [r7, #32]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3728      	adds	r7, #40	; 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc90      	pop	{r4, r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	0800a3bc 	.word	0x0800a3bc
 80041c8:	0800a3cc 	.word	0x0800a3cc
 80041cc:	40021000 	.word	0x40021000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	003d0900 	.word	0x003d0900

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	20000004 	.word	0x20000004

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff2 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f4:	4601      	mov	r1, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	0800a3e0 	.word	0x0800a3e0

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004218:	f7ff ffde 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 800421c:	4601      	mov	r1, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0adb      	lsrs	r3, r3, #11
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	0800a3e0 	.word	0x0800a3e0

0800423c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <RCC_Delay+0x34>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <RCC_Delay+0x38>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004258:	bf00      	nop
  }
  while (Delay --);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	60fa      	str	r2, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f9      	bne.n	8004258 <RCC_Delay+0x1c>
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000004 	.word	0x20000004
 8004274:	10624dd3 	.word	0x10624dd3

08004278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd ff18 	bl	80020d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fbce 	bl	8004a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e041      	b.n	80043ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f839 	bl	80043b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 fb7f 	bl	8004a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x24>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e022      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start+0x3e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e015      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x58>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e008      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e05e      	b.n	80044f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0x82>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	e013      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0x92>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	e00b      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xa2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	e003      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fd6c 	bl	8004f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d107      	bne.n	800449a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d009      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <HAL_TIM_PWM_Start+0x13c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <HAL_TIM_PWM_Start+0x140>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d010      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e007      	b.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e093      	b.n	8004648 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fd fd63 	bl	8002000 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004550:	f023 0307 	bic.w	r3, r3, #7
 8004554:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fa79 	bl	8004a58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	4313      	orrs	r3, r2
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045ac:	f023 030c 	bic.w	r3, r3, #12
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	4313      	orrs	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	4313      	orrs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4313      	orrs	r3, r2
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004660:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004668:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004670:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004678:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d110      	bne.n	80046a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d102      	bne.n	800468c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004686:	7b7b      	ldrb	r3, [r7, #13]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e068      	b.n	8004762 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	e031      	b.n	8004706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d110      	bne.n	80046ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d102      	bne.n	80046b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ae:	7b3b      	ldrb	r3, [r7, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d001      	beq.n	80046b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e054      	b.n	8004762 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c8:	e01d      	b.n	8004706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	7b7b      	ldrb	r3, [r7, #13]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046dc:	7b3b      	ldrb	r3, [r7, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e03d      	b.n	8004762 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_TIM_Encoder_Start+0xc2>
 800470c:	2b04      	cmp	r3, #4
 800470e:	d008      	beq.n	8004722 <HAL_TIM_Encoder_Start+0xd2>
 8004710:	e00f      	b.n	8004732 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fc1c 	bl	8004f58 <TIM_CCxChannelCmd>
      break;
 8004720:	e016      	b.n	8004750 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	2104      	movs	r1, #4
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fc14 	bl	8004f58 <TIM_CCxChannelCmd>
      break;
 8004730:	e00e      	b.n	8004750 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fc0c 	bl	8004f58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2201      	movs	r2, #1
 8004746:	2104      	movs	r1, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fc05 	bl	8004f58 <TIM_CCxChannelCmd>
      break;
 800474e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004782:	2302      	movs	r3, #2
 8004784:	e0ac      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	f200 809f 	bhi.w	80048d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080048d5 	.word	0x080048d5
 80047a4:	080048d5 	.word	0x080048d5
 80047a8:	080048d5 	.word	0x080048d5
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080048d5 	.word	0x080048d5
 80047b4:	080048d5 	.word	0x080048d5
 80047b8:	080048d5 	.word	0x080048d5
 80047bc:	08004853 	.word	0x08004853
 80047c0:	080048d5 	.word	0x080048d5
 80047c4:	080048d5 	.word	0x080048d5
 80047c8:	080048d5 	.word	0x080048d5
 80047cc:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f9a0 	bl	8004b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e062      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f9e6 	bl	8004be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e041      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fa2f 	bl	8004cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e021      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fa79 	bl	8004d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_ConfigClockSource+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e0a6      	b.n	8004a4e <HAL_TIM_ConfigClockSource+0x166>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800491e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d067      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0x120>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d80b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x6c>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d073      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x140>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d802      	bhi.n	800494a <HAL_TIM_ConfigClockSource+0x62>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d06f      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004948:	e078      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800494a:	2b20      	cmp	r3, #32
 800494c:	d06c      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x140>
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d06a      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004952:	e073      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d00d      	beq.n	8004974 <HAL_TIM_ConfigClockSource+0x8c>
 8004958:	2b70      	cmp	r3, #112	; 0x70
 800495a:	d804      	bhi.n	8004966 <HAL_TIM_ConfigClockSource+0x7e>
 800495c:	2b50      	cmp	r3, #80	; 0x50
 800495e:	d033      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xe0>
 8004960:	2b60      	cmp	r3, #96	; 0x60
 8004962:	d041      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004964:	e06a      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	d066      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x152>
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d017      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004972:	e063      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6899      	ldr	r1, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f000 fac9 	bl	8004f1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004996:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	609a      	str	r2, [r3, #8]
      break;
 80049a0:	e04c      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 fab2 	bl	8004f1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c4:	609a      	str	r2, [r3, #8]
      break;
 80049c6:	e039      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	461a      	mov	r2, r3
 80049d6:	f000 fa29 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2150      	movs	r1, #80	; 0x50
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fa80 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 80049e6:	e029      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f000 fa47 	bl	8004e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2160      	movs	r1, #96	; 0x60
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fa70 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 8004a06:	e019      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f000 fa09 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fa60 	bl	8004ee6 <TIM_ITRx_SetConfig>
      break;
 8004a26:	e009      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 fa57 	bl	8004ee6 <TIM_ITRx_SetConfig>
        break;
 8004a38:	e000      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_Base_SetConfig+0xb8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x30>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x30>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <TIM_Base_SetConfig+0xbc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x30>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0xc0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <TIM_Base_SetConfig+0xb8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0x62>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0x62>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <TIM_Base_SetConfig+0xbc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0x62>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <TIM_Base_SetConfig+0xc0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <TIM_Base_SetConfig+0xb8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800

08004b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0302 	bic.w	r3, r3, #2
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <TIM_OC1_SetConfig+0xc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10c      	bne.n	8004b92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0308 	bic.w	r3, r3, #8
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <TIM_OC1_SetConfig+0xc8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40012c00 	.word	0x40012c00

08004be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0320 	bic.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <TIM_OC2_SetConfig+0xd0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10d      	bne.n	8004c64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <TIM_OC2_SetConfig+0xd0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d113      	bne.n	8004c94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	40012c00 	.word	0x40012c00

08004cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <TIM_OC3_SetConfig+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10d      	bne.n	8004d36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_OC3_SetConfig+0xd0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d113      	bne.n	8004d66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40012c00 	.word	0x40012c00

08004d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <TIM_OC4_SetConfig+0x98>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d109      	bne.n	8004e04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	40012c00 	.word	0x40012c00

08004e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0210 	bic.w	r2, r3, #16
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	031b      	lsls	r3, r3, #12
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f043 0307 	orr.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	021a      	lsls	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	609a      	str	r2, [r3, #8]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e046      	b.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d009      	beq.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a10      	ldr	r2, [pc, #64]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10c      	bne.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800

0800505c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e03f      	b.n	80050ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd f8a0 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	; 0x24
 800508c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800509e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb39 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b08a      	sub	sp, #40	; 0x28
 80050fa:	af02      	add	r7, sp, #8
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b20      	cmp	r3, #32
 8005114:	d17c      	bne.n	8005210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_UART_Transmit+0x2c>
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e075      	b.n	8005212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UART_Transmit+0x3e>
 8005130:	2302      	movs	r3, #2
 8005132:	e06e      	b.n	8005212 <HAL_UART_Transmit+0x11c>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	; 0x21
 8005146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800514a:	f7fd f921 	bl	8002390 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005164:	d108      	bne.n	8005178 <HAL_UART_Transmit+0x82>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e003      	b.n	8005180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005188:	e02a      	b.n	80051e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	; 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f95c 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e036      	b.n	8005212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3302      	adds	r3, #2
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e007      	b.n	80051d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cf      	bne.n	800518a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f92c 	bl	8005452 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e006      	b.n	8005212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_UART_IRQHandler+0x52>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9d5 	bl	8005616 <UART_Receive_IT>
      return;
 800526c:	e0d1      	b.n	8005412 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80b0 	beq.w	80053d6 <HAL_UART_IRQHandler+0x1ba>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_UART_IRQHandler+0x70>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80a5 	beq.w	80053d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_UART_IRQHandler+0x90>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	f043 0201 	orr.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_UART_IRQHandler+0xb0>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	f043 0202 	orr.w	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_UART_IRQHandler+0xd0>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f043 0204 	orr.w	r2, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00f      	beq.n	8005316 <HAL_UART_IRQHandler+0xfa>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_UART_IRQHandler+0xee>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	f043 0208 	orr.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d078      	beq.n	8005410 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_UART_IRQHandler+0x11c>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f96f 	bl	8005616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <HAL_UART_IRQHandler+0x144>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d031      	beq.n	80053c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8c0 	bl	80054e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005382:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_UART_IRQHandler+0x1fc>)
 8005392:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	4618      	mov	r0, r3
 800539a:	f7fd f933 	bl	8002604 <HAL_DMA_Abort_IT>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053ae:	4610      	mov	r0, r2
 80053b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b2:	e00e      	b.n	80053d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f843 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	e00a      	b.n	80053d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f83f 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	e006      	b.n	80053d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f83b 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80053d0:	e01e      	b.n	8005410 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d2:	bf00      	nop
    return;
 80053d4:	e01c      	b.n	8005410 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_UART_IRQHandler+0x1d6>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8ac 	bl	8005548 <UART_Transmit_IT>
    return;
 80053f0:	e00f      	b.n	8005412 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_UART_IRQHandler+0x1f6>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8ed 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005410:	bf00      	nop
  }
}
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	08005521 	.word	0x08005521

0800541c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005462:	e02c      	b.n	80054be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d028      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0x30>
 8005472:	f7fc ff8d 	bl	8002390 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	429a      	cmp	r2, r3
 8005480:	d21d      	bcs.n	80054be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005490:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e00f      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d0c3      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff80 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b21      	cmp	r3, #33	; 0x21
 800555a:	d13e      	bne.n	80055da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d114      	bne.n	8005590 <UART_Transmit_IT+0x48>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d110      	bne.n	8005590 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005582:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	1c9a      	adds	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]
 800558e:	e008      	b.n	80055a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6211      	str	r1, [r2, #32]
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4619      	mov	r1, r3
 80055b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff ff08 	bl	800541c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	d170      	bne.n	800570c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d117      	bne.n	8005664 <UART_Receive_IT+0x4e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d113      	bne.n	8005664 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	b29b      	uxth	r3, r3
 800564e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005652:	b29a      	uxth	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	1c9a      	adds	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
 8005662:	e026      	b.n	80056b2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d007      	beq.n	8005688 <UART_Receive_IT+0x72>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <UART_Receive_IT+0x80>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e008      	b.n	80056a8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4619      	mov	r1, r3
 80056c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d120      	bne.n	8005708 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0220 	bic.w	r2, r2, #32
 80056d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fe95 	bl	800542e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e002      	b.n	800570e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005752:	f023 030c 	bic.w	r3, r3, #12
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	430b      	orrs	r3, r1
 800575e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <UART_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fe fd48 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	e002      	b.n	800578e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe fd30 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 800578c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <UART_SetConfig+0x118>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	0119      	lsls	r1, r3, #4
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <UART_SetConfig+0x118>)
 80057c6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2064      	movs	r0, #100	; 0x64
 80057ce:	fb00 f303 	mul.w	r3, r0, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	3332      	adds	r3, #50	; 0x32
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <UART_SetConfig+0x118>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e4:	4419      	add	r1, r3
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009a      	lsls	r2, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <UART_SetConfig+0x118>)
 80057fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2064      	movs	r0, #100	; 0x64
 8005806:	fb00 f303 	mul.w	r3, r0, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	3332      	adds	r3, #50	; 0x32
 8005810:	4a07      	ldr	r2, [pc, #28]	; (8005830 <UART_SetConfig+0x118>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	440a      	add	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40013800 	.word	0x40013800
 8005830:	51eb851f 	.word	0x51eb851f

08005834 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief: 当检测到外部中断触发并确定其为按键按下时，翻转led灯，按下标记被确定
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005844:	d117      	bne.n	8005876 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_Delay(5);
 8005846:	2005      	movs	r0, #5
 8005848:	f7fc fdac 	bl	80023a4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET) {
 800584c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005850:	480b      	ldr	r0, [pc, #44]	; (8005880 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005852:	f7fd f8a7 	bl	80029a4 <HAL_GPIO_ReadPin>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800586a:	4806      	ldr	r0, [pc, #24]	; (8005884 <HAL_GPIO_EXTI_Callback+0x50>)
 800586c:	f7fd f8c9 	bl	8002a02 <HAL_GPIO_TogglePin>
			buttonDownFlag = true;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_GPIO_EXTI_Callback+0x54>)
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
//			g_nSpeedTarget +=10;
		}
	}
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40010800 	.word	0x40010800
 8005884:	40010c00 	.word	0x40010c00
 8005888:	20000264 	.word	0x20000264

0800588c <_Z8MPU_Initv>:
/*
 **初始化MPU6050
 **返回值:0,成功
 **其他,错误代码
 */
uint8_t MPU_Init(void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
	uint8_t res;

	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 8005892:	481f      	ldr	r0, [pc, #124]	; (8005910 <_Z8MPU_Initv+0x84>)
 8005894:	f7fd f8e6 	bl	8002a64 <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);	//复位MPU6050
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	206b      	movs	r0, #107	; 0x6b
 800589c:	f000 f93c 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);	//唤醒MPU6050
 80058a0:	2100      	movs	r1, #0
 80058a2:	206b      	movs	r0, #107	; 0x6b
 80058a4:	f000 f938 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	MPU_Set_Gyro_Fsr(3);						//陀螺仪传感器,±2000dps
 80058a8:	2003      	movs	r0, #3
 80058aa:	f000 f833 	bl	8005914 <_Z16MPU_Set_Gyro_Fsrh>
	MPU_Set_Accel_Fsr(0);						//加速度传感器,±2g
 80058ae:	2000      	movs	r0, #0
 80058b0:	f000 f841 	bl	8005936 <_Z17MPU_Set_Accel_Fsrh>
	MPU_Set_Rate(50);							//设置采样率50Hz
 80058b4:	2032      	movs	r0, #50	; 0x32
 80058b6:	f000 f880 	bl	80059ba <_Z12MPU_Set_Ratet>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);		//关闭所有中断
 80058ba:	2100      	movs	r1, #0
 80058bc:	2038      	movs	r0, #56	; 0x38
 80058be:	f000 f92b 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);	//I2C主模式关闭
 80058c2:	2100      	movs	r1, #0
 80058c4:	206a      	movs	r0, #106	; 0x6a
 80058c6:	f000 f927 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);		//关闭FIFO
 80058ca:	2100      	movs	r1, #0
 80058cc:	2023      	movs	r0, #35	; 0x23
 80058ce:	f000 f923 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);	//INT引脚低电平有效
 80058d2:	2180      	movs	r1, #128	; 0x80
 80058d4:	2037      	movs	r0, #55	; 0x37
 80058d6:	f000 f91f 	bl	8005b18 <_Z14MPU_Write_Bytehh>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 80058da:	2075      	movs	r0, #117	; 0x75
 80058dc:	f000 f942 	bl	8005b64 <_Z13MPU_Read_Byteh>
 80058e0:	4603      	mov	r3, r0
 80058e2:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR)	//器件ID正确
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	2b68      	cmp	r3, #104	; 0x68
 80058e8:	d10c      	bne.n	8005904 <_Z8MPU_Initv+0x78>
	{
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);	//设置CLKSEL,PLL X轴为参考
 80058ea:	2101      	movs	r1, #1
 80058ec:	206b      	movs	r0, #107	; 0x6b
 80058ee:	f000 f913 	bl	8005b18 <_Z14MPU_Write_Bytehh>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);	//加速度与陀螺仪都工作
 80058f2:	2100      	movs	r1, #0
 80058f4:	206c      	movs	r0, #108	; 0x6c
 80058f6:	f000 f90f 	bl	8005b18 <_Z14MPU_Write_Bytehh>
		MPU_Set_Rate(50);						//设置采样率为50Hz
 80058fa:	2032      	movs	r0, #50	; 0x32
 80058fc:	f000 f85d 	bl	80059ba <_Z12MPU_Set_Ratet>
	} else
		return 1;
	return 0;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <_Z8MPU_Initv+0x7a>
		return 1;
 8005904:	2301      	movs	r3, #1
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000278 	.word	0x20000278

08005914 <_Z16MPU_Set_Gyro_Fsrh>:
 **设置MPU6050陀螺仪传感器满量程范围
 **fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
 **返回值:0,设置成功
 **其他,设置失败
 */
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr << 3);				//设置陀螺仪满量程范围
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	201b      	movs	r0, #27
 8005928:	f000 f8f6 	bl	8005b18 <_Z14MPU_Write_Bytehh>
 800592c:	4603      	mov	r3, r0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <_Z17MPU_Set_Accel_Fsrh>:
 **设置MPU6050加速度传感器满量程范围
 **fsr:0,±2g;1,±4g;2,±8g;3,±16g
 **返回值:0,设置成功
 **其他,设置失败
 */
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr) {
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	4603      	mov	r3, r0
 800593e:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr << 3);			//设置加速度传感器满量程范围
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	201c      	movs	r0, #28
 800594a:	f000 f8e5 	bl	8005b18 <_Z14MPU_Write_Bytehh>
 800594e:	4603      	mov	r3, r0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <_Z11MPU_Set_LPFt>:
/*
 **设置MPU6050的数字低通滤波器
 **返回值:0,设置成功
 **其他,设置失败
 */
uint8_t MPU_Set_LPF(uint16_t lpf) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	80fb      	strh	r3, [r7, #6]
	uint8_t data = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	2bbb      	cmp	r3, #187	; 0xbb
 800596a:	d902      	bls.n	8005972 <_Z11MPU_Set_LPFt+0x1a>
		data = 1;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e019      	b.n	80059a6 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 98)
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b61      	cmp	r3, #97	; 0x61
 8005976:	d902      	bls.n	800597e <_Z11MPU_Set_LPFt+0x26>
		data = 2;
 8005978:	2302      	movs	r3, #2
 800597a:	73fb      	strb	r3, [r7, #15]
 800597c:	e013      	b.n	80059a6 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 42)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b29      	cmp	r3, #41	; 0x29
 8005982:	d902      	bls.n	800598a <_Z11MPU_Set_LPFt+0x32>
		data = 3;
 8005984:	2303      	movs	r3, #3
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e00d      	b.n	80059a6 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 20)
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b13      	cmp	r3, #19
 800598e:	d902      	bls.n	8005996 <_Z11MPU_Set_LPFt+0x3e>
		data = 4;
 8005990:	2304      	movs	r3, #4
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e007      	b.n	80059a6 <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 10)
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b09      	cmp	r3, #9
 800599a:	d902      	bls.n	80059a2 <_Z11MPU_Set_LPFt+0x4a>
		data = 5;
 800599c:	2305      	movs	r3, #5
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e001      	b.n	80059a6 <_Z11MPU_Set_LPFt+0x4e>
	else
		data = 6;
 80059a2:	2306      	movs	r3, #6
 80059a4:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);						//设置数字低通滤波器
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	4619      	mov	r1, r3
 80059aa:	201a      	movs	r0, #26
 80059ac:	f000 f8b4 	bl	8005b18 <_Z14MPU_Write_Bytehh>
 80059b0:	4603      	mov	r3, r0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <_Z12MPU_Set_Ratet>:
 **设置MPU6050的采样率(假定Fs=1KHz)
 **rate:4~1000(Hz)
 **返回值:0,设置成功
 **其他,设置失败
 */
uint8_t MPU_Set_Rate(uint16_t rate) {
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	4603      	mov	r3, r0
 80059c2:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if (rate > 1000)
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	d902      	bls.n	80059d2 <_Z12MPU_Set_Ratet+0x18>
		rate = 1000;
 80059cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d0:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d801      	bhi.n	80059dc <_Z12MPU_Set_Ratet+0x22>
		rate = 4;
 80059d8:	2304      	movs	r3, #4
 80059da:	80fb      	strh	r3, [r7, #6]
	data = 1000 / rate - 1;
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);	//设置数字低通滤波器
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	4619      	mov	r1, r3
 80059f0:	2019      	movs	r0, #25
 80059f2:	f000 f891 	bl	8005b18 <_Z14MPU_Write_Bytehh>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
	return MPU_Set_LPF(rate / 2);	//自动设置LPF为采样率的一半
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff ffa9 	bl	8005958 <_Z11MPU_Set_LPFt>
 8005a06:	4603      	mov	r3, r0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_Z17MPU_Get_GyroscopePsS_S_>:
 **得到陀螺仪值(原始值)
 **gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
 **返回值:0,设置成功
 **其他,错误代码
 */
uint8_t MPU_Get_Gyroscope(short *gx, short *gy, short *gz) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU_GYRO_XOUTH_REG, 6, buf);
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	461a      	mov	r2, r3
 8005a22:	2106      	movs	r1, #6
 8005a24:	2043      	movs	r0, #67	; 0x43
 8005a26:	f000 f857 	bl	8005ad8 <_Z12MPU_Read_LenhhPh>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75fb      	strb	r3, [r7, #23]
	if (res == 0) {
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11a      	bne.n	8005a6a <_Z17MPU_Get_GyroscopePsS_S_+0x5a>
		*gx = ((uint16_t) buf[0] << 8) | buf[1];
 8005a34:	7c3b      	ldrb	r3, [r7, #16]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	b21a      	sxth	r2, r3
 8005a3a:	7c7b      	ldrb	r3, [r7, #17]
 8005a3c:	b21b      	sxth	r3, r3
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b21a      	sxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	801a      	strh	r2, [r3, #0]
		*gy = ((uint16_t) buf[2] << 8) | buf[3];
 8005a46:	7cbb      	ldrb	r3, [r7, #18]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	b21a      	sxth	r2, r3
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	b21b      	sxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b21a      	sxth	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	801a      	strh	r2, [r3, #0]
		*gz = ((uint16_t) buf[4] << 8) | buf[5];
 8005a58:	7d3b      	ldrb	r3, [r7, #20]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	7d7b      	ldrb	r3, [r7, #21]
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b21a      	sxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	801a      	strh	r2, [r3, #0]
	}
	return res;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_Z21MPU_Get_AccelerometerPsS_S_>:
 **得到加速度值(原始值)
 **gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
 **返回值:0,设置成功
 **其他,错误代码
 */
uint8_t MPU_Get_Accelerometer(short *ax, short *ay, short *az) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU_ACCEL_XOUTH_REG, 6, buf);
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	461a      	mov	r2, r3
 8005a86:	2106      	movs	r1, #6
 8005a88:	203b      	movs	r0, #59	; 0x3b
 8005a8a:	f000 f825 	bl	8005ad8 <_Z12MPU_Read_LenhhPh>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75fb      	strb	r3, [r7, #23]
	if (res == 0) {
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11a      	bne.n	8005ace <_Z21MPU_Get_AccelerometerPsS_S_+0x5a>
		*ax = ((uint16_t) buf[0] << 8) | buf[1];
 8005a98:	7c3b      	ldrb	r3, [r7, #16]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	b21a      	sxth	r2, r3
 8005a9e:	7c7b      	ldrb	r3, [r7, #17]
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b21a      	sxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	801a      	strh	r2, [r3, #0]
		*ay = ((uint16_t) buf[2] << 8) | buf[3];
 8005aaa:	7cbb      	ldrb	r3, [r7, #18]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	b21a      	sxth	r2, r3
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	b21b      	sxth	r3, r3
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	801a      	strh	r2, [r3, #0]
		*az = ((uint16_t) buf[4] << 8) | buf[5];
 8005abc:	7d3b      	ldrb	r3, [r7, #20]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	b21a      	sxth	r2, r3
 8005ac2:	7d7b      	ldrb	r3, [r7, #21]
 8005ac4:	b21b      	sxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b21a      	sxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	801a      	strh	r2, [r3, #0]
	}
	return res;;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_Z12MPU_Read_LenhhPh>:
 **buf:读取到的数据存储区
 **返回值:0,正常
 **其他,错误代码
 */

uint8_t MPU_Read_Len(uint8_t reg, uint8_t len, uint8_t *buf) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af04      	add	r7, sp, #16
 8005ade:	4603      	mov	r3, r0
 8005ae0:	603a      	str	r2, [r7, #0]
 8005ae2:	71fb      	strb	r3, [r7, #7]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len,
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	b299      	uxth	r1, r3
 8005aec:	79bb      	ldrb	r3, [r7, #6]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005af4:	9202      	str	r2, [sp, #8]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2301      	movs	r3, #1
 8005afe:	460a      	mov	r2, r1
 8005b00:	21d1      	movs	r1, #209	; 0xd1
 8005b02:	4804      	ldr	r0, [pc, #16]	; (8005b14 <_Z12MPU_Read_LenhhPh+0x3c>)
 8005b04:	f7fd f9e0 	bl	8002ec8 <HAL_I2C_Mem_Read>
			0xfff);
	//HAL_Delay(100);

	return 0;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000278 	.word	0x20000278

08005b18 <_Z14MPU_Write_Bytehh>:
 **reg:寄存器地址
 **data:数据
 **返回值:0,正常
 **其他,错误代码
 */
uint8_t MPU_Write_Byte(uint8_t reg, uint8_t data) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af04      	add	r7, sp, #16
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460a      	mov	r2, r1
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]

	W_Data = data;
 8005b2c:	79bb      	ldrb	r3, [r7, #6]
 8005b2e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1,
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	f107 030f 	add.w	r3, r7, #15
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	21d0      	movs	r1, #208	; 0xd0
 8005b48:	4805      	ldr	r0, [pc, #20]	; (8005b60 <_Z14MPU_Write_Bytehh+0x48>)
 8005b4a:	f7fd f8c3 	bl	8002cd4 <HAL_I2C_Mem_Write>
			0xfff);
	HAL_Delay(100);
 8005b4e:	2064      	movs	r0, #100	; 0x64
 8005b50:	f7fc fc28 	bl	80023a4 <HAL_Delay>

	return 0;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000278 	.word	0x20000278

08005b64 <_Z13MPU_Read_Byteh>:
/*
 **IIC读一个字节
 **reg:寄存器地址
 **返回值:读到的数据
 */
uint8_t MPU_Read_Byte(uint8_t reg) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af04      	add	r7, sp, #16
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1,
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005b7a:	9302      	str	r3, [sp, #8]
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	f107 030f 	add.w	r3, r7, #15
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2301      	movs	r3, #1
 8005b88:	21d1      	movs	r1, #209	; 0xd1
 8005b8a:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <_Z13MPU_Read_Byteh+0x3c>)
 8005b8c:	f7fd f99c 	bl	8002ec8 <HAL_I2C_Mem_Read>
			0xfff);
	HAL_Delay(100);
 8005b90:	2064      	movs	r0, #100	; 0x64
 8005b92:	f7fc fc07 	bl	80023a4 <HAL_Delay>

	return R_Data;
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000278 	.word	0x20000278

08005ba4 <_Z19ComplementaryFilterfff>:

float angle;
float a;

float ComplementaryFilter(float acc, float gyro, float dt)
{
 8005ba4:	b590      	push	{r4, r7, lr}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
    a = 0.98;
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <_Z19ComplementaryFilterfff+0x78>)
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <_Z19ComplementaryFilterfff+0x7c>)
 8005bb4:	601a      	str	r2, [r3, #0]
    angle = a * (angle + gyro * dt) + (1 - a) * (acc);
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	f7fb f8e3 	bl	8000d84 <__aeabi_fmul>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <_Z19ComplementaryFilterfff+0x80>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f7fa ffd3 	bl	8000b74 <__addsf3>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <_Z19ComplementaryFilterfff+0x78>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fb f8d3 	bl	8000d84 <__aeabi_fmul>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461c      	mov	r4, r3
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <_Z19ComplementaryFilterfff+0x78>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4619      	mov	r1, r3
 8005be8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005bec:	f7fa ffc0 	bl	8000b70 <__aeabi_fsub>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fb f8c3 	bl	8000d84 <__aeabi_fmul>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4619      	mov	r1, r3
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7fa ffb6 	bl	8000b74 <__addsf3>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <_Z19ComplementaryFilterfff+0x80>)
 8005c0e:	601a      	str	r2, [r3, #0]
    return angle;
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <_Z19ComplementaryFilterfff+0x80>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd90      	pop	{r4, r7, pc}
 8005c1c:	2000026c 	.word	0x2000026c
 8005c20:	3f7ae148 	.word	0x3f7ae148
 8005c24:	20000268 	.word	0x20000268

08005c28 <atan2f>:
 8005c28:	f000 b800 	b.w	8005c2c <__ieee754_atan2f>

08005c2c <__ieee754_atan2f>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005c32:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005c36:	4603      	mov	r3, r0
 8005c38:	dc05      	bgt.n	8005c46 <__ieee754_atan2f+0x1a>
 8005c3a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005c3e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005c42:	4607      	mov	r7, r0
 8005c44:	dd04      	ble.n	8005c50 <__ieee754_atan2f+0x24>
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa ff94 	bl	8000b74 <__addsf3>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	e024      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005c50:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005c54:	d103      	bne.n	8005c5e <__ieee754_atan2f+0x32>
 8005c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c5a:	f000 b877 	b.w	8005d4c <atanf>
 8005c5e:	178c      	asrs	r4, r1, #30
 8005c60:	f004 0402 	and.w	r4, r4, #2
 8005c64:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005c68:	b92a      	cbnz	r2, 8005c76 <__ieee754_atan2f+0x4a>
 8005c6a:	2c02      	cmp	r4, #2
 8005c6c:	d057      	beq.n	8005d1e <__ieee754_atan2f+0xf2>
 8005c6e:	2c03      	cmp	r4, #3
 8005c70:	d113      	bne.n	8005c9a <__ieee754_atan2f+0x6e>
 8005c72:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <__ieee754_atan2f+0xfc>)
 8005c74:	e011      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005c76:	b91e      	cbnz	r6, 8005c80 <__ieee754_atan2f+0x54>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	da52      	bge.n	8005d22 <__ieee754_atan2f+0xf6>
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <__ieee754_atan2f+0x100>)
 8005c7e:	e00c      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005c80:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005c84:	d11a      	bne.n	8005cbc <__ieee754_atan2f+0x90>
 8005c86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005c8a:	d10c      	bne.n	8005ca6 <__ieee754_atan2f+0x7a>
 8005c8c:	2c02      	cmp	r4, #2
 8005c8e:	d006      	beq.n	8005c9e <__ieee754_atan2f+0x72>
 8005c90:	2c03      	cmp	r4, #3
 8005c92:	d006      	beq.n	8005ca2 <__ieee754_atan2f+0x76>
 8005c94:	2c01      	cmp	r4, #1
 8005c96:	d140      	bne.n	8005d1a <__ieee754_atan2f+0xee>
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <__ieee754_atan2f+0x104>)
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <__ieee754_atan2f+0x108>)
 8005ca0:	e7fb      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005ca2:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <__ieee754_atan2f+0x10c>)
 8005ca4:	e7f9      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005ca6:	2c02      	cmp	r4, #2
 8005ca8:	d039      	beq.n	8005d1e <__ieee754_atan2f+0xf2>
 8005caa:	2c03      	cmp	r4, #3
 8005cac:	d0e1      	beq.n	8005c72 <__ieee754_atan2f+0x46>
 8005cae:	2c01      	cmp	r4, #1
 8005cb0:	d102      	bne.n	8005cb8 <__ieee754_atan2f+0x8c>
 8005cb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cb6:	e7f0      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e7ee      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005cbc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005cc0:	d0da      	beq.n	8005c78 <__ieee754_atan2f+0x4c>
 8005cc2:	1b92      	subs	r2, r2, r6
 8005cc4:	15d2      	asrs	r2, r2, #23
 8005cc6:	2a3c      	cmp	r2, #60	; 0x3c
 8005cc8:	dc17      	bgt.n	8005cfa <__ieee754_atan2f+0xce>
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	da01      	bge.n	8005cd2 <__ieee754_atan2f+0xa6>
 8005cce:	323c      	adds	r2, #60	; 0x3c
 8005cd0:	db15      	blt.n	8005cfe <__ieee754_atan2f+0xd2>
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fb f90a 	bl	8000eec <__aeabi_fdiv>
 8005cd8:	f000 f944 	bl	8005f64 <fabsf>
 8005cdc:	f000 f836 	bl	8005d4c <atanf>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2c01      	cmp	r4, #1
 8005ce4:	d00d      	beq.n	8005d02 <__ieee754_atan2f+0xd6>
 8005ce6:	2c02      	cmp	r4, #2
 8005ce8:	d00e      	beq.n	8005d08 <__ieee754_atan2f+0xdc>
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d0d5      	beq.n	8005c9a <__ieee754_atan2f+0x6e>
 8005cee:	4913      	ldr	r1, [pc, #76]	; (8005d3c <__ieee754_atan2f+0x110>)
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fa ff3f 	bl	8000b74 <__addsf3>
 8005cf6:	4912      	ldr	r1, [pc, #72]	; (8005d40 <__ieee754_atan2f+0x114>)
 8005cf8:	e00c      	b.n	8005d14 <__ieee754_atan2f+0xe8>
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <__ieee754_atan2f+0x118>)
 8005cfc:	e7f1      	b.n	8005ce2 <__ieee754_atan2f+0xb6>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e7ef      	b.n	8005ce2 <__ieee754_atan2f+0xb6>
 8005d02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d06:	e7c8      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005d08:	490c      	ldr	r1, [pc, #48]	; (8005d3c <__ieee754_atan2f+0x110>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fa ff32 	bl	8000b74 <__addsf3>
 8005d10:	4601      	mov	r1, r0
 8005d12:	480b      	ldr	r0, [pc, #44]	; (8005d40 <__ieee754_atan2f+0x114>)
 8005d14:	f7fa ff2c 	bl	8000b70 <__aeabi_fsub>
 8005d18:	e798      	b.n	8005c4c <__ieee754_atan2f+0x20>
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <__ieee754_atan2f+0x11c>)
 8005d1c:	e7bd      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005d1e:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <__ieee754_atan2f+0x114>)
 8005d20:	e7bb      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <__ieee754_atan2f+0x118>)
 8005d24:	e7b9      	b.n	8005c9a <__ieee754_atan2f+0x6e>
 8005d26:	bf00      	nop
 8005d28:	c0490fdb 	.word	0xc0490fdb
 8005d2c:	bfc90fdb 	.word	0xbfc90fdb
 8005d30:	bf490fdb 	.word	0xbf490fdb
 8005d34:	4016cbe4 	.word	0x4016cbe4
 8005d38:	c016cbe4 	.word	0xc016cbe4
 8005d3c:	33bbbd2e 	.word	0x33bbbd2e
 8005d40:	40490fdb 	.word	0x40490fdb
 8005d44:	3fc90fdb 	.word	0x3fc90fdb
 8005d48:	3f490fdb 	.word	0x3f490fdb

08005d4c <atanf>:
 8005d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d50:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005d54:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	db0e      	blt.n	8005d7c <atanf+0x30>
 8005d5e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005d62:	dd04      	ble.n	8005d6e <atanf+0x22>
 8005d64:	4601      	mov	r1, r0
 8005d66:	f7fa ff05 	bl	8000b74 <__addsf3>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	e003      	b.n	8005d76 <atanf+0x2a>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f340 80cd 	ble.w	8005f0e <atanf+0x1c2>
 8005d74:	4c67      	ldr	r4, [pc, #412]	; (8005f14 <atanf+0x1c8>)
 8005d76:	4620      	mov	r0, r4
 8005d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7c:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <atanf+0x1cc>)
 8005d7e:	429d      	cmp	r5, r3
 8005d80:	dc0e      	bgt.n	8005da0 <atanf+0x54>
 8005d82:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005d86:	da08      	bge.n	8005d9a <atanf+0x4e>
 8005d88:	4964      	ldr	r1, [pc, #400]	; (8005f1c <atanf+0x1d0>)
 8005d8a:	f7fa fef3 	bl	8000b74 <__addsf3>
 8005d8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d92:	f7fb f9b3 	bl	80010fc <__aeabi_fcmpgt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d1ed      	bne.n	8005d76 <atanf+0x2a>
 8005d9a:	f04f 36ff 	mov.w	r6, #4294967295
 8005d9e:	e01c      	b.n	8005dda <atanf+0x8e>
 8005da0:	f000 f8e0 	bl	8005f64 <fabsf>
 8005da4:	4b5e      	ldr	r3, [pc, #376]	; (8005f20 <atanf+0x1d4>)
 8005da6:	4604      	mov	r4, r0
 8005da8:	429d      	cmp	r5, r3
 8005daa:	dc7c      	bgt.n	8005ea6 <atanf+0x15a>
 8005dac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005db0:	429d      	cmp	r5, r3
 8005db2:	dc67      	bgt.n	8005e84 <atanf+0x138>
 8005db4:	4601      	mov	r1, r0
 8005db6:	f7fa fedd 	bl	8000b74 <__addsf3>
 8005dba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005dbe:	f7fa fed7 	bl	8000b70 <__aeabi_fsub>
 8005dc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7fa fed3 	bl	8000b74 <__addsf3>
 8005dce:	4601      	mov	r1, r0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f7fb f88b 	bl	8000eec <__aeabi_fdiv>
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f7fa ffd1 	bl	8000d84 <__aeabi_fmul>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4680      	mov	r8, r0
 8005de6:	f7fa ffcd 	bl	8000d84 <__aeabi_fmul>
 8005dea:	4605      	mov	r5, r0
 8005dec:	494d      	ldr	r1, [pc, #308]	; (8005f24 <atanf+0x1d8>)
 8005dee:	f7fa ffc9 	bl	8000d84 <__aeabi_fmul>
 8005df2:	494d      	ldr	r1, [pc, #308]	; (8005f28 <atanf+0x1dc>)
 8005df4:	f7fa febe 	bl	8000b74 <__addsf3>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7fa ffc3 	bl	8000d84 <__aeabi_fmul>
 8005dfe:	494b      	ldr	r1, [pc, #300]	; (8005f2c <atanf+0x1e0>)
 8005e00:	f7fa feb8 	bl	8000b74 <__addsf3>
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa ffbd 	bl	8000d84 <__aeabi_fmul>
 8005e0a:	4949      	ldr	r1, [pc, #292]	; (8005f30 <atanf+0x1e4>)
 8005e0c:	f7fa feb2 	bl	8000b74 <__addsf3>
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa ffb7 	bl	8000d84 <__aeabi_fmul>
 8005e16:	4947      	ldr	r1, [pc, #284]	; (8005f34 <atanf+0x1e8>)
 8005e18:	f7fa feac 	bl	8000b74 <__addsf3>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa ffb1 	bl	8000d84 <__aeabi_fmul>
 8005e22:	4945      	ldr	r1, [pc, #276]	; (8005f38 <atanf+0x1ec>)
 8005e24:	f7fa fea6 	bl	8000b74 <__addsf3>
 8005e28:	4641      	mov	r1, r8
 8005e2a:	f7fa ffab 	bl	8000d84 <__aeabi_fmul>
 8005e2e:	4943      	ldr	r1, [pc, #268]	; (8005f3c <atanf+0x1f0>)
 8005e30:	4680      	mov	r8, r0
 8005e32:	4628      	mov	r0, r5
 8005e34:	f7fa ffa6 	bl	8000d84 <__aeabi_fmul>
 8005e38:	4941      	ldr	r1, [pc, #260]	; (8005f40 <atanf+0x1f4>)
 8005e3a:	f7fa fe99 	bl	8000b70 <__aeabi_fsub>
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f7fa ffa0 	bl	8000d84 <__aeabi_fmul>
 8005e44:	493f      	ldr	r1, [pc, #252]	; (8005f44 <atanf+0x1f8>)
 8005e46:	f7fa fe93 	bl	8000b70 <__aeabi_fsub>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa ff9a 	bl	8000d84 <__aeabi_fmul>
 8005e50:	493d      	ldr	r1, [pc, #244]	; (8005f48 <atanf+0x1fc>)
 8005e52:	f7fa fe8d 	bl	8000b70 <__aeabi_fsub>
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa ff94 	bl	8000d84 <__aeabi_fmul>
 8005e5c:	493b      	ldr	r1, [pc, #236]	; (8005f4c <atanf+0x200>)
 8005e5e:	f7fa fe87 	bl	8000b70 <__aeabi_fsub>
 8005e62:	4629      	mov	r1, r5
 8005e64:	f7fa ff8e 	bl	8000d84 <__aeabi_fmul>
 8005e68:	4601      	mov	r1, r0
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7fa fe82 	bl	8000b74 <__addsf3>
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7fa ff87 	bl	8000d84 <__aeabi_fmul>
 8005e76:	1c73      	adds	r3, r6, #1
 8005e78:	4601      	mov	r1, r0
 8005e7a:	d133      	bne.n	8005ee4 <atanf+0x198>
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fa fe77 	bl	8000b70 <__aeabi_fsub>
 8005e82:	e772      	b.n	8005d6a <atanf+0x1e>
 8005e84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e88:	f7fa fe72 	bl	8000b70 <__aeabi_fsub>
 8005e8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e90:	4605      	mov	r5, r0
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7fa fe6e 	bl	8000b74 <__addsf3>
 8005e98:	4601      	mov	r1, r0
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f7fb f826 	bl	8000eec <__aeabi_fdiv>
 8005ea0:	2601      	movs	r6, #1
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	e799      	b.n	8005dda <atanf+0x8e>
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <atanf+0x204>)
 8005ea8:	429d      	cmp	r5, r3
 8005eaa:	dc14      	bgt.n	8005ed6 <atanf+0x18a>
 8005eac:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005eb0:	f7fa fe5e 	bl	8000b70 <__aeabi_fsub>
 8005eb4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005eb8:	4605      	mov	r5, r0
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7fa ff62 	bl	8000d84 <__aeabi_fmul>
 8005ec0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ec4:	f7fa fe56 	bl	8000b74 <__addsf3>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7fb f80e 	bl	8000eec <__aeabi_fdiv>
 8005ed0:	2602      	movs	r6, #2
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	e781      	b.n	8005dda <atanf+0x8e>
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	481e      	ldr	r0, [pc, #120]	; (8005f54 <atanf+0x208>)
 8005eda:	f7fb f807 	bl	8000eec <__aeabi_fdiv>
 8005ede:	2603      	movs	r6, #3
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	e77a      	b.n	8005dda <atanf+0x8e>
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <atanf+0x20c>)
 8005ee6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005eea:	f7fa fe41 	bl	8000b70 <__aeabi_fsub>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	f7fa fe3e 	bl	8000b70 <__aeabi_fsub>
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <atanf+0x210>)
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005efc:	f7fa fe38 	bl	8000b70 <__aeabi_fsub>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	f6bf af37 	bge.w	8005d76 <atanf+0x2a>
 8005f08:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005f0c:	e733      	b.n	8005d76 <atanf+0x2a>
 8005f0e:	4c14      	ldr	r4, [pc, #80]	; (8005f60 <atanf+0x214>)
 8005f10:	e731      	b.n	8005d76 <atanf+0x2a>
 8005f12:	bf00      	nop
 8005f14:	3fc90fdb 	.word	0x3fc90fdb
 8005f18:	3edfffff 	.word	0x3edfffff
 8005f1c:	7149f2ca 	.word	0x7149f2ca
 8005f20:	3f97ffff 	.word	0x3f97ffff
 8005f24:	3c8569d7 	.word	0x3c8569d7
 8005f28:	3d4bda59 	.word	0x3d4bda59
 8005f2c:	3d886b35 	.word	0x3d886b35
 8005f30:	3dba2e6e 	.word	0x3dba2e6e
 8005f34:	3e124925 	.word	0x3e124925
 8005f38:	3eaaaaab 	.word	0x3eaaaaab
 8005f3c:	bd15a221 	.word	0xbd15a221
 8005f40:	3d6ef16b 	.word	0x3d6ef16b
 8005f44:	3d9d8795 	.word	0x3d9d8795
 8005f48:	3de38e38 	.word	0x3de38e38
 8005f4c:	3e4ccccd 	.word	0x3e4ccccd
 8005f50:	401bffff 	.word	0x401bffff
 8005f54:	bf800000 	.word	0xbf800000
 8005f58:	0800a3f8 	.word	0x0800a3f8
 8005f5c:	0800a3e8 	.word	0x0800a3e8
 8005f60:	bfc90fdb 	.word	0xbfc90fdb

08005f64 <fabsf>:
 8005f64:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f68:	4770      	bx	lr
	...

08005f6c <__errno>:
 8005f6c:	4b01      	ldr	r3, [pc, #4]	; (8005f74 <__errno+0x8>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010

08005f78 <__libc_init_array>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	4e0c      	ldr	r6, [pc, #48]	; (8005fb0 <__libc_init_array+0x38>)
 8005f7e:	4c0d      	ldr	r4, [pc, #52]	; (8005fb4 <__libc_init_array+0x3c>)
 8005f80:	1ba4      	subs	r4, r4, r6
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	d109      	bne.n	8005f9c <__libc_init_array+0x24>
 8005f88:	f004 f9fe 	bl	800a388 <_init>
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	4e0a      	ldr	r6, [pc, #40]	; (8005fb8 <__libc_init_array+0x40>)
 8005f90:	4c0a      	ldr	r4, [pc, #40]	; (8005fbc <__libc_init_array+0x44>)
 8005f92:	1ba4      	subs	r4, r4, r6
 8005f94:	10a4      	asrs	r4, r4, #2
 8005f96:	42a5      	cmp	r5, r4
 8005f98:	d105      	bne.n	8005fa6 <__libc_init_array+0x2e>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fa0:	4798      	blx	r3
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	e7ee      	b.n	8005f84 <__libc_init_array+0xc>
 8005fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005faa:	4798      	blx	r3
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7f2      	b.n	8005f96 <__libc_init_array+0x1e>
 8005fb0:	0800a728 	.word	0x0800a728
 8005fb4:	0800a728 	.word	0x0800a728
 8005fb8:	0800a728 	.word	0x0800a728
 8005fbc:	0800a72c 	.word	0x0800a72c

08005fc0 <memcpy>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	1e43      	subs	r3, r0, #1
 8005fc4:	440a      	add	r2, r1
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	d100      	bne.n	8005fcc <memcpy+0xc>
 8005fca:	bd10      	pop	{r4, pc}
 8005fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd4:	e7f7      	b.n	8005fc6 <memcpy+0x6>

08005fd6 <memset>:
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4402      	add	r2, r0
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d100      	bne.n	8005fe0 <memset+0xa>
 8005fde:	4770      	bx	lr
 8005fe0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe4:	e7f9      	b.n	8005fda <memset+0x4>

08005fe6 <__cvt>:
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	461e      	mov	r6, r3
 8005fee:	bfbb      	ittet	lt
 8005ff0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ff4:	461e      	movlt	r6, r3
 8005ff6:	2300      	movge	r3, #0
 8005ff8:	232d      	movlt	r3, #45	; 0x2d
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005ffe:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006002:	f027 0720 	bic.w	r7, r7, #32
 8006006:	2f46      	cmp	r7, #70	; 0x46
 8006008:	4614      	mov	r4, r2
 800600a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800600c:	700b      	strb	r3, [r1, #0]
 800600e:	d004      	beq.n	800601a <__cvt+0x34>
 8006010:	2f45      	cmp	r7, #69	; 0x45
 8006012:	d100      	bne.n	8006016 <__cvt+0x30>
 8006014:	3501      	adds	r5, #1
 8006016:	2302      	movs	r3, #2
 8006018:	e000      	b.n	800601c <__cvt+0x36>
 800601a:	2303      	movs	r3, #3
 800601c:	aa07      	add	r2, sp, #28
 800601e:	9204      	str	r2, [sp, #16]
 8006020:	aa06      	add	r2, sp, #24
 8006022:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006026:	e9cd 3500 	strd	r3, r5, [sp]
 800602a:	4622      	mov	r2, r4
 800602c:	4633      	mov	r3, r6
 800602e:	f001 fd93 	bl	8007b58 <_dtoa_r>
 8006032:	2f47      	cmp	r7, #71	; 0x47
 8006034:	4680      	mov	r8, r0
 8006036:	d102      	bne.n	800603e <__cvt+0x58>
 8006038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800603a:	07db      	lsls	r3, r3, #31
 800603c:	d526      	bpl.n	800608c <__cvt+0xa6>
 800603e:	2f46      	cmp	r7, #70	; 0x46
 8006040:	eb08 0905 	add.w	r9, r8, r5
 8006044:	d111      	bne.n	800606a <__cvt+0x84>
 8006046:	f898 3000 	ldrb.w	r3, [r8]
 800604a:	2b30      	cmp	r3, #48	; 0x30
 800604c:	d10a      	bne.n	8006064 <__cvt+0x7e>
 800604e:	2200      	movs	r2, #0
 8006050:	2300      	movs	r3, #0
 8006052:	4620      	mov	r0, r4
 8006054:	4631      	mov	r1, r6
 8006056:	f7fa fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800605a:	b918      	cbnz	r0, 8006064 <__cvt+0x7e>
 800605c:	f1c5 0501 	rsb	r5, r5, #1
 8006060:	f8ca 5000 	str.w	r5, [sl]
 8006064:	f8da 3000 	ldr.w	r3, [sl]
 8006068:	4499      	add	r9, r3
 800606a:	2200      	movs	r2, #0
 800606c:	2300      	movs	r3, #0
 800606e:	4620      	mov	r0, r4
 8006070:	4631      	mov	r1, r6
 8006072:	f7fa fc99 	bl	80009a8 <__aeabi_dcmpeq>
 8006076:	b938      	cbnz	r0, 8006088 <__cvt+0xa2>
 8006078:	2230      	movs	r2, #48	; 0x30
 800607a:	9b07      	ldr	r3, [sp, #28]
 800607c:	454b      	cmp	r3, r9
 800607e:	d205      	bcs.n	800608c <__cvt+0xa6>
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	9107      	str	r1, [sp, #28]
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e7f8      	b.n	800607a <__cvt+0x94>
 8006088:	f8cd 901c 	str.w	r9, [sp, #28]
 800608c:	4640      	mov	r0, r8
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006092:	eba3 0308 	sub.w	r3, r3, r8
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	b008      	add	sp, #32
 800609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800609e <__exponent>:
 800609e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a0:	2900      	cmp	r1, #0
 80060a2:	bfb4      	ite	lt
 80060a4:	232d      	movlt	r3, #45	; 0x2d
 80060a6:	232b      	movge	r3, #43	; 0x2b
 80060a8:	4604      	mov	r4, r0
 80060aa:	bfb8      	it	lt
 80060ac:	4249      	neglt	r1, r1
 80060ae:	2909      	cmp	r1, #9
 80060b0:	f804 2b02 	strb.w	r2, [r4], #2
 80060b4:	7043      	strb	r3, [r0, #1]
 80060b6:	dd21      	ble.n	80060fc <__exponent+0x5e>
 80060b8:	f10d 0307 	add.w	r3, sp, #7
 80060bc:	461f      	mov	r7, r3
 80060be:	260a      	movs	r6, #10
 80060c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80060c4:	fb06 1115 	mls	r1, r6, r5, r1
 80060c8:	2d09      	cmp	r5, #9
 80060ca:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80060ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060d2:	f103 32ff 	add.w	r2, r3, #4294967295
 80060d6:	4629      	mov	r1, r5
 80060d8:	dc09      	bgt.n	80060ee <__exponent+0x50>
 80060da:	3130      	adds	r1, #48	; 0x30
 80060dc:	3b02      	subs	r3, #2
 80060de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060e2:	42bb      	cmp	r3, r7
 80060e4:	4622      	mov	r2, r4
 80060e6:	d304      	bcc.n	80060f2 <__exponent+0x54>
 80060e8:	1a10      	subs	r0, r2, r0
 80060ea:	b003      	add	sp, #12
 80060ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ee:	4613      	mov	r3, r2
 80060f0:	e7e6      	b.n	80060c0 <__exponent+0x22>
 80060f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f6:	f804 2b01 	strb.w	r2, [r4], #1
 80060fa:	e7f2      	b.n	80060e2 <__exponent+0x44>
 80060fc:	2330      	movs	r3, #48	; 0x30
 80060fe:	4419      	add	r1, r3
 8006100:	7083      	strb	r3, [r0, #2]
 8006102:	1d02      	adds	r2, r0, #4
 8006104:	70c1      	strb	r1, [r0, #3]
 8006106:	e7ef      	b.n	80060e8 <__exponent+0x4a>

08006108 <_printf_float>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	b091      	sub	sp, #68	; 0x44
 800610e:	460c      	mov	r4, r1
 8006110:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006112:	4693      	mov	fp, r2
 8006114:	461e      	mov	r6, r3
 8006116:	4605      	mov	r5, r0
 8006118:	f002 feca 	bl	8008eb0 <_localeconv_r>
 800611c:	6803      	ldr	r3, [r0, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	9309      	str	r3, [sp, #36]	; 0x24
 8006122:	f7fa f815 	bl	8000150 <strlen>
 8006126:	2300      	movs	r3, #0
 8006128:	930e      	str	r3, [sp, #56]	; 0x38
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	900a      	str	r0, [sp, #40]	; 0x28
 800612e:	3307      	adds	r3, #7
 8006130:	f023 0307 	bic.w	r3, r3, #7
 8006134:	f103 0208 	add.w	r2, r3, #8
 8006138:	f894 8018 	ldrb.w	r8, [r4, #24]
 800613c:	f8d4 a000 	ldr.w	sl, [r4]
 8006140:	603a      	str	r2, [r7, #0]
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800614a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800614e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006152:	930b      	str	r3, [sp, #44]	; 0x2c
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	4ba6      	ldr	r3, [pc, #664]	; (80063f4 <_printf_float+0x2ec>)
 800615a:	4638      	mov	r0, r7
 800615c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615e:	f7fa fc55 	bl	8000a0c <__aeabi_dcmpun>
 8006162:	bb68      	cbnz	r0, 80061c0 <_printf_float+0xb8>
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	4ba2      	ldr	r3, [pc, #648]	; (80063f4 <_printf_float+0x2ec>)
 800616a:	4638      	mov	r0, r7
 800616c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800616e:	f7fa fc2f 	bl	80009d0 <__aeabi_dcmple>
 8006172:	bb28      	cbnz	r0, 80061c0 <_printf_float+0xb8>
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4638      	mov	r0, r7
 800617a:	4649      	mov	r1, r9
 800617c:	f7fa fc1e 	bl	80009bc <__aeabi_dcmplt>
 8006180:	b110      	cbz	r0, 8006188 <_printf_float+0x80>
 8006182:	232d      	movs	r3, #45	; 0x2d
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	4f9b      	ldr	r7, [pc, #620]	; (80063f8 <_printf_float+0x2f0>)
 800618a:	4b9c      	ldr	r3, [pc, #624]	; (80063fc <_printf_float+0x2f4>)
 800618c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006190:	bf98      	it	ls
 8006192:	461f      	movls	r7, r3
 8006194:	2303      	movs	r3, #3
 8006196:	f04f 0900 	mov.w	r9, #0
 800619a:	6123      	str	r3, [r4, #16]
 800619c:	f02a 0304 	bic.w	r3, sl, #4
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	9600      	str	r6, [sp, #0]
 80061a4:	465b      	mov	r3, fp
 80061a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 f9e2 	bl	8006574 <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	f040 8090 	bne.w	80062d6 <_printf_float+0x1ce>
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	b011      	add	sp, #68	; 0x44
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	463a      	mov	r2, r7
 80061c2:	464b      	mov	r3, r9
 80061c4:	4638      	mov	r0, r7
 80061c6:	4649      	mov	r1, r9
 80061c8:	f7fa fc20 	bl	8000a0c <__aeabi_dcmpun>
 80061cc:	b110      	cbz	r0, 80061d4 <_printf_float+0xcc>
 80061ce:	4f8c      	ldr	r7, [pc, #560]	; (8006400 <_printf_float+0x2f8>)
 80061d0:	4b8c      	ldr	r3, [pc, #560]	; (8006404 <_printf_float+0x2fc>)
 80061d2:	e7db      	b.n	800618c <_printf_float+0x84>
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	a80d      	add	r0, sp, #52	; 0x34
 80061de:	a90e      	add	r1, sp, #56	; 0x38
 80061e0:	d140      	bne.n	8006264 <_printf_float+0x15c>
 80061e2:	2306      	movs	r3, #6
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	f04f 0c00 	mov.w	ip, #0
 80061ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80061ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	6022      	str	r2, [r4, #0]
 80061f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	463a      	mov	r2, r7
 80061fe:	464b      	mov	r3, r9
 8006200:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff feee 	bl	8005fe6 <__cvt>
 800620a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800620e:	2b47      	cmp	r3, #71	; 0x47
 8006210:	4607      	mov	r7, r0
 8006212:	d109      	bne.n	8006228 <_printf_float+0x120>
 8006214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006216:	1cd8      	adds	r0, r3, #3
 8006218:	db02      	blt.n	8006220 <_printf_float+0x118>
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	4293      	cmp	r3, r2
 800621e:	dd47      	ble.n	80062b0 <_printf_float+0x1a8>
 8006220:	f1a8 0802 	sub.w	r8, r8, #2
 8006224:	fa5f f888 	uxtb.w	r8, r8
 8006228:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800622c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800622e:	d824      	bhi.n	800627a <_printf_float+0x172>
 8006230:	3901      	subs	r1, #1
 8006232:	4642      	mov	r2, r8
 8006234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006238:	910d      	str	r1, [sp, #52]	; 0x34
 800623a:	f7ff ff30 	bl	800609e <__exponent>
 800623e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006240:	4681      	mov	r9, r0
 8006242:	1813      	adds	r3, r2, r0
 8006244:	2a01      	cmp	r2, #1
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	dc02      	bgt.n	8006250 <_printf_float+0x148>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	07d1      	lsls	r1, r2, #31
 800624e:	d501      	bpl.n	8006254 <_printf_float+0x14c>
 8006250:	3301      	adds	r3, #1
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0a2      	beq.n	80061a2 <_printf_float+0x9a>
 800625c:	232d      	movs	r3, #45	; 0x2d
 800625e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006262:	e79e      	b.n	80061a2 <_printf_float+0x9a>
 8006264:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006268:	f000 816e 	beq.w	8006548 <_printf_float+0x440>
 800626c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006270:	d1b9      	bne.n	80061e6 <_printf_float+0xde>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1b7      	bne.n	80061e6 <_printf_float+0xde>
 8006276:	2301      	movs	r3, #1
 8006278:	e7b4      	b.n	80061e4 <_printf_float+0xdc>
 800627a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800627e:	d119      	bne.n	80062b4 <_printf_float+0x1ac>
 8006280:	2900      	cmp	r1, #0
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	dd0c      	ble.n	80062a0 <_printf_float+0x198>
 8006286:	6121      	str	r1, [r4, #16]
 8006288:	b913      	cbnz	r3, 8006290 <_printf_float+0x188>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	07d2      	lsls	r2, r2, #31
 800628e:	d502      	bpl.n	8006296 <_printf_float+0x18e>
 8006290:	3301      	adds	r3, #1
 8006292:	440b      	add	r3, r1
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006298:	f04f 0900 	mov.w	r9, #0
 800629c:	65a3      	str	r3, [r4, #88]	; 0x58
 800629e:	e7d9      	b.n	8006254 <_printf_float+0x14c>
 80062a0:	b913      	cbnz	r3, 80062a8 <_printf_float+0x1a0>
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	07d0      	lsls	r0, r2, #31
 80062a6:	d501      	bpl.n	80062ac <_printf_float+0x1a4>
 80062a8:	3302      	adds	r3, #2
 80062aa:	e7f3      	b.n	8006294 <_printf_float+0x18c>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7f1      	b.n	8006294 <_printf_float+0x18c>
 80062b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80062b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80062b8:	4293      	cmp	r3, r2
 80062ba:	db05      	blt.n	80062c8 <_printf_float+0x1c0>
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	6123      	str	r3, [r4, #16]
 80062c0:	07d1      	lsls	r1, r2, #31
 80062c2:	d5e8      	bpl.n	8006296 <_printf_float+0x18e>
 80062c4:	3301      	adds	r3, #1
 80062c6:	e7e5      	b.n	8006294 <_printf_float+0x18c>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfcc      	ite	gt
 80062cc:	2301      	movgt	r3, #1
 80062ce:	f1c3 0302 	rsble	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	e7de      	b.n	8006294 <_printf_float+0x18c>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	055a      	lsls	r2, r3, #21
 80062da:	d407      	bmi.n	80062ec <_printf_float+0x1e4>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	463a      	mov	r2, r7
 80062e0:	4659      	mov	r1, fp
 80062e2:	4628      	mov	r0, r5
 80062e4:	47b0      	blx	r6
 80062e6:	3001      	adds	r0, #1
 80062e8:	d129      	bne.n	800633e <_printf_float+0x236>
 80062ea:	e764      	b.n	80061b6 <_printf_float+0xae>
 80062ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80062f0:	f240 80d7 	bls.w	80064a2 <_printf_float+0x39a>
 80062f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	f7fa fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8006300:	b388      	cbz	r0, 8006366 <_printf_float+0x25e>
 8006302:	2301      	movs	r3, #1
 8006304:	4a40      	ldr	r2, [pc, #256]	; (8006408 <_printf_float+0x300>)
 8006306:	4659      	mov	r1, fp
 8006308:	4628      	mov	r0, r5
 800630a:	47b0      	blx	r6
 800630c:	3001      	adds	r0, #1
 800630e:	f43f af52 	beq.w	80061b6 <_printf_float+0xae>
 8006312:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006316:	429a      	cmp	r2, r3
 8006318:	db02      	blt.n	8006320 <_printf_float+0x218>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	07d8      	lsls	r0, r3, #31
 800631e:	d50e      	bpl.n	800633e <_printf_float+0x236>
 8006320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006324:	4659      	mov	r1, fp
 8006326:	4628      	mov	r0, r5
 8006328:	47b0      	blx	r6
 800632a:	3001      	adds	r0, #1
 800632c:	f43f af43 	beq.w	80061b6 <_printf_float+0xae>
 8006330:	2700      	movs	r7, #0
 8006332:	f104 081a 	add.w	r8, r4, #26
 8006336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006338:	3b01      	subs	r3, #1
 800633a:	42bb      	cmp	r3, r7
 800633c:	dc09      	bgt.n	8006352 <_printf_float+0x24a>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	079f      	lsls	r7, r3, #30
 8006342:	f100 80fd 	bmi.w	8006540 <_printf_float+0x438>
 8006346:	68e0      	ldr	r0, [r4, #12]
 8006348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800634a:	4298      	cmp	r0, r3
 800634c:	bfb8      	it	lt
 800634e:	4618      	movlt	r0, r3
 8006350:	e733      	b.n	80061ba <_printf_float+0xb2>
 8006352:	2301      	movs	r3, #1
 8006354:	4642      	mov	r2, r8
 8006356:	4659      	mov	r1, fp
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	3001      	adds	r0, #1
 800635e:	f43f af2a 	beq.w	80061b6 <_printf_float+0xae>
 8006362:	3701      	adds	r7, #1
 8006364:	e7e7      	b.n	8006336 <_printf_float+0x22e>
 8006366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006368:	2b00      	cmp	r3, #0
 800636a:	dc2b      	bgt.n	80063c4 <_printf_float+0x2bc>
 800636c:	2301      	movs	r3, #1
 800636e:	4a26      	ldr	r2, [pc, #152]	; (8006408 <_printf_float+0x300>)
 8006370:	4659      	mov	r1, fp
 8006372:	4628      	mov	r0, r5
 8006374:	47b0      	blx	r6
 8006376:	3001      	adds	r0, #1
 8006378:	f43f af1d 	beq.w	80061b6 <_printf_float+0xae>
 800637c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800637e:	b923      	cbnz	r3, 800638a <_printf_float+0x282>
 8006380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006382:	b913      	cbnz	r3, 800638a <_printf_float+0x282>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	07d9      	lsls	r1, r3, #31
 8006388:	d5d9      	bpl.n	800633e <_printf_float+0x236>
 800638a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800638e:	4659      	mov	r1, fp
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	3001      	adds	r0, #1
 8006396:	f43f af0e 	beq.w	80061b6 <_printf_float+0xae>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	f104 091a 	add.w	r9, r4, #26
 80063a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a4:	425b      	negs	r3, r3
 80063a6:	4543      	cmp	r3, r8
 80063a8:	dc01      	bgt.n	80063ae <_printf_float+0x2a6>
 80063aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ac:	e797      	b.n	80062de <_printf_float+0x1d6>
 80063ae:	2301      	movs	r3, #1
 80063b0:	464a      	mov	r2, r9
 80063b2:	4659      	mov	r1, fp
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b0      	blx	r6
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f aefc 	beq.w	80061b6 <_printf_float+0xae>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	e7ee      	b.n	80063a2 <_printf_float+0x29a>
 80063c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063c8:	429a      	cmp	r2, r3
 80063ca:	bfa8      	it	ge
 80063cc:	461a      	movge	r2, r3
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	4690      	mov	r8, r2
 80063d2:	dd07      	ble.n	80063e4 <_printf_float+0x2dc>
 80063d4:	4613      	mov	r3, r2
 80063d6:	4659      	mov	r1, fp
 80063d8:	463a      	mov	r2, r7
 80063da:	4628      	mov	r0, r5
 80063dc:	47b0      	blx	r6
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f aee9 	beq.w	80061b6 <_printf_float+0xae>
 80063e4:	f104 031a 	add.w	r3, r4, #26
 80063e8:	f04f 0a00 	mov.w	sl, #0
 80063ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80063f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f2:	e015      	b.n	8006420 <_printf_float+0x318>
 80063f4:	7fefffff 	.word	0x7fefffff
 80063f8:	0800a410 	.word	0x0800a410
 80063fc:	0800a40c 	.word	0x0800a40c
 8006400:	0800a418 	.word	0x0800a418
 8006404:	0800a414 	.word	0x0800a414
 8006408:	0800a41c 	.word	0x0800a41c
 800640c:	2301      	movs	r3, #1
 800640e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006410:	4659      	mov	r1, fp
 8006412:	4628      	mov	r0, r5
 8006414:	47b0      	blx	r6
 8006416:	3001      	adds	r0, #1
 8006418:	f43f aecd 	beq.w	80061b6 <_printf_float+0xae>
 800641c:	f10a 0a01 	add.w	sl, sl, #1
 8006420:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006424:	eba9 0308 	sub.w	r3, r9, r8
 8006428:	4553      	cmp	r3, sl
 800642a:	dcef      	bgt.n	800640c <_printf_float+0x304>
 800642c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006430:	429a      	cmp	r2, r3
 8006432:	444f      	add	r7, r9
 8006434:	db14      	blt.n	8006460 <_printf_float+0x358>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	07da      	lsls	r2, r3, #31
 800643a:	d411      	bmi.n	8006460 <_printf_float+0x358>
 800643c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800643e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006440:	eba3 0209 	sub.w	r2, r3, r9
 8006444:	eba3 0901 	sub.w	r9, r3, r1
 8006448:	4591      	cmp	r9, r2
 800644a:	bfa8      	it	ge
 800644c:	4691      	movge	r9, r2
 800644e:	f1b9 0f00 	cmp.w	r9, #0
 8006452:	dc0d      	bgt.n	8006470 <_printf_float+0x368>
 8006454:	2700      	movs	r7, #0
 8006456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800645a:	f104 081a 	add.w	r8, r4, #26
 800645e:	e018      	b.n	8006492 <_printf_float+0x38a>
 8006460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006464:	4659      	mov	r1, fp
 8006466:	4628      	mov	r0, r5
 8006468:	47b0      	blx	r6
 800646a:	3001      	adds	r0, #1
 800646c:	d1e6      	bne.n	800643c <_printf_float+0x334>
 800646e:	e6a2      	b.n	80061b6 <_printf_float+0xae>
 8006470:	464b      	mov	r3, r9
 8006472:	463a      	mov	r2, r7
 8006474:	4659      	mov	r1, fp
 8006476:	4628      	mov	r0, r5
 8006478:	47b0      	blx	r6
 800647a:	3001      	adds	r0, #1
 800647c:	d1ea      	bne.n	8006454 <_printf_float+0x34c>
 800647e:	e69a      	b.n	80061b6 <_printf_float+0xae>
 8006480:	2301      	movs	r3, #1
 8006482:	4642      	mov	r2, r8
 8006484:	4659      	mov	r1, fp
 8006486:	4628      	mov	r0, r5
 8006488:	47b0      	blx	r6
 800648a:	3001      	adds	r0, #1
 800648c:	f43f ae93 	beq.w	80061b6 <_printf_float+0xae>
 8006490:	3701      	adds	r7, #1
 8006492:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	eba3 0309 	sub.w	r3, r3, r9
 800649c:	42bb      	cmp	r3, r7
 800649e:	dcef      	bgt.n	8006480 <_printf_float+0x378>
 80064a0:	e74d      	b.n	800633e <_printf_float+0x236>
 80064a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064a4:	2a01      	cmp	r2, #1
 80064a6:	dc01      	bgt.n	80064ac <_printf_float+0x3a4>
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	d538      	bpl.n	800651e <_printf_float+0x416>
 80064ac:	2301      	movs	r3, #1
 80064ae:	463a      	mov	r2, r7
 80064b0:	4659      	mov	r1, fp
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b0      	blx	r6
 80064b6:	3001      	adds	r0, #1
 80064b8:	f43f ae7d 	beq.w	80061b6 <_printf_float+0xae>
 80064bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064c0:	4659      	mov	r1, fp
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b0      	blx	r6
 80064c6:	3001      	adds	r0, #1
 80064c8:	f107 0701 	add.w	r7, r7, #1
 80064cc:	f43f ae73 	beq.w	80061b6 <_printf_float+0xae>
 80064d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d6:	2200      	movs	r2, #0
 80064d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80064dc:	2300      	movs	r3, #0
 80064de:	f7fa fa63 	bl	80009a8 <__aeabi_dcmpeq>
 80064e2:	b9c0      	cbnz	r0, 8006516 <_printf_float+0x40e>
 80064e4:	4643      	mov	r3, r8
 80064e6:	463a      	mov	r2, r7
 80064e8:	4659      	mov	r1, fp
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b0      	blx	r6
 80064ee:	3001      	adds	r0, #1
 80064f0:	d10d      	bne.n	800650e <_printf_float+0x406>
 80064f2:	e660      	b.n	80061b6 <_printf_float+0xae>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4642      	mov	r2, r8
 80064f8:	4659      	mov	r1, fp
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b0      	blx	r6
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f ae59 	beq.w	80061b6 <_printf_float+0xae>
 8006504:	3701      	adds	r7, #1
 8006506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006508:	3b01      	subs	r3, #1
 800650a:	42bb      	cmp	r3, r7
 800650c:	dcf2      	bgt.n	80064f4 <_printf_float+0x3ec>
 800650e:	464b      	mov	r3, r9
 8006510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006514:	e6e4      	b.n	80062e0 <_printf_float+0x1d8>
 8006516:	2700      	movs	r7, #0
 8006518:	f104 081a 	add.w	r8, r4, #26
 800651c:	e7f3      	b.n	8006506 <_printf_float+0x3fe>
 800651e:	2301      	movs	r3, #1
 8006520:	e7e1      	b.n	80064e6 <_printf_float+0x3de>
 8006522:	2301      	movs	r3, #1
 8006524:	4642      	mov	r2, r8
 8006526:	4659      	mov	r1, fp
 8006528:	4628      	mov	r0, r5
 800652a:	47b0      	blx	r6
 800652c:	3001      	adds	r0, #1
 800652e:	f43f ae42 	beq.w	80061b6 <_printf_float+0xae>
 8006532:	3701      	adds	r7, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	42bb      	cmp	r3, r7
 800653c:	dcf1      	bgt.n	8006522 <_printf_float+0x41a>
 800653e:	e702      	b.n	8006346 <_printf_float+0x23e>
 8006540:	2700      	movs	r7, #0
 8006542:	f104 0819 	add.w	r8, r4, #25
 8006546:	e7f5      	b.n	8006534 <_printf_float+0x42c>
 8006548:	2b00      	cmp	r3, #0
 800654a:	f43f ae94 	beq.w	8006276 <_printf_float+0x16e>
 800654e:	f04f 0c00 	mov.w	ip, #0
 8006552:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006556:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006560:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	463a      	mov	r2, r7
 8006568:	464b      	mov	r3, r9
 800656a:	4628      	mov	r0, r5
 800656c:	f7ff fd3b 	bl	8005fe6 <__cvt>
 8006570:	4607      	mov	r7, r0
 8006572:	e64f      	b.n	8006214 <_printf_float+0x10c>

08006574 <_printf_common>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	4691      	mov	r9, r2
 800657a:	461f      	mov	r7, r3
 800657c:	688a      	ldr	r2, [r1, #8]
 800657e:	690b      	ldr	r3, [r1, #16]
 8006580:	4606      	mov	r6, r0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfb8      	it	lt
 8006586:	4613      	movlt	r3, r2
 8006588:	f8c9 3000 	str.w	r3, [r9]
 800658c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006590:	460c      	mov	r4, r1
 8006592:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006596:	b112      	cbz	r2, 800659e <_printf_common+0x2a>
 8006598:	3301      	adds	r3, #1
 800659a:	f8c9 3000 	str.w	r3, [r9]
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	0699      	lsls	r1, r3, #26
 80065a2:	bf42      	ittt	mi
 80065a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065a8:	3302      	addmi	r3, #2
 80065aa:	f8c9 3000 	strmi.w	r3, [r9]
 80065ae:	6825      	ldr	r5, [r4, #0]
 80065b0:	f015 0506 	ands.w	r5, r5, #6
 80065b4:	d107      	bne.n	80065c6 <_printf_common+0x52>
 80065b6:	f104 0a19 	add.w	sl, r4, #25
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	f8d9 2000 	ldr.w	r2, [r9]
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	42ab      	cmp	r3, r5
 80065c4:	dc29      	bgt.n	800661a <_printf_common+0xa6>
 80065c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	3300      	adds	r3, #0
 80065ce:	bf18      	it	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	0692      	lsls	r2, r2, #26
 80065d4:	d42e      	bmi.n	8006634 <_printf_common+0xc0>
 80065d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065da:	4639      	mov	r1, r7
 80065dc:	4630      	mov	r0, r6
 80065de:	47c0      	blx	r8
 80065e0:	3001      	adds	r0, #1
 80065e2:	d021      	beq.n	8006628 <_printf_common+0xb4>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	68e5      	ldr	r5, [r4, #12]
 80065e8:	f003 0306 	and.w	r3, r3, #6
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	bf18      	it	ne
 80065f0:	2500      	movne	r5, #0
 80065f2:	f8d9 2000 	ldr.w	r2, [r9]
 80065f6:	f04f 0900 	mov.w	r9, #0
 80065fa:	bf08      	it	eq
 80065fc:	1aad      	subeq	r5, r5, r2
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	6922      	ldr	r2, [r4, #16]
 8006602:	bf08      	it	eq
 8006604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006608:	4293      	cmp	r3, r2
 800660a:	bfc4      	itt	gt
 800660c:	1a9b      	subgt	r3, r3, r2
 800660e:	18ed      	addgt	r5, r5, r3
 8006610:	341a      	adds	r4, #26
 8006612:	454d      	cmp	r5, r9
 8006614:	d11a      	bne.n	800664c <_printf_common+0xd8>
 8006616:	2000      	movs	r0, #0
 8006618:	e008      	b.n	800662c <_printf_common+0xb8>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4639      	mov	r1, r7
 8006620:	4630      	mov	r0, r6
 8006622:	47c0      	blx	r8
 8006624:	3001      	adds	r0, #1
 8006626:	d103      	bne.n	8006630 <_printf_common+0xbc>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	3501      	adds	r5, #1
 8006632:	e7c2      	b.n	80065ba <_printf_common+0x46>
 8006634:	2030      	movs	r0, #48	; 0x30
 8006636:	18e1      	adds	r1, r4, r3
 8006638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006642:	4422      	add	r2, r4
 8006644:	3302      	adds	r3, #2
 8006646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800664a:	e7c4      	b.n	80065d6 <_printf_common+0x62>
 800664c:	2301      	movs	r3, #1
 800664e:	4622      	mov	r2, r4
 8006650:	4639      	mov	r1, r7
 8006652:	4630      	mov	r0, r6
 8006654:	47c0      	blx	r8
 8006656:	3001      	adds	r0, #1
 8006658:	d0e6      	beq.n	8006628 <_printf_common+0xb4>
 800665a:	f109 0901 	add.w	r9, r9, #1
 800665e:	e7d8      	b.n	8006612 <_printf_common+0x9e>

08006660 <_printf_i>:
 8006660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006664:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006668:	460c      	mov	r4, r1
 800666a:	7e09      	ldrb	r1, [r1, #24]
 800666c:	b085      	sub	sp, #20
 800666e:	296e      	cmp	r1, #110	; 0x6e
 8006670:	4617      	mov	r7, r2
 8006672:	4606      	mov	r6, r0
 8006674:	4698      	mov	r8, r3
 8006676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006678:	f000 80b3 	beq.w	80067e2 <_printf_i+0x182>
 800667c:	d822      	bhi.n	80066c4 <_printf_i+0x64>
 800667e:	2963      	cmp	r1, #99	; 0x63
 8006680:	d036      	beq.n	80066f0 <_printf_i+0x90>
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x3a>
 8006684:	2900      	cmp	r1, #0
 8006686:	f000 80b9 	beq.w	80067fc <_printf_i+0x19c>
 800668a:	2958      	cmp	r1, #88	; 0x58
 800668c:	f000 8083 	beq.w	8006796 <_printf_i+0x136>
 8006690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006694:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006698:	e032      	b.n	8006700 <_printf_i+0xa0>
 800669a:	2964      	cmp	r1, #100	; 0x64
 800669c:	d001      	beq.n	80066a2 <_printf_i+0x42>
 800669e:	2969      	cmp	r1, #105	; 0x69
 80066a0:	d1f6      	bne.n	8006690 <_printf_i+0x30>
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	6813      	ldr	r3, [r2, #0]
 80066a6:	0605      	lsls	r5, r0, #24
 80066a8:	f103 0104 	add.w	r1, r3, #4
 80066ac:	d52a      	bpl.n	8006704 <_printf_i+0xa4>
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da03      	bge.n	80066be <_printf_i+0x5e>
 80066b6:	222d      	movs	r2, #45	; 0x2d
 80066b8:	425b      	negs	r3, r3
 80066ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066be:	486f      	ldr	r0, [pc, #444]	; (800687c <_printf_i+0x21c>)
 80066c0:	220a      	movs	r2, #10
 80066c2:	e039      	b.n	8006738 <_printf_i+0xd8>
 80066c4:	2973      	cmp	r1, #115	; 0x73
 80066c6:	f000 809d 	beq.w	8006804 <_printf_i+0x1a4>
 80066ca:	d808      	bhi.n	80066de <_printf_i+0x7e>
 80066cc:	296f      	cmp	r1, #111	; 0x6f
 80066ce:	d020      	beq.n	8006712 <_printf_i+0xb2>
 80066d0:	2970      	cmp	r1, #112	; 0x70
 80066d2:	d1dd      	bne.n	8006690 <_printf_i+0x30>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	f043 0320 	orr.w	r3, r3, #32
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	e003      	b.n	80066e6 <_printf_i+0x86>
 80066de:	2975      	cmp	r1, #117	; 0x75
 80066e0:	d017      	beq.n	8006712 <_printf_i+0xb2>
 80066e2:	2978      	cmp	r1, #120	; 0x78
 80066e4:	d1d4      	bne.n	8006690 <_printf_i+0x30>
 80066e6:	2378      	movs	r3, #120	; 0x78
 80066e8:	4865      	ldr	r0, [pc, #404]	; (8006880 <_printf_i+0x220>)
 80066ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ee:	e055      	b.n	800679c <_printf_i+0x13c>
 80066f0:	6813      	ldr	r3, [r2, #0]
 80066f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f6:	1d19      	adds	r1, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6011      	str	r1, [r2, #0]
 80066fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006700:	2301      	movs	r3, #1
 8006702:	e08c      	b.n	800681e <_printf_i+0x1be>
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800670a:	6011      	str	r1, [r2, #0]
 800670c:	bf18      	it	ne
 800670e:	b21b      	sxthne	r3, r3
 8006710:	e7cf      	b.n	80066b2 <_printf_i+0x52>
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	6825      	ldr	r5, [r4, #0]
 8006716:	1d18      	adds	r0, r3, #4
 8006718:	6010      	str	r0, [r2, #0]
 800671a:	0628      	lsls	r0, r5, #24
 800671c:	d501      	bpl.n	8006722 <_printf_i+0xc2>
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	e002      	b.n	8006728 <_printf_i+0xc8>
 8006722:	0668      	lsls	r0, r5, #25
 8006724:	d5fb      	bpl.n	800671e <_printf_i+0xbe>
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	296f      	cmp	r1, #111	; 0x6f
 800672a:	bf14      	ite	ne
 800672c:	220a      	movne	r2, #10
 800672e:	2208      	moveq	r2, #8
 8006730:	4852      	ldr	r0, [pc, #328]	; (800687c <_printf_i+0x21c>)
 8006732:	2100      	movs	r1, #0
 8006734:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006738:	6865      	ldr	r5, [r4, #4]
 800673a:	2d00      	cmp	r5, #0
 800673c:	60a5      	str	r5, [r4, #8]
 800673e:	f2c0 8095 	blt.w	800686c <_printf_i+0x20c>
 8006742:	6821      	ldr	r1, [r4, #0]
 8006744:	f021 0104 	bic.w	r1, r1, #4
 8006748:	6021      	str	r1, [r4, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d13d      	bne.n	80067ca <_printf_i+0x16a>
 800674e:	2d00      	cmp	r5, #0
 8006750:	f040 808e 	bne.w	8006870 <_printf_i+0x210>
 8006754:	4665      	mov	r5, ip
 8006756:	2a08      	cmp	r2, #8
 8006758:	d10b      	bne.n	8006772 <_printf_i+0x112>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	07db      	lsls	r3, r3, #31
 800675e:	d508      	bpl.n	8006772 <_printf_i+0x112>
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	6862      	ldr	r2, [r4, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	bfde      	ittt	le
 8006768:	2330      	movle	r3, #48	; 0x30
 800676a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800676e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006772:	ebac 0305 	sub.w	r3, ip, r5
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	f8cd 8000 	str.w	r8, [sp]
 800677c:	463b      	mov	r3, r7
 800677e:	aa03      	add	r2, sp, #12
 8006780:	4621      	mov	r1, r4
 8006782:	4630      	mov	r0, r6
 8006784:	f7ff fef6 	bl	8006574 <_printf_common>
 8006788:	3001      	adds	r0, #1
 800678a:	d14d      	bne.n	8006828 <_printf_i+0x1c8>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b005      	add	sp, #20
 8006792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006796:	4839      	ldr	r0, [pc, #228]	; (800687c <_printf_i+0x21c>)
 8006798:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800679c:	6813      	ldr	r3, [r2, #0]
 800679e:	6821      	ldr	r1, [r4, #0]
 80067a0:	1d1d      	adds	r5, r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6015      	str	r5, [r2, #0]
 80067a6:	060a      	lsls	r2, r1, #24
 80067a8:	d50b      	bpl.n	80067c2 <_printf_i+0x162>
 80067aa:	07ca      	lsls	r2, r1, #31
 80067ac:	bf44      	itt	mi
 80067ae:	f041 0120 	orrmi.w	r1, r1, #32
 80067b2:	6021      	strmi	r1, [r4, #0]
 80067b4:	b91b      	cbnz	r3, 80067be <_printf_i+0x15e>
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	f022 0220 	bic.w	r2, r2, #32
 80067bc:	6022      	str	r2, [r4, #0]
 80067be:	2210      	movs	r2, #16
 80067c0:	e7b7      	b.n	8006732 <_printf_i+0xd2>
 80067c2:	064d      	lsls	r5, r1, #25
 80067c4:	bf48      	it	mi
 80067c6:	b29b      	uxthmi	r3, r3
 80067c8:	e7ef      	b.n	80067aa <_printf_i+0x14a>
 80067ca:	4665      	mov	r5, ip
 80067cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80067d0:	fb02 3311 	mls	r3, r2, r1, r3
 80067d4:	5cc3      	ldrb	r3, [r0, r3]
 80067d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067da:	460b      	mov	r3, r1
 80067dc:	2900      	cmp	r1, #0
 80067de:	d1f5      	bne.n	80067cc <_printf_i+0x16c>
 80067e0:	e7b9      	b.n	8006756 <_printf_i+0xf6>
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	1d18      	adds	r0, r3, #4
 80067e8:	6961      	ldr	r1, [r4, #20]
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	0628      	lsls	r0, r5, #24
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	d501      	bpl.n	80067f6 <_printf_i+0x196>
 80067f2:	6019      	str	r1, [r3, #0]
 80067f4:	e002      	b.n	80067fc <_printf_i+0x19c>
 80067f6:	066a      	lsls	r2, r5, #25
 80067f8:	d5fb      	bpl.n	80067f2 <_printf_i+0x192>
 80067fa:	8019      	strh	r1, [r3, #0]
 80067fc:	2300      	movs	r3, #0
 80067fe:	4665      	mov	r5, ip
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	e7b9      	b.n	8006778 <_printf_i+0x118>
 8006804:	6813      	ldr	r3, [r2, #0]
 8006806:	1d19      	adds	r1, r3, #4
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	681d      	ldr	r5, [r3, #0]
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	2100      	movs	r1, #0
 8006810:	4628      	mov	r0, r5
 8006812:	f002 fb75 	bl	8008f00 <memchr>
 8006816:	b108      	cbz	r0, 800681c <_printf_i+0x1bc>
 8006818:	1b40      	subs	r0, r0, r5
 800681a:	6060      	str	r0, [r4, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2300      	movs	r3, #0
 8006822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006826:	e7a7      	b.n	8006778 <_printf_i+0x118>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	462a      	mov	r2, r5
 800682c:	4639      	mov	r1, r7
 800682e:	4630      	mov	r0, r6
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d0aa      	beq.n	800678c <_printf_i+0x12c>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	079b      	lsls	r3, r3, #30
 800683a:	d413      	bmi.n	8006864 <_printf_i+0x204>
 800683c:	68e0      	ldr	r0, [r4, #12]
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	4298      	cmp	r0, r3
 8006842:	bfb8      	it	lt
 8006844:	4618      	movlt	r0, r3
 8006846:	e7a3      	b.n	8006790 <_printf_i+0x130>
 8006848:	2301      	movs	r3, #1
 800684a:	464a      	mov	r2, r9
 800684c:	4639      	mov	r1, r7
 800684e:	4630      	mov	r0, r6
 8006850:	47c0      	blx	r8
 8006852:	3001      	adds	r0, #1
 8006854:	d09a      	beq.n	800678c <_printf_i+0x12c>
 8006856:	3501      	adds	r5, #1
 8006858:	68e3      	ldr	r3, [r4, #12]
 800685a:	9a03      	ldr	r2, [sp, #12]
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	42ab      	cmp	r3, r5
 8006860:	dcf2      	bgt.n	8006848 <_printf_i+0x1e8>
 8006862:	e7eb      	b.n	800683c <_printf_i+0x1dc>
 8006864:	2500      	movs	r5, #0
 8006866:	f104 0919 	add.w	r9, r4, #25
 800686a:	e7f5      	b.n	8006858 <_printf_i+0x1f8>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ac      	bne.n	80067ca <_printf_i+0x16a>
 8006870:	7803      	ldrb	r3, [r0, #0]
 8006872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800687a:	e76c      	b.n	8006756 <_printf_i+0xf6>
 800687c:	0800a41e 	.word	0x0800a41e
 8006880:	0800a42f 	.word	0x0800a42f

08006884 <_scanf_float>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	469a      	mov	sl, r3
 800688a:	688b      	ldr	r3, [r1, #8]
 800688c:	4616      	mov	r6, r2
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006894:	bf88      	it	hi
 8006896:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800689a:	b087      	sub	sp, #28
 800689c:	bf85      	ittet	hi
 800689e:	189b      	addhi	r3, r3, r2
 80068a0:	9301      	strhi	r3, [sp, #4]
 80068a2:	2300      	movls	r3, #0
 80068a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068a8:	4688      	mov	r8, r1
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	bf8c      	ite	hi
 80068b0:	608b      	strhi	r3, [r1, #8]
 80068b2:	9301      	strls	r3, [sp, #4]
 80068b4:	680b      	ldr	r3, [r1, #0]
 80068b6:	4607      	mov	r7, r0
 80068b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068bc:	f848 3b1c 	str.w	r3, [r8], #28
 80068c0:	460c      	mov	r4, r1
 80068c2:	4645      	mov	r5, r8
 80068c4:	465a      	mov	r2, fp
 80068c6:	46d9      	mov	r9, fp
 80068c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80068cc:	f8cd b008 	str.w	fp, [sp, #8]
 80068d0:	68a1      	ldr	r1, [r4, #8]
 80068d2:	b181      	cbz	r1, 80068f6 <_scanf_float+0x72>
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b49      	cmp	r3, #73	; 0x49
 80068da:	d071      	beq.n	80069c0 <_scanf_float+0x13c>
 80068dc:	d84d      	bhi.n	800697a <_scanf_float+0xf6>
 80068de:	2b39      	cmp	r3, #57	; 0x39
 80068e0:	d840      	bhi.n	8006964 <_scanf_float+0xe0>
 80068e2:	2b31      	cmp	r3, #49	; 0x31
 80068e4:	f080 8088 	bcs.w	80069f8 <_scanf_float+0x174>
 80068e8:	2b2d      	cmp	r3, #45	; 0x2d
 80068ea:	f000 8090 	beq.w	8006a0e <_scanf_float+0x18a>
 80068ee:	d815      	bhi.n	800691c <_scanf_float+0x98>
 80068f0:	2b2b      	cmp	r3, #43	; 0x2b
 80068f2:	f000 808c 	beq.w	8006a0e <_scanf_float+0x18a>
 80068f6:	f1b9 0f00 	cmp.w	r9, #0
 80068fa:	d003      	beq.n	8006904 <_scanf_float+0x80>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	3a01      	subs	r2, #1
 8006906:	2a01      	cmp	r2, #1
 8006908:	f200 80ea 	bhi.w	8006ae0 <_scanf_float+0x25c>
 800690c:	4545      	cmp	r5, r8
 800690e:	f200 80dc 	bhi.w	8006aca <_scanf_float+0x246>
 8006912:	2601      	movs	r6, #1
 8006914:	4630      	mov	r0, r6
 8006916:	b007      	add	sp, #28
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	2b2e      	cmp	r3, #46	; 0x2e
 800691e:	f000 809f 	beq.w	8006a60 <_scanf_float+0x1dc>
 8006922:	2b30      	cmp	r3, #48	; 0x30
 8006924:	d1e7      	bne.n	80068f6 <_scanf_float+0x72>
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	f410 7f80 	tst.w	r0, #256	; 0x100
 800692c:	d064      	beq.n	80069f8 <_scanf_float+0x174>
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006934:	6020      	str	r0, [r4, #0]
 8006936:	f109 0901 	add.w	r9, r9, #1
 800693a:	b11b      	cbz	r3, 8006944 <_scanf_float+0xc0>
 800693c:	3b01      	subs	r3, #1
 800693e:	3101      	adds	r1, #1
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	60a1      	str	r1, [r4, #8]
 8006944:	68a3      	ldr	r3, [r4, #8]
 8006946:	3b01      	subs	r3, #1
 8006948:	60a3      	str	r3, [r4, #8]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	3301      	adds	r3, #1
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	6873      	ldr	r3, [r6, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	6073      	str	r3, [r6, #4]
 8006958:	f340 80ac 	ble.w	8006ab4 <_scanf_float+0x230>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	6033      	str	r3, [r6, #0]
 8006962:	e7b5      	b.n	80068d0 <_scanf_float+0x4c>
 8006964:	2b45      	cmp	r3, #69	; 0x45
 8006966:	f000 8085 	beq.w	8006a74 <_scanf_float+0x1f0>
 800696a:	2b46      	cmp	r3, #70	; 0x46
 800696c:	d06a      	beq.n	8006a44 <_scanf_float+0x1c0>
 800696e:	2b41      	cmp	r3, #65	; 0x41
 8006970:	d1c1      	bne.n	80068f6 <_scanf_float+0x72>
 8006972:	2a01      	cmp	r2, #1
 8006974:	d1bf      	bne.n	80068f6 <_scanf_float+0x72>
 8006976:	2202      	movs	r2, #2
 8006978:	e046      	b.n	8006a08 <_scanf_float+0x184>
 800697a:	2b65      	cmp	r3, #101	; 0x65
 800697c:	d07a      	beq.n	8006a74 <_scanf_float+0x1f0>
 800697e:	d818      	bhi.n	80069b2 <_scanf_float+0x12e>
 8006980:	2b54      	cmp	r3, #84	; 0x54
 8006982:	d066      	beq.n	8006a52 <_scanf_float+0x1ce>
 8006984:	d811      	bhi.n	80069aa <_scanf_float+0x126>
 8006986:	2b4e      	cmp	r3, #78	; 0x4e
 8006988:	d1b5      	bne.n	80068f6 <_scanf_float+0x72>
 800698a:	2a00      	cmp	r2, #0
 800698c:	d146      	bne.n	8006a1c <_scanf_float+0x198>
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d145      	bne.n	8006a20 <_scanf_float+0x19c>
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800699a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800699e:	d13f      	bne.n	8006a20 <_scanf_float+0x19c>
 80069a0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80069a4:	6021      	str	r1, [r4, #0]
 80069a6:	2201      	movs	r2, #1
 80069a8:	e02e      	b.n	8006a08 <_scanf_float+0x184>
 80069aa:	2b59      	cmp	r3, #89	; 0x59
 80069ac:	d01e      	beq.n	80069ec <_scanf_float+0x168>
 80069ae:	2b61      	cmp	r3, #97	; 0x61
 80069b0:	e7de      	b.n	8006970 <_scanf_float+0xec>
 80069b2:	2b6e      	cmp	r3, #110	; 0x6e
 80069b4:	d0e9      	beq.n	800698a <_scanf_float+0x106>
 80069b6:	d815      	bhi.n	80069e4 <_scanf_float+0x160>
 80069b8:	2b66      	cmp	r3, #102	; 0x66
 80069ba:	d043      	beq.n	8006a44 <_scanf_float+0x1c0>
 80069bc:	2b69      	cmp	r3, #105	; 0x69
 80069be:	d19a      	bne.n	80068f6 <_scanf_float+0x72>
 80069c0:	f1bb 0f00 	cmp.w	fp, #0
 80069c4:	d138      	bne.n	8006a38 <_scanf_float+0x1b4>
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d197      	bne.n	80068fc <_scanf_float+0x78>
 80069cc:	6821      	ldr	r1, [r4, #0]
 80069ce:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80069d2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80069d6:	d195      	bne.n	8006904 <_scanf_float+0x80>
 80069d8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	f04f 0b01 	mov.w	fp, #1
 80069e2:	e011      	b.n	8006a08 <_scanf_float+0x184>
 80069e4:	2b74      	cmp	r3, #116	; 0x74
 80069e6:	d034      	beq.n	8006a52 <_scanf_float+0x1ce>
 80069e8:	2b79      	cmp	r3, #121	; 0x79
 80069ea:	d184      	bne.n	80068f6 <_scanf_float+0x72>
 80069ec:	f1bb 0f07 	cmp.w	fp, #7
 80069f0:	d181      	bne.n	80068f6 <_scanf_float+0x72>
 80069f2:	f04f 0b08 	mov.w	fp, #8
 80069f6:	e007      	b.n	8006a08 <_scanf_float+0x184>
 80069f8:	eb12 0f0b 	cmn.w	r2, fp
 80069fc:	f47f af7b 	bne.w	80068f6 <_scanf_float+0x72>
 8006a00:	6821      	ldr	r1, [r4, #0]
 8006a02:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006a06:	6021      	str	r1, [r4, #0]
 8006a08:	702b      	strb	r3, [r5, #0]
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e79a      	b.n	8006944 <_scanf_float+0xc0>
 8006a0e:	6821      	ldr	r1, [r4, #0]
 8006a10:	0608      	lsls	r0, r1, #24
 8006a12:	f57f af70 	bpl.w	80068f6 <_scanf_float+0x72>
 8006a16:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a1a:	e7f4      	b.n	8006a06 <_scanf_float+0x182>
 8006a1c:	2a02      	cmp	r2, #2
 8006a1e:	d047      	beq.n	8006ab0 <_scanf_float+0x22c>
 8006a20:	f1bb 0f01 	cmp.w	fp, #1
 8006a24:	d003      	beq.n	8006a2e <_scanf_float+0x1aa>
 8006a26:	f1bb 0f04 	cmp.w	fp, #4
 8006a2a:	f47f af64 	bne.w	80068f6 <_scanf_float+0x72>
 8006a2e:	f10b 0b01 	add.w	fp, fp, #1
 8006a32:	fa5f fb8b 	uxtb.w	fp, fp
 8006a36:	e7e7      	b.n	8006a08 <_scanf_float+0x184>
 8006a38:	f1bb 0f03 	cmp.w	fp, #3
 8006a3c:	d0f7      	beq.n	8006a2e <_scanf_float+0x1aa>
 8006a3e:	f1bb 0f05 	cmp.w	fp, #5
 8006a42:	e7f2      	b.n	8006a2a <_scanf_float+0x1a6>
 8006a44:	f1bb 0f02 	cmp.w	fp, #2
 8006a48:	f47f af55 	bne.w	80068f6 <_scanf_float+0x72>
 8006a4c:	f04f 0b03 	mov.w	fp, #3
 8006a50:	e7da      	b.n	8006a08 <_scanf_float+0x184>
 8006a52:	f1bb 0f06 	cmp.w	fp, #6
 8006a56:	f47f af4e 	bne.w	80068f6 <_scanf_float+0x72>
 8006a5a:	f04f 0b07 	mov.w	fp, #7
 8006a5e:	e7d3      	b.n	8006a08 <_scanf_float+0x184>
 8006a60:	6821      	ldr	r1, [r4, #0]
 8006a62:	0588      	lsls	r0, r1, #22
 8006a64:	f57f af47 	bpl.w	80068f6 <_scanf_float+0x72>
 8006a68:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a72:	e7c9      	b.n	8006a08 <_scanf_float+0x184>
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006a7a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006a7e:	d006      	beq.n	8006a8e <_scanf_float+0x20a>
 8006a80:	0548      	lsls	r0, r1, #21
 8006a82:	f57f af38 	bpl.w	80068f6 <_scanf_float+0x72>
 8006a86:	f1b9 0f00 	cmp.w	r9, #0
 8006a8a:	f43f af3b 	beq.w	8006904 <_scanf_float+0x80>
 8006a8e:	0588      	lsls	r0, r1, #22
 8006a90:	bf58      	it	pl
 8006a92:	9802      	ldrpl	r0, [sp, #8]
 8006a94:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006a98:	bf58      	it	pl
 8006a9a:	eba9 0000 	subpl.w	r0, r9, r0
 8006a9e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006aa2:	bf58      	it	pl
 8006aa4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006aa8:	6021      	str	r1, [r4, #0]
 8006aaa:	f04f 0900 	mov.w	r9, #0
 8006aae:	e7ab      	b.n	8006a08 <_scanf_float+0x184>
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	e7a9      	b.n	8006a08 <_scanf_float+0x184>
 8006ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4638      	mov	r0, r7
 8006abc:	9205      	str	r2, [sp, #20]
 8006abe:	4798      	blx	r3
 8006ac0:	9a05      	ldr	r2, [sp, #20]
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f43f af04 	beq.w	80068d0 <_scanf_float+0x4c>
 8006ac8:	e715      	b.n	80068f6 <_scanf_float+0x72>
 8006aca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ace:	4632      	mov	r2, r6
 8006ad0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	4798      	blx	r3
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	e715      	b.n	800690c <_scanf_float+0x88>
 8006ae0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006ae4:	2b06      	cmp	r3, #6
 8006ae6:	d80a      	bhi.n	8006afe <_scanf_float+0x27a>
 8006ae8:	f1bb 0f02 	cmp.w	fp, #2
 8006aec:	d967      	bls.n	8006bbe <_scanf_float+0x33a>
 8006aee:	f1ab 0b03 	sub.w	fp, fp, #3
 8006af2:	fa5f fb8b 	uxtb.w	fp, fp
 8006af6:	eba5 0b0b 	sub.w	fp, r5, fp
 8006afa:	455d      	cmp	r5, fp
 8006afc:	d14a      	bne.n	8006b94 <_scanf_float+0x310>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	05da      	lsls	r2, r3, #23
 8006b02:	d51f      	bpl.n	8006b44 <_scanf_float+0x2c0>
 8006b04:	055b      	lsls	r3, r3, #21
 8006b06:	d467      	bmi.n	8006bd8 <_scanf_float+0x354>
 8006b08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	2965      	cmp	r1, #101	; 0x65
 8006b10:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b14:	f105 3bff 	add.w	fp, r5, #4294967295
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	d00d      	beq.n	8006b38 <_scanf_float+0x2b4>
 8006b1c:	2945      	cmp	r1, #69	; 0x45
 8006b1e:	d00b      	beq.n	8006b38 <_scanf_float+0x2b4>
 8006b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b24:	4632      	mov	r2, r6
 8006b26:	4638      	mov	r0, r7
 8006b28:	4798      	blx	r3
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f1a5 0b02 	sub.w	fp, r5, #2
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4638      	mov	r0, r7
 8006b40:	4798      	blx	r3
 8006b42:	465d      	mov	r5, fp
 8006b44:	6826      	ldr	r6, [r4, #0]
 8006b46:	f016 0610 	ands.w	r6, r6, #16
 8006b4a:	d176      	bne.n	8006c3a <_scanf_float+0x3b6>
 8006b4c:	702e      	strb	r6, [r5, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d141      	bne.n	8006bde <_scanf_float+0x35a>
 8006b5a:	9b02      	ldr	r3, [sp, #8]
 8006b5c:	eba9 0303 	sub.w	r3, r9, r3
 8006b60:	425a      	negs	r2, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d148      	bne.n	8006bf8 <_scanf_float+0x374>
 8006b66:	4641      	mov	r1, r8
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f000 fec8 	bl	8007900 <_strtod_r>
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	4680      	mov	r8, r0
 8006b74:	f015 0f02 	tst.w	r5, #2
 8006b78:	4689      	mov	r9, r1
 8006b7a:	f8da 3000 	ldr.w	r3, [sl]
 8006b7e:	d046      	beq.n	8006c0e <_scanf_float+0x38a>
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	f8ca 2000 	str.w	r2, [sl]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	e9c3 8900 	strd	r8, r9, [r3]
 8006b8c:	68e3      	ldr	r3, [r4, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60e3      	str	r3, [r4, #12]
 8006b92:	e6bf      	b.n	8006914 <_scanf_float+0x90>
 8006b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b98:	4632      	mov	r2, r6
 8006b9a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	4798      	blx	r3
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	e7a7      	b.n	8006afa <_scanf_float+0x276>
 8006baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bae:	4632      	mov	r2, r6
 8006bb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	4798      	blx	r3
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	4545      	cmp	r5, r8
 8006bc0:	d8f3      	bhi.n	8006baa <_scanf_float+0x326>
 8006bc2:	e6a6      	b.n	8006912 <_scanf_float+0x8e>
 8006bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc8:	4632      	mov	r2, r6
 8006bca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006bce:	4638      	mov	r0, r7
 8006bd0:	4798      	blx	r3
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	4545      	cmp	r5, r8
 8006bda:	d8f3      	bhi.n	8006bc4 <_scanf_float+0x340>
 8006bdc:	e699      	b.n	8006912 <_scanf_float+0x8e>
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0c0      	beq.n	8006b66 <_scanf_float+0x2e2>
 8006be4:	9904      	ldr	r1, [sp, #16]
 8006be6:	230a      	movs	r3, #10
 8006be8:	4632      	mov	r2, r6
 8006bea:	3101      	adds	r1, #1
 8006bec:	4638      	mov	r0, r7
 8006bee:	f000 ff13 	bl	8007a18 <_strtol_r>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	9d04      	ldr	r5, [sp, #16]
 8006bf6:	1ac2      	subs	r2, r0, r3
 8006bf8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	bf28      	it	cs
 8006c00:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006c04:	490e      	ldr	r1, [pc, #56]	; (8006c40 <_scanf_float+0x3bc>)
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f838 	bl	8006c7c <siprintf>
 8006c0c:	e7ab      	b.n	8006b66 <_scanf_float+0x2e2>
 8006c0e:	1d1f      	adds	r7, r3, #4
 8006c10:	f015 0504 	ands.w	r5, r5, #4
 8006c14:	f8ca 7000 	str.w	r7, [sl]
 8006c18:	d1b5      	bne.n	8006b86 <_scanf_float+0x302>
 8006c1a:	681f      	ldr	r7, [r3, #0]
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	f7f9 fef4 	bl	8000a0c <__aeabi_dcmpun>
 8006c24:	b120      	cbz	r0, 8006c30 <_scanf_float+0x3ac>
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 f824 	bl	8006c74 <nanf>
 8006c2c:	6038      	str	r0, [r7, #0]
 8006c2e:	e7ad      	b.n	8006b8c <_scanf_float+0x308>
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff48 	bl	8000ac8 <__aeabi_d2f>
 8006c38:	e7f8      	b.n	8006c2c <_scanf_float+0x3a8>
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	e66a      	b.n	8006914 <_scanf_float+0x90>
 8006c3e:	bf00      	nop
 8006c40:	0800a440 	.word	0x0800a440

08006c44 <iprintf>:
 8006c44:	b40f      	push	{r0, r1, r2, r3}
 8006c46:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <iprintf+0x2c>)
 8006c48:	b513      	push	{r0, r1, r4, lr}
 8006c4a:	681c      	ldr	r4, [r3, #0]
 8006c4c:	b124      	cbz	r4, 8006c58 <iprintf+0x14>
 8006c4e:	69a3      	ldr	r3, [r4, #24]
 8006c50:	b913      	cbnz	r3, 8006c58 <iprintf+0x14>
 8006c52:	4620      	mov	r0, r4
 8006c54:	f001 fd74 	bl	8008740 <__sinit>
 8006c58:	ab05      	add	r3, sp, #20
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	68a1      	ldr	r1, [r4, #8]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	f002 ff81 	bl	8009b68 <_vfiprintf_r>
 8006c66:	b002      	add	sp, #8
 8006c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6c:	b004      	add	sp, #16
 8006c6e:	4770      	bx	lr
 8006c70:	20000010 	.word	0x20000010

08006c74 <nanf>:
 8006c74:	4800      	ldr	r0, [pc, #0]	; (8006c78 <nanf+0x4>)
 8006c76:	4770      	bx	lr
 8006c78:	7fc00000 	.word	0x7fc00000

08006c7c <siprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c82:	b500      	push	{lr}
 8006c84:	b09c      	sub	sp, #112	; 0x70
 8006c86:	ab1d      	add	r3, sp, #116	; 0x74
 8006c88:	9002      	str	r0, [sp, #8]
 8006c8a:	9006      	str	r0, [sp, #24]
 8006c8c:	9107      	str	r1, [sp, #28]
 8006c8e:	9104      	str	r1, [sp, #16]
 8006c90:	4808      	ldr	r0, [pc, #32]	; (8006cb4 <siprintf+0x38>)
 8006c92:	4909      	ldr	r1, [pc, #36]	; (8006cb8 <siprintf+0x3c>)
 8006c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	a902      	add	r1, sp, #8
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	f002 fe42 	bl	8009928 <_svfiprintf_r>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	9b02      	ldr	r3, [sp, #8]
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	b01c      	add	sp, #112	; 0x70
 8006cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb0:	b003      	add	sp, #12
 8006cb2:	4770      	bx	lr
 8006cb4:	20000010 	.word	0x20000010
 8006cb8:	ffff0208 	.word	0xffff0208

08006cbc <sulp>:
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	4690      	mov	r8, r2
 8006cc4:	f002 fbf4 	bl	80094b0 <__ulp>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	f1b8 0f00 	cmp.w	r8, #0
 8006cd0:	d011      	beq.n	8006cf6 <sulp+0x3a>
 8006cd2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006cd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd0b      	ble.n	8006cf6 <sulp+0x3a>
 8006cde:	2400      	movs	r4, #0
 8006ce0:	051b      	lsls	r3, r3, #20
 8006ce2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ce6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	f7f9 fbf3 	bl	80004d8 <__aeabi_dmul>
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	461f      	mov	r7, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	b0a1      	sub	sp, #132	; 0x84
 8006d0a:	4683      	mov	fp, r0
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	460e      	mov	r6, r1
 8006d10:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d12:	931c      	str	r3, [sp, #112]	; 0x70
 8006d14:	f002 f8c9 	bl	8008eaa <__localeconv_l>
 8006d18:	4680      	mov	r8, r0
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	f7f9 fa18 	bl	8000150 <strlen>
 8006d20:	f04f 0900 	mov.w	r9, #0
 8006d24:	4604      	mov	r4, r0
 8006d26:	f04f 0a00 	mov.w	sl, #0
 8006d2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006d2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	2a0d      	cmp	r2, #13
 8006d32:	d832      	bhi.n	8006d9a <_strtod_l+0x9a>
 8006d34:	2a09      	cmp	r2, #9
 8006d36:	d236      	bcs.n	8006da6 <_strtod_l+0xa6>
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d03e      	beq.n	8006dba <_strtod_l+0xba>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006d42:	782b      	ldrb	r3, [r5, #0]
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	f040 80ac 	bne.w	8006ea2 <_strtod_l+0x1a2>
 8006d4a:	786b      	ldrb	r3, [r5, #1]
 8006d4c:	2b58      	cmp	r3, #88	; 0x58
 8006d4e:	d001      	beq.n	8006d54 <_strtod_l+0x54>
 8006d50:	2b78      	cmp	r3, #120	; 0x78
 8006d52:	d167      	bne.n	8006e24 <_strtod_l+0x124>
 8006d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d56:	9702      	str	r7, [sp, #8]
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	ab1c      	add	r3, sp, #112	; 0x70
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	4a89      	ldr	r2, [pc, #548]	; (8006f84 <_strtod_l+0x284>)
 8006d60:	ab1d      	add	r3, sp, #116	; 0x74
 8006d62:	a91b      	add	r1, sp, #108	; 0x6c
 8006d64:	4658      	mov	r0, fp
 8006d66:	f001 fdc5 	bl	80088f4 <__gethex>
 8006d6a:	f010 0407 	ands.w	r4, r0, #7
 8006d6e:	4606      	mov	r6, r0
 8006d70:	d005      	beq.n	8006d7e <_strtod_l+0x7e>
 8006d72:	2c06      	cmp	r4, #6
 8006d74:	d12b      	bne.n	8006dce <_strtod_l+0xce>
 8006d76:	2300      	movs	r3, #0
 8006d78:	3501      	adds	r5, #1
 8006d7a:	951b      	str	r5, [sp, #108]	; 0x6c
 8006d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 85a6 	bne.w	80078d2 <_strtod_l+0xbd2>
 8006d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d88:	b1e3      	cbz	r3, 8006dc4 <_strtod_l+0xc4>
 8006d8a:	464a      	mov	r2, r9
 8006d8c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006d90:	4610      	mov	r0, r2
 8006d92:	4619      	mov	r1, r3
 8006d94:	b021      	add	sp, #132	; 0x84
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	2a2b      	cmp	r2, #43	; 0x2b
 8006d9c:	d015      	beq.n	8006dca <_strtod_l+0xca>
 8006d9e:	2a2d      	cmp	r2, #45	; 0x2d
 8006da0:	d004      	beq.n	8006dac <_strtod_l+0xac>
 8006da2:	2a20      	cmp	r2, #32
 8006da4:	d1ca      	bne.n	8006d3c <_strtod_l+0x3c>
 8006da6:	3301      	adds	r3, #1
 8006da8:	931b      	str	r3, [sp, #108]	; 0x6c
 8006daa:	e7bf      	b.n	8006d2c <_strtod_l+0x2c>
 8006dac:	2201      	movs	r2, #1
 8006dae:	920d      	str	r2, [sp, #52]	; 0x34
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	921b      	str	r2, [sp, #108]	; 0x6c
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1c2      	bne.n	8006d40 <_strtod_l+0x40>
 8006dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dbc:	961b      	str	r6, [sp, #108]	; 0x6c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8585 	bne.w	80078ce <_strtod_l+0xbce>
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4653      	mov	r3, sl
 8006dc8:	e7e2      	b.n	8006d90 <_strtod_l+0x90>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	e7ef      	b.n	8006dae <_strtod_l+0xae>
 8006dce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006dd0:	b13a      	cbz	r2, 8006de2 <_strtod_l+0xe2>
 8006dd2:	2135      	movs	r1, #53	; 0x35
 8006dd4:	a81e      	add	r0, sp, #120	; 0x78
 8006dd6:	f002 fc5e 	bl	8009696 <__copybits>
 8006dda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f002 f8d1 	bl	8008f84 <_Bfree>
 8006de2:	3c01      	subs	r4, #1
 8006de4:	2c04      	cmp	r4, #4
 8006de6:	d806      	bhi.n	8006df6 <_strtod_l+0xf6>
 8006de8:	e8df f004 	tbb	[pc, r4]
 8006dec:	1714030a 	.word	0x1714030a
 8006df0:	0a          	.byte	0x0a
 8006df1:	00          	.byte	0x00
 8006df2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006df6:	0731      	lsls	r1, r6, #28
 8006df8:	d5c1      	bpl.n	8006d7e <_strtod_l+0x7e>
 8006dfa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006dfe:	e7be      	b.n	8006d7e <_strtod_l+0x7e>
 8006e00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e02:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e0e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006e12:	e7f0      	b.n	8006df6 <_strtod_l+0xf6>
 8006e14:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006f88 <_strtod_l+0x288>
 8006e18:	e7ed      	b.n	8006df6 <_strtod_l+0xf6>
 8006e1a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006e1e:	f04f 39ff 	mov.w	r9, #4294967295
 8006e22:	e7e8      	b.n	8006df6 <_strtod_l+0xf6>
 8006e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b30      	cmp	r3, #48	; 0x30
 8006e2e:	d0f9      	beq.n	8006e24 <_strtod_l+0x124>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0a4      	beq.n	8006d7e <_strtod_l+0x7e>
 8006e34:	2301      	movs	r3, #1
 8006e36:	2500      	movs	r5, #0
 8006e38:	220a      	movs	r2, #10
 8006e3a:	9307      	str	r3, [sp, #28]
 8006e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e3e:	9506      	str	r5, [sp, #24]
 8006e40:	9308      	str	r3, [sp, #32]
 8006e42:	9504      	str	r5, [sp, #16]
 8006e44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006e46:	7807      	ldrb	r7, [r0, #0]
 8006e48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006e4c:	b2d9      	uxtb	r1, r3
 8006e4e:	2909      	cmp	r1, #9
 8006e50:	d929      	bls.n	8006ea6 <_strtod_l+0x1a6>
 8006e52:	4622      	mov	r2, r4
 8006e54:	f8d8 1000 	ldr.w	r1, [r8]
 8006e58:	f002 ffef 	bl	8009e3a <strncmp>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d031      	beq.n	8006ec4 <_strtod_l+0x1c4>
 8006e60:	2000      	movs	r0, #0
 8006e62:	463b      	mov	r3, r7
 8006e64:	4602      	mov	r2, r0
 8006e66:	9c04      	ldr	r4, [sp, #16]
 8006e68:	9005      	str	r0, [sp, #20]
 8006e6a:	2b65      	cmp	r3, #101	; 0x65
 8006e6c:	d001      	beq.n	8006e72 <_strtod_l+0x172>
 8006e6e:	2b45      	cmp	r3, #69	; 0x45
 8006e70:	d114      	bne.n	8006e9c <_strtod_l+0x19c>
 8006e72:	b924      	cbnz	r4, 8006e7e <_strtod_l+0x17e>
 8006e74:	b910      	cbnz	r0, 8006e7c <_strtod_l+0x17c>
 8006e76:	9b07      	ldr	r3, [sp, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d09e      	beq.n	8006dba <_strtod_l+0xba>
 8006e7c:	2400      	movs	r4, #0
 8006e7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006e80:	1c73      	adds	r3, r6, #1
 8006e82:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e84:	7873      	ldrb	r3, [r6, #1]
 8006e86:	2b2b      	cmp	r3, #43	; 0x2b
 8006e88:	d078      	beq.n	8006f7c <_strtod_l+0x27c>
 8006e8a:	2b2d      	cmp	r3, #45	; 0x2d
 8006e8c:	d070      	beq.n	8006f70 <_strtod_l+0x270>
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006e96:	2f09      	cmp	r7, #9
 8006e98:	d97c      	bls.n	8006f94 <_strtod_l+0x294>
 8006e9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e9c:	f04f 0e00 	mov.w	lr, #0
 8006ea0:	e09a      	b.n	8006fd8 <_strtod_l+0x2d8>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e7c7      	b.n	8006e36 <_strtod_l+0x136>
 8006ea6:	9904      	ldr	r1, [sp, #16]
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	2908      	cmp	r1, #8
 8006eac:	bfd7      	itett	le
 8006eae:	9906      	ldrle	r1, [sp, #24]
 8006eb0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb8:	9306      	strle	r3, [sp, #24]
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	e7bf      	b.n	8006e44 <_strtod_l+0x144>
 8006ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ec6:	191a      	adds	r2, r3, r4
 8006ec8:	921b      	str	r2, [sp, #108]	; 0x6c
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	5d1b      	ldrb	r3, [r3, r4]
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	d037      	beq.n	8006f42 <_strtod_l+0x242>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	9c04      	ldr	r4, [sp, #16]
 8006ed6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006eda:	2909      	cmp	r1, #9
 8006edc:	d913      	bls.n	8006f06 <_strtod_l+0x206>
 8006ede:	2101      	movs	r1, #1
 8006ee0:	9105      	str	r1, [sp, #20]
 8006ee2:	e7c2      	b.n	8006e6a <_strtod_l+0x16a>
 8006ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b30      	cmp	r3, #48	; 0x30
 8006ef0:	d0f8      	beq.n	8006ee4 <_strtod_l+0x1e4>
 8006ef2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006ef6:	2a08      	cmp	r2, #8
 8006ef8:	f200 84f0 	bhi.w	80078dc <_strtod_l+0xbdc>
 8006efc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006efe:	9208      	str	r2, [sp, #32]
 8006f00:	4602      	mov	r2, r0
 8006f02:	2000      	movs	r0, #0
 8006f04:	4604      	mov	r4, r0
 8006f06:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006f0a:	f100 0101 	add.w	r1, r0, #1
 8006f0e:	d012      	beq.n	8006f36 <_strtod_l+0x236>
 8006f10:	440a      	add	r2, r1
 8006f12:	270a      	movs	r7, #10
 8006f14:	4621      	mov	r1, r4
 8006f16:	eb00 0c04 	add.w	ip, r0, r4
 8006f1a:	458c      	cmp	ip, r1
 8006f1c:	d113      	bne.n	8006f46 <_strtod_l+0x246>
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	2908      	cmp	r1, #8
 8006f22:	f104 0401 	add.w	r4, r4, #1
 8006f26:	4404      	add	r4, r0
 8006f28:	dc19      	bgt.n	8006f5e <_strtod_l+0x25e>
 8006f2a:	210a      	movs	r1, #10
 8006f2c:	9b06      	ldr	r3, [sp, #24]
 8006f2e:	fb01 e303 	mla	r3, r1, r3, lr
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	2100      	movs	r1, #0
 8006f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f38:	1c58      	adds	r0, r3, #1
 8006f3a:	901b      	str	r0, [sp, #108]	; 0x6c
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	4608      	mov	r0, r1
 8006f40:	e7c9      	b.n	8006ed6 <_strtod_l+0x1d6>
 8006f42:	9804      	ldr	r0, [sp, #16]
 8006f44:	e7d3      	b.n	8006eee <_strtod_l+0x1ee>
 8006f46:	2908      	cmp	r1, #8
 8006f48:	f101 0101 	add.w	r1, r1, #1
 8006f4c:	dc03      	bgt.n	8006f56 <_strtod_l+0x256>
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	437b      	muls	r3, r7
 8006f52:	9306      	str	r3, [sp, #24]
 8006f54:	e7e1      	b.n	8006f1a <_strtod_l+0x21a>
 8006f56:	2910      	cmp	r1, #16
 8006f58:	bfd8      	it	le
 8006f5a:	437d      	mulle	r5, r7
 8006f5c:	e7dd      	b.n	8006f1a <_strtod_l+0x21a>
 8006f5e:	2c10      	cmp	r4, #16
 8006f60:	bfdc      	itt	le
 8006f62:	210a      	movle	r1, #10
 8006f64:	fb01 e505 	mlale	r5, r1, r5, lr
 8006f68:	e7e4      	b.n	8006f34 <_strtod_l+0x234>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	e781      	b.n	8006e74 <_strtod_l+0x174>
 8006f70:	f04f 0c01 	mov.w	ip, #1
 8006f74:	1cb3      	adds	r3, r6, #2
 8006f76:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f78:	78b3      	ldrb	r3, [r6, #2]
 8006f7a:	e78a      	b.n	8006e92 <_strtod_l+0x192>
 8006f7c:	f04f 0c00 	mov.w	ip, #0
 8006f80:	e7f8      	b.n	8006f74 <_strtod_l+0x274>
 8006f82:	bf00      	nop
 8006f84:	0800a448 	.word	0x0800a448
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f8e:	1c5f      	adds	r7, r3, #1
 8006f90:	971b      	str	r7, [sp, #108]	; 0x6c
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b30      	cmp	r3, #48	; 0x30
 8006f96:	d0f9      	beq.n	8006f8c <_strtod_l+0x28c>
 8006f98:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006f9c:	2f08      	cmp	r7, #8
 8006f9e:	f63f af7d 	bhi.w	8006e9c <_strtod_l+0x19c>
 8006fa2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006fa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8006faa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fac:	1c5f      	adds	r7, r3, #1
 8006fae:	971b      	str	r7, [sp, #108]	; 0x6c
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006fb6:	f1b8 0f09 	cmp.w	r8, #9
 8006fba:	d937      	bls.n	800702c <_strtod_l+0x32c>
 8006fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fbe:	1a7f      	subs	r7, r7, r1
 8006fc0:	2f08      	cmp	r7, #8
 8006fc2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006fc6:	dc37      	bgt.n	8007038 <_strtod_l+0x338>
 8006fc8:	45be      	cmp	lr, r7
 8006fca:	bfa8      	it	ge
 8006fcc:	46be      	movge	lr, r7
 8006fce:	f1bc 0f00 	cmp.w	ip, #0
 8006fd2:	d001      	beq.n	8006fd8 <_strtod_l+0x2d8>
 8006fd4:	f1ce 0e00 	rsb	lr, lr, #0
 8006fd8:	2c00      	cmp	r4, #0
 8006fda:	d151      	bne.n	8007080 <_strtod_l+0x380>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f47f aece 	bne.w	8006d7e <_strtod_l+0x7e>
 8006fe2:	9a07      	ldr	r2, [sp, #28]
 8006fe4:	2a00      	cmp	r2, #0
 8006fe6:	f47f aeca 	bne.w	8006d7e <_strtod_l+0x7e>
 8006fea:	9a05      	ldr	r2, [sp, #20]
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	f47f aee4 	bne.w	8006dba <_strtod_l+0xba>
 8006ff2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ff4:	d027      	beq.n	8007046 <_strtod_l+0x346>
 8006ff6:	dc21      	bgt.n	800703c <_strtod_l+0x33c>
 8006ff8:	2b49      	cmp	r3, #73	; 0x49
 8006ffa:	f47f aede 	bne.w	8006dba <_strtod_l+0xba>
 8006ffe:	49a4      	ldr	r1, [pc, #656]	; (8007290 <_strtod_l+0x590>)
 8007000:	a81b      	add	r0, sp, #108	; 0x6c
 8007002:	f001 feab 	bl	8008d5c <__match>
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f aed7 	beq.w	8006dba <_strtod_l+0xba>
 800700c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800700e:	49a1      	ldr	r1, [pc, #644]	; (8007294 <_strtod_l+0x594>)
 8007010:	3b01      	subs	r3, #1
 8007012:	a81b      	add	r0, sp, #108	; 0x6c
 8007014:	931b      	str	r3, [sp, #108]	; 0x6c
 8007016:	f001 fea1 	bl	8008d5c <__match>
 800701a:	b910      	cbnz	r0, 8007022 <_strtod_l+0x322>
 800701c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800701e:	3301      	adds	r3, #1
 8007020:	931b      	str	r3, [sp, #108]	; 0x6c
 8007022:	f8df a284 	ldr.w	sl, [pc, #644]	; 80072a8 <_strtod_l+0x5a8>
 8007026:	f04f 0900 	mov.w	r9, #0
 800702a:	e6a8      	b.n	8006d7e <_strtod_l+0x7e>
 800702c:	210a      	movs	r1, #10
 800702e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007032:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007036:	e7b8      	b.n	8006faa <_strtod_l+0x2aa>
 8007038:	46be      	mov	lr, r7
 800703a:	e7c8      	b.n	8006fce <_strtod_l+0x2ce>
 800703c:	2b69      	cmp	r3, #105	; 0x69
 800703e:	d0de      	beq.n	8006ffe <_strtod_l+0x2fe>
 8007040:	2b6e      	cmp	r3, #110	; 0x6e
 8007042:	f47f aeba 	bne.w	8006dba <_strtod_l+0xba>
 8007046:	4994      	ldr	r1, [pc, #592]	; (8007298 <_strtod_l+0x598>)
 8007048:	a81b      	add	r0, sp, #108	; 0x6c
 800704a:	f001 fe87 	bl	8008d5c <__match>
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f aeb3 	beq.w	8006dba <_strtod_l+0xba>
 8007054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b28      	cmp	r3, #40	; 0x28
 800705a:	d10e      	bne.n	800707a <_strtod_l+0x37a>
 800705c:	aa1e      	add	r2, sp, #120	; 0x78
 800705e:	498f      	ldr	r1, [pc, #572]	; (800729c <_strtod_l+0x59c>)
 8007060:	a81b      	add	r0, sp, #108	; 0x6c
 8007062:	f001 fe8f 	bl	8008d84 <__hexnan>
 8007066:	2805      	cmp	r0, #5
 8007068:	d107      	bne.n	800707a <_strtod_l+0x37a>
 800706a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800706c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007070:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007074:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007078:	e681      	b.n	8006d7e <_strtod_l+0x7e>
 800707a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80072b0 <_strtod_l+0x5b0>
 800707e:	e7d2      	b.n	8007026 <_strtod_l+0x326>
 8007080:	ebae 0302 	sub.w	r3, lr, r2
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	9806      	ldr	r0, [sp, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf08      	it	eq
 800708e:	4623      	moveq	r3, r4
 8007090:	2c10      	cmp	r4, #16
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	46a0      	mov	r8, r4
 8007096:	bfa8      	it	ge
 8007098:	f04f 0810 	movge.w	r8, #16
 800709c:	f7f9 f9a2 	bl	80003e4 <__aeabi_ui2d>
 80070a0:	2c09      	cmp	r4, #9
 80070a2:	4681      	mov	r9, r0
 80070a4:	468a      	mov	sl, r1
 80070a6:	dc13      	bgt.n	80070d0 <_strtod_l+0x3d0>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f43f ae67 	beq.w	8006d7e <_strtod_l+0x7e>
 80070b0:	9b07      	ldr	r3, [sp, #28]
 80070b2:	dd7e      	ble.n	80071b2 <_strtod_l+0x4b2>
 80070b4:	2b16      	cmp	r3, #22
 80070b6:	dc65      	bgt.n	8007184 <_strtod_l+0x484>
 80070b8:	4a79      	ldr	r2, [pc, #484]	; (80072a0 <_strtod_l+0x5a0>)
 80070ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80070be:	464a      	mov	r2, r9
 80070c0:	e9de 0100 	ldrd	r0, r1, [lr]
 80070c4:	4653      	mov	r3, sl
 80070c6:	f7f9 fa07 	bl	80004d8 <__aeabi_dmul>
 80070ca:	4681      	mov	r9, r0
 80070cc:	468a      	mov	sl, r1
 80070ce:	e656      	b.n	8006d7e <_strtod_l+0x7e>
 80070d0:	4b73      	ldr	r3, [pc, #460]	; (80072a0 <_strtod_l+0x5a0>)
 80070d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070da:	f7f9 f9fd 	bl	80004d8 <__aeabi_dmul>
 80070de:	4606      	mov	r6, r0
 80070e0:	4628      	mov	r0, r5
 80070e2:	460f      	mov	r7, r1
 80070e4:	f7f9 f97e 	bl	80003e4 <__aeabi_ui2d>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 f83c 	bl	800016c <__adddf3>
 80070f4:	2c0f      	cmp	r4, #15
 80070f6:	4681      	mov	r9, r0
 80070f8:	468a      	mov	sl, r1
 80070fa:	ddd5      	ble.n	80070a8 <_strtod_l+0x3a8>
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	eba4 0808 	sub.w	r8, r4, r8
 8007102:	4498      	add	r8, r3
 8007104:	f1b8 0f00 	cmp.w	r8, #0
 8007108:	f340 809a 	ble.w	8007240 <_strtod_l+0x540>
 800710c:	f018 030f 	ands.w	r3, r8, #15
 8007110:	d00a      	beq.n	8007128 <_strtod_l+0x428>
 8007112:	4963      	ldr	r1, [pc, #396]	; (80072a0 <_strtod_l+0x5a0>)
 8007114:	464a      	mov	r2, r9
 8007116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800711a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800711e:	4653      	mov	r3, sl
 8007120:	f7f9 f9da 	bl	80004d8 <__aeabi_dmul>
 8007124:	4681      	mov	r9, r0
 8007126:	468a      	mov	sl, r1
 8007128:	f038 080f 	bics.w	r8, r8, #15
 800712c:	d077      	beq.n	800721e <_strtod_l+0x51e>
 800712e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007132:	dd4b      	ble.n	80071cc <_strtod_l+0x4cc>
 8007134:	f04f 0800 	mov.w	r8, #0
 8007138:	f8cd 8010 	str.w	r8, [sp, #16]
 800713c:	f8cd 8020 	str.w	r8, [sp, #32]
 8007140:	f8cd 8018 	str.w	r8, [sp, #24]
 8007144:	2322      	movs	r3, #34	; 0x22
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80072a8 <_strtod_l+0x5a8>
 800714e:	f8cb 3000 	str.w	r3, [fp]
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f43f ae12 	beq.w	8006d7e <_strtod_l+0x7e>
 800715a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800715c:	4658      	mov	r0, fp
 800715e:	f001 ff11 	bl	8008f84 <_Bfree>
 8007162:	9906      	ldr	r1, [sp, #24]
 8007164:	4658      	mov	r0, fp
 8007166:	f001 ff0d 	bl	8008f84 <_Bfree>
 800716a:	9904      	ldr	r1, [sp, #16]
 800716c:	4658      	mov	r0, fp
 800716e:	f001 ff09 	bl	8008f84 <_Bfree>
 8007172:	9908      	ldr	r1, [sp, #32]
 8007174:	4658      	mov	r0, fp
 8007176:	f001 ff05 	bl	8008f84 <_Bfree>
 800717a:	4641      	mov	r1, r8
 800717c:	4658      	mov	r0, fp
 800717e:	f001 ff01 	bl	8008f84 <_Bfree>
 8007182:	e5fc      	b.n	8006d7e <_strtod_l+0x7e>
 8007184:	9a07      	ldr	r2, [sp, #28]
 8007186:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800718a:	4293      	cmp	r3, r2
 800718c:	dbb6      	blt.n	80070fc <_strtod_l+0x3fc>
 800718e:	4d44      	ldr	r5, [pc, #272]	; (80072a0 <_strtod_l+0x5a0>)
 8007190:	f1c4 040f 	rsb	r4, r4, #15
 8007194:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007198:	464a      	mov	r2, r9
 800719a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719e:	4653      	mov	r3, sl
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	1b1c      	subs	r4, r3, r4
 80071a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071b0:	e789      	b.n	80070c6 <_strtod_l+0x3c6>
 80071b2:	f113 0f16 	cmn.w	r3, #22
 80071b6:	dba1      	blt.n	80070fc <_strtod_l+0x3fc>
 80071b8:	4a39      	ldr	r2, [pc, #228]	; (80072a0 <_strtod_l+0x5a0>)
 80071ba:	4648      	mov	r0, r9
 80071bc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80071c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80071c4:	4651      	mov	r1, sl
 80071c6:	f7f9 fab1 	bl	800072c <__aeabi_ddiv>
 80071ca:	e77e      	b.n	80070ca <_strtod_l+0x3ca>
 80071cc:	2300      	movs	r3, #0
 80071ce:	4648      	mov	r0, r9
 80071d0:	4651      	mov	r1, sl
 80071d2:	461d      	mov	r5, r3
 80071d4:	4e33      	ldr	r6, [pc, #204]	; (80072a4 <_strtod_l+0x5a4>)
 80071d6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071da:	f1b8 0f01 	cmp.w	r8, #1
 80071de:	dc21      	bgt.n	8007224 <_strtod_l+0x524>
 80071e0:	b10b      	cbz	r3, 80071e6 <_strtod_l+0x4e6>
 80071e2:	4681      	mov	r9, r0
 80071e4:	468a      	mov	sl, r1
 80071e6:	4b2f      	ldr	r3, [pc, #188]	; (80072a4 <_strtod_l+0x5a4>)
 80071e8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80071ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80071f0:	464a      	mov	r2, r9
 80071f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80071f6:	4653      	mov	r3, sl
 80071f8:	f7f9 f96e 	bl	80004d8 <__aeabi_dmul>
 80071fc:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <_strtod_l+0x5a8>)
 80071fe:	460a      	mov	r2, r1
 8007200:	400b      	ands	r3, r1
 8007202:	492a      	ldr	r1, [pc, #168]	; (80072ac <_strtod_l+0x5ac>)
 8007204:	4681      	mov	r9, r0
 8007206:	428b      	cmp	r3, r1
 8007208:	d894      	bhi.n	8007134 <_strtod_l+0x434>
 800720a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800720e:	428b      	cmp	r3, r1
 8007210:	bf86      	itte	hi
 8007212:	f04f 39ff 	movhi.w	r9, #4294967295
 8007216:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80072b4 <_strtod_l+0x5b4>
 800721a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800721e:	2300      	movs	r3, #0
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	e07b      	b.n	800731c <_strtod_l+0x61c>
 8007224:	f018 0f01 	tst.w	r8, #1
 8007228:	d006      	beq.n	8007238 <_strtod_l+0x538>
 800722a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f9 f951 	bl	80004d8 <__aeabi_dmul>
 8007236:	2301      	movs	r3, #1
 8007238:	3501      	adds	r5, #1
 800723a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800723e:	e7cc      	b.n	80071da <_strtod_l+0x4da>
 8007240:	d0ed      	beq.n	800721e <_strtod_l+0x51e>
 8007242:	f1c8 0800 	rsb	r8, r8, #0
 8007246:	f018 020f 	ands.w	r2, r8, #15
 800724a:	d00a      	beq.n	8007262 <_strtod_l+0x562>
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <_strtod_l+0x5a0>)
 800724e:	4648      	mov	r0, r9
 8007250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007254:	4651      	mov	r1, sl
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 fa67 	bl	800072c <__aeabi_ddiv>
 800725e:	4681      	mov	r9, r0
 8007260:	468a      	mov	sl, r1
 8007262:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007266:	d0da      	beq.n	800721e <_strtod_l+0x51e>
 8007268:	f1b8 0f1f 	cmp.w	r8, #31
 800726c:	dd24      	ble.n	80072b8 <_strtod_l+0x5b8>
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	f8cd 8010 	str.w	r8, [sp, #16]
 8007276:	f8cd 8020 	str.w	r8, [sp, #32]
 800727a:	f8cd 8018 	str.w	r8, [sp, #24]
 800727e:	2322      	movs	r3, #34	; 0x22
 8007280:	f04f 0900 	mov.w	r9, #0
 8007284:	f04f 0a00 	mov.w	sl, #0
 8007288:	f8cb 3000 	str.w	r3, [fp]
 800728c:	e761      	b.n	8007152 <_strtod_l+0x452>
 800728e:	bf00      	nop
 8007290:	0800a411 	.word	0x0800a411
 8007294:	0800a49b 	.word	0x0800a49b
 8007298:	0800a419 	.word	0x0800a419
 800729c:	0800a45c 	.word	0x0800a45c
 80072a0:	0800a540 	.word	0x0800a540
 80072a4:	0800a518 	.word	0x0800a518
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	7ca00000 	.word	0x7ca00000
 80072b0:	fff80000 	.word	0xfff80000
 80072b4:	7fefffff 	.word	0x7fefffff
 80072b8:	f018 0310 	ands.w	r3, r8, #16
 80072bc:	bf18      	it	ne
 80072be:	236a      	movne	r3, #106	; 0x6a
 80072c0:	4648      	mov	r0, r9
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	4651      	mov	r1, sl
 80072c6:	2300      	movs	r3, #0
 80072c8:	4da1      	ldr	r5, [pc, #644]	; (8007550 <_strtod_l+0x850>)
 80072ca:	f1b8 0f00 	cmp.w	r8, #0
 80072ce:	f300 8113 	bgt.w	80074f8 <_strtod_l+0x7f8>
 80072d2:	b10b      	cbz	r3, 80072d8 <_strtod_l+0x5d8>
 80072d4:	4681      	mov	r9, r0
 80072d6:	468a      	mov	sl, r1
 80072d8:	9b05      	ldr	r3, [sp, #20]
 80072da:	b1bb      	cbz	r3, 800730c <_strtod_l+0x60c>
 80072dc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80072e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	4651      	mov	r1, sl
 80072e8:	dd10      	ble.n	800730c <_strtod_l+0x60c>
 80072ea:	2b1f      	cmp	r3, #31
 80072ec:	f340 8110 	ble.w	8007510 <_strtod_l+0x810>
 80072f0:	2b34      	cmp	r3, #52	; 0x34
 80072f2:	bfd8      	it	le
 80072f4:	f04f 32ff 	movle.w	r2, #4294967295
 80072f8:	f04f 0900 	mov.w	r9, #0
 80072fc:	bfcf      	iteee	gt
 80072fe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8007302:	3b20      	suble	r3, #32
 8007304:	fa02 f303 	lslle.w	r3, r2, r3
 8007308:	ea03 0a01 	andle.w	sl, r3, r1
 800730c:	2200      	movs	r2, #0
 800730e:	2300      	movs	r3, #0
 8007310:	4648      	mov	r0, r9
 8007312:	4651      	mov	r1, sl
 8007314:	f7f9 fb48 	bl	80009a8 <__aeabi_dcmpeq>
 8007318:	2800      	cmp	r0, #0
 800731a:	d1a8      	bne.n	800726e <_strtod_l+0x56e>
 800731c:	9b06      	ldr	r3, [sp, #24]
 800731e:	9a04      	ldr	r2, [sp, #16]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	9908      	ldr	r1, [sp, #32]
 8007324:	4623      	mov	r3, r4
 8007326:	4658      	mov	r0, fp
 8007328:	f001 fe7e 	bl	8009028 <__s2b>
 800732c:	9008      	str	r0, [sp, #32]
 800732e:	2800      	cmp	r0, #0
 8007330:	f43f af00 	beq.w	8007134 <_strtod_l+0x434>
 8007334:	9a07      	ldr	r2, [sp, #28]
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	2a00      	cmp	r2, #0
 800733a:	f1c3 0300 	rsb	r3, r3, #0
 800733e:	bfa8      	it	ge
 8007340:	2300      	movge	r3, #0
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	930e      	str	r3, [sp, #56]	; 0x38
 8007348:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800734c:	9316      	str	r3, [sp, #88]	; 0x58
 800734e:	f8cd 8010 	str.w	r8, [sp, #16]
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	4658      	mov	r0, fp
 8007356:	6859      	ldr	r1, [r3, #4]
 8007358:	f001 fde0 	bl	8008f1c <_Balloc>
 800735c:	9006      	str	r0, [sp, #24]
 800735e:	2800      	cmp	r0, #0
 8007360:	f43f aef0 	beq.w	8007144 <_strtod_l+0x444>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	300c      	adds	r0, #12
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	f103 010c 	add.w	r1, r3, #12
 800736e:	3202      	adds	r2, #2
 8007370:	0092      	lsls	r2, r2, #2
 8007372:	f7fe fe25 	bl	8005fc0 <memcpy>
 8007376:	ab1e      	add	r3, sp, #120	; 0x78
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	ab1d      	add	r3, sp, #116	; 0x74
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	464a      	mov	r2, r9
 8007380:	4653      	mov	r3, sl
 8007382:	4658      	mov	r0, fp
 8007384:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007388:	f002 f908 	bl	800959c <__d2b>
 800738c:	901c      	str	r0, [sp, #112]	; 0x70
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aed8 	beq.w	8007144 <_strtod_l+0x444>
 8007394:	2101      	movs	r1, #1
 8007396:	4658      	mov	r0, fp
 8007398:	f001 fed2 	bl	8009140 <__i2b>
 800739c:	9004      	str	r0, [sp, #16]
 800739e:	4603      	mov	r3, r0
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f43f aecf 	beq.w	8007144 <_strtod_l+0x444>
 80073a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80073a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073aa:	2d00      	cmp	r5, #0
 80073ac:	bfab      	itete	ge
 80073ae:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80073b0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80073b2:	18ee      	addge	r6, r5, r3
 80073b4:	1b5c      	sublt	r4, r3, r5
 80073b6:	9b05      	ldr	r3, [sp, #20]
 80073b8:	bfa8      	it	ge
 80073ba:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80073bc:	eba5 0503 	sub.w	r5, r5, r3
 80073c0:	4415      	add	r5, r2
 80073c2:	4b64      	ldr	r3, [pc, #400]	; (8007554 <_strtod_l+0x854>)
 80073c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80073c8:	bfb8      	it	lt
 80073ca:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80073cc:	429d      	cmp	r5, r3
 80073ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073d2:	f280 80af 	bge.w	8007534 <_strtod_l+0x834>
 80073d6:	1b5b      	subs	r3, r3, r5
 80073d8:	2b1f      	cmp	r3, #31
 80073da:	eba2 0203 	sub.w	r2, r2, r3
 80073de:	f04f 0701 	mov.w	r7, #1
 80073e2:	f300 809c 	bgt.w	800751e <_strtod_l+0x81e>
 80073e6:	2500      	movs	r5, #0
 80073e8:	fa07 f303 	lsl.w	r3, r7, r3
 80073ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80073ee:	18b7      	adds	r7, r6, r2
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	42be      	cmp	r6, r7
 80073f4:	4414      	add	r4, r2
 80073f6:	441c      	add	r4, r3
 80073f8:	4633      	mov	r3, r6
 80073fa:	bfa8      	it	ge
 80073fc:	463b      	movge	r3, r7
 80073fe:	42a3      	cmp	r3, r4
 8007400:	bfa8      	it	ge
 8007402:	4623      	movge	r3, r4
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfc2      	ittt	gt
 8007408:	1aff      	subgt	r7, r7, r3
 800740a:	1ae4      	subgt	r4, r4, r3
 800740c:	1af6      	subgt	r6, r6, r3
 800740e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007410:	b1bb      	cbz	r3, 8007442 <_strtod_l+0x742>
 8007412:	461a      	mov	r2, r3
 8007414:	9904      	ldr	r1, [sp, #16]
 8007416:	4658      	mov	r0, fp
 8007418:	f001 ff30 	bl	800927c <__pow5mult>
 800741c:	9004      	str	r0, [sp, #16]
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f ae90 	beq.w	8007144 <_strtod_l+0x444>
 8007424:	4601      	mov	r1, r0
 8007426:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007428:	4658      	mov	r0, fp
 800742a:	f001 fe92 	bl	8009152 <__multiply>
 800742e:	9009      	str	r0, [sp, #36]	; 0x24
 8007430:	2800      	cmp	r0, #0
 8007432:	f43f ae87 	beq.w	8007144 <_strtod_l+0x444>
 8007436:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007438:	4658      	mov	r0, fp
 800743a:	f001 fda3 	bl	8008f84 <_Bfree>
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	931c      	str	r3, [sp, #112]	; 0x70
 8007442:	2f00      	cmp	r7, #0
 8007444:	dc7a      	bgt.n	800753c <_strtod_l+0x83c>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd08      	ble.n	800745e <_strtod_l+0x75e>
 800744c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800744e:	9906      	ldr	r1, [sp, #24]
 8007450:	4658      	mov	r0, fp
 8007452:	f001 ff13 	bl	800927c <__pow5mult>
 8007456:	9006      	str	r0, [sp, #24]
 8007458:	2800      	cmp	r0, #0
 800745a:	f43f ae73 	beq.w	8007144 <_strtod_l+0x444>
 800745e:	2c00      	cmp	r4, #0
 8007460:	dd08      	ble.n	8007474 <_strtod_l+0x774>
 8007462:	4622      	mov	r2, r4
 8007464:	9906      	ldr	r1, [sp, #24]
 8007466:	4658      	mov	r0, fp
 8007468:	f001 ff56 	bl	8009318 <__lshift>
 800746c:	9006      	str	r0, [sp, #24]
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f ae68 	beq.w	8007144 <_strtod_l+0x444>
 8007474:	2e00      	cmp	r6, #0
 8007476:	dd08      	ble.n	800748a <_strtod_l+0x78a>
 8007478:	4632      	mov	r2, r6
 800747a:	9904      	ldr	r1, [sp, #16]
 800747c:	4658      	mov	r0, fp
 800747e:	f001 ff4b 	bl	8009318 <__lshift>
 8007482:	9004      	str	r0, [sp, #16]
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f ae5d 	beq.w	8007144 <_strtod_l+0x444>
 800748a:	9a06      	ldr	r2, [sp, #24]
 800748c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800748e:	4658      	mov	r0, fp
 8007490:	f001 ffb0 	bl	80093f4 <__mdiff>
 8007494:	4680      	mov	r8, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f ae54 	beq.w	8007144 <_strtod_l+0x444>
 800749c:	2400      	movs	r4, #0
 800749e:	68c3      	ldr	r3, [r0, #12]
 80074a0:	9904      	ldr	r1, [sp, #16]
 80074a2:	60c4      	str	r4, [r0, #12]
 80074a4:	930c      	str	r3, [sp, #48]	; 0x30
 80074a6:	f001 ff8b 	bl	80093c0 <__mcmp>
 80074aa:	42a0      	cmp	r0, r4
 80074ac:	da54      	bge.n	8007558 <_strtod_l+0x858>
 80074ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074b0:	b9f3      	cbnz	r3, 80074f0 <_strtod_l+0x7f0>
 80074b2:	f1b9 0f00 	cmp.w	r9, #0
 80074b6:	d11b      	bne.n	80074f0 <_strtod_l+0x7f0>
 80074b8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80074bc:	b9c3      	cbnz	r3, 80074f0 <_strtod_l+0x7f0>
 80074be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074c2:	0d1b      	lsrs	r3, r3, #20
 80074c4:	051b      	lsls	r3, r3, #20
 80074c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ca:	d911      	bls.n	80074f0 <_strtod_l+0x7f0>
 80074cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80074d0:	b91b      	cbnz	r3, 80074da <_strtod_l+0x7da>
 80074d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	dd0a      	ble.n	80074f0 <_strtod_l+0x7f0>
 80074da:	4641      	mov	r1, r8
 80074dc:	2201      	movs	r2, #1
 80074de:	4658      	mov	r0, fp
 80074e0:	f001 ff1a 	bl	8009318 <__lshift>
 80074e4:	9904      	ldr	r1, [sp, #16]
 80074e6:	4680      	mov	r8, r0
 80074e8:	f001 ff6a 	bl	80093c0 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dc68      	bgt.n	80075c2 <_strtod_l+0x8c2>
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d172      	bne.n	80075dc <_strtod_l+0x8dc>
 80074f6:	e630      	b.n	800715a <_strtod_l+0x45a>
 80074f8:	f018 0f01 	tst.w	r8, #1
 80074fc:	d004      	beq.n	8007508 <_strtod_l+0x808>
 80074fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007502:	f7f8 ffe9 	bl	80004d8 <__aeabi_dmul>
 8007506:	2301      	movs	r3, #1
 8007508:	ea4f 0868 	mov.w	r8, r8, asr #1
 800750c:	3508      	adds	r5, #8
 800750e:	e6dc      	b.n	80072ca <_strtod_l+0x5ca>
 8007510:	f04f 32ff 	mov.w	r2, #4294967295
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	ea03 0909 	and.w	r9, r3, r9
 800751c:	e6f6      	b.n	800730c <_strtod_l+0x60c>
 800751e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007522:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007526:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800752a:	35e2      	adds	r5, #226	; 0xe2
 800752c:	fa07 f505 	lsl.w	r5, r7, r5
 8007530:	970f      	str	r7, [sp, #60]	; 0x3c
 8007532:	e75c      	b.n	80073ee <_strtod_l+0x6ee>
 8007534:	2301      	movs	r3, #1
 8007536:	2500      	movs	r5, #0
 8007538:	930f      	str	r3, [sp, #60]	; 0x3c
 800753a:	e758      	b.n	80073ee <_strtod_l+0x6ee>
 800753c:	463a      	mov	r2, r7
 800753e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007540:	4658      	mov	r0, fp
 8007542:	f001 fee9 	bl	8009318 <__lshift>
 8007546:	901c      	str	r0, [sp, #112]	; 0x70
 8007548:	2800      	cmp	r0, #0
 800754a:	f47f af7c 	bne.w	8007446 <_strtod_l+0x746>
 800754e:	e5f9      	b.n	8007144 <_strtod_l+0x444>
 8007550:	0800a470 	.word	0x0800a470
 8007554:	fffffc02 	.word	0xfffffc02
 8007558:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800755c:	f040 8089 	bne.w	8007672 <_strtod_l+0x972>
 8007560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007562:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007566:	b342      	cbz	r2, 80075ba <_strtod_l+0x8ba>
 8007568:	4aaf      	ldr	r2, [pc, #700]	; (8007828 <_strtod_l+0xb28>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d156      	bne.n	800761c <_strtod_l+0x91c>
 800756e:	9b05      	ldr	r3, [sp, #20]
 8007570:	4648      	mov	r0, r9
 8007572:	b1eb      	cbz	r3, 80075b0 <_strtod_l+0x8b0>
 8007574:	4653      	mov	r3, sl
 8007576:	4aad      	ldr	r2, [pc, #692]	; (800782c <_strtod_l+0xb2c>)
 8007578:	f04f 31ff 	mov.w	r1, #4294967295
 800757c:	401a      	ands	r2, r3
 800757e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007582:	d818      	bhi.n	80075b6 <_strtod_l+0x8b6>
 8007584:	0d12      	lsrs	r2, r2, #20
 8007586:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800758a:	fa01 f303 	lsl.w	r3, r1, r3
 800758e:	4298      	cmp	r0, r3
 8007590:	d144      	bne.n	800761c <_strtod_l+0x91c>
 8007592:	4ba7      	ldr	r3, [pc, #668]	; (8007830 <_strtod_l+0xb30>)
 8007594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007596:	429a      	cmp	r2, r3
 8007598:	d102      	bne.n	80075a0 <_strtod_l+0x8a0>
 800759a:	3001      	adds	r0, #1
 800759c:	f43f add2 	beq.w	8007144 <_strtod_l+0x444>
 80075a0:	4ba2      	ldr	r3, [pc, #648]	; (800782c <_strtod_l+0xb2c>)
 80075a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a4:	f04f 0900 	mov.w	r9, #0
 80075a8:	401a      	ands	r2, r3
 80075aa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80075ae:	e79f      	b.n	80074f0 <_strtod_l+0x7f0>
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	e7eb      	b.n	800758e <_strtod_l+0x88e>
 80075b6:	460b      	mov	r3, r1
 80075b8:	e7e9      	b.n	800758e <_strtod_l+0x88e>
 80075ba:	bb7b      	cbnz	r3, 800761c <_strtod_l+0x91c>
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	d12c      	bne.n	800761c <_strtod_l+0x91c>
 80075c2:	9905      	ldr	r1, [sp, #20]
 80075c4:	4653      	mov	r3, sl
 80075c6:	4a99      	ldr	r2, [pc, #612]	; (800782c <_strtod_l+0xb2c>)
 80075c8:	b1f1      	cbz	r1, 8007608 <_strtod_l+0x908>
 80075ca:	ea02 010a 	and.w	r1, r2, sl
 80075ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075d2:	dc19      	bgt.n	8007608 <_strtod_l+0x908>
 80075d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075d8:	f77f ae51 	ble.w	800727e <_strtod_l+0x57e>
 80075dc:	2300      	movs	r3, #0
 80075de:	4a95      	ldr	r2, [pc, #596]	; (8007834 <_strtod_l+0xb34>)
 80075e0:	4648      	mov	r0, r9
 80075e2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80075e6:	4651      	mov	r1, sl
 80075e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	4681      	mov	r9, r0
 80075f2:	468a      	mov	sl, r1
 80075f4:	2900      	cmp	r1, #0
 80075f6:	f47f adb0 	bne.w	800715a <_strtod_l+0x45a>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f47f adad 	bne.w	800715a <_strtod_l+0x45a>
 8007600:	2322      	movs	r3, #34	; 0x22
 8007602:	f8cb 3000 	str.w	r3, [fp]
 8007606:	e5a8      	b.n	800715a <_strtod_l+0x45a>
 8007608:	4013      	ands	r3, r2
 800760a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800760e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007612:	f04f 39ff 	mov.w	r9, #4294967295
 8007616:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800761a:	e769      	b.n	80074f0 <_strtod_l+0x7f0>
 800761c:	b19d      	cbz	r5, 8007646 <_strtod_l+0x946>
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	421d      	tst	r5, r3
 8007622:	f43f af65 	beq.w	80074f0 <_strtod_l+0x7f0>
 8007626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007628:	9a05      	ldr	r2, [sp, #20]
 800762a:	4648      	mov	r0, r9
 800762c:	4651      	mov	r1, sl
 800762e:	b173      	cbz	r3, 800764e <_strtod_l+0x94e>
 8007630:	f7ff fb44 	bl	8006cbc <sulp>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800763c:	f7f8 fd96 	bl	800016c <__adddf3>
 8007640:	4681      	mov	r9, r0
 8007642:	468a      	mov	sl, r1
 8007644:	e754      	b.n	80074f0 <_strtod_l+0x7f0>
 8007646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007648:	ea13 0f09 	tst.w	r3, r9
 800764c:	e7e9      	b.n	8007622 <_strtod_l+0x922>
 800764e:	f7ff fb35 	bl	8006cbc <sulp>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800765a:	f7f8 fd85 	bl	8000168 <__aeabi_dsub>
 800765e:	2200      	movs	r2, #0
 8007660:	2300      	movs	r3, #0
 8007662:	4681      	mov	r9, r0
 8007664:	468a      	mov	sl, r1
 8007666:	f7f9 f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800766a:	2800      	cmp	r0, #0
 800766c:	f47f ae07 	bne.w	800727e <_strtod_l+0x57e>
 8007670:	e73e      	b.n	80074f0 <_strtod_l+0x7f0>
 8007672:	9904      	ldr	r1, [sp, #16]
 8007674:	4640      	mov	r0, r8
 8007676:	f001 ffe0 	bl	800963a <__ratio>
 800767a:	2200      	movs	r2, #0
 800767c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	f7f9 f9a4 	bl	80009d0 <__aeabi_dcmple>
 8007688:	2800      	cmp	r0, #0
 800768a:	d075      	beq.n	8007778 <_strtod_l+0xa78>
 800768c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800768e:	2b00      	cmp	r3, #0
 8007690:	d047      	beq.n	8007722 <_strtod_l+0xa22>
 8007692:	2600      	movs	r6, #0
 8007694:	4f68      	ldr	r7, [pc, #416]	; (8007838 <_strtod_l+0xb38>)
 8007696:	4d68      	ldr	r5, [pc, #416]	; (8007838 <_strtod_l+0xb38>)
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800769e:	0d1b      	lsrs	r3, r3, #20
 80076a0:	051b      	lsls	r3, r3, #20
 80076a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076a6:	4b65      	ldr	r3, [pc, #404]	; (800783c <_strtod_l+0xb3c>)
 80076a8:	429a      	cmp	r2, r3
 80076aa:	f040 80cf 	bne.w	800784c <_strtod_l+0xb4c>
 80076ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	4648      	mov	r0, r9
 80076ba:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80076be:	4651      	mov	r1, sl
 80076c0:	f001 fef6 	bl	80094b0 <__ulp>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f8 ff04 	bl	80004d8 <__aeabi_dmul>
 80076d0:	464a      	mov	r2, r9
 80076d2:	4653      	mov	r3, sl
 80076d4:	f7f8 fd4a 	bl	800016c <__adddf3>
 80076d8:	460b      	mov	r3, r1
 80076da:	4954      	ldr	r1, [pc, #336]	; (800782c <_strtod_l+0xb2c>)
 80076dc:	4a58      	ldr	r2, [pc, #352]	; (8007840 <_strtod_l+0xb40>)
 80076de:	4019      	ands	r1, r3
 80076e0:	4291      	cmp	r1, r2
 80076e2:	4681      	mov	r9, r0
 80076e4:	d95e      	bls.n	80077a4 <_strtod_l+0xaa4>
 80076e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d103      	bne.n	80076f8 <_strtod_l+0x9f8>
 80076f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f2:	3301      	adds	r3, #1
 80076f4:	f43f ad26 	beq.w	8007144 <_strtod_l+0x444>
 80076f8:	f04f 39ff 	mov.w	r9, #4294967295
 80076fc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007830 <_strtod_l+0xb30>
 8007700:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007702:	4658      	mov	r0, fp
 8007704:	f001 fc3e 	bl	8008f84 <_Bfree>
 8007708:	9906      	ldr	r1, [sp, #24]
 800770a:	4658      	mov	r0, fp
 800770c:	f001 fc3a 	bl	8008f84 <_Bfree>
 8007710:	9904      	ldr	r1, [sp, #16]
 8007712:	4658      	mov	r0, fp
 8007714:	f001 fc36 	bl	8008f84 <_Bfree>
 8007718:	4641      	mov	r1, r8
 800771a:	4658      	mov	r0, fp
 800771c:	f001 fc32 	bl	8008f84 <_Bfree>
 8007720:	e617      	b.n	8007352 <_strtod_l+0x652>
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	d119      	bne.n	800775c <_strtod_l+0xa5c>
 8007728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800772e:	b9e3      	cbnz	r3, 800776a <_strtod_l+0xa6a>
 8007730:	2200      	movs	r2, #0
 8007732:	4b41      	ldr	r3, [pc, #260]	; (8007838 <_strtod_l+0xb38>)
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 f940 	bl	80009bc <__aeabi_dcmplt>
 800773c:	b9c8      	cbnz	r0, 8007772 <_strtod_l+0xa72>
 800773e:	2200      	movs	r2, #0
 8007740:	4b40      	ldr	r3, [pc, #256]	; (8007844 <_strtod_l+0xb44>)
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f8 fec7 	bl	80004d8 <__aeabi_dmul>
 800774a:	4604      	mov	r4, r0
 800774c:	460d      	mov	r5, r1
 800774e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007752:	9418      	str	r4, [sp, #96]	; 0x60
 8007754:	9319      	str	r3, [sp, #100]	; 0x64
 8007756:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800775a:	e79d      	b.n	8007698 <_strtod_l+0x998>
 800775c:	f1b9 0f01 	cmp.w	r9, #1
 8007760:	d103      	bne.n	800776a <_strtod_l+0xa6a>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	f43f ad8a 	beq.w	800727e <_strtod_l+0x57e>
 800776a:	2600      	movs	r6, #0
 800776c:	4f36      	ldr	r7, [pc, #216]	; (8007848 <_strtod_l+0xb48>)
 800776e:	2400      	movs	r4, #0
 8007770:	e791      	b.n	8007696 <_strtod_l+0x996>
 8007772:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007774:	4d33      	ldr	r5, [pc, #204]	; (8007844 <_strtod_l+0xb44>)
 8007776:	e7ea      	b.n	800774e <_strtod_l+0xa4e>
 8007778:	4b32      	ldr	r3, [pc, #200]	; (8007844 <_strtod_l+0xb44>)
 800777a:	2200      	movs	r2, #0
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f8 feaa 	bl	80004d8 <__aeabi_dmul>
 8007784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
 800778a:	b933      	cbnz	r3, 800779a <_strtod_l+0xa9a>
 800778c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007790:	9010      	str	r0, [sp, #64]	; 0x40
 8007792:	9311      	str	r3, [sp, #68]	; 0x44
 8007794:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007798:	e77e      	b.n	8007698 <_strtod_l+0x998>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80077a2:	e7f7      	b.n	8007794 <_strtod_l+0xa94>
 80077a4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80077a8:	9b05      	ldr	r3, [sp, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1a8      	bne.n	8007700 <_strtod_l+0xa00>
 80077ae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077b6:	051b      	lsls	r3, r3, #20
 80077b8:	429a      	cmp	r2, r3
 80077ba:	4656      	mov	r6, sl
 80077bc:	d1a0      	bne.n	8007700 <_strtod_l+0xa00>
 80077be:	4629      	mov	r1, r5
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7f9 f939 	bl	8000a38 <__aeabi_d2iz>
 80077c6:	f7f8 fe1d 	bl	8000404 <__aeabi_i2d>
 80077ca:	460b      	mov	r3, r1
 80077cc:	4602      	mov	r2, r0
 80077ce:	4629      	mov	r1, r5
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7f8 fcc9 	bl	8000168 <__aeabi_dsub>
 80077d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	b933      	cbnz	r3, 80077ec <_strtod_l+0xaec>
 80077de:	f1b9 0f00 	cmp.w	r9, #0
 80077e2:	d103      	bne.n	80077ec <_strtod_l+0xaec>
 80077e4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	d06a      	beq.n	80078c2 <_strtod_l+0xbc2>
 80077ec:	a30a      	add	r3, pc, #40	; (adr r3, 8007818 <_strtod_l+0xb18>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f8e1 	bl	80009bc <__aeabi_dcmplt>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f47f acad 	bne.w	800715a <_strtod_l+0x45a>
 8007800:	a307      	add	r3, pc, #28	; (adr r3, 8007820 <_strtod_l+0xb20>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f9 f8f5 	bl	80009f8 <__aeabi_dcmpgt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f af76 	beq.w	8007700 <_strtod_l+0xa00>
 8007814:	e4a1      	b.n	800715a <_strtod_l+0x45a>
 8007816:	bf00      	nop
 8007818:	94a03595 	.word	0x94a03595
 800781c:	3fdfffff 	.word	0x3fdfffff
 8007820:	35afe535 	.word	0x35afe535
 8007824:	3fe00000 	.word	0x3fe00000
 8007828:	000fffff 	.word	0x000fffff
 800782c:	7ff00000 	.word	0x7ff00000
 8007830:	7fefffff 	.word	0x7fefffff
 8007834:	39500000 	.word	0x39500000
 8007838:	3ff00000 	.word	0x3ff00000
 800783c:	7fe00000 	.word	0x7fe00000
 8007840:	7c9fffff 	.word	0x7c9fffff
 8007844:	3fe00000 	.word	0x3fe00000
 8007848:	bff00000 	.word	0xbff00000
 800784c:	9b05      	ldr	r3, [sp, #20]
 800784e:	b313      	cbz	r3, 8007896 <_strtod_l+0xb96>
 8007850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007852:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007856:	d81e      	bhi.n	8007896 <_strtod_l+0xb96>
 8007858:	a325      	add	r3, pc, #148	; (adr r3, 80078f0 <_strtod_l+0xbf0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 f8b5 	bl	80009d0 <__aeabi_dcmple>
 8007866:	b190      	cbz	r0, 800788e <_strtod_l+0xb8e>
 8007868:	4629      	mov	r1, r5
 800786a:	4620      	mov	r0, r4
 800786c:	f7f9 f90c 	bl	8000a88 <__aeabi_d2uiz>
 8007870:	2800      	cmp	r0, #0
 8007872:	bf08      	it	eq
 8007874:	2001      	moveq	r0, #1
 8007876:	f7f8 fdb5 	bl	80003e4 <__aeabi_ui2d>
 800787a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	b9d3      	cbnz	r3, 80078b8 <_strtod_l+0xbb8>
 8007882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007886:	9012      	str	r0, [sp, #72]	; 0x48
 8007888:	9313      	str	r3, [sp, #76]	; 0x4c
 800788a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800788e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007890:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007894:	1a9f      	subs	r7, r3, r2
 8007896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800789a:	f001 fe09 	bl	80094b0 <__ulp>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4630      	mov	r0, r6
 80078a4:	4639      	mov	r1, r7
 80078a6:	f7f8 fe17 	bl	80004d8 <__aeabi_dmul>
 80078aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078ae:	f7f8 fc5d 	bl	800016c <__adddf3>
 80078b2:	4681      	mov	r9, r0
 80078b4:	468a      	mov	sl, r1
 80078b6:	e777      	b.n	80077a8 <_strtod_l+0xaa8>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80078c0:	e7e3      	b.n	800788a <_strtod_l+0xb8a>
 80078c2:	a30d      	add	r3, pc, #52	; (adr r3, 80078f8 <_strtod_l+0xbf8>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f9 f878 	bl	80009bc <__aeabi_dcmplt>
 80078cc:	e79f      	b.n	800780e <_strtod_l+0xb0e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	930d      	str	r3, [sp, #52]	; 0x34
 80078d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	f7ff ba55 	b.w	8006d86 <_strtod_l+0x86>
 80078dc:	2b65      	cmp	r3, #101	; 0x65
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f43f ab42 	beq.w	8006f6a <_strtod_l+0x26a>
 80078e6:	2101      	movs	r1, #1
 80078e8:	4614      	mov	r4, r2
 80078ea:	9105      	str	r1, [sp, #20]
 80078ec:	f7ff babf 	b.w	8006e6e <_strtod_l+0x16e>
 80078f0:	ffc00000 	.word	0xffc00000
 80078f4:	41dfffff 	.word	0x41dfffff
 80078f8:	94a03595 	.word	0x94a03595
 80078fc:	3fcfffff 	.word	0x3fcfffff

08007900 <_strtod_r>:
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <_strtod_r+0x18>)
 8007902:	b410      	push	{r4}
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4c05      	ldr	r4, [pc, #20]	; (800791c <_strtod_r+0x1c>)
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bf08      	it	eq
 800790e:	4623      	moveq	r3, r4
 8007910:	bc10      	pop	{r4}
 8007912:	f7ff b9f5 	b.w	8006d00 <_strtod_l>
 8007916:	bf00      	nop
 8007918:	20000010 	.word	0x20000010
 800791c:	20000074 	.word	0x20000074

08007920 <_strtol_l.isra.0>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4680      	mov	r8, r0
 8007926:	4689      	mov	r9, r1
 8007928:	4692      	mov	sl, r2
 800792a:	461e      	mov	r6, r3
 800792c:	460f      	mov	r7, r1
 800792e:	463d      	mov	r5, r7
 8007930:	9808      	ldr	r0, [sp, #32]
 8007932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007936:	f001 fab5 	bl	8008ea4 <__locale_ctype_ptr_l>
 800793a:	4420      	add	r0, r4
 800793c:	7843      	ldrb	r3, [r0, #1]
 800793e:	f013 0308 	ands.w	r3, r3, #8
 8007942:	d132      	bne.n	80079aa <_strtol_l.isra.0+0x8a>
 8007944:	2c2d      	cmp	r4, #45	; 0x2d
 8007946:	d132      	bne.n	80079ae <_strtol_l.isra.0+0x8e>
 8007948:	2201      	movs	r2, #1
 800794a:	787c      	ldrb	r4, [r7, #1]
 800794c:	1cbd      	adds	r5, r7, #2
 800794e:	2e00      	cmp	r6, #0
 8007950:	d05d      	beq.n	8007a0e <_strtol_l.isra.0+0xee>
 8007952:	2e10      	cmp	r6, #16
 8007954:	d109      	bne.n	800796a <_strtol_l.isra.0+0x4a>
 8007956:	2c30      	cmp	r4, #48	; 0x30
 8007958:	d107      	bne.n	800796a <_strtol_l.isra.0+0x4a>
 800795a:	782b      	ldrb	r3, [r5, #0]
 800795c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007960:	2b58      	cmp	r3, #88	; 0x58
 8007962:	d14f      	bne.n	8007a04 <_strtol_l.isra.0+0xe4>
 8007964:	2610      	movs	r6, #16
 8007966:	786c      	ldrb	r4, [r5, #1]
 8007968:	3502      	adds	r5, #2
 800796a:	2a00      	cmp	r2, #0
 800796c:	bf14      	ite	ne
 800796e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007972:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007976:	2700      	movs	r7, #0
 8007978:	fbb1 fcf6 	udiv	ip, r1, r6
 800797c:	4638      	mov	r0, r7
 800797e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007982:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007986:	2b09      	cmp	r3, #9
 8007988:	d817      	bhi.n	80079ba <_strtol_l.isra.0+0x9a>
 800798a:	461c      	mov	r4, r3
 800798c:	42a6      	cmp	r6, r4
 800798e:	dd23      	ble.n	80079d8 <_strtol_l.isra.0+0xb8>
 8007990:	1c7b      	adds	r3, r7, #1
 8007992:	d007      	beq.n	80079a4 <_strtol_l.isra.0+0x84>
 8007994:	4584      	cmp	ip, r0
 8007996:	d31c      	bcc.n	80079d2 <_strtol_l.isra.0+0xb2>
 8007998:	d101      	bne.n	800799e <_strtol_l.isra.0+0x7e>
 800799a:	45a6      	cmp	lr, r4
 800799c:	db19      	blt.n	80079d2 <_strtol_l.isra.0+0xb2>
 800799e:	2701      	movs	r7, #1
 80079a0:	fb00 4006 	mla	r0, r0, r6, r4
 80079a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a8:	e7eb      	b.n	8007982 <_strtol_l.isra.0+0x62>
 80079aa:	462f      	mov	r7, r5
 80079ac:	e7bf      	b.n	800792e <_strtol_l.isra.0+0xe>
 80079ae:	2c2b      	cmp	r4, #43	; 0x2b
 80079b0:	bf04      	itt	eq
 80079b2:	1cbd      	addeq	r5, r7, #2
 80079b4:	787c      	ldrbeq	r4, [r7, #1]
 80079b6:	461a      	mov	r2, r3
 80079b8:	e7c9      	b.n	800794e <_strtol_l.isra.0+0x2e>
 80079ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80079be:	2b19      	cmp	r3, #25
 80079c0:	d801      	bhi.n	80079c6 <_strtol_l.isra.0+0xa6>
 80079c2:	3c37      	subs	r4, #55	; 0x37
 80079c4:	e7e2      	b.n	800798c <_strtol_l.isra.0+0x6c>
 80079c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80079ca:	2b19      	cmp	r3, #25
 80079cc:	d804      	bhi.n	80079d8 <_strtol_l.isra.0+0xb8>
 80079ce:	3c57      	subs	r4, #87	; 0x57
 80079d0:	e7dc      	b.n	800798c <_strtol_l.isra.0+0x6c>
 80079d2:	f04f 37ff 	mov.w	r7, #4294967295
 80079d6:	e7e5      	b.n	80079a4 <_strtol_l.isra.0+0x84>
 80079d8:	1c7b      	adds	r3, r7, #1
 80079da:	d108      	bne.n	80079ee <_strtol_l.isra.0+0xce>
 80079dc:	2322      	movs	r3, #34	; 0x22
 80079de:	4608      	mov	r0, r1
 80079e0:	f8c8 3000 	str.w	r3, [r8]
 80079e4:	f1ba 0f00 	cmp.w	sl, #0
 80079e8:	d107      	bne.n	80079fa <_strtol_l.isra.0+0xda>
 80079ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ee:	b102      	cbz	r2, 80079f2 <_strtol_l.isra.0+0xd2>
 80079f0:	4240      	negs	r0, r0
 80079f2:	f1ba 0f00 	cmp.w	sl, #0
 80079f6:	d0f8      	beq.n	80079ea <_strtol_l.isra.0+0xca>
 80079f8:	b10f      	cbz	r7, 80079fe <_strtol_l.isra.0+0xde>
 80079fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80079fe:	f8ca 9000 	str.w	r9, [sl]
 8007a02:	e7f2      	b.n	80079ea <_strtol_l.isra.0+0xca>
 8007a04:	2430      	movs	r4, #48	; 0x30
 8007a06:	2e00      	cmp	r6, #0
 8007a08:	d1af      	bne.n	800796a <_strtol_l.isra.0+0x4a>
 8007a0a:	2608      	movs	r6, #8
 8007a0c:	e7ad      	b.n	800796a <_strtol_l.isra.0+0x4a>
 8007a0e:	2c30      	cmp	r4, #48	; 0x30
 8007a10:	d0a3      	beq.n	800795a <_strtol_l.isra.0+0x3a>
 8007a12:	260a      	movs	r6, #10
 8007a14:	e7a9      	b.n	800796a <_strtol_l.isra.0+0x4a>
	...

08007a18 <_strtol_r>:
 8007a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a1a:	4c06      	ldr	r4, [pc, #24]	; (8007a34 <_strtol_r+0x1c>)
 8007a1c:	4d06      	ldr	r5, [pc, #24]	; (8007a38 <_strtol_r+0x20>)
 8007a1e:	6824      	ldr	r4, [r4, #0]
 8007a20:	6a24      	ldr	r4, [r4, #32]
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	bf08      	it	eq
 8007a26:	462c      	moveq	r4, r5
 8007a28:	9400      	str	r4, [sp, #0]
 8007a2a:	f7ff ff79 	bl	8007920 <_strtol_l.isra.0>
 8007a2e:	b003      	add	sp, #12
 8007a30:	bd30      	pop	{r4, r5, pc}
 8007a32:	bf00      	nop
 8007a34:	20000010 	.word	0x20000010
 8007a38:	20000074 	.word	0x20000074

08007a3c <quorem>:
 8007a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	6903      	ldr	r3, [r0, #16]
 8007a42:	690c      	ldr	r4, [r1, #16]
 8007a44:	4680      	mov	r8, r0
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	f2c0 8084 	blt.w	8007b54 <quorem+0x118>
 8007a4c:	3c01      	subs	r4, #1
 8007a4e:	f101 0714 	add.w	r7, r1, #20
 8007a52:	f100 0614 	add.w	r6, r0, #20
 8007a56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007a5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007a5e:	3501      	adds	r5, #1
 8007a60:	fbb0 f5f5 	udiv	r5, r0, r5
 8007a64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007a68:	eb06 030c 	add.w	r3, r6, ip
 8007a6c:	eb07 090c 	add.w	r9, r7, ip
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	b39d      	cbz	r5, 8007adc <quorem+0xa0>
 8007a74:	f04f 0a00 	mov.w	sl, #0
 8007a78:	4638      	mov	r0, r7
 8007a7a:	46b6      	mov	lr, r6
 8007a7c:	46d3      	mov	fp, sl
 8007a7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a82:	b293      	uxth	r3, r2
 8007a84:	fb05 a303 	mla	r3, r5, r3, sl
 8007a88:	0c12      	lsrs	r2, r2, #16
 8007a8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a8e:	fb05 a202 	mla	r2, r5, r2, sl
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	ebab 0303 	sub.w	r3, fp, r3
 8007a98:	f8de b000 	ldr.w	fp, [lr]
 8007a9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007aa0:	fa1f fb8b 	uxth.w	fp, fp
 8007aa4:	445b      	add	r3, fp
 8007aa6:	fa1f fb82 	uxth.w	fp, r2
 8007aaa:	f8de 2000 	ldr.w	r2, [lr]
 8007aae:	4581      	cmp	r9, r0
 8007ab0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007abe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ac2:	f84e 3b04 	str.w	r3, [lr], #4
 8007ac6:	d2da      	bcs.n	8007a7e <quorem+0x42>
 8007ac8:	f856 300c 	ldr.w	r3, [r6, ip]
 8007acc:	b933      	cbnz	r3, 8007adc <quorem+0xa0>
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	d331      	bcc.n	8007b3c <quorem+0x100>
 8007ad8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007adc:	4640      	mov	r0, r8
 8007ade:	f001 fc6f 	bl	80093c0 <__mcmp>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	db26      	blt.n	8007b34 <quorem+0xf8>
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f04f 0c00 	mov.w	ip, #0
 8007aec:	3501      	adds	r5, #1
 8007aee:	f857 1b04 	ldr.w	r1, [r7], #4
 8007af2:	f8d0 e000 	ldr.w	lr, [r0]
 8007af6:	b28b      	uxth	r3, r1
 8007af8:	ebac 0303 	sub.w	r3, ip, r3
 8007afc:	fa1f f28e 	uxth.w	r2, lr
 8007b00:	4413      	add	r3, r2
 8007b02:	0c0a      	lsrs	r2, r1, #16
 8007b04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b12:	45b9      	cmp	r9, r7
 8007b14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b18:	f840 3b04 	str.w	r3, [r0], #4
 8007b1c:	d2e7      	bcs.n	8007aee <quorem+0xb2>
 8007b1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007b22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007b26:	b92a      	cbnz	r2, 8007b34 <quorem+0xf8>
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	d30b      	bcc.n	8007b48 <quorem+0x10c>
 8007b30:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b34:	4628      	mov	r0, r5
 8007b36:	b003      	add	sp, #12
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	3b04      	subs	r3, #4
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	d1c9      	bne.n	8007ad8 <quorem+0x9c>
 8007b44:	3c01      	subs	r4, #1
 8007b46:	e7c4      	b.n	8007ad2 <quorem+0x96>
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	d1ef      	bne.n	8007b30 <quorem+0xf4>
 8007b50:	3c01      	subs	r4, #1
 8007b52:	e7ea      	b.n	8007b2a <quorem+0xee>
 8007b54:	2000      	movs	r0, #0
 8007b56:	e7ee      	b.n	8007b36 <quorem+0xfa>

08007b58 <_dtoa_r>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	461f      	mov	r7, r3
 8007b60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b62:	b095      	sub	sp, #84	; 0x54
 8007b64:	4604      	mov	r4, r0
 8007b66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007b6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b6e:	b93d      	cbnz	r5, 8007b80 <_dtoa_r+0x28>
 8007b70:	2010      	movs	r0, #16
 8007b72:	f001 f9ab 	bl	8008ecc <malloc>
 8007b76:	6260      	str	r0, [r4, #36]	; 0x24
 8007b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b7c:	6005      	str	r5, [r0, #0]
 8007b7e:	60c5      	str	r5, [r0, #12]
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	b151      	cbz	r1, 8007b9c <_dtoa_r+0x44>
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	4093      	lsls	r3, r2
 8007b8c:	604a      	str	r2, [r1, #4]
 8007b8e:	608b      	str	r3, [r1, #8]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 f9f7 	bl	8008f84 <_Bfree>
 8007b96:	2200      	movs	r2, #0
 8007b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	1e3b      	subs	r3, r7, #0
 8007b9e:	bfaf      	iteee	ge
 8007ba0:	2300      	movge	r3, #0
 8007ba2:	2201      	movlt	r2, #1
 8007ba4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ba8:	9303      	strlt	r3, [sp, #12]
 8007baa:	bfac      	ite	ge
 8007bac:	f8c8 3000 	strge.w	r3, [r8]
 8007bb0:	f8c8 2000 	strlt.w	r2, [r8]
 8007bb4:	4bae      	ldr	r3, [pc, #696]	; (8007e70 <_dtoa_r+0x318>)
 8007bb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007bba:	ea33 0308 	bics.w	r3, r3, r8
 8007bbe:	d11b      	bne.n	8007bf8 <_dtoa_r+0xa0>
 8007bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	b923      	cbnz	r3, 8007bd6 <_dtoa_r+0x7e>
 8007bcc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f000 8545 	beq.w	8008660 <_dtoa_r+0xb08>
 8007bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bd8:	b953      	cbnz	r3, 8007bf0 <_dtoa_r+0x98>
 8007bda:	4ba6      	ldr	r3, [pc, #664]	; (8007e74 <_dtoa_r+0x31c>)
 8007bdc:	e021      	b.n	8007c22 <_dtoa_r+0xca>
 8007bde:	4ba6      	ldr	r3, [pc, #664]	; (8007e78 <_dtoa_r+0x320>)
 8007be0:	9306      	str	r3, [sp, #24]
 8007be2:	3308      	adds	r3, #8
 8007be4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	9806      	ldr	r0, [sp, #24]
 8007bea:	b015      	add	sp, #84	; 0x54
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	4ba0      	ldr	r3, [pc, #640]	; (8007e74 <_dtoa_r+0x31c>)
 8007bf2:	9306      	str	r3, [sp, #24]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	e7f5      	b.n	8007be4 <_dtoa_r+0x8c>
 8007bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8007c08:	4682      	mov	sl, r0
 8007c0a:	b160      	cbz	r0, 8007c26 <_dtoa_r+0xce>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8520 	beq.w	800865a <_dtoa_r+0xb02>
 8007c1a:	4b98      	ldr	r3, [pc, #608]	; (8007e7c <_dtoa_r+0x324>)
 8007c1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	9306      	str	r3, [sp, #24]
 8007c24:	e7e0      	b.n	8007be8 <_dtoa_r+0x90>
 8007c26:	ab12      	add	r3, sp, #72	; 0x48
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	ab13      	add	r3, sp, #76	; 0x4c
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	4632      	mov	r2, r6
 8007c30:	463b      	mov	r3, r7
 8007c32:	4620      	mov	r0, r4
 8007c34:	f001 fcb2 	bl	800959c <__d2b>
 8007c38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	d07d      	beq.n	8007d3e <_dtoa_r+0x1e6>
 8007c42:	46b0      	mov	r8, r6
 8007c44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c48:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007c4c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007c50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b89      	ldr	r3, [pc, #548]	; (8007e80 <_dtoa_r+0x328>)
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 fa82 	bl	8000168 <__aeabi_dsub>
 8007c64:	a37c      	add	r3, pc, #496	; (adr r3, 8007e58 <_dtoa_r+0x300>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fc35 	bl	80004d8 <__aeabi_dmul>
 8007c6e:	a37c      	add	r3, pc, #496	; (adr r3, 8007e60 <_dtoa_r+0x308>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fa7a 	bl	800016c <__adddf3>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	f7f8 fbc1 	bl	8000404 <__aeabi_i2d>
 8007c82:	a379      	add	r3, pc, #484	; (adr r3, 8007e68 <_dtoa_r+0x310>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fc26 	bl	80004d8 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 fa6a 	bl	800016c <__adddf3>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	460f      	mov	r7, r1
 8007c9c:	f7f8 fecc 	bl	8000a38 <__aeabi_d2iz>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4682      	mov	sl, r0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fe87 	bl	80009bc <__aeabi_dcmplt>
 8007cae:	b148      	cbz	r0, 8007cc4 <_dtoa_r+0x16c>
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	f7f8 fba7 	bl	8000404 <__aeabi_i2d>
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	463b      	mov	r3, r7
 8007cba:	f7f8 fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8007cbe:	b908      	cbnz	r0, 8007cc4 <_dtoa_r+0x16c>
 8007cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cc4:	f1ba 0f16 	cmp.w	sl, #22
 8007cc8:	d85a      	bhi.n	8007d80 <_dtoa_r+0x228>
 8007cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cce:	496d      	ldr	r1, [pc, #436]	; (8007e84 <_dtoa_r+0x32c>)
 8007cd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd8:	f7f8 fe8e 	bl	80009f8 <__aeabi_dcmpgt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d051      	beq.n	8007d84 <_dtoa_r+0x22c>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cea:	1b5d      	subs	r5, r3, r5
 8007cec:	1e6b      	subs	r3, r5, #1
 8007cee:	9307      	str	r3, [sp, #28]
 8007cf0:	bf43      	ittte	mi
 8007cf2:	2300      	movmi	r3, #0
 8007cf4:	f1c5 0901 	rsbmi	r9, r5, #1
 8007cf8:	9307      	strmi	r3, [sp, #28]
 8007cfa:	f04f 0900 	movpl.w	r9, #0
 8007cfe:	f1ba 0f00 	cmp.w	sl, #0
 8007d02:	db41      	blt.n	8007d88 <_dtoa_r+0x230>
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007d0a:	4453      	add	r3, sl
 8007d0c:	9307      	str	r3, [sp, #28]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9308      	str	r3, [sp, #32]
 8007d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	f200 808f 	bhi.w	8007e38 <_dtoa_r+0x2e0>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d24:	bfc8      	it	gt
 8007d26:	2500      	movgt	r5, #0
 8007d28:	f1a3 0302 	sub.w	r3, r3, #2
 8007d2c:	bfd8      	it	le
 8007d2e:	2501      	movle	r5, #1
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	f200 808d 	bhi.w	8007e50 <_dtoa_r+0x2f8>
 8007d36:	e8df f003 	tbb	[pc, r3]
 8007d3a:	7d7b      	.short	0x7d7b
 8007d3c:	6f2f      	.short	0x6f2f
 8007d3e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d42:	441d      	add	r5, r3
 8007d44:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007d48:	2820      	cmp	r0, #32
 8007d4a:	dd13      	ble.n	8007d74 <_dtoa_r+0x21c>
 8007d4c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	fa08 f800 	lsl.w	r8, r8, r0
 8007d56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007d5a:	fa23 f000 	lsr.w	r0, r3, r0
 8007d5e:	ea48 0000 	orr.w	r0, r8, r0
 8007d62:	f7f8 fb3f 	bl	80003e4 <__aeabi_ui2d>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4680      	mov	r8, r0
 8007d6a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007d6e:	3d01      	subs	r5, #1
 8007d70:	9310      	str	r3, [sp, #64]	; 0x40
 8007d72:	e771      	b.n	8007c58 <_dtoa_r+0x100>
 8007d74:	9b02      	ldr	r3, [sp, #8]
 8007d76:	f1c0 0020 	rsb	r0, r0, #32
 8007d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d7e:	e7f0      	b.n	8007d62 <_dtoa_r+0x20a>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e7b0      	b.n	8007ce6 <_dtoa_r+0x18e>
 8007d84:	900d      	str	r0, [sp, #52]	; 0x34
 8007d86:	e7af      	b.n	8007ce8 <_dtoa_r+0x190>
 8007d88:	f1ca 0300 	rsb	r3, sl, #0
 8007d8c:	9308      	str	r3, [sp, #32]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	eba9 090a 	sub.w	r9, r9, sl
 8007d94:	930c      	str	r3, [sp, #48]	; 0x30
 8007d96:	e7bc      	b.n	8007d12 <_dtoa_r+0x1ba>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd74      	ble.n	8007e8c <_dtoa_r+0x334>
 8007da2:	4698      	mov	r8, r3
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	2200      	movs	r2, #0
 8007da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007daa:	6072      	str	r2, [r6, #4]
 8007dac:	2204      	movs	r2, #4
 8007dae:	f102 0014 	add.w	r0, r2, #20
 8007db2:	4298      	cmp	r0, r3
 8007db4:	6871      	ldr	r1, [r6, #4]
 8007db6:	d96e      	bls.n	8007e96 <_dtoa_r+0x33e>
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 f8af 	bl	8008f1c <_Balloc>
 8007dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc0:	6030      	str	r0, [r6, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f1b8 0f0e 	cmp.w	r8, #14
 8007dc8:	9306      	str	r3, [sp, #24]
 8007dca:	f200 80ed 	bhi.w	8007fa8 <_dtoa_r+0x450>
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	f000 80ea 	beq.w	8007fa8 <_dtoa_r+0x450>
 8007dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd8:	f1ba 0f00 	cmp.w	sl, #0
 8007ddc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007de0:	dd77      	ble.n	8007ed2 <_dtoa_r+0x37a>
 8007de2:	4a28      	ldr	r2, [pc, #160]	; (8007e84 <_dtoa_r+0x32c>)
 8007de4:	f00a 030f 	and.w	r3, sl, #15
 8007de8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007df0:	06f0      	lsls	r0, r6, #27
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007dfa:	d568      	bpl.n	8007ece <_dtoa_r+0x376>
 8007dfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e00:	4b21      	ldr	r3, [pc, #132]	; (8007e88 <_dtoa_r+0x330>)
 8007e02:	2503      	movs	r5, #3
 8007e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e08:	f7f8 fc90 	bl	800072c <__aeabi_ddiv>
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	f006 060f 	and.w	r6, r6, #15
 8007e14:	4f1c      	ldr	r7, [pc, #112]	; (8007e88 <_dtoa_r+0x330>)
 8007e16:	e04f      	b.n	8007eb8 <_dtoa_r+0x360>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e1e:	4453      	add	r3, sl
 8007e20:	f103 0801 	add.w	r8, r3, #1
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	4643      	mov	r3, r8
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bfb8      	it	lt
 8007e2c:	2301      	movlt	r3, #1
 8007e2e:	e7ba      	b.n	8007da6 <_dtoa_r+0x24e>
 8007e30:	2300      	movs	r3, #0
 8007e32:	e7b2      	b.n	8007d9a <_dtoa_r+0x242>
 8007e34:	2300      	movs	r3, #0
 8007e36:	e7f0      	b.n	8007e1a <_dtoa_r+0x2c2>
 8007e38:	2501      	movs	r5, #1
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9509      	str	r5, [sp, #36]	; 0x24
 8007e3e:	931e      	str	r3, [sp, #120]	; 0x78
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	2200      	movs	r2, #0
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	4698      	mov	r8, r3
 8007e4a:	2312      	movs	r3, #18
 8007e4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e4e:	e7aa      	b.n	8007da6 <_dtoa_r+0x24e>
 8007e50:	2301      	movs	r3, #1
 8007e52:	9309      	str	r3, [sp, #36]	; 0x24
 8007e54:	e7f4      	b.n	8007e40 <_dtoa_r+0x2e8>
 8007e56:	bf00      	nop
 8007e58:	636f4361 	.word	0x636f4361
 8007e5c:	3fd287a7 	.word	0x3fd287a7
 8007e60:	8b60c8b3 	.word	0x8b60c8b3
 8007e64:	3fc68a28 	.word	0x3fc68a28
 8007e68:	509f79fb 	.word	0x509f79fb
 8007e6c:	3fd34413 	.word	0x3fd34413
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800a4a1 	.word	0x0800a4a1
 8007e78:	0800a498 	.word	0x0800a498
 8007e7c:	0800a41d 	.word	0x0800a41d
 8007e80:	3ff80000 	.word	0x3ff80000
 8007e84:	0800a540 	.word	0x0800a540
 8007e88:	0800a518 	.word	0x0800a518
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	9304      	str	r3, [sp, #16]
 8007e90:	4698      	mov	r8, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	e7da      	b.n	8007e4c <_dtoa_r+0x2f4>
 8007e96:	3101      	adds	r1, #1
 8007e98:	6071      	str	r1, [r6, #4]
 8007e9a:	0052      	lsls	r2, r2, #1
 8007e9c:	e787      	b.n	8007dae <_dtoa_r+0x256>
 8007e9e:	07f1      	lsls	r1, r6, #31
 8007ea0:	d508      	bpl.n	8007eb4 <_dtoa_r+0x35c>
 8007ea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eaa:	f7f8 fb15 	bl	80004d8 <__aeabi_dmul>
 8007eae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007eb2:	3501      	adds	r5, #1
 8007eb4:	1076      	asrs	r6, r6, #1
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	d1f0      	bne.n	8007e9e <_dtoa_r+0x346>
 8007ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec4:	f7f8 fc32 	bl	800072c <__aeabi_ddiv>
 8007ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ecc:	e01b      	b.n	8007f06 <_dtoa_r+0x3ae>
 8007ece:	2502      	movs	r5, #2
 8007ed0:	e7a0      	b.n	8007e14 <_dtoa_r+0x2bc>
 8007ed2:	f000 80a4 	beq.w	800801e <_dtoa_r+0x4c6>
 8007ed6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007eda:	f1ca 0600 	rsb	r6, sl, #0
 8007ede:	4ba0      	ldr	r3, [pc, #640]	; (8008160 <_dtoa_r+0x608>)
 8007ee0:	f006 020f 	and.w	r2, r6, #15
 8007ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f7f8 faf4 	bl	80004d8 <__aeabi_dmul>
 8007ef0:	2502      	movs	r5, #2
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef8:	4f9a      	ldr	r7, [pc, #616]	; (8008164 <_dtoa_r+0x60c>)
 8007efa:	1136      	asrs	r6, r6, #4
 8007efc:	2e00      	cmp	r6, #0
 8007efe:	f040 8083 	bne.w	8008008 <_dtoa_r+0x4b0>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e0      	bne.n	8007ec8 <_dtoa_r+0x370>
 8007f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 808a 	beq.w	8008022 <_dtoa_r+0x4ca>
 8007f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4b92      	ldr	r3, [pc, #584]	; (8008168 <_dtoa_r+0x610>)
 8007f1e:	f7f8 fd4d 	bl	80009bc <__aeabi_dcmplt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d07d      	beq.n	8008022 <_dtoa_r+0x4ca>
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	d07a      	beq.n	8008022 <_dtoa_r+0x4ca>
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd36      	ble.n	8007fa0 <_dtoa_r+0x448>
 8007f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f36:	2200      	movs	r2, #0
 8007f38:	4b8c      	ldr	r3, [pc, #560]	; (800816c <_dtoa_r+0x614>)
 8007f3a:	f7f8 facd 	bl	80004d8 <__aeabi_dmul>
 8007f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f42:	9e04      	ldr	r6, [sp, #16]
 8007f44:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007f48:	3501      	adds	r5, #1
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f7f8 fa5a 	bl	8000404 <__aeabi_i2d>
 8007f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f54:	f7f8 fac0 	bl	80004d8 <__aeabi_dmul>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b85      	ldr	r3, [pc, #532]	; (8008170 <_dtoa_r+0x618>)
 8007f5c:	f7f8 f906 	bl	800016c <__adddf3>
 8007f60:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f68:	950b      	str	r5, [sp, #44]	; 0x2c
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d15c      	bne.n	8008028 <_dtoa_r+0x4d0>
 8007f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	4b7f      	ldr	r3, [pc, #508]	; (8008174 <_dtoa_r+0x61c>)
 8007f76:	f7f8 f8f7 	bl	8000168 <__aeabi_dsub>
 8007f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f82:	f7f8 fd39 	bl	80009f8 <__aeabi_dcmpgt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8281 	bne.w	800848e <_dtoa_r+0x936>
 8007f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f96:	f7f8 fd11 	bl	80009bc <__aeabi_dcmplt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f040 8275 	bne.w	800848a <_dtoa_r+0x932>
 8007fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f2c0 814b 	blt.w	8008246 <_dtoa_r+0x6ee>
 8007fb0:	f1ba 0f0e 	cmp.w	sl, #14
 8007fb4:	f300 8147 	bgt.w	8008246 <_dtoa_r+0x6ee>
 8007fb8:	4b69      	ldr	r3, [pc, #420]	; (8008160 <_dtoa_r+0x608>)
 8007fba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f280 80d7 	bge.w	800817c <_dtoa_r+0x624>
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	f300 80d3 	bgt.w	800817c <_dtoa_r+0x624>
 8007fd6:	f040 8257 	bne.w	8008488 <_dtoa_r+0x930>
 8007fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	4b64      	ldr	r3, [pc, #400]	; (8008174 <_dtoa_r+0x61c>)
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fea:	f7f8 fcfb 	bl	80009e4 <__aeabi_dcmpge>
 8007fee:	4646      	mov	r6, r8
 8007ff0:	4647      	mov	r7, r8
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f040 822d 	bne.w	8008452 <_dtoa_r+0x8fa>
 8007ff8:	9b06      	ldr	r3, [sp, #24]
 8007ffa:	9a06      	ldr	r2, [sp, #24]
 8007ffc:	1c5d      	adds	r5, r3, #1
 8007ffe:	2331      	movs	r3, #49	; 0x31
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	7013      	strb	r3, [r2, #0]
 8008006:	e228      	b.n	800845a <_dtoa_r+0x902>
 8008008:	07f2      	lsls	r2, r6, #31
 800800a:	d505      	bpl.n	8008018 <_dtoa_r+0x4c0>
 800800c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008010:	f7f8 fa62 	bl	80004d8 <__aeabi_dmul>
 8008014:	2301      	movs	r3, #1
 8008016:	3501      	adds	r5, #1
 8008018:	1076      	asrs	r6, r6, #1
 800801a:	3708      	adds	r7, #8
 800801c:	e76e      	b.n	8007efc <_dtoa_r+0x3a4>
 800801e:	2502      	movs	r5, #2
 8008020:	e771      	b.n	8007f06 <_dtoa_r+0x3ae>
 8008022:	4657      	mov	r7, sl
 8008024:	4646      	mov	r6, r8
 8008026:	e790      	b.n	8007f4a <_dtoa_r+0x3f2>
 8008028:	4b4d      	ldr	r3, [pc, #308]	; (8008160 <_dtoa_r+0x608>)
 800802a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800802e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d048      	beq.n	80080ca <_dtoa_r+0x572>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	2000      	movs	r0, #0
 800803e:	494e      	ldr	r1, [pc, #312]	; (8008178 <_dtoa_r+0x620>)
 8008040:	f7f8 fb74 	bl	800072c <__aeabi_ddiv>
 8008044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008048:	f7f8 f88e 	bl	8000168 <__aeabi_dsub>
 800804c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008050:	9d06      	ldr	r5, [sp, #24]
 8008052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008056:	f7f8 fcef 	bl	8000a38 <__aeabi_d2iz>
 800805a:	9011      	str	r0, [sp, #68]	; 0x44
 800805c:	f7f8 f9d2 	bl	8000404 <__aeabi_i2d>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008068:	f7f8 f87e 	bl	8000168 <__aeabi_dsub>
 800806c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800806e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008072:	3330      	adds	r3, #48	; 0x30
 8008074:	f805 3b01 	strb.w	r3, [r5], #1
 8008078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800807c:	f7f8 fc9e 	bl	80009bc <__aeabi_dcmplt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d163      	bne.n	800814c <_dtoa_r+0x5f4>
 8008084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008088:	2000      	movs	r0, #0
 800808a:	4937      	ldr	r1, [pc, #220]	; (8008168 <_dtoa_r+0x610>)
 800808c:	f7f8 f86c 	bl	8000168 <__aeabi_dsub>
 8008090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008094:	f7f8 fc92 	bl	80009bc <__aeabi_dcmplt>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 80b5 	bne.w	8008208 <_dtoa_r+0x6b0>
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	1aeb      	subs	r3, r5, r3
 80080a2:	429e      	cmp	r6, r3
 80080a4:	f77f af7c 	ble.w	8007fa0 <_dtoa_r+0x448>
 80080a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080ac:	2200      	movs	r2, #0
 80080ae:	4b2f      	ldr	r3, [pc, #188]	; (800816c <_dtoa_r+0x614>)
 80080b0:	f7f8 fa12 	bl	80004d8 <__aeabi_dmul>
 80080b4:	2200      	movs	r2, #0
 80080b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080be:	4b2b      	ldr	r3, [pc, #172]	; (800816c <_dtoa_r+0x614>)
 80080c0:	f7f8 fa0a 	bl	80004d8 <__aeabi_dmul>
 80080c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c8:	e7c3      	b.n	8008052 <_dtoa_r+0x4fa>
 80080ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080ce:	f7f8 fa03 	bl	80004d8 <__aeabi_dmul>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080d8:	199d      	adds	r5, r3, r6
 80080da:	461e      	mov	r6, r3
 80080dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e0:	f7f8 fcaa 	bl	8000a38 <__aeabi_d2iz>
 80080e4:	9011      	str	r0, [sp, #68]	; 0x44
 80080e6:	f7f8 f98d 	bl	8000404 <__aeabi_i2d>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f2:	f7f8 f839 	bl	8000168 <__aeabi_dsub>
 80080f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080fc:	3330      	adds	r3, #48	; 0x30
 80080fe:	f806 3b01 	strb.w	r3, [r6], #1
 8008102:	42ae      	cmp	r6, r5
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	d124      	bne.n	8008154 <_dtoa_r+0x5fc>
 800810a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800810e:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <_dtoa_r+0x620>)
 8008110:	f7f8 f82c 	bl	800016c <__adddf3>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811c:	f7f8 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8008120:	2800      	cmp	r0, #0
 8008122:	d171      	bne.n	8008208 <_dtoa_r+0x6b0>
 8008124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008128:	2000      	movs	r0, #0
 800812a:	4913      	ldr	r1, [pc, #76]	; (8008178 <_dtoa_r+0x620>)
 800812c:	f7f8 f81c 	bl	8000168 <__aeabi_dsub>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008138:	f7f8 fc40 	bl	80009bc <__aeabi_dcmplt>
 800813c:	2800      	cmp	r0, #0
 800813e:	f43f af2f 	beq.w	8007fa0 <_dtoa_r+0x448>
 8008142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008146:	1e6a      	subs	r2, r5, #1
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d001      	beq.n	8008150 <_dtoa_r+0x5f8>
 800814c:	46ba      	mov	sl, r7
 800814e:	e04a      	b.n	80081e6 <_dtoa_r+0x68e>
 8008150:	4615      	mov	r5, r2
 8008152:	e7f6      	b.n	8008142 <_dtoa_r+0x5ea>
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <_dtoa_r+0x614>)
 8008156:	f7f8 f9bf 	bl	80004d8 <__aeabi_dmul>
 800815a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800815e:	e7bd      	b.n	80080dc <_dtoa_r+0x584>
 8008160:	0800a540 	.word	0x0800a540
 8008164:	0800a518 	.word	0x0800a518
 8008168:	3ff00000 	.word	0x3ff00000
 800816c:	40240000 	.word	0x40240000
 8008170:	401c0000 	.word	0x401c0000
 8008174:	40140000 	.word	0x40140000
 8008178:	3fe00000 	.word	0x3fe00000
 800817c:	9d06      	ldr	r5, [sp, #24]
 800817e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 facf 	bl	800072c <__aeabi_ddiv>
 800818e:	f7f8 fc53 	bl	8000a38 <__aeabi_d2iz>
 8008192:	4681      	mov	r9, r0
 8008194:	f7f8 f936 	bl	8000404 <__aeabi_i2d>
 8008198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819c:	f7f8 f99c 	bl	80004d8 <__aeabi_dmul>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f7 ffde 	bl	8000168 <__aeabi_dsub>
 80081ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80081b0:	f805 6b01 	strb.w	r6, [r5], #1
 80081b4:	9e06      	ldr	r6, [sp, #24]
 80081b6:	4602      	mov	r2, r0
 80081b8:	1bae      	subs	r6, r5, r6
 80081ba:	45b0      	cmp	r8, r6
 80081bc:	460b      	mov	r3, r1
 80081be:	d135      	bne.n	800822c <_dtoa_r+0x6d4>
 80081c0:	f7f7 ffd4 	bl	800016c <__adddf3>
 80081c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081c8:	4606      	mov	r6, r0
 80081ca:	460f      	mov	r7, r1
 80081cc:	f7f8 fc14 	bl	80009f8 <__aeabi_dcmpgt>
 80081d0:	b9c8      	cbnz	r0, 8008206 <_dtoa_r+0x6ae>
 80081d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80081de:	b110      	cbz	r0, 80081e6 <_dtoa_r+0x68e>
 80081e0:	f019 0f01 	tst.w	r9, #1
 80081e4:	d10f      	bne.n	8008206 <_dtoa_r+0x6ae>
 80081e6:	4659      	mov	r1, fp
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fecb 	bl	8008f84 <_Bfree>
 80081ee:	2300      	movs	r3, #0
 80081f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081f2:	702b      	strb	r3, [r5, #0]
 80081f4:	f10a 0301 	add.w	r3, sl, #1
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f43f acf3 	beq.w	8007be8 <_dtoa_r+0x90>
 8008202:	601d      	str	r5, [r3, #0]
 8008204:	e4f0      	b.n	8007be8 <_dtoa_r+0x90>
 8008206:	4657      	mov	r7, sl
 8008208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800820c:	1e6b      	subs	r3, r5, #1
 800820e:	2a39      	cmp	r2, #57	; 0x39
 8008210:	d106      	bne.n	8008220 <_dtoa_r+0x6c8>
 8008212:	9a06      	ldr	r2, [sp, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	d107      	bne.n	8008228 <_dtoa_r+0x6d0>
 8008218:	2330      	movs	r3, #48	; 0x30
 800821a:	7013      	strb	r3, [r2, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	3701      	adds	r7, #1
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	3201      	adds	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e791      	b.n	800814c <_dtoa_r+0x5f4>
 8008228:	461d      	mov	r5, r3
 800822a:	e7ed      	b.n	8008208 <_dtoa_r+0x6b0>
 800822c:	2200      	movs	r2, #0
 800822e:	4b99      	ldr	r3, [pc, #612]	; (8008494 <_dtoa_r+0x93c>)
 8008230:	f7f8 f952 	bl	80004d8 <__aeabi_dmul>
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	f7f8 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d09e      	beq.n	8008182 <_dtoa_r+0x62a>
 8008244:	e7cf      	b.n	80081e6 <_dtoa_r+0x68e>
 8008246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008248:	2a00      	cmp	r2, #0
 800824a:	f000 8088 	beq.w	800835e <_dtoa_r+0x806>
 800824e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008250:	2a01      	cmp	r2, #1
 8008252:	dc6d      	bgt.n	8008330 <_dtoa_r+0x7d8>
 8008254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008256:	2a00      	cmp	r2, #0
 8008258:	d066      	beq.n	8008328 <_dtoa_r+0x7d0>
 800825a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800825e:	464d      	mov	r5, r9
 8008260:	9e08      	ldr	r6, [sp, #32]
 8008262:	9a07      	ldr	r2, [sp, #28]
 8008264:	2101      	movs	r1, #1
 8008266:	441a      	add	r2, r3
 8008268:	4620      	mov	r0, r4
 800826a:	4499      	add	r9, r3
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	f000 ff67 	bl	8009140 <__i2b>
 8008272:	4607      	mov	r7, r0
 8008274:	2d00      	cmp	r5, #0
 8008276:	dd0b      	ble.n	8008290 <_dtoa_r+0x738>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd08      	ble.n	8008290 <_dtoa_r+0x738>
 800827e:	42ab      	cmp	r3, r5
 8008280:	bfa8      	it	ge
 8008282:	462b      	movge	r3, r5
 8008284:	9a07      	ldr	r2, [sp, #28]
 8008286:	eba9 0903 	sub.w	r9, r9, r3
 800828a:	1aed      	subs	r5, r5, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	b1eb      	cbz	r3, 80082d0 <_dtoa_r+0x778>
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d065      	beq.n	8008366 <_dtoa_r+0x80e>
 800829a:	b18e      	cbz	r6, 80082c0 <_dtoa_r+0x768>
 800829c:	4639      	mov	r1, r7
 800829e:	4632      	mov	r2, r6
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ffeb 	bl	800927c <__pow5mult>
 80082a6:	465a      	mov	r2, fp
 80082a8:	4601      	mov	r1, r0
 80082aa:	4607      	mov	r7, r0
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 ff50 	bl	8009152 <__multiply>
 80082b2:	4659      	mov	r1, fp
 80082b4:	900a      	str	r0, [sp, #40]	; 0x28
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 fe64 	bl	8008f84 <_Bfree>
 80082bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082be:	469b      	mov	fp, r3
 80082c0:	9b08      	ldr	r3, [sp, #32]
 80082c2:	1b9a      	subs	r2, r3, r6
 80082c4:	d004      	beq.n	80082d0 <_dtoa_r+0x778>
 80082c6:	4659      	mov	r1, fp
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 ffd7 	bl	800927c <__pow5mult>
 80082ce:	4683      	mov	fp, r0
 80082d0:	2101      	movs	r1, #1
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 ff34 	bl	8009140 <__i2b>
 80082d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082da:	4606      	mov	r6, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 81c6 	beq.w	800866e <_dtoa_r+0xb16>
 80082e2:	461a      	mov	r2, r3
 80082e4:	4601      	mov	r1, r0
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 ffc8 	bl	800927c <__pow5mult>
 80082ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80082ee:	4606      	mov	r6, r0
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	dc3e      	bgt.n	8008372 <_dtoa_r+0x81a>
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d137      	bne.n	800836a <_dtoa_r+0x812>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008300:	2b00      	cmp	r3, #0
 8008302:	d134      	bne.n	800836e <_dtoa_r+0x816>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800830a:	0d1b      	lsrs	r3, r3, #20
 800830c:	051b      	lsls	r3, r3, #20
 800830e:	b12b      	cbz	r3, 800831c <_dtoa_r+0x7c4>
 8008310:	9b07      	ldr	r3, [sp, #28]
 8008312:	f109 0901 	add.w	r9, r9, #1
 8008316:	3301      	adds	r3, #1
 8008318:	9307      	str	r3, [sp, #28]
 800831a:	2301      	movs	r3, #1
 800831c:	9308      	str	r3, [sp, #32]
 800831e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008320:	2b00      	cmp	r3, #0
 8008322:	d128      	bne.n	8008376 <_dtoa_r+0x81e>
 8008324:	2001      	movs	r0, #1
 8008326:	e02e      	b.n	8008386 <_dtoa_r+0x82e>
 8008328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800832a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800832e:	e796      	b.n	800825e <_dtoa_r+0x706>
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	f108 36ff 	add.w	r6, r8, #4294967295
 8008336:	42b3      	cmp	r3, r6
 8008338:	bfb7      	itett	lt
 800833a:	9b08      	ldrlt	r3, [sp, #32]
 800833c:	1b9e      	subge	r6, r3, r6
 800833e:	1af2      	sublt	r2, r6, r3
 8008340:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008342:	bfbf      	itttt	lt
 8008344:	9608      	strlt	r6, [sp, #32]
 8008346:	189b      	addlt	r3, r3, r2
 8008348:	930c      	strlt	r3, [sp, #48]	; 0x30
 800834a:	2600      	movlt	r6, #0
 800834c:	f1b8 0f00 	cmp.w	r8, #0
 8008350:	bfb9      	ittee	lt
 8008352:	eba9 0508 	sublt.w	r5, r9, r8
 8008356:	2300      	movlt	r3, #0
 8008358:	464d      	movge	r5, r9
 800835a:	4643      	movge	r3, r8
 800835c:	e781      	b.n	8008262 <_dtoa_r+0x70a>
 800835e:	9e08      	ldr	r6, [sp, #32]
 8008360:	464d      	mov	r5, r9
 8008362:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008364:	e786      	b.n	8008274 <_dtoa_r+0x71c>
 8008366:	9a08      	ldr	r2, [sp, #32]
 8008368:	e7ad      	b.n	80082c6 <_dtoa_r+0x76e>
 800836a:	2300      	movs	r3, #0
 800836c:	e7d6      	b.n	800831c <_dtoa_r+0x7c4>
 800836e:	9b02      	ldr	r3, [sp, #8]
 8008370:	e7d4      	b.n	800831c <_dtoa_r+0x7c4>
 8008372:	2300      	movs	r3, #0
 8008374:	9308      	str	r3, [sp, #32]
 8008376:	6933      	ldr	r3, [r6, #16]
 8008378:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800837c:	6918      	ldr	r0, [r3, #16]
 800837e:	f000 fe91 	bl	80090a4 <__hi0bits>
 8008382:	f1c0 0020 	rsb	r0, r0, #32
 8008386:	9b07      	ldr	r3, [sp, #28]
 8008388:	4418      	add	r0, r3
 800838a:	f010 001f 	ands.w	r0, r0, #31
 800838e:	d047      	beq.n	8008420 <_dtoa_r+0x8c8>
 8008390:	f1c0 0320 	rsb	r3, r0, #32
 8008394:	2b04      	cmp	r3, #4
 8008396:	dd3b      	ble.n	8008410 <_dtoa_r+0x8b8>
 8008398:	9b07      	ldr	r3, [sp, #28]
 800839a:	f1c0 001c 	rsb	r0, r0, #28
 800839e:	4481      	add	r9, r0
 80083a0:	4405      	add	r5, r0
 80083a2:	4403      	add	r3, r0
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	f1b9 0f00 	cmp.w	r9, #0
 80083aa:	dd05      	ble.n	80083b8 <_dtoa_r+0x860>
 80083ac:	4659      	mov	r1, fp
 80083ae:	464a      	mov	r2, r9
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 ffb1 	bl	8009318 <__lshift>
 80083b6:	4683      	mov	fp, r0
 80083b8:	9b07      	ldr	r3, [sp, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd05      	ble.n	80083ca <_dtoa_r+0x872>
 80083be:	4631      	mov	r1, r6
 80083c0:	461a      	mov	r2, r3
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 ffa8 	bl	8009318 <__lshift>
 80083c8:	4606      	mov	r6, r0
 80083ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083cc:	b353      	cbz	r3, 8008424 <_dtoa_r+0x8cc>
 80083ce:	4631      	mov	r1, r6
 80083d0:	4658      	mov	r0, fp
 80083d2:	f000 fff5 	bl	80093c0 <__mcmp>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	da24      	bge.n	8008424 <_dtoa_r+0x8cc>
 80083da:	2300      	movs	r3, #0
 80083dc:	4659      	mov	r1, fp
 80083de:	220a      	movs	r2, #10
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fde6 	bl	8008fb2 <__multadd>
 80083e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ec:	4683      	mov	fp, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8144 	beq.w	800867c <_dtoa_r+0xb24>
 80083f4:	2300      	movs	r3, #0
 80083f6:	4639      	mov	r1, r7
 80083f8:	220a      	movs	r2, #10
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fdd9 	bl	8008fb2 <__multadd>
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	4607      	mov	r7, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc4d      	bgt.n	80084a4 <_dtoa_r+0x94c>
 8008408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800840a:	2b02      	cmp	r3, #2
 800840c:	dd4a      	ble.n	80084a4 <_dtoa_r+0x94c>
 800840e:	e011      	b.n	8008434 <_dtoa_r+0x8dc>
 8008410:	d0c9      	beq.n	80083a6 <_dtoa_r+0x84e>
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	331c      	adds	r3, #28
 8008416:	441a      	add	r2, r3
 8008418:	4499      	add	r9, r3
 800841a:	441d      	add	r5, r3
 800841c:	4613      	mov	r3, r2
 800841e:	e7c1      	b.n	80083a4 <_dtoa_r+0x84c>
 8008420:	4603      	mov	r3, r0
 8008422:	e7f6      	b.n	8008412 <_dtoa_r+0x8ba>
 8008424:	f1b8 0f00 	cmp.w	r8, #0
 8008428:	dc36      	bgt.n	8008498 <_dtoa_r+0x940>
 800842a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800842c:	2b02      	cmp	r3, #2
 800842e:	dd33      	ble.n	8008498 <_dtoa_r+0x940>
 8008430:	f8cd 8010 	str.w	r8, [sp, #16]
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	b963      	cbnz	r3, 8008452 <_dtoa_r+0x8fa>
 8008438:	4631      	mov	r1, r6
 800843a:	2205      	movs	r2, #5
 800843c:	4620      	mov	r0, r4
 800843e:	f000 fdb8 	bl	8008fb2 <__multadd>
 8008442:	4601      	mov	r1, r0
 8008444:	4606      	mov	r6, r0
 8008446:	4658      	mov	r0, fp
 8008448:	f000 ffba 	bl	80093c0 <__mcmp>
 800844c:	2800      	cmp	r0, #0
 800844e:	f73f add3 	bgt.w	8007ff8 <_dtoa_r+0x4a0>
 8008452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008454:	9d06      	ldr	r5, [sp, #24]
 8008456:	ea6f 0a03 	mvn.w	sl, r3
 800845a:	f04f 0900 	mov.w	r9, #0
 800845e:	4631      	mov	r1, r6
 8008460:	4620      	mov	r0, r4
 8008462:	f000 fd8f 	bl	8008f84 <_Bfree>
 8008466:	2f00      	cmp	r7, #0
 8008468:	f43f aebd 	beq.w	80081e6 <_dtoa_r+0x68e>
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	d005      	beq.n	800847e <_dtoa_r+0x926>
 8008472:	45b9      	cmp	r9, r7
 8008474:	d003      	beq.n	800847e <_dtoa_r+0x926>
 8008476:	4649      	mov	r1, r9
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fd83 	bl	8008f84 <_Bfree>
 800847e:	4639      	mov	r1, r7
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fd7f 	bl	8008f84 <_Bfree>
 8008486:	e6ae      	b.n	80081e6 <_dtoa_r+0x68e>
 8008488:	2600      	movs	r6, #0
 800848a:	4637      	mov	r7, r6
 800848c:	e7e1      	b.n	8008452 <_dtoa_r+0x8fa>
 800848e:	46ba      	mov	sl, r7
 8008490:	4637      	mov	r7, r6
 8008492:	e5b1      	b.n	8007ff8 <_dtoa_r+0x4a0>
 8008494:	40240000 	.word	0x40240000
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	f8cd 8010 	str.w	r8, [sp, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80f3 	beq.w	800868a <_dtoa_r+0xb32>
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	dd05      	ble.n	80084b4 <_dtoa_r+0x95c>
 80084a8:	4639      	mov	r1, r7
 80084aa:	462a      	mov	r2, r5
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 ff33 	bl	8009318 <__lshift>
 80084b2:	4607      	mov	r7, r0
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04c      	beq.n	8008554 <_dtoa_r+0x9fc>
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fd2d 	bl	8008f1c <_Balloc>
 80084c2:	4605      	mov	r5, r0
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	f107 010c 	add.w	r1, r7, #12
 80084ca:	3202      	adds	r2, #2
 80084cc:	0092      	lsls	r2, r2, #2
 80084ce:	300c      	adds	r0, #12
 80084d0:	f7fd fd76 	bl	8005fc0 <memcpy>
 80084d4:	2201      	movs	r2, #1
 80084d6:	4629      	mov	r1, r5
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 ff1d 	bl	8009318 <__lshift>
 80084de:	46b9      	mov	r9, r7
 80084e0:	4607      	mov	r7, r0
 80084e2:	9b06      	ldr	r3, [sp, #24]
 80084e4:	9307      	str	r3, [sp, #28]
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	9308      	str	r3, [sp, #32]
 80084ee:	4631      	mov	r1, r6
 80084f0:	4658      	mov	r0, fp
 80084f2:	f7ff faa3 	bl	8007a3c <quorem>
 80084f6:	4649      	mov	r1, r9
 80084f8:	4605      	mov	r5, r0
 80084fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80084fe:	4658      	mov	r0, fp
 8008500:	f000 ff5e 	bl	80093c0 <__mcmp>
 8008504:	463a      	mov	r2, r7
 8008506:	9002      	str	r0, [sp, #8]
 8008508:	4631      	mov	r1, r6
 800850a:	4620      	mov	r0, r4
 800850c:	f000 ff72 	bl	80093f4 <__mdiff>
 8008510:	68c3      	ldr	r3, [r0, #12]
 8008512:	4602      	mov	r2, r0
 8008514:	bb03      	cbnz	r3, 8008558 <_dtoa_r+0xa00>
 8008516:	4601      	mov	r1, r0
 8008518:	9009      	str	r0, [sp, #36]	; 0x24
 800851a:	4658      	mov	r0, fp
 800851c:	f000 ff50 	bl	80093c0 <__mcmp>
 8008520:	4603      	mov	r3, r0
 8008522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008524:	4611      	mov	r1, r2
 8008526:	4620      	mov	r0, r4
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	f000 fd2b 	bl	8008f84 <_Bfree>
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	b9a3      	cbnz	r3, 800855c <_dtoa_r+0xa04>
 8008532:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008534:	b992      	cbnz	r2, 800855c <_dtoa_r+0xa04>
 8008536:	9a08      	ldr	r2, [sp, #32]
 8008538:	b982      	cbnz	r2, 800855c <_dtoa_r+0xa04>
 800853a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800853e:	d029      	beq.n	8008594 <_dtoa_r+0xa3c>
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd01      	ble.n	800854a <_dtoa_r+0x9f2>
 8008546:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800854a:	9b07      	ldr	r3, [sp, #28]
 800854c:	1c5d      	adds	r5, r3, #1
 800854e:	f883 8000 	strb.w	r8, [r3]
 8008552:	e784      	b.n	800845e <_dtoa_r+0x906>
 8008554:	4638      	mov	r0, r7
 8008556:	e7c2      	b.n	80084de <_dtoa_r+0x986>
 8008558:	2301      	movs	r3, #1
 800855a:	e7e3      	b.n	8008524 <_dtoa_r+0x9cc>
 800855c:	9a02      	ldr	r2, [sp, #8]
 800855e:	2a00      	cmp	r2, #0
 8008560:	db04      	blt.n	800856c <_dtoa_r+0xa14>
 8008562:	d123      	bne.n	80085ac <_dtoa_r+0xa54>
 8008564:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008566:	bb0a      	cbnz	r2, 80085ac <_dtoa_r+0xa54>
 8008568:	9a08      	ldr	r2, [sp, #32]
 800856a:	b9fa      	cbnz	r2, 80085ac <_dtoa_r+0xa54>
 800856c:	2b00      	cmp	r3, #0
 800856e:	ddec      	ble.n	800854a <_dtoa_r+0x9f2>
 8008570:	4659      	mov	r1, fp
 8008572:	2201      	movs	r2, #1
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fecf 	bl	8009318 <__lshift>
 800857a:	4631      	mov	r1, r6
 800857c:	4683      	mov	fp, r0
 800857e:	f000 ff1f 	bl	80093c0 <__mcmp>
 8008582:	2800      	cmp	r0, #0
 8008584:	dc03      	bgt.n	800858e <_dtoa_r+0xa36>
 8008586:	d1e0      	bne.n	800854a <_dtoa_r+0x9f2>
 8008588:	f018 0f01 	tst.w	r8, #1
 800858c:	d0dd      	beq.n	800854a <_dtoa_r+0x9f2>
 800858e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008592:	d1d8      	bne.n	8008546 <_dtoa_r+0x9ee>
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	9a07      	ldr	r2, [sp, #28]
 8008598:	1c5d      	adds	r5, r3, #1
 800859a:	2339      	movs	r3, #57	; 0x39
 800859c:	7013      	strb	r3, [r2, #0]
 800859e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a2:	1e6a      	subs	r2, r5, #1
 80085a4:	2b39      	cmp	r3, #57	; 0x39
 80085a6:	d04d      	beq.n	8008644 <_dtoa_r+0xaec>
 80085a8:	3301      	adds	r3, #1
 80085aa:	e052      	b.n	8008652 <_dtoa_r+0xafa>
 80085ac:	9a07      	ldr	r2, [sp, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f102 0501 	add.w	r5, r2, #1
 80085b4:	dd06      	ble.n	80085c4 <_dtoa_r+0xa6c>
 80085b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085ba:	d0eb      	beq.n	8008594 <_dtoa_r+0xa3c>
 80085bc:	f108 0801 	add.w	r8, r8, #1
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	e7c4      	b.n	800854e <_dtoa_r+0x9f6>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	9a04      	ldr	r2, [sp, #16]
 80085c8:	1aeb      	subs	r3, r5, r3
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80085d0:	d021      	beq.n	8008616 <_dtoa_r+0xabe>
 80085d2:	4659      	mov	r1, fp
 80085d4:	2300      	movs	r3, #0
 80085d6:	220a      	movs	r2, #10
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fcea 	bl	8008fb2 <__multadd>
 80085de:	45b9      	cmp	r9, r7
 80085e0:	4683      	mov	fp, r0
 80085e2:	f04f 0300 	mov.w	r3, #0
 80085e6:	f04f 020a 	mov.w	r2, #10
 80085ea:	4649      	mov	r1, r9
 80085ec:	4620      	mov	r0, r4
 80085ee:	d105      	bne.n	80085fc <_dtoa_r+0xaa4>
 80085f0:	f000 fcdf 	bl	8008fb2 <__multadd>
 80085f4:	4681      	mov	r9, r0
 80085f6:	4607      	mov	r7, r0
 80085f8:	9507      	str	r5, [sp, #28]
 80085fa:	e778      	b.n	80084ee <_dtoa_r+0x996>
 80085fc:	f000 fcd9 	bl	8008fb2 <__multadd>
 8008600:	4639      	mov	r1, r7
 8008602:	4681      	mov	r9, r0
 8008604:	2300      	movs	r3, #0
 8008606:	220a      	movs	r2, #10
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fcd2 	bl	8008fb2 <__multadd>
 800860e:	4607      	mov	r7, r0
 8008610:	e7f2      	b.n	80085f8 <_dtoa_r+0xaa0>
 8008612:	f04f 0900 	mov.w	r9, #0
 8008616:	4659      	mov	r1, fp
 8008618:	2201      	movs	r2, #1
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fe7c 	bl	8009318 <__lshift>
 8008620:	4631      	mov	r1, r6
 8008622:	4683      	mov	fp, r0
 8008624:	f000 fecc 	bl	80093c0 <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	dcb8      	bgt.n	800859e <_dtoa_r+0xa46>
 800862c:	d102      	bne.n	8008634 <_dtoa_r+0xadc>
 800862e:	f018 0f01 	tst.w	r8, #1
 8008632:	d1b4      	bne.n	800859e <_dtoa_r+0xa46>
 8008634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008638:	1e6a      	subs	r2, r5, #1
 800863a:	2b30      	cmp	r3, #48	; 0x30
 800863c:	f47f af0f 	bne.w	800845e <_dtoa_r+0x906>
 8008640:	4615      	mov	r5, r2
 8008642:	e7f7      	b.n	8008634 <_dtoa_r+0xadc>
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	4293      	cmp	r3, r2
 8008648:	d105      	bne.n	8008656 <_dtoa_r+0xafe>
 800864a:	2331      	movs	r3, #49	; 0x31
 800864c:	9a06      	ldr	r2, [sp, #24]
 800864e:	f10a 0a01 	add.w	sl, sl, #1
 8008652:	7013      	strb	r3, [r2, #0]
 8008654:	e703      	b.n	800845e <_dtoa_r+0x906>
 8008656:	4615      	mov	r5, r2
 8008658:	e7a1      	b.n	800859e <_dtoa_r+0xa46>
 800865a:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <_dtoa_r+0xb60>)
 800865c:	f7ff bae1 	b.w	8007c22 <_dtoa_r+0xca>
 8008660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008662:	2b00      	cmp	r3, #0
 8008664:	f47f aabb 	bne.w	8007bde <_dtoa_r+0x86>
 8008668:	4b14      	ldr	r3, [pc, #80]	; (80086bc <_dtoa_r+0xb64>)
 800866a:	f7ff bada 	b.w	8007c22 <_dtoa_r+0xca>
 800866e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008670:	2b01      	cmp	r3, #1
 8008672:	f77f ae3f 	ble.w	80082f4 <_dtoa_r+0x79c>
 8008676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008678:	9308      	str	r3, [sp, #32]
 800867a:	e653      	b.n	8008324 <_dtoa_r+0x7cc>
 800867c:	9b04      	ldr	r3, [sp, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	dc03      	bgt.n	800868a <_dtoa_r+0xb32>
 8008682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008684:	2b02      	cmp	r3, #2
 8008686:	f73f aed5 	bgt.w	8008434 <_dtoa_r+0x8dc>
 800868a:	9d06      	ldr	r5, [sp, #24]
 800868c:	4631      	mov	r1, r6
 800868e:	4658      	mov	r0, fp
 8008690:	f7ff f9d4 	bl	8007a3c <quorem>
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800869a:	f805 8b01 	strb.w	r8, [r5], #1
 800869e:	9a04      	ldr	r2, [sp, #16]
 80086a0:	1aeb      	subs	r3, r5, r3
 80086a2:	429a      	cmp	r2, r3
 80086a4:	ddb5      	ble.n	8008612 <_dtoa_r+0xaba>
 80086a6:	4659      	mov	r1, fp
 80086a8:	2300      	movs	r3, #0
 80086aa:	220a      	movs	r2, #10
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fc80 	bl	8008fb2 <__multadd>
 80086b2:	4683      	mov	fp, r0
 80086b4:	e7ea      	b.n	800868c <_dtoa_r+0xb34>
 80086b6:	bf00      	nop
 80086b8:	0800a41c 	.word	0x0800a41c
 80086bc:	0800a498 	.word	0x0800a498

080086c0 <std>:
 80086c0:	2300      	movs	r3, #0
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	e9c0 3300 	strd	r3, r3, [r0]
 80086ca:	6083      	str	r3, [r0, #8]
 80086cc:	8181      	strh	r1, [r0, #12]
 80086ce:	6643      	str	r3, [r0, #100]	; 0x64
 80086d0:	81c2      	strh	r2, [r0, #14]
 80086d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086d6:	6183      	str	r3, [r0, #24]
 80086d8:	4619      	mov	r1, r3
 80086da:	2208      	movs	r2, #8
 80086dc:	305c      	adds	r0, #92	; 0x5c
 80086de:	f7fd fc7a 	bl	8005fd6 <memset>
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <std+0x38>)
 80086e4:	6224      	str	r4, [r4, #32]
 80086e6:	6263      	str	r3, [r4, #36]	; 0x24
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <std+0x3c>)
 80086ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <std+0x40>)
 80086ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <std+0x44>)
 80086f2:	6323      	str	r3, [r4, #48]	; 0x30
 80086f4:	bd10      	pop	{r4, pc}
 80086f6:	bf00      	nop
 80086f8:	08009db5 	.word	0x08009db5
 80086fc:	08009dd7 	.word	0x08009dd7
 8008700:	08009e0f 	.word	0x08009e0f
 8008704:	08009e33 	.word	0x08009e33

08008708 <_cleanup_r>:
 8008708:	4901      	ldr	r1, [pc, #4]	; (8008710 <_cleanup_r+0x8>)
 800870a:	f000 b885 	b.w	8008818 <_fwalk_reent>
 800870e:	bf00      	nop
 8008710:	0800a14d 	.word	0x0800a14d

08008714 <__sfmoreglue>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	2568      	movs	r5, #104	; 0x68
 8008718:	1e4a      	subs	r2, r1, #1
 800871a:	4355      	muls	r5, r2
 800871c:	460e      	mov	r6, r1
 800871e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008722:	f001 f84d 	bl	80097c0 <_malloc_r>
 8008726:	4604      	mov	r4, r0
 8008728:	b140      	cbz	r0, 800873c <__sfmoreglue+0x28>
 800872a:	2100      	movs	r1, #0
 800872c:	e9c0 1600 	strd	r1, r6, [r0]
 8008730:	300c      	adds	r0, #12
 8008732:	60a0      	str	r0, [r4, #8]
 8008734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008738:	f7fd fc4d 	bl	8005fd6 <memset>
 800873c:	4620      	mov	r0, r4
 800873e:	bd70      	pop	{r4, r5, r6, pc}

08008740 <__sinit>:
 8008740:	6983      	ldr	r3, [r0, #24]
 8008742:	b510      	push	{r4, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	bb33      	cbnz	r3, 8008796 <__sinit+0x56>
 8008748:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800874c:	6503      	str	r3, [r0, #80]	; 0x50
 800874e:	4b12      	ldr	r3, [pc, #72]	; (8008798 <__sinit+0x58>)
 8008750:	4a12      	ldr	r2, [pc, #72]	; (800879c <__sinit+0x5c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6282      	str	r2, [r0, #40]	; 0x28
 8008756:	4298      	cmp	r0, r3
 8008758:	bf04      	itt	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	6183      	streq	r3, [r0, #24]
 800875e:	f000 f81f 	bl	80087a0 <__sfp>
 8008762:	6060      	str	r0, [r4, #4]
 8008764:	4620      	mov	r0, r4
 8008766:	f000 f81b 	bl	80087a0 <__sfp>
 800876a:	60a0      	str	r0, [r4, #8]
 800876c:	4620      	mov	r0, r4
 800876e:	f000 f817 	bl	80087a0 <__sfp>
 8008772:	2200      	movs	r2, #0
 8008774:	60e0      	str	r0, [r4, #12]
 8008776:	2104      	movs	r1, #4
 8008778:	6860      	ldr	r0, [r4, #4]
 800877a:	f7ff ffa1 	bl	80086c0 <std>
 800877e:	2201      	movs	r2, #1
 8008780:	2109      	movs	r1, #9
 8008782:	68a0      	ldr	r0, [r4, #8]
 8008784:	f7ff ff9c 	bl	80086c0 <std>
 8008788:	2202      	movs	r2, #2
 800878a:	2112      	movs	r1, #18
 800878c:	68e0      	ldr	r0, [r4, #12]
 800878e:	f7ff ff97 	bl	80086c0 <std>
 8008792:	2301      	movs	r3, #1
 8008794:	61a3      	str	r3, [r4, #24]
 8008796:	bd10      	pop	{r4, pc}
 8008798:	0800a408 	.word	0x0800a408
 800879c:	08008709 	.word	0x08008709

080087a0 <__sfp>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <__sfp+0x70>)
 80087a4:	4607      	mov	r7, r0
 80087a6:	681e      	ldr	r6, [r3, #0]
 80087a8:	69b3      	ldr	r3, [r6, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__sfp+0x12>
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff ffc7 	bl	8008740 <__sinit>
 80087b2:	3648      	adds	r6, #72	; 0x48
 80087b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	d503      	bpl.n	80087c4 <__sfp+0x24>
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	b133      	cbz	r3, 80087ce <__sfp+0x2e>
 80087c0:	6836      	ldr	r6, [r6, #0]
 80087c2:	e7f7      	b.n	80087b4 <__sfp+0x14>
 80087c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087c8:	b16d      	cbz	r5, 80087e6 <__sfp+0x46>
 80087ca:	3468      	adds	r4, #104	; 0x68
 80087cc:	e7f4      	b.n	80087b8 <__sfp+0x18>
 80087ce:	2104      	movs	r1, #4
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff ff9f 	bl	8008714 <__sfmoreglue>
 80087d6:	6030      	str	r0, [r6, #0]
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1f1      	bne.n	80087c0 <__sfp+0x20>
 80087dc:	230c      	movs	r3, #12
 80087de:	4604      	mov	r4, r0
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	4620      	mov	r0, r4
 80087e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <__sfp+0x74>)
 80087e8:	6665      	str	r5, [r4, #100]	; 0x64
 80087ea:	e9c4 5500 	strd	r5, r5, [r4]
 80087ee:	60a5      	str	r5, [r4, #8]
 80087f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80087f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80087f8:	2208      	movs	r2, #8
 80087fa:	4629      	mov	r1, r5
 80087fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008800:	f7fd fbe9 	bl	8005fd6 <memset>
 8008804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800880c:	e7e9      	b.n	80087e2 <__sfp+0x42>
 800880e:	bf00      	nop
 8008810:	0800a408 	.word	0x0800a408
 8008814:	ffff0001 	.word	0xffff0001

08008818 <_fwalk_reent>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4680      	mov	r8, r0
 800881e:	4689      	mov	r9, r1
 8008820:	2600      	movs	r6, #0
 8008822:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008826:	b914      	cbnz	r4, 800882e <_fwalk_reent+0x16>
 8008828:	4630      	mov	r0, r6
 800882a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008832:	3f01      	subs	r7, #1
 8008834:	d501      	bpl.n	800883a <_fwalk_reent+0x22>
 8008836:	6824      	ldr	r4, [r4, #0]
 8008838:	e7f5      	b.n	8008826 <_fwalk_reent+0xe>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d907      	bls.n	8008850 <_fwalk_reent+0x38>
 8008840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008844:	3301      	adds	r3, #1
 8008846:	d003      	beq.n	8008850 <_fwalk_reent+0x38>
 8008848:	4629      	mov	r1, r5
 800884a:	4640      	mov	r0, r8
 800884c:	47c8      	blx	r9
 800884e:	4306      	orrs	r6, r0
 8008850:	3568      	adds	r5, #104	; 0x68
 8008852:	e7ee      	b.n	8008832 <_fwalk_reent+0x1a>

08008854 <rshift>:
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	6906      	ldr	r6, [r0, #16]
 8008858:	114b      	asrs	r3, r1, #5
 800885a:	429e      	cmp	r6, r3
 800885c:	f100 0414 	add.w	r4, r0, #20
 8008860:	dd31      	ble.n	80088c6 <rshift+0x72>
 8008862:	f011 011f 	ands.w	r1, r1, #31
 8008866:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800886a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800886e:	d108      	bne.n	8008882 <rshift+0x2e>
 8008870:	4621      	mov	r1, r4
 8008872:	42b2      	cmp	r2, r6
 8008874:	460b      	mov	r3, r1
 8008876:	d211      	bcs.n	800889c <rshift+0x48>
 8008878:	f852 3b04 	ldr.w	r3, [r2], #4
 800887c:	f841 3b04 	str.w	r3, [r1], #4
 8008880:	e7f7      	b.n	8008872 <rshift+0x1e>
 8008882:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008886:	4623      	mov	r3, r4
 8008888:	f1c1 0c20 	rsb	ip, r1, #32
 800888c:	40cd      	lsrs	r5, r1
 800888e:	3204      	adds	r2, #4
 8008890:	42b2      	cmp	r2, r6
 8008892:	4617      	mov	r7, r2
 8008894:	d30d      	bcc.n	80088b2 <rshift+0x5e>
 8008896:	601d      	str	r5, [r3, #0]
 8008898:	b105      	cbz	r5, 800889c <rshift+0x48>
 800889a:	3304      	adds	r3, #4
 800889c:	42a3      	cmp	r3, r4
 800889e:	eba3 0204 	sub.w	r2, r3, r4
 80088a2:	bf08      	it	eq
 80088a4:	2300      	moveq	r3, #0
 80088a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088aa:	6102      	str	r2, [r0, #16]
 80088ac:	bf08      	it	eq
 80088ae:	6143      	streq	r3, [r0, #20]
 80088b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b2:	683f      	ldr	r7, [r7, #0]
 80088b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80088b8:	433d      	orrs	r5, r7
 80088ba:	f843 5b04 	str.w	r5, [r3], #4
 80088be:	f852 5b04 	ldr.w	r5, [r2], #4
 80088c2:	40cd      	lsrs	r5, r1
 80088c4:	e7e4      	b.n	8008890 <rshift+0x3c>
 80088c6:	4623      	mov	r3, r4
 80088c8:	e7e8      	b.n	800889c <rshift+0x48>

080088ca <__hexdig_fun>:
 80088ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d802      	bhi.n	80088d8 <__hexdig_fun+0xe>
 80088d2:	3820      	subs	r0, #32
 80088d4:	b2c0      	uxtb	r0, r0
 80088d6:	4770      	bx	lr
 80088d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d801      	bhi.n	80088e4 <__hexdig_fun+0x1a>
 80088e0:	3847      	subs	r0, #71	; 0x47
 80088e2:	e7f7      	b.n	80088d4 <__hexdig_fun+0xa>
 80088e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088e8:	2b05      	cmp	r3, #5
 80088ea:	d801      	bhi.n	80088f0 <__hexdig_fun+0x26>
 80088ec:	3827      	subs	r0, #39	; 0x27
 80088ee:	e7f1      	b.n	80088d4 <__hexdig_fun+0xa>
 80088f0:	2000      	movs	r0, #0
 80088f2:	4770      	bx	lr

080088f4 <__gethex>:
 80088f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	b08b      	sub	sp, #44	; 0x2c
 80088fa:	9002      	str	r0, [sp, #8]
 80088fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80088fe:	468a      	mov	sl, r1
 8008900:	4690      	mov	r8, r2
 8008902:	9306      	str	r3, [sp, #24]
 8008904:	f000 fad1 	bl	8008eaa <__localeconv_l>
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	f04f 0b00 	mov.w	fp, #0
 800890e:	4618      	mov	r0, r3
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	f7f7 fc1d 	bl	8000150 <strlen>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	9001      	str	r0, [sp, #4]
 800891a:	4403      	add	r3, r0
 800891c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008920:	9307      	str	r3, [sp, #28]
 8008922:	f8da 3000 	ldr.w	r3, [sl]
 8008926:	3302      	adds	r3, #2
 8008928:	461f      	mov	r7, r3
 800892a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800892e:	2830      	cmp	r0, #48	; 0x30
 8008930:	d06c      	beq.n	8008a0c <__gethex+0x118>
 8008932:	f7ff ffca 	bl	80088ca <__hexdig_fun>
 8008936:	4604      	mov	r4, r0
 8008938:	2800      	cmp	r0, #0
 800893a:	d16a      	bne.n	8008a12 <__gethex+0x11e>
 800893c:	9a01      	ldr	r2, [sp, #4]
 800893e:	9903      	ldr	r1, [sp, #12]
 8008940:	4638      	mov	r0, r7
 8008942:	f001 fa7a 	bl	8009e3a <strncmp>
 8008946:	2800      	cmp	r0, #0
 8008948:	d166      	bne.n	8008a18 <__gethex+0x124>
 800894a:	9b01      	ldr	r3, [sp, #4]
 800894c:	5cf8      	ldrb	r0, [r7, r3]
 800894e:	18fe      	adds	r6, r7, r3
 8008950:	f7ff ffbb 	bl	80088ca <__hexdig_fun>
 8008954:	2800      	cmp	r0, #0
 8008956:	d062      	beq.n	8008a1e <__gethex+0x12a>
 8008958:	4633      	mov	r3, r6
 800895a:	7818      	ldrb	r0, [r3, #0]
 800895c:	461f      	mov	r7, r3
 800895e:	2830      	cmp	r0, #48	; 0x30
 8008960:	f103 0301 	add.w	r3, r3, #1
 8008964:	d0f9      	beq.n	800895a <__gethex+0x66>
 8008966:	f7ff ffb0 	bl	80088ca <__hexdig_fun>
 800896a:	fab0 f580 	clz	r5, r0
 800896e:	4634      	mov	r4, r6
 8008970:	f04f 0b01 	mov.w	fp, #1
 8008974:	096d      	lsrs	r5, r5, #5
 8008976:	463a      	mov	r2, r7
 8008978:	4616      	mov	r6, r2
 800897a:	7830      	ldrb	r0, [r6, #0]
 800897c:	3201      	adds	r2, #1
 800897e:	f7ff ffa4 	bl	80088ca <__hexdig_fun>
 8008982:	2800      	cmp	r0, #0
 8008984:	d1f8      	bne.n	8008978 <__gethex+0x84>
 8008986:	9a01      	ldr	r2, [sp, #4]
 8008988:	9903      	ldr	r1, [sp, #12]
 800898a:	4630      	mov	r0, r6
 800898c:	f001 fa55 	bl	8009e3a <strncmp>
 8008990:	b950      	cbnz	r0, 80089a8 <__gethex+0xb4>
 8008992:	b954      	cbnz	r4, 80089aa <__gethex+0xb6>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	18f4      	adds	r4, r6, r3
 8008998:	4622      	mov	r2, r4
 800899a:	4616      	mov	r6, r2
 800899c:	7830      	ldrb	r0, [r6, #0]
 800899e:	3201      	adds	r2, #1
 80089a0:	f7ff ff93 	bl	80088ca <__hexdig_fun>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d1f8      	bne.n	800899a <__gethex+0xa6>
 80089a8:	b10c      	cbz	r4, 80089ae <__gethex+0xba>
 80089aa:	1ba4      	subs	r4, r4, r6
 80089ac:	00a4      	lsls	r4, r4, #2
 80089ae:	7833      	ldrb	r3, [r6, #0]
 80089b0:	2b50      	cmp	r3, #80	; 0x50
 80089b2:	d001      	beq.n	80089b8 <__gethex+0xc4>
 80089b4:	2b70      	cmp	r3, #112	; 0x70
 80089b6:	d140      	bne.n	8008a3a <__gethex+0x146>
 80089b8:	7873      	ldrb	r3, [r6, #1]
 80089ba:	2b2b      	cmp	r3, #43	; 0x2b
 80089bc:	d031      	beq.n	8008a22 <__gethex+0x12e>
 80089be:	2b2d      	cmp	r3, #45	; 0x2d
 80089c0:	d033      	beq.n	8008a2a <__gethex+0x136>
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	1c71      	adds	r1, r6, #1
 80089c8:	7808      	ldrb	r0, [r1, #0]
 80089ca:	f7ff ff7e 	bl	80088ca <__hexdig_fun>
 80089ce:	1e43      	subs	r3, r0, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b18      	cmp	r3, #24
 80089d4:	d831      	bhi.n	8008a3a <__gethex+0x146>
 80089d6:	f1a0 0210 	sub.w	r2, r0, #16
 80089da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089de:	f7ff ff74 	bl	80088ca <__hexdig_fun>
 80089e2:	1e43      	subs	r3, r0, #1
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b18      	cmp	r3, #24
 80089e8:	d922      	bls.n	8008a30 <__gethex+0x13c>
 80089ea:	f1b9 0f00 	cmp.w	r9, #0
 80089ee:	d000      	beq.n	80089f2 <__gethex+0xfe>
 80089f0:	4252      	negs	r2, r2
 80089f2:	4414      	add	r4, r2
 80089f4:	f8ca 1000 	str.w	r1, [sl]
 80089f8:	b30d      	cbz	r5, 8008a3e <__gethex+0x14a>
 80089fa:	f1bb 0f00 	cmp.w	fp, #0
 80089fe:	bf0c      	ite	eq
 8008a00:	2706      	moveq	r7, #6
 8008a02:	2700      	movne	r7, #0
 8008a04:	4638      	mov	r0, r7
 8008a06:	b00b      	add	sp, #44	; 0x2c
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0c:	f10b 0b01 	add.w	fp, fp, #1
 8008a10:	e78a      	b.n	8008928 <__gethex+0x34>
 8008a12:	2500      	movs	r5, #0
 8008a14:	462c      	mov	r4, r5
 8008a16:	e7ae      	b.n	8008976 <__gethex+0x82>
 8008a18:	463e      	mov	r6, r7
 8008a1a:	2501      	movs	r5, #1
 8008a1c:	e7c7      	b.n	80089ae <__gethex+0xba>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	e7fb      	b.n	8008a1a <__gethex+0x126>
 8008a22:	f04f 0900 	mov.w	r9, #0
 8008a26:	1cb1      	adds	r1, r6, #2
 8008a28:	e7ce      	b.n	80089c8 <__gethex+0xd4>
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	e7fa      	b.n	8008a26 <__gethex+0x132>
 8008a30:	230a      	movs	r3, #10
 8008a32:	fb03 0202 	mla	r2, r3, r2, r0
 8008a36:	3a10      	subs	r2, #16
 8008a38:	e7cf      	b.n	80089da <__gethex+0xe6>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	e7da      	b.n	80089f4 <__gethex+0x100>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	1bf3      	subs	r3, r6, r7
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b07      	cmp	r3, #7
 8008a46:	dc49      	bgt.n	8008adc <__gethex+0x1e8>
 8008a48:	9802      	ldr	r0, [sp, #8]
 8008a4a:	f000 fa67 	bl	8008f1c <_Balloc>
 8008a4e:	f04f 0b00 	mov.w	fp, #0
 8008a52:	4605      	mov	r5, r0
 8008a54:	46da      	mov	sl, fp
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	f100 0914 	add.w	r9, r0, #20
 8008a5c:	f1c3 0301 	rsb	r3, r3, #1
 8008a60:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a64:	9308      	str	r3, [sp, #32]
 8008a66:	42b7      	cmp	r7, r6
 8008a68:	d33b      	bcc.n	8008ae2 <__gethex+0x1ee>
 8008a6a:	9804      	ldr	r0, [sp, #16]
 8008a6c:	f840 ab04 	str.w	sl, [r0], #4
 8008a70:	eba0 0009 	sub.w	r0, r0, r9
 8008a74:	1080      	asrs	r0, r0, #2
 8008a76:	6128      	str	r0, [r5, #16]
 8008a78:	0147      	lsls	r7, r0, #5
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f000 fb12 	bl	80090a4 <__hi0bits>
 8008a80:	f8d8 6000 	ldr.w	r6, [r8]
 8008a84:	1a3f      	subs	r7, r7, r0
 8008a86:	42b7      	cmp	r7, r6
 8008a88:	dd64      	ble.n	8008b54 <__gethex+0x260>
 8008a8a:	1bbf      	subs	r7, r7, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 fe1b 	bl	80096ca <__any_on>
 8008a94:	4682      	mov	sl, r0
 8008a96:	b178      	cbz	r0, 8008ab8 <__gethex+0x1c4>
 8008a98:	f04f 0a01 	mov.w	sl, #1
 8008a9c:	1e7b      	subs	r3, r7, #1
 8008a9e:	1159      	asrs	r1, r3, #5
 8008aa0:	f003 021f 	and.w	r2, r3, #31
 8008aa4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008aa8:	fa0a f202 	lsl.w	r2, sl, r2
 8008aac:	420a      	tst	r2, r1
 8008aae:	d003      	beq.n	8008ab8 <__gethex+0x1c4>
 8008ab0:	4553      	cmp	r3, sl
 8008ab2:	dc46      	bgt.n	8008b42 <__gethex+0x24e>
 8008ab4:	f04f 0a02 	mov.w	sl, #2
 8008ab8:	4639      	mov	r1, r7
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7ff feca 	bl	8008854 <rshift>
 8008ac0:	443c      	add	r4, r7
 8008ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	da52      	bge.n	8008b70 <__gethex+0x27c>
 8008aca:	4629      	mov	r1, r5
 8008acc:	9802      	ldr	r0, [sp, #8]
 8008ace:	f000 fa59 	bl	8008f84 <_Bfree>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ad6:	27a3      	movs	r7, #163	; 0xa3
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e793      	b.n	8008a04 <__gethex+0x110>
 8008adc:	3101      	adds	r1, #1
 8008ade:	105b      	asrs	r3, r3, #1
 8008ae0:	e7b0      	b.n	8008a44 <__gethex+0x150>
 8008ae2:	1e73      	subs	r3, r6, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	9a07      	ldr	r2, [sp, #28]
 8008ae8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d018      	beq.n	8008b22 <__gethex+0x22e>
 8008af0:	f1bb 0f20 	cmp.w	fp, #32
 8008af4:	d107      	bne.n	8008b06 <__gethex+0x212>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	f8c3 a000 	str.w	sl, [r3]
 8008afc:	f04f 0a00 	mov.w	sl, #0
 8008b00:	46d3      	mov	fp, sl
 8008b02:	3304      	adds	r3, #4
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b0a:	f7ff fede 	bl	80088ca <__hexdig_fun>
 8008b0e:	f000 000f 	and.w	r0, r0, #15
 8008b12:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b16:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b1a:	f10b 0b04 	add.w	fp, fp, #4
 8008b1e:	9b05      	ldr	r3, [sp, #20]
 8008b20:	e00d      	b.n	8008b3e <__gethex+0x24a>
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	9a08      	ldr	r2, [sp, #32]
 8008b26:	4413      	add	r3, r2
 8008b28:	42bb      	cmp	r3, r7
 8008b2a:	d3e1      	bcc.n	8008af0 <__gethex+0x1fc>
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	9a01      	ldr	r2, [sp, #4]
 8008b30:	9903      	ldr	r1, [sp, #12]
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	f001 f981 	bl	8009e3a <strncmp>
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d1d8      	bne.n	8008af0 <__gethex+0x1fc>
 8008b3e:	461e      	mov	r6, r3
 8008b40:	e791      	b.n	8008a66 <__gethex+0x172>
 8008b42:	1eb9      	subs	r1, r7, #2
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 fdc0 	bl	80096ca <__any_on>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0b2      	beq.n	8008ab4 <__gethex+0x1c0>
 8008b4e:	f04f 0a03 	mov.w	sl, #3
 8008b52:	e7b1      	b.n	8008ab8 <__gethex+0x1c4>
 8008b54:	da09      	bge.n	8008b6a <__gethex+0x276>
 8008b56:	1bf7      	subs	r7, r6, r7
 8008b58:	4629      	mov	r1, r5
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	9802      	ldr	r0, [sp, #8]
 8008b5e:	f000 fbdb 	bl	8009318 <__lshift>
 8008b62:	4605      	mov	r5, r0
 8008b64:	1be4      	subs	r4, r4, r7
 8008b66:	f100 0914 	add.w	r9, r0, #20
 8008b6a:	f04f 0a00 	mov.w	sl, #0
 8008b6e:	e7a8      	b.n	8008ac2 <__gethex+0x1ce>
 8008b70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	dd6b      	ble.n	8008c50 <__gethex+0x35c>
 8008b78:	1b04      	subs	r4, r0, r4
 8008b7a:	42a6      	cmp	r6, r4
 8008b7c:	dc2e      	bgt.n	8008bdc <__gethex+0x2e8>
 8008b7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d022      	beq.n	8008bcc <__gethex+0x2d8>
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d024      	beq.n	8008bd4 <__gethex+0x2e0>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d115      	bne.n	8008bba <__gethex+0x2c6>
 8008b8e:	42a6      	cmp	r6, r4
 8008b90:	d113      	bne.n	8008bba <__gethex+0x2c6>
 8008b92:	2e01      	cmp	r6, #1
 8008b94:	dc0b      	bgt.n	8008bae <__gethex+0x2ba>
 8008b96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b9a:	9a06      	ldr	r2, [sp, #24]
 8008b9c:	2762      	movs	r7, #98	; 0x62
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	612b      	str	r3, [r5, #16]
 8008ba4:	f8c9 3000 	str.w	r3, [r9]
 8008ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008baa:	601d      	str	r5, [r3, #0]
 8008bac:	e72a      	b.n	8008a04 <__gethex+0x110>
 8008bae:	1e71      	subs	r1, r6, #1
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f000 fd8a 	bl	80096ca <__any_on>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1ed      	bne.n	8008b96 <__gethex+0x2a2>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	9802      	ldr	r0, [sp, #8]
 8008bbe:	f000 f9e1 	bl	8008f84 <_Bfree>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bc6:	2750      	movs	r7, #80	; 0x50
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	e71b      	b.n	8008a04 <__gethex+0x110>
 8008bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0e1      	beq.n	8008b96 <__gethex+0x2a2>
 8008bd2:	e7f2      	b.n	8008bba <__gethex+0x2c6>
 8008bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1dd      	bne.n	8008b96 <__gethex+0x2a2>
 8008bda:	e7ee      	b.n	8008bba <__gethex+0x2c6>
 8008bdc:	1e67      	subs	r7, r4, #1
 8008bde:	f1ba 0f00 	cmp.w	sl, #0
 8008be2:	d132      	bne.n	8008c4a <__gethex+0x356>
 8008be4:	b127      	cbz	r7, 8008bf0 <__gethex+0x2fc>
 8008be6:	4639      	mov	r1, r7
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 fd6e 	bl	80096ca <__any_on>
 8008bee:	4682      	mov	sl, r0
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	117a      	asrs	r2, r7, #5
 8008bf4:	f007 071f 	and.w	r7, r7, #31
 8008bf8:	fa03 f707 	lsl.w	r7, r3, r7
 8008bfc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008c00:	4621      	mov	r1, r4
 8008c02:	421f      	tst	r7, r3
 8008c04:	f04f 0702 	mov.w	r7, #2
 8008c08:	4628      	mov	r0, r5
 8008c0a:	bf18      	it	ne
 8008c0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c10:	1b36      	subs	r6, r6, r4
 8008c12:	f7ff fe1f 	bl	8008854 <rshift>
 8008c16:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008c1a:	f1ba 0f00 	cmp.w	sl, #0
 8008c1e:	d048      	beq.n	8008cb2 <__gethex+0x3be>
 8008c20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d015      	beq.n	8008c54 <__gethex+0x360>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d017      	beq.n	8008c5c <__gethex+0x368>
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d109      	bne.n	8008c44 <__gethex+0x350>
 8008c30:	f01a 0f02 	tst.w	sl, #2
 8008c34:	d006      	beq.n	8008c44 <__gethex+0x350>
 8008c36:	f8d9 3000 	ldr.w	r3, [r9]
 8008c3a:	ea4a 0a03 	orr.w	sl, sl, r3
 8008c3e:	f01a 0f01 	tst.w	sl, #1
 8008c42:	d10e      	bne.n	8008c62 <__gethex+0x36e>
 8008c44:	f047 0710 	orr.w	r7, r7, #16
 8008c48:	e033      	b.n	8008cb2 <__gethex+0x3be>
 8008c4a:	f04f 0a01 	mov.w	sl, #1
 8008c4e:	e7cf      	b.n	8008bf0 <__gethex+0x2fc>
 8008c50:	2701      	movs	r7, #1
 8008c52:	e7e2      	b.n	8008c1a <__gethex+0x326>
 8008c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c56:	f1c3 0301 	rsb	r3, r3, #1
 8008c5a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f0      	beq.n	8008c44 <__gethex+0x350>
 8008c62:	f04f 0c00 	mov.w	ip, #0
 8008c66:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008c6a:	f105 0314 	add.w	r3, r5, #20
 8008c6e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008c72:	eb03 010a 	add.w	r1, r3, sl
 8008c76:	4618      	mov	r0, r3
 8008c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c80:	d01c      	beq.n	8008cbc <__gethex+0x3c8>
 8008c82:	3201      	adds	r2, #1
 8008c84:	6002      	str	r2, [r0, #0]
 8008c86:	2f02      	cmp	r7, #2
 8008c88:	f105 0314 	add.w	r3, r5, #20
 8008c8c:	d138      	bne.n	8008d00 <__gethex+0x40c>
 8008c8e:	f8d8 2000 	ldr.w	r2, [r8]
 8008c92:	3a01      	subs	r2, #1
 8008c94:	42b2      	cmp	r2, r6
 8008c96:	d10a      	bne.n	8008cae <__gethex+0x3ba>
 8008c98:	2201      	movs	r2, #1
 8008c9a:	1171      	asrs	r1, r6, #5
 8008c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ca0:	f006 061f 	and.w	r6, r6, #31
 8008ca4:	fa02 f606 	lsl.w	r6, r2, r6
 8008ca8:	421e      	tst	r6, r3
 8008caa:	bf18      	it	ne
 8008cac:	4617      	movne	r7, r2
 8008cae:	f047 0720 	orr.w	r7, r7, #32
 8008cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cb4:	601d      	str	r5, [r3, #0]
 8008cb6:	9b06      	ldr	r3, [sp, #24]
 8008cb8:	601c      	str	r4, [r3, #0]
 8008cba:	e6a3      	b.n	8008a04 <__gethex+0x110>
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cc2:	d8d8      	bhi.n	8008c76 <__gethex+0x382>
 8008cc4:	68ab      	ldr	r3, [r5, #8]
 8008cc6:	4599      	cmp	r9, r3
 8008cc8:	db12      	blt.n	8008cf0 <__gethex+0x3fc>
 8008cca:	6869      	ldr	r1, [r5, #4]
 8008ccc:	9802      	ldr	r0, [sp, #8]
 8008cce:	3101      	adds	r1, #1
 8008cd0:	f000 f924 	bl	8008f1c <_Balloc>
 8008cd4:	4683      	mov	fp, r0
 8008cd6:	692a      	ldr	r2, [r5, #16]
 8008cd8:	f105 010c 	add.w	r1, r5, #12
 8008cdc:	3202      	adds	r2, #2
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f7fd f96d 	bl	8005fc0 <memcpy>
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	9802      	ldr	r0, [sp, #8]
 8008cea:	f000 f94b 	bl	8008f84 <_Bfree>
 8008cee:	465d      	mov	r5, fp
 8008cf0:	692b      	ldr	r3, [r5, #16]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	612a      	str	r2, [r5, #16]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008cfc:	615a      	str	r2, [r3, #20]
 8008cfe:	e7c2      	b.n	8008c86 <__gethex+0x392>
 8008d00:	692a      	ldr	r2, [r5, #16]
 8008d02:	454a      	cmp	r2, r9
 8008d04:	dd0b      	ble.n	8008d1e <__gethex+0x42a>
 8008d06:	2101      	movs	r1, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7ff fda3 	bl	8008854 <rshift>
 8008d0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d12:	3401      	adds	r4, #1
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	f6ff aed8 	blt.w	8008aca <__gethex+0x1d6>
 8008d1a:	2701      	movs	r7, #1
 8008d1c:	e7c7      	b.n	8008cae <__gethex+0x3ba>
 8008d1e:	f016 061f 	ands.w	r6, r6, #31
 8008d22:	d0fa      	beq.n	8008d1a <__gethex+0x426>
 8008d24:	449a      	add	sl, r3
 8008d26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008d2a:	f000 f9bb 	bl	80090a4 <__hi0bits>
 8008d2e:	f1c6 0620 	rsb	r6, r6, #32
 8008d32:	42b0      	cmp	r0, r6
 8008d34:	dbe7      	blt.n	8008d06 <__gethex+0x412>
 8008d36:	e7f0      	b.n	8008d1a <__gethex+0x426>

08008d38 <L_shift>:
 8008d38:	f1c2 0208 	rsb	r2, r2, #8
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	b570      	push	{r4, r5, r6, lr}
 8008d40:	f1c2 0620 	rsb	r6, r2, #32
 8008d44:	6843      	ldr	r3, [r0, #4]
 8008d46:	6804      	ldr	r4, [r0, #0]
 8008d48:	fa03 f506 	lsl.w	r5, r3, r6
 8008d4c:	432c      	orrs	r4, r5
 8008d4e:	40d3      	lsrs	r3, r2
 8008d50:	6004      	str	r4, [r0, #0]
 8008d52:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d56:	4288      	cmp	r0, r1
 8008d58:	d3f4      	bcc.n	8008d44 <L_shift+0xc>
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}

08008d5c <__match>:
 8008d5c:	b530      	push	{r4, r5, lr}
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d66:	b914      	cbnz	r4, 8008d6e <__match+0x12>
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	bd30      	pop	{r4, r5, pc}
 8008d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d76:	2d19      	cmp	r5, #25
 8008d78:	bf98      	it	ls
 8008d7a:	3220      	addls	r2, #32
 8008d7c:	42a2      	cmp	r2, r4
 8008d7e:	d0f0      	beq.n	8008d62 <__match+0x6>
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7f3      	b.n	8008d6c <__match+0x10>

08008d84 <__hexnan>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	2500      	movs	r5, #0
 8008d8a:	680b      	ldr	r3, [r1, #0]
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	115f      	asrs	r7, r3, #5
 8008d90:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008d94:	f013 031f 	ands.w	r3, r3, #31
 8008d98:	bf18      	it	ne
 8008d9a:	3704      	addne	r7, #4
 8008d9c:	1f3e      	subs	r6, r7, #4
 8008d9e:	4690      	mov	r8, r2
 8008da0:	46b1      	mov	r9, r6
 8008da2:	4634      	mov	r4, r6
 8008da4:	46ab      	mov	fp, r5
 8008da6:	b087      	sub	sp, #28
 8008da8:	6801      	ldr	r1, [r0, #0]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f847 5c04 	str.w	r5, [r7, #-4]
 8008db0:	9502      	str	r5, [sp, #8]
 8008db2:	784a      	ldrb	r2, [r1, #1]
 8008db4:	1c4b      	adds	r3, r1, #1
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	b342      	cbz	r2, 8008e0c <__hexnan+0x88>
 8008dba:	4610      	mov	r0, r2
 8008dbc:	9105      	str	r1, [sp, #20]
 8008dbe:	9204      	str	r2, [sp, #16]
 8008dc0:	f7ff fd83 	bl	80088ca <__hexdig_fun>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d143      	bne.n	8008e50 <__hexnan+0xcc>
 8008dc8:	9a04      	ldr	r2, [sp, #16]
 8008dca:	9905      	ldr	r1, [sp, #20]
 8008dcc:	2a20      	cmp	r2, #32
 8008dce:	d818      	bhi.n	8008e02 <__hexnan+0x7e>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	459b      	cmp	fp, r3
 8008dd4:	dd13      	ble.n	8008dfe <__hexnan+0x7a>
 8008dd6:	454c      	cmp	r4, r9
 8008dd8:	d206      	bcs.n	8008de8 <__hexnan+0x64>
 8008dda:	2d07      	cmp	r5, #7
 8008ddc:	dc04      	bgt.n	8008de8 <__hexnan+0x64>
 8008dde:	462a      	mov	r2, r5
 8008de0:	4649      	mov	r1, r9
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7ff ffa8 	bl	8008d38 <L_shift>
 8008de8:	4544      	cmp	r4, r8
 8008dea:	d944      	bls.n	8008e76 <__hexnan+0xf2>
 8008dec:	2300      	movs	r3, #0
 8008dee:	f1a4 0904 	sub.w	r9, r4, #4
 8008df2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008df6:	461d      	mov	r5, r3
 8008df8:	464c      	mov	r4, r9
 8008dfa:	f8cd b008 	str.w	fp, [sp, #8]
 8008dfe:	9903      	ldr	r1, [sp, #12]
 8008e00:	e7d7      	b.n	8008db2 <__hexnan+0x2e>
 8008e02:	2a29      	cmp	r2, #41	; 0x29
 8008e04:	d14a      	bne.n	8008e9c <__hexnan+0x118>
 8008e06:	3102      	adds	r1, #2
 8008e08:	f8ca 1000 	str.w	r1, [sl]
 8008e0c:	f1bb 0f00 	cmp.w	fp, #0
 8008e10:	d044      	beq.n	8008e9c <__hexnan+0x118>
 8008e12:	454c      	cmp	r4, r9
 8008e14:	d206      	bcs.n	8008e24 <__hexnan+0xa0>
 8008e16:	2d07      	cmp	r5, #7
 8008e18:	dc04      	bgt.n	8008e24 <__hexnan+0xa0>
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff ff8a 	bl	8008d38 <L_shift>
 8008e24:	4544      	cmp	r4, r8
 8008e26:	d928      	bls.n	8008e7a <__hexnan+0xf6>
 8008e28:	4643      	mov	r3, r8
 8008e2a:	f854 2b04 	ldr.w	r2, [r4], #4
 8008e2e:	42a6      	cmp	r6, r4
 8008e30:	f843 2b04 	str.w	r2, [r3], #4
 8008e34:	d2f9      	bcs.n	8008e2a <__hexnan+0xa6>
 8008e36:	2200      	movs	r2, #0
 8008e38:	f843 2b04 	str.w	r2, [r3], #4
 8008e3c:	429e      	cmp	r6, r3
 8008e3e:	d2fb      	bcs.n	8008e38 <__hexnan+0xb4>
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	b91b      	cbnz	r3, 8008e4c <__hexnan+0xc8>
 8008e44:	4546      	cmp	r6, r8
 8008e46:	d127      	bne.n	8008e98 <__hexnan+0x114>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	2005      	movs	r0, #5
 8008e4e:	e026      	b.n	8008e9e <__hexnan+0x11a>
 8008e50:	3501      	adds	r5, #1
 8008e52:	2d08      	cmp	r5, #8
 8008e54:	f10b 0b01 	add.w	fp, fp, #1
 8008e58:	dd06      	ble.n	8008e68 <__hexnan+0xe4>
 8008e5a:	4544      	cmp	r4, r8
 8008e5c:	d9cf      	bls.n	8008dfe <__hexnan+0x7a>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2501      	movs	r5, #1
 8008e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e66:	3c04      	subs	r4, #4
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	f000 000f 	and.w	r0, r0, #15
 8008e6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e72:	6020      	str	r0, [r4, #0]
 8008e74:	e7c3      	b.n	8008dfe <__hexnan+0x7a>
 8008e76:	2508      	movs	r5, #8
 8008e78:	e7c1      	b.n	8008dfe <__hexnan+0x7a>
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0df      	beq.n	8008e40 <__hexnan+0xbc>
 8008e80:	f04f 32ff 	mov.w	r2, #4294967295
 8008e84:	f1c3 0320 	rsb	r3, r3, #32
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008e90:	401a      	ands	r2, r3
 8008e92:	f847 2c04 	str.w	r2, [r7, #-4]
 8008e96:	e7d3      	b.n	8008e40 <__hexnan+0xbc>
 8008e98:	3e04      	subs	r6, #4
 8008e9a:	e7d1      	b.n	8008e40 <__hexnan+0xbc>
 8008e9c:	2004      	movs	r0, #4
 8008e9e:	b007      	add	sp, #28
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ea4 <__locale_ctype_ptr_l>:
 8008ea4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008ea8:	4770      	bx	lr

08008eaa <__localeconv_l>:
 8008eaa:	30f0      	adds	r0, #240	; 0xf0
 8008eac:	4770      	bx	lr
	...

08008eb0 <_localeconv_r>:
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <_localeconv_r+0x14>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6a18      	ldr	r0, [r3, #32]
 8008eb6:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <_localeconv_r+0x18>)
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	bf08      	it	eq
 8008ebc:	4618      	moveq	r0, r3
 8008ebe:	30f0      	adds	r0, #240	; 0xf0
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000010 	.word	0x20000010
 8008ec8:	20000074 	.word	0x20000074

08008ecc <malloc>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <malloc+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f000 bc75 	b.w	80097c0 <_malloc_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000010 	.word	0x20000010

08008edc <__ascii_mbtowc>:
 8008edc:	b082      	sub	sp, #8
 8008ede:	b901      	cbnz	r1, 8008ee2 <__ascii_mbtowc+0x6>
 8008ee0:	a901      	add	r1, sp, #4
 8008ee2:	b142      	cbz	r2, 8008ef6 <__ascii_mbtowc+0x1a>
 8008ee4:	b14b      	cbz	r3, 8008efa <__ascii_mbtowc+0x1e>
 8008ee6:	7813      	ldrb	r3, [r2, #0]
 8008ee8:	600b      	str	r3, [r1, #0]
 8008eea:	7812      	ldrb	r2, [r2, #0]
 8008eec:	1c10      	adds	r0, r2, #0
 8008eee:	bf18      	it	ne
 8008ef0:	2001      	movne	r0, #1
 8008ef2:	b002      	add	sp, #8
 8008ef4:	4770      	bx	lr
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	e7fb      	b.n	8008ef2 <__ascii_mbtowc+0x16>
 8008efa:	f06f 0001 	mvn.w	r0, #1
 8008efe:	e7f8      	b.n	8008ef2 <__ascii_mbtowc+0x16>

08008f00 <memchr>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	b2c9      	uxtb	r1, r1
 8008f04:	4402      	add	r2, r0
 8008f06:	4290      	cmp	r0, r2
 8008f08:	4603      	mov	r3, r0
 8008f0a:	d101      	bne.n	8008f10 <memchr+0x10>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e003      	b.n	8008f18 <memchr+0x18>
 8008f10:	781c      	ldrb	r4, [r3, #0]
 8008f12:	3001      	adds	r0, #1
 8008f14:	428c      	cmp	r4, r1
 8008f16:	d1f6      	bne.n	8008f06 <memchr+0x6>
 8008f18:	4618      	mov	r0, r3
 8008f1a:	bd10      	pop	{r4, pc}

08008f1c <_Balloc>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f20:	4604      	mov	r4, r0
 8008f22:	460e      	mov	r6, r1
 8008f24:	b93d      	cbnz	r5, 8008f36 <_Balloc+0x1a>
 8008f26:	2010      	movs	r0, #16
 8008f28:	f7ff ffd0 	bl	8008ecc <malloc>
 8008f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f32:	6005      	str	r5, [r0, #0]
 8008f34:	60c5      	str	r5, [r0, #12]
 8008f36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f38:	68eb      	ldr	r3, [r5, #12]
 8008f3a:	b183      	cbz	r3, 8008f5e <_Balloc+0x42>
 8008f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f44:	b9b8      	cbnz	r0, 8008f76 <_Balloc+0x5a>
 8008f46:	2101      	movs	r1, #1
 8008f48:	fa01 f506 	lsl.w	r5, r1, r6
 8008f4c:	1d6a      	adds	r2, r5, #5
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fbdb 	bl	800970c <_calloc_r>
 8008f56:	b160      	cbz	r0, 8008f72 <_Balloc+0x56>
 8008f58:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f5c:	e00e      	b.n	8008f7c <_Balloc+0x60>
 8008f5e:	2221      	movs	r2, #33	; 0x21
 8008f60:	2104      	movs	r1, #4
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fbd2 	bl	800970c <_calloc_r>
 8008f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6a:	60e8      	str	r0, [r5, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e4      	bne.n	8008f3c <_Balloc+0x20>
 8008f72:	2000      	movs	r0, #0
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	6802      	ldr	r2, [r0, #0]
 8008f78:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f82:	e7f7      	b.n	8008f74 <_Balloc+0x58>

08008f84 <_Bfree>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	b93c      	cbnz	r4, 8008f9e <_Bfree+0x1a>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	f7ff ff9c 	bl	8008ecc <malloc>
 8008f94:	6270      	str	r0, [r6, #36]	; 0x24
 8008f96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f9a:	6004      	str	r4, [r0, #0]
 8008f9c:	60c4      	str	r4, [r0, #12]
 8008f9e:	b13d      	cbz	r5, 8008fb0 <_Bfree+0x2c>
 8008fa0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fa2:	686a      	ldr	r2, [r5, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008faa:	6029      	str	r1, [r5, #0]
 8008fac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}

08008fb2 <__multadd>:
 8008fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	461f      	mov	r7, r3
 8008fb8:	4606      	mov	r6, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	690d      	ldr	r5, [r1, #16]
 8008fc0:	f101 0c14 	add.w	ip, r1, #20
 8008fc4:	f8dc 0000 	ldr.w	r0, [ip]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	b281      	uxth	r1, r0
 8008fcc:	fb02 7101 	mla	r1, r2, r1, r7
 8008fd0:	0c00      	lsrs	r0, r0, #16
 8008fd2:	0c0f      	lsrs	r7, r1, #16
 8008fd4:	fb02 7000 	mla	r0, r2, r0, r7
 8008fd8:	b289      	uxth	r1, r1
 8008fda:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008fe4:	f84c 1b04 	str.w	r1, [ip], #4
 8008fe8:	dcec      	bgt.n	8008fc4 <__multadd+0x12>
 8008fea:	b1d7      	cbz	r7, 8009022 <__multadd+0x70>
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	42ab      	cmp	r3, r5
 8008ff0:	dc12      	bgt.n	8009018 <__multadd+0x66>
 8008ff2:	6861      	ldr	r1, [r4, #4]
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	f7ff ff90 	bl	8008f1c <_Balloc>
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	6922      	ldr	r2, [r4, #16]
 8009000:	f104 010c 	add.w	r1, r4, #12
 8009004:	3202      	adds	r2, #2
 8009006:	0092      	lsls	r2, r2, #2
 8009008:	300c      	adds	r0, #12
 800900a:	f7fc ffd9 	bl	8005fc0 <memcpy>
 800900e:	4621      	mov	r1, r4
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ffb7 	bl	8008f84 <_Bfree>
 8009016:	4644      	mov	r4, r8
 8009018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800901c:	3501      	adds	r5, #1
 800901e:	615f      	str	r7, [r3, #20]
 8009020:	6125      	str	r5, [r4, #16]
 8009022:	4620      	mov	r0, r4
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009028 <__s2b>:
 8009028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4615      	mov	r5, r2
 800902e:	2209      	movs	r2, #9
 8009030:	461f      	mov	r7, r3
 8009032:	3308      	adds	r3, #8
 8009034:	460c      	mov	r4, r1
 8009036:	fb93 f3f2 	sdiv	r3, r3, r2
 800903a:	4606      	mov	r6, r0
 800903c:	2201      	movs	r2, #1
 800903e:	2100      	movs	r1, #0
 8009040:	429a      	cmp	r2, r3
 8009042:	db20      	blt.n	8009086 <__s2b+0x5e>
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ff69 	bl	8008f1c <_Balloc>
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	2d09      	cmp	r5, #9
 800904e:	6143      	str	r3, [r0, #20]
 8009050:	f04f 0301 	mov.w	r3, #1
 8009054:	6103      	str	r3, [r0, #16]
 8009056:	dd19      	ble.n	800908c <__s2b+0x64>
 8009058:	f104 0809 	add.w	r8, r4, #9
 800905c:	46c1      	mov	r9, r8
 800905e:	442c      	add	r4, r5
 8009060:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009064:	4601      	mov	r1, r0
 8009066:	3b30      	subs	r3, #48	; 0x30
 8009068:	220a      	movs	r2, #10
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ffa1 	bl	8008fb2 <__multadd>
 8009070:	45a1      	cmp	r9, r4
 8009072:	d1f5      	bne.n	8009060 <__s2b+0x38>
 8009074:	eb08 0405 	add.w	r4, r8, r5
 8009078:	3c08      	subs	r4, #8
 800907a:	1b2d      	subs	r5, r5, r4
 800907c:	1963      	adds	r3, r4, r5
 800907e:	42bb      	cmp	r3, r7
 8009080:	db07      	blt.n	8009092 <__s2b+0x6a>
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	0052      	lsls	r2, r2, #1
 8009088:	3101      	adds	r1, #1
 800908a:	e7d9      	b.n	8009040 <__s2b+0x18>
 800908c:	340a      	adds	r4, #10
 800908e:	2509      	movs	r5, #9
 8009090:	e7f3      	b.n	800907a <__s2b+0x52>
 8009092:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009096:	4601      	mov	r1, r0
 8009098:	3b30      	subs	r3, #48	; 0x30
 800909a:	220a      	movs	r2, #10
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff ff88 	bl	8008fb2 <__multadd>
 80090a2:	e7eb      	b.n	800907c <__s2b+0x54>

080090a4 <__hi0bits>:
 80090a4:	0c02      	lsrs	r2, r0, #16
 80090a6:	0412      	lsls	r2, r2, #16
 80090a8:	4603      	mov	r3, r0
 80090aa:	b9b2      	cbnz	r2, 80090da <__hi0bits+0x36>
 80090ac:	0403      	lsls	r3, r0, #16
 80090ae:	2010      	movs	r0, #16
 80090b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090b4:	bf04      	itt	eq
 80090b6:	021b      	lsleq	r3, r3, #8
 80090b8:	3008      	addeq	r0, #8
 80090ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090be:	bf04      	itt	eq
 80090c0:	011b      	lsleq	r3, r3, #4
 80090c2:	3004      	addeq	r0, #4
 80090c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80090c8:	bf04      	itt	eq
 80090ca:	009b      	lsleq	r3, r3, #2
 80090cc:	3002      	addeq	r0, #2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	db06      	blt.n	80090e0 <__hi0bits+0x3c>
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	d503      	bpl.n	80090de <__hi0bits+0x3a>
 80090d6:	3001      	adds	r0, #1
 80090d8:	4770      	bx	lr
 80090da:	2000      	movs	r0, #0
 80090dc:	e7e8      	b.n	80090b0 <__hi0bits+0xc>
 80090de:	2020      	movs	r0, #32
 80090e0:	4770      	bx	lr

080090e2 <__lo0bits>:
 80090e2:	6803      	ldr	r3, [r0, #0]
 80090e4:	4601      	mov	r1, r0
 80090e6:	f013 0207 	ands.w	r2, r3, #7
 80090ea:	d00b      	beq.n	8009104 <__lo0bits+0x22>
 80090ec:	07da      	lsls	r2, r3, #31
 80090ee:	d423      	bmi.n	8009138 <__lo0bits+0x56>
 80090f0:	0798      	lsls	r0, r3, #30
 80090f2:	bf49      	itett	mi
 80090f4:	085b      	lsrmi	r3, r3, #1
 80090f6:	089b      	lsrpl	r3, r3, #2
 80090f8:	2001      	movmi	r0, #1
 80090fa:	600b      	strmi	r3, [r1, #0]
 80090fc:	bf5c      	itt	pl
 80090fe:	600b      	strpl	r3, [r1, #0]
 8009100:	2002      	movpl	r0, #2
 8009102:	4770      	bx	lr
 8009104:	b298      	uxth	r0, r3
 8009106:	b9a8      	cbnz	r0, 8009134 <__lo0bits+0x52>
 8009108:	2010      	movs	r0, #16
 800910a:	0c1b      	lsrs	r3, r3, #16
 800910c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009110:	bf04      	itt	eq
 8009112:	0a1b      	lsreq	r3, r3, #8
 8009114:	3008      	addeq	r0, #8
 8009116:	071a      	lsls	r2, r3, #28
 8009118:	bf04      	itt	eq
 800911a:	091b      	lsreq	r3, r3, #4
 800911c:	3004      	addeq	r0, #4
 800911e:	079a      	lsls	r2, r3, #30
 8009120:	bf04      	itt	eq
 8009122:	089b      	lsreq	r3, r3, #2
 8009124:	3002      	addeq	r0, #2
 8009126:	07da      	lsls	r2, r3, #31
 8009128:	d402      	bmi.n	8009130 <__lo0bits+0x4e>
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	d006      	beq.n	800913c <__lo0bits+0x5a>
 800912e:	3001      	adds	r0, #1
 8009130:	600b      	str	r3, [r1, #0]
 8009132:	4770      	bx	lr
 8009134:	4610      	mov	r0, r2
 8009136:	e7e9      	b.n	800910c <__lo0bits+0x2a>
 8009138:	2000      	movs	r0, #0
 800913a:	4770      	bx	lr
 800913c:	2020      	movs	r0, #32
 800913e:	4770      	bx	lr

08009140 <__i2b>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	2101      	movs	r1, #1
 8009146:	f7ff fee9 	bl	8008f1c <_Balloc>
 800914a:	2201      	movs	r2, #1
 800914c:	6144      	str	r4, [r0, #20]
 800914e:	6102      	str	r2, [r0, #16]
 8009150:	bd10      	pop	{r4, pc}

08009152 <__multiply>:
 8009152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009156:	4614      	mov	r4, r2
 8009158:	690a      	ldr	r2, [r1, #16]
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	4688      	mov	r8, r1
 800915e:	429a      	cmp	r2, r3
 8009160:	bfbe      	ittt	lt
 8009162:	460b      	movlt	r3, r1
 8009164:	46a0      	movlt	r8, r4
 8009166:	461c      	movlt	r4, r3
 8009168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800916c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009178:	eb07 0609 	add.w	r6, r7, r9
 800917c:	42b3      	cmp	r3, r6
 800917e:	bfb8      	it	lt
 8009180:	3101      	addlt	r1, #1
 8009182:	f7ff fecb 	bl	8008f1c <_Balloc>
 8009186:	f100 0514 	add.w	r5, r0, #20
 800918a:	462b      	mov	r3, r5
 800918c:	2200      	movs	r2, #0
 800918e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009192:	4573      	cmp	r3, lr
 8009194:	d316      	bcc.n	80091c4 <__multiply+0x72>
 8009196:	f104 0214 	add.w	r2, r4, #20
 800919a:	f108 0114 	add.w	r1, r8, #20
 800919e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80091a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	9b00      	ldr	r3, [sp, #0]
 80091aa:	9201      	str	r2, [sp, #4]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d80c      	bhi.n	80091ca <__multiply+0x78>
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	dd03      	ble.n	80091bc <__multiply+0x6a>
 80091b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d05d      	beq.n	8009278 <__multiply+0x126>
 80091bc:	6106      	str	r6, [r0, #16]
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	f843 2b04 	str.w	r2, [r3], #4
 80091c8:	e7e3      	b.n	8009192 <__multiply+0x40>
 80091ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80091ce:	f1bb 0f00 	cmp.w	fp, #0
 80091d2:	d023      	beq.n	800921c <__multiply+0xca>
 80091d4:	4689      	mov	r9, r1
 80091d6:	46ac      	mov	ip, r5
 80091d8:	f04f 0800 	mov.w	r8, #0
 80091dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80091e0:	f8dc a000 	ldr.w	sl, [ip]
 80091e4:	b2a3      	uxth	r3, r4
 80091e6:	fa1f fa8a 	uxth.w	sl, sl
 80091ea:	fb0b a303 	mla	r3, fp, r3, sl
 80091ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091f2:	f8dc 4000 	ldr.w	r4, [ip]
 80091f6:	4443      	add	r3, r8
 80091f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8009200:	46e2      	mov	sl, ip
 8009202:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800920c:	454f      	cmp	r7, r9
 800920e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009212:	f84a 3b04 	str.w	r3, [sl], #4
 8009216:	d82b      	bhi.n	8009270 <__multiply+0x11e>
 8009218:	f8cc 8004 	str.w	r8, [ip, #4]
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	3204      	adds	r2, #4
 8009220:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009224:	f1ba 0f00 	cmp.w	sl, #0
 8009228:	d020      	beq.n	800926c <__multiply+0x11a>
 800922a:	4689      	mov	r9, r1
 800922c:	46a8      	mov	r8, r5
 800922e:	f04f 0b00 	mov.w	fp, #0
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	f8b9 c000 	ldrh.w	ip, [r9]
 8009238:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800923c:	b29b      	uxth	r3, r3
 800923e:	fb0a 440c 	mla	r4, sl, ip, r4
 8009242:	46c4      	mov	ip, r8
 8009244:	445c      	add	r4, fp
 8009246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800924a:	f84c 3b04 	str.w	r3, [ip], #4
 800924e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009252:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	fb0a b303 	mla	r3, sl, r3, fp
 800925c:	454f      	cmp	r7, r9
 800925e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009262:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009266:	d805      	bhi.n	8009274 <__multiply+0x122>
 8009268:	f8c8 3004 	str.w	r3, [r8, #4]
 800926c:	3504      	adds	r5, #4
 800926e:	e79b      	b.n	80091a8 <__multiply+0x56>
 8009270:	46d4      	mov	ip, sl
 8009272:	e7b3      	b.n	80091dc <__multiply+0x8a>
 8009274:	46e0      	mov	r8, ip
 8009276:	e7dd      	b.n	8009234 <__multiply+0xe2>
 8009278:	3e01      	subs	r6, #1
 800927a:	e799      	b.n	80091b0 <__multiply+0x5e>

0800927c <__pow5mult>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4615      	mov	r5, r2
 8009282:	f012 0203 	ands.w	r2, r2, #3
 8009286:	4606      	mov	r6, r0
 8009288:	460f      	mov	r7, r1
 800928a:	d007      	beq.n	800929c <__pow5mult+0x20>
 800928c:	4c21      	ldr	r4, [pc, #132]	; (8009314 <__pow5mult+0x98>)
 800928e:	3a01      	subs	r2, #1
 8009290:	2300      	movs	r3, #0
 8009292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009296:	f7ff fe8c 	bl	8008fb2 <__multadd>
 800929a:	4607      	mov	r7, r0
 800929c:	10ad      	asrs	r5, r5, #2
 800929e:	d035      	beq.n	800930c <__pow5mult+0x90>
 80092a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092a2:	b93c      	cbnz	r4, 80092b4 <__pow5mult+0x38>
 80092a4:	2010      	movs	r0, #16
 80092a6:	f7ff fe11 	bl	8008ecc <malloc>
 80092aa:	6270      	str	r0, [r6, #36]	; 0x24
 80092ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b0:	6004      	str	r4, [r0, #0]
 80092b2:	60c4      	str	r4, [r0, #12]
 80092b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092bc:	b94c      	cbnz	r4, 80092d2 <__pow5mult+0x56>
 80092be:	f240 2171 	movw	r1, #625	; 0x271
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff3c 	bl	8009140 <__i2b>
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	07eb      	lsls	r3, r5, #31
 80092d8:	d50a      	bpl.n	80092f0 <__pow5mult+0x74>
 80092da:	4639      	mov	r1, r7
 80092dc:	4622      	mov	r2, r4
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff ff37 	bl	8009152 <__multiply>
 80092e4:	4681      	mov	r9, r0
 80092e6:	4639      	mov	r1, r7
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff fe4b 	bl	8008f84 <_Bfree>
 80092ee:	464f      	mov	r7, r9
 80092f0:	106d      	asrs	r5, r5, #1
 80092f2:	d00b      	beq.n	800930c <__pow5mult+0x90>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	b938      	cbnz	r0, 8009308 <__pow5mult+0x8c>
 80092f8:	4622      	mov	r2, r4
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff ff28 	bl	8009152 <__multiply>
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f8c0 8000 	str.w	r8, [r0]
 8009308:	4604      	mov	r4, r0
 800930a:	e7e4      	b.n	80092d6 <__pow5mult+0x5a>
 800930c:	4638      	mov	r0, r7
 800930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009312:	bf00      	nop
 8009314:	0800a608 	.word	0x0800a608

08009318 <__lshift>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	4607      	mov	r7, r0
 8009320:	4616      	mov	r6, r2
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009328:	eb0a 0903 	add.w	r9, sl, r3
 800932c:	6849      	ldr	r1, [r1, #4]
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	f109 0501 	add.w	r5, r9, #1
 8009334:	42ab      	cmp	r3, r5
 8009336:	db32      	blt.n	800939e <__lshift+0x86>
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fdef 	bl	8008f1c <_Balloc>
 800933e:	2300      	movs	r3, #0
 8009340:	4680      	mov	r8, r0
 8009342:	461a      	mov	r2, r3
 8009344:	f100 0114 	add.w	r1, r0, #20
 8009348:	4553      	cmp	r3, sl
 800934a:	db2b      	blt.n	80093a4 <__lshift+0x8c>
 800934c:	6920      	ldr	r0, [r4, #16]
 800934e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009352:	f104 0314 	add.w	r3, r4, #20
 8009356:	f016 021f 	ands.w	r2, r6, #31
 800935a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800935e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009362:	d025      	beq.n	80093b0 <__lshift+0x98>
 8009364:	2000      	movs	r0, #0
 8009366:	f1c2 0e20 	rsb	lr, r2, #32
 800936a:	468a      	mov	sl, r1
 800936c:	681e      	ldr	r6, [r3, #0]
 800936e:	4096      	lsls	r6, r2
 8009370:	4330      	orrs	r0, r6
 8009372:	f84a 0b04 	str.w	r0, [sl], #4
 8009376:	f853 0b04 	ldr.w	r0, [r3], #4
 800937a:	459c      	cmp	ip, r3
 800937c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009380:	d814      	bhi.n	80093ac <__lshift+0x94>
 8009382:	6048      	str	r0, [r1, #4]
 8009384:	b108      	cbz	r0, 800938a <__lshift+0x72>
 8009386:	f109 0502 	add.w	r5, r9, #2
 800938a:	3d01      	subs	r5, #1
 800938c:	4638      	mov	r0, r7
 800938e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009392:	4621      	mov	r1, r4
 8009394:	f7ff fdf6 	bl	8008f84 <_Bfree>
 8009398:	4640      	mov	r0, r8
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	3101      	adds	r1, #1
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	e7c7      	b.n	8009334 <__lshift+0x1c>
 80093a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80093a8:	3301      	adds	r3, #1
 80093aa:	e7cd      	b.n	8009348 <__lshift+0x30>
 80093ac:	4651      	mov	r1, sl
 80093ae:	e7dc      	b.n	800936a <__lshift+0x52>
 80093b0:	3904      	subs	r1, #4
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	459c      	cmp	ip, r3
 80093b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093bc:	d8f9      	bhi.n	80093b2 <__lshift+0x9a>
 80093be:	e7e4      	b.n	800938a <__lshift+0x72>

080093c0 <__mcmp>:
 80093c0:	6903      	ldr	r3, [r0, #16]
 80093c2:	690a      	ldr	r2, [r1, #16]
 80093c4:	b530      	push	{r4, r5, lr}
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	d10c      	bne.n	80093e4 <__mcmp+0x24>
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	3014      	adds	r0, #20
 80093ce:	3114      	adds	r1, #20
 80093d0:	1884      	adds	r4, r0, r2
 80093d2:	4411      	add	r1, r2
 80093d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093dc:	4295      	cmp	r5, r2
 80093de:	d003      	beq.n	80093e8 <__mcmp+0x28>
 80093e0:	d305      	bcc.n	80093ee <__mcmp+0x2e>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d3f3      	bcc.n	80093d4 <__mcmp+0x14>
 80093ec:	e7fa      	b.n	80093e4 <__mcmp+0x24>
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e7f7      	b.n	80093e4 <__mcmp+0x24>

080093f4 <__mdiff>:
 80093f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f8:	460d      	mov	r5, r1
 80093fa:	4607      	mov	r7, r0
 80093fc:	4611      	mov	r1, r2
 80093fe:	4628      	mov	r0, r5
 8009400:	4614      	mov	r4, r2
 8009402:	f7ff ffdd 	bl	80093c0 <__mcmp>
 8009406:	1e06      	subs	r6, r0, #0
 8009408:	d108      	bne.n	800941c <__mdiff+0x28>
 800940a:	4631      	mov	r1, r6
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff fd85 	bl	8008f1c <_Balloc>
 8009412:	2301      	movs	r3, #1
 8009414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941c:	bfa4      	itt	ge
 800941e:	4623      	movge	r3, r4
 8009420:	462c      	movge	r4, r5
 8009422:	4638      	mov	r0, r7
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	bfa6      	itte	ge
 8009428:	461d      	movge	r5, r3
 800942a:	2600      	movge	r6, #0
 800942c:	2601      	movlt	r6, #1
 800942e:	f7ff fd75 	bl	8008f1c <_Balloc>
 8009432:	f04f 0e00 	mov.w	lr, #0
 8009436:	60c6      	str	r6, [r0, #12]
 8009438:	692b      	ldr	r3, [r5, #16]
 800943a:	6926      	ldr	r6, [r4, #16]
 800943c:	f104 0214 	add.w	r2, r4, #20
 8009440:	f105 0914 	add.w	r9, r5, #20
 8009444:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009448:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800944c:	f100 0114 	add.w	r1, r0, #20
 8009450:	f852 ab04 	ldr.w	sl, [r2], #4
 8009454:	f859 5b04 	ldr.w	r5, [r9], #4
 8009458:	fa1f f38a 	uxth.w	r3, sl
 800945c:	4473      	add	r3, lr
 800945e:	b2ac      	uxth	r4, r5
 8009460:	1b1b      	subs	r3, r3, r4
 8009462:	0c2c      	lsrs	r4, r5, #16
 8009464:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009468:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800946c:	b29b      	uxth	r3, r3
 800946e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009472:	45c8      	cmp	r8, r9
 8009474:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009478:	4694      	mov	ip, r2
 800947a:	f841 4b04 	str.w	r4, [r1], #4
 800947e:	d8e7      	bhi.n	8009450 <__mdiff+0x5c>
 8009480:	45bc      	cmp	ip, r7
 8009482:	d304      	bcc.n	800948e <__mdiff+0x9a>
 8009484:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009488:	b183      	cbz	r3, 80094ac <__mdiff+0xb8>
 800948a:	6106      	str	r6, [r0, #16]
 800948c:	e7c4      	b.n	8009418 <__mdiff+0x24>
 800948e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009492:	b2a2      	uxth	r2, r4
 8009494:	4472      	add	r2, lr
 8009496:	1413      	asrs	r3, r2, #16
 8009498:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800949c:	b292      	uxth	r2, r2
 800949e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094a2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80094a6:	f841 2b04 	str.w	r2, [r1], #4
 80094aa:	e7e9      	b.n	8009480 <__mdiff+0x8c>
 80094ac:	3e01      	subs	r6, #1
 80094ae:	e7e9      	b.n	8009484 <__mdiff+0x90>

080094b0 <__ulp>:
 80094b0:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <__ulp+0x44>)
 80094b2:	400b      	ands	r3, r1
 80094b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dd02      	ble.n	80094c2 <__ulp+0x12>
 80094bc:	2000      	movs	r0, #0
 80094be:	4619      	mov	r1, r3
 80094c0:	4770      	bx	lr
 80094c2:	425b      	negs	r3, r3
 80094c4:	151b      	asrs	r3, r3, #20
 80094c6:	2b13      	cmp	r3, #19
 80094c8:	f04f 0000 	mov.w	r0, #0
 80094cc:	f04f 0100 	mov.w	r1, #0
 80094d0:	dc04      	bgt.n	80094dc <__ulp+0x2c>
 80094d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80094d6:	fa42 f103 	asr.w	r1, r2, r3
 80094da:	4770      	bx	lr
 80094dc:	2201      	movs	r2, #1
 80094de:	3b14      	subs	r3, #20
 80094e0:	2b1e      	cmp	r3, #30
 80094e2:	bfce      	itee	gt
 80094e4:	4613      	movgt	r3, r2
 80094e6:	f1c3 031f 	rsble	r3, r3, #31
 80094ea:	fa02 f303 	lslle.w	r3, r2, r3
 80094ee:	4618      	mov	r0, r3
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	7ff00000 	.word	0x7ff00000

080094f8 <__b2d>:
 80094f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	6907      	ldr	r7, [r0, #16]
 80094fe:	f100 0914 	add.w	r9, r0, #20
 8009502:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009506:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800950a:	f1a7 0804 	sub.w	r8, r7, #4
 800950e:	4630      	mov	r0, r6
 8009510:	f7ff fdc8 	bl	80090a4 <__hi0bits>
 8009514:	f1c0 0320 	rsb	r3, r0, #32
 8009518:	280a      	cmp	r0, #10
 800951a:	600b      	str	r3, [r1, #0]
 800951c:	491e      	ldr	r1, [pc, #120]	; (8009598 <__b2d+0xa0>)
 800951e:	dc17      	bgt.n	8009550 <__b2d+0x58>
 8009520:	45c1      	cmp	r9, r8
 8009522:	bf28      	it	cs
 8009524:	2200      	movcs	r2, #0
 8009526:	f1c0 0c0b 	rsb	ip, r0, #11
 800952a:	fa26 f30c 	lsr.w	r3, r6, ip
 800952e:	bf38      	it	cc
 8009530:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009534:	ea43 0501 	orr.w	r5, r3, r1
 8009538:	f100 0315 	add.w	r3, r0, #21
 800953c:	fa06 f303 	lsl.w	r3, r6, r3
 8009540:	fa22 f20c 	lsr.w	r2, r2, ip
 8009544:	ea43 0402 	orr.w	r4, r3, r2
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009550:	45c1      	cmp	r9, r8
 8009552:	bf3a      	itte	cc
 8009554:	f1a7 0808 	subcc.w	r8, r7, #8
 8009558:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800955c:	2200      	movcs	r2, #0
 800955e:	f1b0 030b 	subs.w	r3, r0, #11
 8009562:	d015      	beq.n	8009590 <__b2d+0x98>
 8009564:	409e      	lsls	r6, r3
 8009566:	f1c3 0720 	rsb	r7, r3, #32
 800956a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800956e:	fa22 f107 	lsr.w	r1, r2, r7
 8009572:	45c8      	cmp	r8, r9
 8009574:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009578:	ea46 0501 	orr.w	r5, r6, r1
 800957c:	bf94      	ite	ls
 800957e:	2100      	movls	r1, #0
 8009580:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009584:	fa02 f003 	lsl.w	r0, r2, r3
 8009588:	40f9      	lsrs	r1, r7
 800958a:	ea40 0401 	orr.w	r4, r0, r1
 800958e:	e7db      	b.n	8009548 <__b2d+0x50>
 8009590:	ea46 0501 	orr.w	r5, r6, r1
 8009594:	4614      	mov	r4, r2
 8009596:	e7d7      	b.n	8009548 <__b2d+0x50>
 8009598:	3ff00000 	.word	0x3ff00000

0800959c <__d2b>:
 800959c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80095a0:	461c      	mov	r4, r3
 80095a2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80095a6:	2101      	movs	r1, #1
 80095a8:	4690      	mov	r8, r2
 80095aa:	f7ff fcb7 	bl	8008f1c <_Balloc>
 80095ae:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80095b2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80095b6:	4607      	mov	r7, r0
 80095b8:	bb34      	cbnz	r4, 8009608 <__d2b+0x6c>
 80095ba:	9201      	str	r2, [sp, #4]
 80095bc:	f1b8 0200 	subs.w	r2, r8, #0
 80095c0:	d027      	beq.n	8009612 <__d2b+0x76>
 80095c2:	a802      	add	r0, sp, #8
 80095c4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80095c8:	f7ff fd8b 	bl	80090e2 <__lo0bits>
 80095cc:	9900      	ldr	r1, [sp, #0]
 80095ce:	b1f0      	cbz	r0, 800960e <__d2b+0x72>
 80095d0:	9a01      	ldr	r2, [sp, #4]
 80095d2:	f1c0 0320 	rsb	r3, r0, #32
 80095d6:	fa02 f303 	lsl.w	r3, r2, r3
 80095da:	430b      	orrs	r3, r1
 80095dc:	40c2      	lsrs	r2, r0
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	9201      	str	r2, [sp, #4]
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bf14      	ite	ne
 80095e8:	2102      	movne	r1, #2
 80095ea:	2101      	moveq	r1, #1
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	6139      	str	r1, [r7, #16]
 80095f0:	b1c4      	cbz	r4, 8009624 <__d2b+0x88>
 80095f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095f6:	4404      	add	r4, r0
 80095f8:	6034      	str	r4, [r6, #0]
 80095fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095fe:	6028      	str	r0, [r5, #0]
 8009600:	4638      	mov	r0, r7
 8009602:	b002      	add	sp, #8
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800960c:	e7d5      	b.n	80095ba <__d2b+0x1e>
 800960e:	6179      	str	r1, [r7, #20]
 8009610:	e7e7      	b.n	80095e2 <__d2b+0x46>
 8009612:	a801      	add	r0, sp, #4
 8009614:	f7ff fd65 	bl	80090e2 <__lo0bits>
 8009618:	2101      	movs	r1, #1
 800961a:	9b01      	ldr	r3, [sp, #4]
 800961c:	6139      	str	r1, [r7, #16]
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	3020      	adds	r0, #32
 8009622:	e7e5      	b.n	80095f0 <__d2b+0x54>
 8009624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009628:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800962c:	6030      	str	r0, [r6, #0]
 800962e:	6918      	ldr	r0, [r3, #16]
 8009630:	f7ff fd38 	bl	80090a4 <__hi0bits>
 8009634:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009638:	e7e1      	b.n	80095fe <__d2b+0x62>

0800963a <__ratio>:
 800963a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963e:	4688      	mov	r8, r1
 8009640:	4669      	mov	r1, sp
 8009642:	4681      	mov	r9, r0
 8009644:	f7ff ff58 	bl	80094f8 <__b2d>
 8009648:	468b      	mov	fp, r1
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	4640      	mov	r0, r8
 8009650:	a901      	add	r1, sp, #4
 8009652:	f7ff ff51 	bl	80094f8 <__b2d>
 8009656:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800965a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800965e:	460d      	mov	r5, r1
 8009660:	eba3 0c02 	sub.w	ip, r3, r2
 8009664:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfd5      	itete	le
 8009672:	460a      	movle	r2, r1
 8009674:	463a      	movgt	r2, r7
 8009676:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800967a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800967e:	bfd8      	it	le
 8009680:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009684:	462b      	mov	r3, r5
 8009686:	4602      	mov	r2, r0
 8009688:	4659      	mov	r1, fp
 800968a:	4630      	mov	r0, r6
 800968c:	f7f7 f84e 	bl	800072c <__aeabi_ddiv>
 8009690:	b003      	add	sp, #12
 8009692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009696 <__copybits>:
 8009696:	3901      	subs	r1, #1
 8009698:	b510      	push	{r4, lr}
 800969a:	1149      	asrs	r1, r1, #5
 800969c:	6914      	ldr	r4, [r2, #16]
 800969e:	3101      	adds	r1, #1
 80096a0:	f102 0314 	add.w	r3, r2, #20
 80096a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	4602      	mov	r2, r0
 80096b0:	d303      	bcc.n	80096ba <__copybits+0x24>
 80096b2:	2300      	movs	r3, #0
 80096b4:	428a      	cmp	r2, r1
 80096b6:	d305      	bcc.n	80096c4 <__copybits+0x2e>
 80096b8:	bd10      	pop	{r4, pc}
 80096ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80096be:	f840 2b04 	str.w	r2, [r0], #4
 80096c2:	e7f3      	b.n	80096ac <__copybits+0x16>
 80096c4:	f842 3b04 	str.w	r3, [r2], #4
 80096c8:	e7f4      	b.n	80096b4 <__copybits+0x1e>

080096ca <__any_on>:
 80096ca:	f100 0214 	add.w	r2, r0, #20
 80096ce:	6900      	ldr	r0, [r0, #16]
 80096d0:	114b      	asrs	r3, r1, #5
 80096d2:	4298      	cmp	r0, r3
 80096d4:	b510      	push	{r4, lr}
 80096d6:	db11      	blt.n	80096fc <__any_on+0x32>
 80096d8:	dd0a      	ble.n	80096f0 <__any_on+0x26>
 80096da:	f011 011f 	ands.w	r1, r1, #31
 80096de:	d007      	beq.n	80096f0 <__any_on+0x26>
 80096e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096e4:	fa24 f001 	lsr.w	r0, r4, r1
 80096e8:	fa00 f101 	lsl.w	r1, r0, r1
 80096ec:	428c      	cmp	r4, r1
 80096ee:	d10b      	bne.n	8009708 <__any_on+0x3e>
 80096f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d803      	bhi.n	8009700 <__any_on+0x36>
 80096f8:	2000      	movs	r0, #0
 80096fa:	bd10      	pop	{r4, pc}
 80096fc:	4603      	mov	r3, r0
 80096fe:	e7f7      	b.n	80096f0 <__any_on+0x26>
 8009700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009704:	2900      	cmp	r1, #0
 8009706:	d0f5      	beq.n	80096f4 <__any_on+0x2a>
 8009708:	2001      	movs	r0, #1
 800970a:	e7f6      	b.n	80096fa <__any_on+0x30>

0800970c <_calloc_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	fb02 f401 	mul.w	r4, r2, r1
 8009712:	4621      	mov	r1, r4
 8009714:	f000 f854 	bl	80097c0 <_malloc_r>
 8009718:	4605      	mov	r5, r0
 800971a:	b118      	cbz	r0, 8009724 <_calloc_r+0x18>
 800971c:	4622      	mov	r2, r4
 800971e:	2100      	movs	r1, #0
 8009720:	f7fc fc59 	bl	8005fd6 <memset>
 8009724:	4628      	mov	r0, r5
 8009726:	bd38      	pop	{r3, r4, r5, pc}

08009728 <_free_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4605      	mov	r5, r0
 800972c:	2900      	cmp	r1, #0
 800972e:	d043      	beq.n	80097b8 <_free_r+0x90>
 8009730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009734:	1f0c      	subs	r4, r1, #4
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfb8      	it	lt
 800973a:	18e4      	addlt	r4, r4, r3
 800973c:	f000 fdbf 	bl	800a2be <__malloc_lock>
 8009740:	4a1e      	ldr	r2, [pc, #120]	; (80097bc <_free_r+0x94>)
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	4610      	mov	r0, r2
 8009746:	b933      	cbnz	r3, 8009756 <_free_r+0x2e>
 8009748:	6063      	str	r3, [r4, #4]
 800974a:	6014      	str	r4, [r2, #0]
 800974c:	4628      	mov	r0, r5
 800974e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009752:	f000 bdb5 	b.w	800a2c0 <__malloc_unlock>
 8009756:	42a3      	cmp	r3, r4
 8009758:	d90b      	bls.n	8009772 <_free_r+0x4a>
 800975a:	6821      	ldr	r1, [r4, #0]
 800975c:	1862      	adds	r2, r4, r1
 800975e:	4293      	cmp	r3, r2
 8009760:	bf01      	itttt	eq
 8009762:	681a      	ldreq	r2, [r3, #0]
 8009764:	685b      	ldreq	r3, [r3, #4]
 8009766:	1852      	addeq	r2, r2, r1
 8009768:	6022      	streq	r2, [r4, #0]
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6004      	str	r4, [r0, #0]
 800976e:	e7ed      	b.n	800974c <_free_r+0x24>
 8009770:	4613      	mov	r3, r2
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	b10a      	cbz	r2, 800977a <_free_r+0x52>
 8009776:	42a2      	cmp	r2, r4
 8009778:	d9fa      	bls.n	8009770 <_free_r+0x48>
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	1858      	adds	r0, r3, r1
 800977e:	42a0      	cmp	r0, r4
 8009780:	d10b      	bne.n	800979a <_free_r+0x72>
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	4401      	add	r1, r0
 8009786:	1858      	adds	r0, r3, r1
 8009788:	4282      	cmp	r2, r0
 800978a:	6019      	str	r1, [r3, #0]
 800978c:	d1de      	bne.n	800974c <_free_r+0x24>
 800978e:	6810      	ldr	r0, [r2, #0]
 8009790:	6852      	ldr	r2, [r2, #4]
 8009792:	4401      	add	r1, r0
 8009794:	6019      	str	r1, [r3, #0]
 8009796:	605a      	str	r2, [r3, #4]
 8009798:	e7d8      	b.n	800974c <_free_r+0x24>
 800979a:	d902      	bls.n	80097a2 <_free_r+0x7a>
 800979c:	230c      	movs	r3, #12
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	e7d4      	b.n	800974c <_free_r+0x24>
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	1821      	adds	r1, r4, r0
 80097a6:	428a      	cmp	r2, r1
 80097a8:	bf01      	itttt	eq
 80097aa:	6811      	ldreq	r1, [r2, #0]
 80097ac:	6852      	ldreq	r2, [r2, #4]
 80097ae:	1809      	addeq	r1, r1, r0
 80097b0:	6021      	streq	r1, [r4, #0]
 80097b2:	6062      	str	r2, [r4, #4]
 80097b4:	605c      	str	r4, [r3, #4]
 80097b6:	e7c9      	b.n	800974c <_free_r+0x24>
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	bf00      	nop
 80097bc:	20000270 	.word	0x20000270

080097c0 <_malloc_r>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	1ccd      	adds	r5, r1, #3
 80097c4:	f025 0503 	bic.w	r5, r5, #3
 80097c8:	3508      	adds	r5, #8
 80097ca:	2d0c      	cmp	r5, #12
 80097cc:	bf38      	it	cc
 80097ce:	250c      	movcc	r5, #12
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	4606      	mov	r6, r0
 80097d4:	db01      	blt.n	80097da <_malloc_r+0x1a>
 80097d6:	42a9      	cmp	r1, r5
 80097d8:	d903      	bls.n	80097e2 <_malloc_r+0x22>
 80097da:	230c      	movs	r3, #12
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	2000      	movs	r0, #0
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	f000 fd6c 	bl	800a2be <__malloc_lock>
 80097e6:	4a21      	ldr	r2, [pc, #132]	; (800986c <_malloc_r+0xac>)
 80097e8:	6814      	ldr	r4, [r2, #0]
 80097ea:	4621      	mov	r1, r4
 80097ec:	b991      	cbnz	r1, 8009814 <_malloc_r+0x54>
 80097ee:	4c20      	ldr	r4, [pc, #128]	; (8009870 <_malloc_r+0xb0>)
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	b91b      	cbnz	r3, 80097fc <_malloc_r+0x3c>
 80097f4:	4630      	mov	r0, r6
 80097f6:	f000 facd 	bl	8009d94 <_sbrk_r>
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	4629      	mov	r1, r5
 80097fe:	4630      	mov	r0, r6
 8009800:	f000 fac8 	bl	8009d94 <_sbrk_r>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d124      	bne.n	8009852 <_malloc_r+0x92>
 8009808:	230c      	movs	r3, #12
 800980a:	4630      	mov	r0, r6
 800980c:	6033      	str	r3, [r6, #0]
 800980e:	f000 fd57 	bl	800a2c0 <__malloc_unlock>
 8009812:	e7e4      	b.n	80097de <_malloc_r+0x1e>
 8009814:	680b      	ldr	r3, [r1, #0]
 8009816:	1b5b      	subs	r3, r3, r5
 8009818:	d418      	bmi.n	800984c <_malloc_r+0x8c>
 800981a:	2b0b      	cmp	r3, #11
 800981c:	d90f      	bls.n	800983e <_malloc_r+0x7e>
 800981e:	600b      	str	r3, [r1, #0]
 8009820:	18cc      	adds	r4, r1, r3
 8009822:	50cd      	str	r5, [r1, r3]
 8009824:	4630      	mov	r0, r6
 8009826:	f000 fd4b 	bl	800a2c0 <__malloc_unlock>
 800982a:	f104 000b 	add.w	r0, r4, #11
 800982e:	1d23      	adds	r3, r4, #4
 8009830:	f020 0007 	bic.w	r0, r0, #7
 8009834:	1ac3      	subs	r3, r0, r3
 8009836:	d0d3      	beq.n	80097e0 <_malloc_r+0x20>
 8009838:	425a      	negs	r2, r3
 800983a:	50e2      	str	r2, [r4, r3]
 800983c:	e7d0      	b.n	80097e0 <_malloc_r+0x20>
 800983e:	684b      	ldr	r3, [r1, #4]
 8009840:	428c      	cmp	r4, r1
 8009842:	bf16      	itet	ne
 8009844:	6063      	strne	r3, [r4, #4]
 8009846:	6013      	streq	r3, [r2, #0]
 8009848:	460c      	movne	r4, r1
 800984a:	e7eb      	b.n	8009824 <_malloc_r+0x64>
 800984c:	460c      	mov	r4, r1
 800984e:	6849      	ldr	r1, [r1, #4]
 8009850:	e7cc      	b.n	80097ec <_malloc_r+0x2c>
 8009852:	1cc4      	adds	r4, r0, #3
 8009854:	f024 0403 	bic.w	r4, r4, #3
 8009858:	42a0      	cmp	r0, r4
 800985a:	d005      	beq.n	8009868 <_malloc_r+0xa8>
 800985c:	1a21      	subs	r1, r4, r0
 800985e:	4630      	mov	r0, r6
 8009860:	f000 fa98 	bl	8009d94 <_sbrk_r>
 8009864:	3001      	adds	r0, #1
 8009866:	d0cf      	beq.n	8009808 <_malloc_r+0x48>
 8009868:	6025      	str	r5, [r4, #0]
 800986a:	e7db      	b.n	8009824 <_malloc_r+0x64>
 800986c:	20000270 	.word	0x20000270
 8009870:	20000274 	.word	0x20000274

08009874 <__ssputs_r>:
 8009874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	688e      	ldr	r6, [r1, #8]
 800987a:	4682      	mov	sl, r0
 800987c:	429e      	cmp	r6, r3
 800987e:	460c      	mov	r4, r1
 8009880:	4690      	mov	r8, r2
 8009882:	4699      	mov	r9, r3
 8009884:	d837      	bhi.n	80098f6 <__ssputs_r+0x82>
 8009886:	898a      	ldrh	r2, [r1, #12]
 8009888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800988c:	d031      	beq.n	80098f2 <__ssputs_r+0x7e>
 800988e:	2302      	movs	r3, #2
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	6909      	ldr	r1, [r1, #16]
 8009894:	1a6f      	subs	r7, r5, r1
 8009896:	6965      	ldr	r5, [r4, #20]
 8009898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800989c:	fb95 f5f3 	sdiv	r5, r5, r3
 80098a0:	f109 0301 	add.w	r3, r9, #1
 80098a4:	443b      	add	r3, r7
 80098a6:	429d      	cmp	r5, r3
 80098a8:	bf38      	it	cc
 80098aa:	461d      	movcc	r5, r3
 80098ac:	0553      	lsls	r3, r2, #21
 80098ae:	d530      	bpl.n	8009912 <__ssputs_r+0x9e>
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7ff ff85 	bl	80097c0 <_malloc_r>
 80098b6:	4606      	mov	r6, r0
 80098b8:	b950      	cbnz	r0, 80098d0 <__ssputs_r+0x5c>
 80098ba:	230c      	movs	r3, #12
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	f8ca 3000 	str.w	r3, [sl]
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d0:	463a      	mov	r2, r7
 80098d2:	6921      	ldr	r1, [r4, #16]
 80098d4:	f7fc fb74 	bl	8005fc0 <memcpy>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	6126      	str	r6, [r4, #16]
 80098e6:	443e      	add	r6, r7
 80098e8:	6026      	str	r6, [r4, #0]
 80098ea:	464e      	mov	r6, r9
 80098ec:	6165      	str	r5, [r4, #20]
 80098ee:	1bed      	subs	r5, r5, r7
 80098f0:	60a5      	str	r5, [r4, #8]
 80098f2:	454e      	cmp	r6, r9
 80098f4:	d900      	bls.n	80098f8 <__ssputs_r+0x84>
 80098f6:	464e      	mov	r6, r9
 80098f8:	4632      	mov	r2, r6
 80098fa:	4641      	mov	r1, r8
 80098fc:	6820      	ldr	r0, [r4, #0]
 80098fe:	f000 fcc5 	bl	800a28c <memmove>
 8009902:	68a3      	ldr	r3, [r4, #8]
 8009904:	2000      	movs	r0, #0
 8009906:	1b9b      	subs	r3, r3, r6
 8009908:	60a3      	str	r3, [r4, #8]
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	441e      	add	r6, r3
 800990e:	6026      	str	r6, [r4, #0]
 8009910:	e7dc      	b.n	80098cc <__ssputs_r+0x58>
 8009912:	462a      	mov	r2, r5
 8009914:	f000 fcd5 	bl	800a2c2 <_realloc_r>
 8009918:	4606      	mov	r6, r0
 800991a:	2800      	cmp	r0, #0
 800991c:	d1e2      	bne.n	80098e4 <__ssputs_r+0x70>
 800991e:	6921      	ldr	r1, [r4, #16]
 8009920:	4650      	mov	r0, sl
 8009922:	f7ff ff01 	bl	8009728 <_free_r>
 8009926:	e7c8      	b.n	80098ba <__ssputs_r+0x46>

08009928 <_svfiprintf_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	461d      	mov	r5, r3
 800992e:	898b      	ldrh	r3, [r1, #12]
 8009930:	b09d      	sub	sp, #116	; 0x74
 8009932:	061f      	lsls	r7, r3, #24
 8009934:	4680      	mov	r8, r0
 8009936:	460c      	mov	r4, r1
 8009938:	4616      	mov	r6, r2
 800993a:	d50f      	bpl.n	800995c <_svfiprintf_r+0x34>
 800993c:	690b      	ldr	r3, [r1, #16]
 800993e:	b96b      	cbnz	r3, 800995c <_svfiprintf_r+0x34>
 8009940:	2140      	movs	r1, #64	; 0x40
 8009942:	f7ff ff3d 	bl	80097c0 <_malloc_r>
 8009946:	6020      	str	r0, [r4, #0]
 8009948:	6120      	str	r0, [r4, #16]
 800994a:	b928      	cbnz	r0, 8009958 <_svfiprintf_r+0x30>
 800994c:	230c      	movs	r3, #12
 800994e:	f8c8 3000 	str.w	r3, [r8]
 8009952:	f04f 30ff 	mov.w	r0, #4294967295
 8009956:	e0c8      	b.n	8009aea <_svfiprintf_r+0x1c2>
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	6163      	str	r3, [r4, #20]
 800995c:	2300      	movs	r3, #0
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	2320      	movs	r3, #32
 8009962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009966:	2330      	movs	r3, #48	; 0x30
 8009968:	f04f 0b01 	mov.w	fp, #1
 800996c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009970:	9503      	str	r5, [sp, #12]
 8009972:	4637      	mov	r7, r6
 8009974:	463d      	mov	r5, r7
 8009976:	f815 3b01 	ldrb.w	r3, [r5], #1
 800997a:	b10b      	cbz	r3, 8009980 <_svfiprintf_r+0x58>
 800997c:	2b25      	cmp	r3, #37	; 0x25
 800997e:	d13e      	bne.n	80099fe <_svfiprintf_r+0xd6>
 8009980:	ebb7 0a06 	subs.w	sl, r7, r6
 8009984:	d00b      	beq.n	800999e <_svfiprintf_r+0x76>
 8009986:	4653      	mov	r3, sl
 8009988:	4632      	mov	r2, r6
 800998a:	4621      	mov	r1, r4
 800998c:	4640      	mov	r0, r8
 800998e:	f7ff ff71 	bl	8009874 <__ssputs_r>
 8009992:	3001      	adds	r0, #1
 8009994:	f000 80a4 	beq.w	8009ae0 <_svfiprintf_r+0x1b8>
 8009998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999a:	4453      	add	r3, sl
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	783b      	ldrb	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 809d 	beq.w	8009ae0 <_svfiprintf_r+0x1b8>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	9307      	str	r3, [sp, #28]
 80099b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b8:	931a      	str	r3, [sp, #104]	; 0x68
 80099ba:	462f      	mov	r7, r5
 80099bc:	2205      	movs	r2, #5
 80099be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099c2:	4850      	ldr	r0, [pc, #320]	; (8009b04 <_svfiprintf_r+0x1dc>)
 80099c4:	f7ff fa9c 	bl	8008f00 <memchr>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	b9d0      	cbnz	r0, 8009a02 <_svfiprintf_r+0xda>
 80099cc:	06d9      	lsls	r1, r3, #27
 80099ce:	bf44      	itt	mi
 80099d0:	2220      	movmi	r2, #32
 80099d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099d6:	071a      	lsls	r2, r3, #28
 80099d8:	bf44      	itt	mi
 80099da:	222b      	movmi	r2, #43	; 0x2b
 80099dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099e0:	782a      	ldrb	r2, [r5, #0]
 80099e2:	2a2a      	cmp	r2, #42	; 0x2a
 80099e4:	d015      	beq.n	8009a12 <_svfiprintf_r+0xea>
 80099e6:	462f      	mov	r7, r5
 80099e8:	2000      	movs	r0, #0
 80099ea:	250a      	movs	r5, #10
 80099ec:	9a07      	ldr	r2, [sp, #28]
 80099ee:	4639      	mov	r1, r7
 80099f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f4:	3b30      	subs	r3, #48	; 0x30
 80099f6:	2b09      	cmp	r3, #9
 80099f8:	d94d      	bls.n	8009a96 <_svfiprintf_r+0x16e>
 80099fa:	b1b8      	cbz	r0, 8009a2c <_svfiprintf_r+0x104>
 80099fc:	e00f      	b.n	8009a1e <_svfiprintf_r+0xf6>
 80099fe:	462f      	mov	r7, r5
 8009a00:	e7b8      	b.n	8009974 <_svfiprintf_r+0x4c>
 8009a02:	4a40      	ldr	r2, [pc, #256]	; (8009b04 <_svfiprintf_r+0x1dc>)
 8009a04:	463d      	mov	r5, r7
 8009a06:	1a80      	subs	r0, r0, r2
 8009a08:	fa0b f000 	lsl.w	r0, fp, r0
 8009a0c:	4318      	orrs	r0, r3
 8009a0e:	9004      	str	r0, [sp, #16]
 8009a10:	e7d3      	b.n	80099ba <_svfiprintf_r+0x92>
 8009a12:	9a03      	ldr	r2, [sp, #12]
 8009a14:	1d11      	adds	r1, r2, #4
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	9103      	str	r1, [sp, #12]
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	db01      	blt.n	8009a22 <_svfiprintf_r+0xfa>
 8009a1e:	9207      	str	r2, [sp, #28]
 8009a20:	e004      	b.n	8009a2c <_svfiprintf_r+0x104>
 8009a22:	4252      	negs	r2, r2
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	9207      	str	r2, [sp, #28]
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	783b      	ldrb	r3, [r7, #0]
 8009a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a30:	d10c      	bne.n	8009a4c <_svfiprintf_r+0x124>
 8009a32:	787b      	ldrb	r3, [r7, #1]
 8009a34:	2b2a      	cmp	r3, #42	; 0x2a
 8009a36:	d133      	bne.n	8009aa0 <_svfiprintf_r+0x178>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	3702      	adds	r7, #2
 8009a3c:	1d1a      	adds	r2, r3, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	9203      	str	r2, [sp, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	bfb8      	it	lt
 8009a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	4d2e      	ldr	r5, [pc, #184]	; (8009b08 <_svfiprintf_r+0x1e0>)
 8009a4e:	2203      	movs	r2, #3
 8009a50:	7839      	ldrb	r1, [r7, #0]
 8009a52:	4628      	mov	r0, r5
 8009a54:	f7ff fa54 	bl	8008f00 <memchr>
 8009a58:	b138      	cbz	r0, 8009a6a <_svfiprintf_r+0x142>
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	1b40      	subs	r0, r0, r5
 8009a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	3701      	adds	r7, #1
 8009a66:	4303      	orrs	r3, r0
 8009a68:	9304      	str	r3, [sp, #16]
 8009a6a:	7839      	ldrb	r1, [r7, #0]
 8009a6c:	2206      	movs	r2, #6
 8009a6e:	4827      	ldr	r0, [pc, #156]	; (8009b0c <_svfiprintf_r+0x1e4>)
 8009a70:	1c7e      	adds	r6, r7, #1
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a76:	f7ff fa43 	bl	8008f00 <memchr>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d038      	beq.n	8009af0 <_svfiprintf_r+0x1c8>
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <_svfiprintf_r+0x1e8>)
 8009a80:	bb13      	cbnz	r3, 8009ac8 <_svfiprintf_r+0x1a0>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	3307      	adds	r3, #7
 8009a86:	f023 0307 	bic.w	r3, r3, #7
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	444b      	add	r3, r9
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	e76d      	b.n	8009972 <_svfiprintf_r+0x4a>
 8009a96:	fb05 3202 	mla	r2, r5, r2, r3
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	e7a6      	b.n	80099ee <_svfiprintf_r+0xc6>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	250a      	movs	r5, #10
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	3701      	adds	r7, #1
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab0:	3a30      	subs	r2, #48	; 0x30
 8009ab2:	2a09      	cmp	r2, #9
 8009ab4:	d903      	bls.n	8009abe <_svfiprintf_r+0x196>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0c8      	beq.n	8009a4c <_svfiprintf_r+0x124>
 8009aba:	9105      	str	r1, [sp, #20]
 8009abc:	e7c6      	b.n	8009a4c <_svfiprintf_r+0x124>
 8009abe:	fb05 2101 	mla	r1, r5, r1, r2
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	e7f0      	b.n	8009aaa <_svfiprintf_r+0x182>
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	4622      	mov	r2, r4
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <_svfiprintf_r+0x1ec>)
 8009ad0:	a904      	add	r1, sp, #16
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7fc fb18 	bl	8006108 <_printf_float>
 8009ad8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009adc:	4681      	mov	r9, r0
 8009ade:	d1d6      	bne.n	8009a8e <_svfiprintf_r+0x166>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	065b      	lsls	r3, r3, #25
 8009ae4:	f53f af35 	bmi.w	8009952 <_svfiprintf_r+0x2a>
 8009ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aea:	b01d      	add	sp, #116	; 0x74
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	ab03      	add	r3, sp, #12
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4622      	mov	r2, r4
 8009af6:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <_svfiprintf_r+0x1ec>)
 8009af8:	a904      	add	r1, sp, #16
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7fc fdb0 	bl	8006660 <_printf_i>
 8009b00:	e7ea      	b.n	8009ad8 <_svfiprintf_r+0x1b0>
 8009b02:	bf00      	nop
 8009b04:	0800a614 	.word	0x0800a614
 8009b08:	0800a61a 	.word	0x0800a61a
 8009b0c:	0800a61e 	.word	0x0800a61e
 8009b10:	08006109 	.word	0x08006109
 8009b14:	08009875 	.word	0x08009875

08009b18 <__sfputc_r>:
 8009b18:	6893      	ldr	r3, [r2, #8]
 8009b1a:	b410      	push	{r4}
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	6093      	str	r3, [r2, #8]
 8009b22:	da07      	bge.n	8009b34 <__sfputc_r+0x1c>
 8009b24:	6994      	ldr	r4, [r2, #24]
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	db01      	blt.n	8009b2e <__sfputc_r+0x16>
 8009b2a:	290a      	cmp	r1, #10
 8009b2c:	d102      	bne.n	8009b34 <__sfputc_r+0x1c>
 8009b2e:	bc10      	pop	{r4}
 8009b30:	f000 b996 	b.w	8009e60 <__swbuf_r>
 8009b34:	6813      	ldr	r3, [r2, #0]
 8009b36:	1c58      	adds	r0, r3, #1
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	7019      	strb	r1, [r3, #0]
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	bc10      	pop	{r4}
 8009b40:	4770      	bx	lr

08009b42 <__sfputs_r>:
 8009b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b44:	4606      	mov	r6, r0
 8009b46:	460f      	mov	r7, r1
 8009b48:	4614      	mov	r4, r2
 8009b4a:	18d5      	adds	r5, r2, r3
 8009b4c:	42ac      	cmp	r4, r5
 8009b4e:	d101      	bne.n	8009b54 <__sfputs_r+0x12>
 8009b50:	2000      	movs	r0, #0
 8009b52:	e007      	b.n	8009b64 <__sfputs_r+0x22>
 8009b54:	463a      	mov	r2, r7
 8009b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ffdc 	bl	8009b18 <__sfputc_r>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d1f3      	bne.n	8009b4c <__sfputs_r+0xa>
 8009b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b68 <_vfiprintf_r>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b09d      	sub	sp, #116	; 0x74
 8009b70:	4617      	mov	r7, r2
 8009b72:	461d      	mov	r5, r3
 8009b74:	4606      	mov	r6, r0
 8009b76:	b118      	cbz	r0, 8009b80 <_vfiprintf_r+0x18>
 8009b78:	6983      	ldr	r3, [r0, #24]
 8009b7a:	b90b      	cbnz	r3, 8009b80 <_vfiprintf_r+0x18>
 8009b7c:	f7fe fde0 	bl	8008740 <__sinit>
 8009b80:	4b7c      	ldr	r3, [pc, #496]	; (8009d74 <_vfiprintf_r+0x20c>)
 8009b82:	429c      	cmp	r4, r3
 8009b84:	d158      	bne.n	8009c38 <_vfiprintf_r+0xd0>
 8009b86:	6874      	ldr	r4, [r6, #4]
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	0718      	lsls	r0, r3, #28
 8009b8c:	d55e      	bpl.n	8009c4c <_vfiprintf_r+0xe4>
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d05b      	beq.n	8009c4c <_vfiprintf_r+0xe4>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9309      	str	r3, [sp, #36]	; 0x24
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9e:	2330      	movs	r3, #48	; 0x30
 8009ba0:	f04f 0b01 	mov.w	fp, #1
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba8:	9503      	str	r5, [sp, #12]
 8009baa:	46b8      	mov	r8, r7
 8009bac:	4645      	mov	r5, r8
 8009bae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bb2:	b10b      	cbz	r3, 8009bb8 <_vfiprintf_r+0x50>
 8009bb4:	2b25      	cmp	r3, #37	; 0x25
 8009bb6:	d154      	bne.n	8009c62 <_vfiprintf_r+0xfa>
 8009bb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8009bbc:	d00b      	beq.n	8009bd6 <_vfiprintf_r+0x6e>
 8009bbe:	4653      	mov	r3, sl
 8009bc0:	463a      	mov	r2, r7
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ffbc 	bl	8009b42 <__sfputs_r>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f000 80c2 	beq.w	8009d54 <_vfiprintf_r+0x1ec>
 8009bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd2:	4453      	add	r3, sl
 8009bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd6:	f898 3000 	ldrb.w	r3, [r8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 80ba 	beq.w	8009d54 <_vfiprintf_r+0x1ec>
 8009be0:	2300      	movs	r3, #0
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	9307      	str	r3, [sp, #28]
 8009bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf4:	46a8      	mov	r8, r5
 8009bf6:	2205      	movs	r2, #5
 8009bf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009bfc:	485e      	ldr	r0, [pc, #376]	; (8009d78 <_vfiprintf_r+0x210>)
 8009bfe:	f7ff f97f 	bl	8008f00 <memchr>
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	bb78      	cbnz	r0, 8009c66 <_vfiprintf_r+0xfe>
 8009c06:	06d9      	lsls	r1, r3, #27
 8009c08:	bf44      	itt	mi
 8009c0a:	2220      	movmi	r2, #32
 8009c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c10:	071a      	lsls	r2, r3, #28
 8009c12:	bf44      	itt	mi
 8009c14:	222b      	movmi	r2, #43	; 0x2b
 8009c16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c1a:	782a      	ldrb	r2, [r5, #0]
 8009c1c:	2a2a      	cmp	r2, #42	; 0x2a
 8009c1e:	d02a      	beq.n	8009c76 <_vfiprintf_r+0x10e>
 8009c20:	46a8      	mov	r8, r5
 8009c22:	2000      	movs	r0, #0
 8009c24:	250a      	movs	r5, #10
 8009c26:	9a07      	ldr	r2, [sp, #28]
 8009c28:	4641      	mov	r1, r8
 8009c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c2e:	3b30      	subs	r3, #48	; 0x30
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d969      	bls.n	8009d08 <_vfiprintf_r+0x1a0>
 8009c34:	b360      	cbz	r0, 8009c90 <_vfiprintf_r+0x128>
 8009c36:	e024      	b.n	8009c82 <_vfiprintf_r+0x11a>
 8009c38:	4b50      	ldr	r3, [pc, #320]	; (8009d7c <_vfiprintf_r+0x214>)
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	d101      	bne.n	8009c42 <_vfiprintf_r+0xda>
 8009c3e:	68b4      	ldr	r4, [r6, #8]
 8009c40:	e7a2      	b.n	8009b88 <_vfiprintf_r+0x20>
 8009c42:	4b4f      	ldr	r3, [pc, #316]	; (8009d80 <_vfiprintf_r+0x218>)
 8009c44:	429c      	cmp	r4, r3
 8009c46:	bf08      	it	eq
 8009c48:	68f4      	ldreq	r4, [r6, #12]
 8009c4a:	e79d      	b.n	8009b88 <_vfiprintf_r+0x20>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f000 f978 	bl	8009f44 <__swsetup_r>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d09d      	beq.n	8009b94 <_vfiprintf_r+0x2c>
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	b01d      	add	sp, #116	; 0x74
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	46a8      	mov	r8, r5
 8009c64:	e7a2      	b.n	8009bac <_vfiprintf_r+0x44>
 8009c66:	4a44      	ldr	r2, [pc, #272]	; (8009d78 <_vfiprintf_r+0x210>)
 8009c68:	4645      	mov	r5, r8
 8009c6a:	1a80      	subs	r0, r0, r2
 8009c6c:	fa0b f000 	lsl.w	r0, fp, r0
 8009c70:	4318      	orrs	r0, r3
 8009c72:	9004      	str	r0, [sp, #16]
 8009c74:	e7be      	b.n	8009bf4 <_vfiprintf_r+0x8c>
 8009c76:	9a03      	ldr	r2, [sp, #12]
 8009c78:	1d11      	adds	r1, r2, #4
 8009c7a:	6812      	ldr	r2, [r2, #0]
 8009c7c:	9103      	str	r1, [sp, #12]
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	db01      	blt.n	8009c86 <_vfiprintf_r+0x11e>
 8009c82:	9207      	str	r2, [sp, #28]
 8009c84:	e004      	b.n	8009c90 <_vfiprintf_r+0x128>
 8009c86:	4252      	negs	r2, r2
 8009c88:	f043 0302 	orr.w	r3, r3, #2
 8009c8c:	9207      	str	r2, [sp, #28]
 8009c8e:	9304      	str	r3, [sp, #16]
 8009c90:	f898 3000 	ldrb.w	r3, [r8]
 8009c94:	2b2e      	cmp	r3, #46	; 0x2e
 8009c96:	d10e      	bne.n	8009cb6 <_vfiprintf_r+0x14e>
 8009c98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9e:	d138      	bne.n	8009d12 <_vfiprintf_r+0x1aa>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	f108 0802 	add.w	r8, r8, #2
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	9203      	str	r2, [sp, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfb8      	it	lt
 8009cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	4d33      	ldr	r5, [pc, #204]	; (8009d84 <_vfiprintf_r+0x21c>)
 8009cb8:	2203      	movs	r2, #3
 8009cba:	f898 1000 	ldrb.w	r1, [r8]
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f7ff f91e 	bl	8008f00 <memchr>
 8009cc4:	b140      	cbz	r0, 8009cd8 <_vfiprintf_r+0x170>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	1b40      	subs	r0, r0, r5
 8009cca:	fa03 f000 	lsl.w	r0, r3, r0
 8009cce:	9b04      	ldr	r3, [sp, #16]
 8009cd0:	f108 0801 	add.w	r8, r8, #1
 8009cd4:	4303      	orrs	r3, r0
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	f898 1000 	ldrb.w	r1, [r8]
 8009cdc:	2206      	movs	r2, #6
 8009cde:	482a      	ldr	r0, [pc, #168]	; (8009d88 <_vfiprintf_r+0x220>)
 8009ce0:	f108 0701 	add.w	r7, r8, #1
 8009ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ce8:	f7ff f90a 	bl	8008f00 <memchr>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d037      	beq.n	8009d60 <_vfiprintf_r+0x1f8>
 8009cf0:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <_vfiprintf_r+0x224>)
 8009cf2:	bb1b      	cbnz	r3, 8009d3c <_vfiprintf_r+0x1d4>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	3307      	adds	r3, #7
 8009cf8:	f023 0307 	bic.w	r3, r3, #7
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	9303      	str	r3, [sp, #12]
 8009d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d02:	444b      	add	r3, r9
 8009d04:	9309      	str	r3, [sp, #36]	; 0x24
 8009d06:	e750      	b.n	8009baa <_vfiprintf_r+0x42>
 8009d08:	fb05 3202 	mla	r2, r5, r2, r3
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	4688      	mov	r8, r1
 8009d10:	e78a      	b.n	8009c28 <_vfiprintf_r+0xc0>
 8009d12:	2300      	movs	r3, #0
 8009d14:	250a      	movs	r5, #10
 8009d16:	4619      	mov	r1, r3
 8009d18:	f108 0801 	add.w	r8, r8, #1
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	4640      	mov	r0, r8
 8009d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d24:	3a30      	subs	r2, #48	; 0x30
 8009d26:	2a09      	cmp	r2, #9
 8009d28:	d903      	bls.n	8009d32 <_vfiprintf_r+0x1ca>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0c3      	beq.n	8009cb6 <_vfiprintf_r+0x14e>
 8009d2e:	9105      	str	r1, [sp, #20]
 8009d30:	e7c1      	b.n	8009cb6 <_vfiprintf_r+0x14e>
 8009d32:	fb05 2101 	mla	r1, r5, r1, r2
 8009d36:	2301      	movs	r3, #1
 8009d38:	4680      	mov	r8, r0
 8009d3a:	e7f0      	b.n	8009d1e <_vfiprintf_r+0x1b6>
 8009d3c:	ab03      	add	r3, sp, #12
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4622      	mov	r2, r4
 8009d42:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <_vfiprintf_r+0x228>)
 8009d44:	a904      	add	r1, sp, #16
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7fc f9de 	bl	8006108 <_printf_float>
 8009d4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d50:	4681      	mov	r9, r0
 8009d52:	d1d5      	bne.n	8009d00 <_vfiprintf_r+0x198>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	065b      	lsls	r3, r3, #25
 8009d58:	f53f af7e 	bmi.w	8009c58 <_vfiprintf_r+0xf0>
 8009d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d5e:	e77d      	b.n	8009c5c <_vfiprintf_r+0xf4>
 8009d60:	ab03      	add	r3, sp, #12
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4622      	mov	r2, r4
 8009d66:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <_vfiprintf_r+0x228>)
 8009d68:	a904      	add	r1, sp, #16
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7fc fc78 	bl	8006660 <_printf_i>
 8009d70:	e7ec      	b.n	8009d4c <_vfiprintf_r+0x1e4>
 8009d72:	bf00      	nop
 8009d74:	0800a4c8 	.word	0x0800a4c8
 8009d78:	0800a614 	.word	0x0800a614
 8009d7c:	0800a4e8 	.word	0x0800a4e8
 8009d80:	0800a4a8 	.word	0x0800a4a8
 8009d84:	0800a61a 	.word	0x0800a61a
 8009d88:	0800a61e 	.word	0x0800a61e
 8009d8c:	08006109 	.word	0x08006109
 8009d90:	08009b43 	.word	0x08009b43

08009d94 <_sbrk_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	2300      	movs	r3, #0
 8009d98:	4c05      	ldr	r4, [pc, #20]	; (8009db0 <_sbrk_r+0x1c>)
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	f7f7 ffc6 	bl	8001d30 <_sbrk>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_sbrk_r+0x1a>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_sbrk_r+0x1a>
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	200003e8 	.word	0x200003e8

08009db4 <__sread>:
 8009db4:	b510      	push	{r4, lr}
 8009db6:	460c      	mov	r4, r1
 8009db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbc:	f000 faa8 	bl	800a310 <_read_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	bfab      	itete	ge
 8009dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc8:	181b      	addge	r3, r3, r0
 8009dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dce:	bfac      	ite	ge
 8009dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dd2:	81a3      	strhlt	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__swrite>:
 8009dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	461f      	mov	r7, r3
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	4605      	mov	r5, r0
 8009de0:	05db      	lsls	r3, r3, #23
 8009de2:	460c      	mov	r4, r1
 8009de4:	4616      	mov	r6, r2
 8009de6:	d505      	bpl.n	8009df4 <__swrite+0x1e>
 8009de8:	2302      	movs	r3, #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	f000 f9d6 	bl	800a1a0 <_lseek_r>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	4632      	mov	r2, r6
 8009df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e02:	463b      	mov	r3, r7
 8009e04:	4628      	mov	r0, r5
 8009e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0a:	f000 b889 	b.w	8009f20 <_write_r>

08009e0e <__sseek>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e16:	f000 f9c3 	bl	800a1a0 <_lseek_r>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	bf15      	itete	ne
 8009e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e2a:	81a3      	strheq	r3, [r4, #12]
 8009e2c:	bf18      	it	ne
 8009e2e:	81a3      	strhne	r3, [r4, #12]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__sclose>:
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 b8f3 	b.w	800a020 <_close_r>

08009e3a <strncmp>:
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	b16a      	cbz	r2, 8009e5a <strncmp+0x20>
 8009e3e:	3901      	subs	r1, #1
 8009e40:	1884      	adds	r4, r0, r2
 8009e42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d103      	bne.n	8009e56 <strncmp+0x1c>
 8009e4e:	42a0      	cmp	r0, r4
 8009e50:	d001      	beq.n	8009e56 <strncmp+0x1c>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1f5      	bne.n	8009e42 <strncmp+0x8>
 8009e56:	1a98      	subs	r0, r3, r2
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	e7fc      	b.n	8009e58 <strncmp+0x1e>
	...

08009e60 <__swbuf_r>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	460e      	mov	r6, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	4605      	mov	r5, r0
 8009e68:	b118      	cbz	r0, 8009e72 <__swbuf_r+0x12>
 8009e6a:	6983      	ldr	r3, [r0, #24]
 8009e6c:	b90b      	cbnz	r3, 8009e72 <__swbuf_r+0x12>
 8009e6e:	f7fe fc67 	bl	8008740 <__sinit>
 8009e72:	4b21      	ldr	r3, [pc, #132]	; (8009ef8 <__swbuf_r+0x98>)
 8009e74:	429c      	cmp	r4, r3
 8009e76:	d12a      	bne.n	8009ece <__swbuf_r+0x6e>
 8009e78:	686c      	ldr	r4, [r5, #4]
 8009e7a:	69a3      	ldr	r3, [r4, #24]
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	071a      	lsls	r2, r3, #28
 8009e82:	d52e      	bpl.n	8009ee2 <__swbuf_r+0x82>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	b363      	cbz	r3, 8009ee2 <__swbuf_r+0x82>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	6820      	ldr	r0, [r4, #0]
 8009e8c:	b2f6      	uxtb	r6, r6
 8009e8e:	1ac0      	subs	r0, r0, r3
 8009e90:	6963      	ldr	r3, [r4, #20]
 8009e92:	4637      	mov	r7, r6
 8009e94:	4283      	cmp	r3, r0
 8009e96:	dc04      	bgt.n	8009ea2 <__swbuf_r+0x42>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f000 f956 	bl	800a14c <_fflush_r>
 8009ea0:	bb28      	cbnz	r0, 8009eee <__swbuf_r+0x8e>
 8009ea2:	68a3      	ldr	r3, [r4, #8]
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	60a3      	str	r3, [r4, #8]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	6022      	str	r2, [r4, #0]
 8009eb0:	701e      	strb	r6, [r3, #0]
 8009eb2:	6963      	ldr	r3, [r4, #20]
 8009eb4:	4283      	cmp	r3, r0
 8009eb6:	d004      	beq.n	8009ec2 <__swbuf_r+0x62>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d519      	bpl.n	8009ef2 <__swbuf_r+0x92>
 8009ebe:	2e0a      	cmp	r6, #10
 8009ec0:	d117      	bne.n	8009ef2 <__swbuf_r+0x92>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f000 f941 	bl	800a14c <_fflush_r>
 8009eca:	b190      	cbz	r0, 8009ef2 <__swbuf_r+0x92>
 8009ecc:	e00f      	b.n	8009eee <__swbuf_r+0x8e>
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <__swbuf_r+0x9c>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d101      	bne.n	8009ed8 <__swbuf_r+0x78>
 8009ed4:	68ac      	ldr	r4, [r5, #8]
 8009ed6:	e7d0      	b.n	8009e7a <__swbuf_r+0x1a>
 8009ed8:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <__swbuf_r+0xa0>)
 8009eda:	429c      	cmp	r4, r3
 8009edc:	bf08      	it	eq
 8009ede:	68ec      	ldreq	r4, [r5, #12]
 8009ee0:	e7cb      	b.n	8009e7a <__swbuf_r+0x1a>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 f82d 	bl	8009f44 <__swsetup_r>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d0cc      	beq.n	8009e88 <__swbuf_r+0x28>
 8009eee:	f04f 37ff 	mov.w	r7, #4294967295
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800a4c8 	.word	0x0800a4c8
 8009efc:	0800a4e8 	.word	0x0800a4e8
 8009f00:	0800a4a8 	.word	0x0800a4a8

08009f04 <__ascii_wctomb>:
 8009f04:	b149      	cbz	r1, 8009f1a <__ascii_wctomb+0x16>
 8009f06:	2aff      	cmp	r2, #255	; 0xff
 8009f08:	bf8b      	itete	hi
 8009f0a:	238a      	movhi	r3, #138	; 0x8a
 8009f0c:	700a      	strbls	r2, [r1, #0]
 8009f0e:	6003      	strhi	r3, [r0, #0]
 8009f10:	2001      	movls	r0, #1
 8009f12:	bf88      	it	hi
 8009f14:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f18:	4770      	bx	lr
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4770      	bx	lr
	...

08009f20 <_write_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4605      	mov	r5, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4c05      	ldr	r4, [pc, #20]	; (8009f40 <_write_r+0x20>)
 8009f2c:	6022      	str	r2, [r4, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f7f7 feb1 	bl	8001c96 <_write>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_write_r+0x1e>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_write_r+0x1e>
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	200003e8 	.word	0x200003e8

08009f44 <__swsetup_r>:
 8009f44:	4b32      	ldr	r3, [pc, #200]	; (800a010 <__swsetup_r+0xcc>)
 8009f46:	b570      	push	{r4, r5, r6, lr}
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	b125      	cbz	r5, 8009f5a <__swsetup_r+0x16>
 8009f50:	69ab      	ldr	r3, [r5, #24]
 8009f52:	b913      	cbnz	r3, 8009f5a <__swsetup_r+0x16>
 8009f54:	4628      	mov	r0, r5
 8009f56:	f7fe fbf3 	bl	8008740 <__sinit>
 8009f5a:	4b2e      	ldr	r3, [pc, #184]	; (800a014 <__swsetup_r+0xd0>)
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	d10f      	bne.n	8009f80 <__swsetup_r+0x3c>
 8009f60:	686c      	ldr	r4, [r5, #4]
 8009f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	0715      	lsls	r5, r2, #28
 8009f6a:	d42c      	bmi.n	8009fc6 <__swsetup_r+0x82>
 8009f6c:	06d0      	lsls	r0, r2, #27
 8009f6e:	d411      	bmi.n	8009f94 <__swsetup_r+0x50>
 8009f70:	2209      	movs	r2, #9
 8009f72:	6032      	str	r2, [r6, #0]
 8009f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7e:	e03e      	b.n	8009ffe <__swsetup_r+0xba>
 8009f80:	4b25      	ldr	r3, [pc, #148]	; (800a018 <__swsetup_r+0xd4>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d101      	bne.n	8009f8a <__swsetup_r+0x46>
 8009f86:	68ac      	ldr	r4, [r5, #8]
 8009f88:	e7eb      	b.n	8009f62 <__swsetup_r+0x1e>
 8009f8a:	4b24      	ldr	r3, [pc, #144]	; (800a01c <__swsetup_r+0xd8>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	bf08      	it	eq
 8009f90:	68ec      	ldreq	r4, [r5, #12]
 8009f92:	e7e6      	b.n	8009f62 <__swsetup_r+0x1e>
 8009f94:	0751      	lsls	r1, r2, #29
 8009f96:	d512      	bpl.n	8009fbe <__swsetup_r+0x7a>
 8009f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f9a:	b141      	cbz	r1, 8009fae <__swsetup_r+0x6a>
 8009f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	d002      	beq.n	8009faa <__swsetup_r+0x66>
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff fbbf 	bl	8009728 <_free_r>
 8009faa:	2300      	movs	r3, #0
 8009fac:	6363      	str	r3, [r4, #52]	; 0x34
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f043 0308 	orr.w	r3, r3, #8
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	b94b      	cbnz	r3, 8009fde <__swsetup_r+0x9a>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd4:	d003      	beq.n	8009fde <__swsetup_r+0x9a>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 f917 	bl	800a20c <__smakebuf_r>
 8009fde:	89a2      	ldrh	r2, [r4, #12]
 8009fe0:	f012 0301 	ands.w	r3, r2, #1
 8009fe4:	d00c      	beq.n	800a000 <__swsetup_r+0xbc>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	425b      	negs	r3, r3
 8009fee:	61a3      	str	r3, [r4, #24]
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b953      	cbnz	r3, 800a00a <__swsetup_r+0xc6>
 8009ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ffc:	d1ba      	bne.n	8009f74 <__swsetup_r+0x30>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
 800a000:	0792      	lsls	r2, r2, #30
 800a002:	bf58      	it	pl
 800a004:	6963      	ldrpl	r3, [r4, #20]
 800a006:	60a3      	str	r3, [r4, #8]
 800a008:	e7f2      	b.n	8009ff0 <__swsetup_r+0xac>
 800a00a:	2000      	movs	r0, #0
 800a00c:	e7f7      	b.n	8009ffe <__swsetup_r+0xba>
 800a00e:	bf00      	nop
 800a010:	20000010 	.word	0x20000010
 800a014:	0800a4c8 	.word	0x0800a4c8
 800a018:	0800a4e8 	.word	0x0800a4e8
 800a01c:	0800a4a8 	.word	0x0800a4a8

0800a020 <_close_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	2300      	movs	r3, #0
 800a024:	4c05      	ldr	r4, [pc, #20]	; (800a03c <_close_r+0x1c>)
 800a026:	4605      	mov	r5, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	f7f7 fe4f 	bl	8001cce <_close>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_close_r+0x1a>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	b103      	cbz	r3, 800a03a <_close_r+0x1a>
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	200003e8 	.word	0x200003e8

0800a040 <__sflush_r>:
 800a040:	898a      	ldrh	r2, [r1, #12]
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	4605      	mov	r5, r0
 800a048:	0710      	lsls	r0, r2, #28
 800a04a:	460c      	mov	r4, r1
 800a04c:	d458      	bmi.n	800a100 <__sflush_r+0xc0>
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc05      	bgt.n	800a060 <__sflush_r+0x20>
 800a054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc02      	bgt.n	800a060 <__sflush_r+0x20>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a062:	2e00      	cmp	r6, #0
 800a064:	d0f9      	beq.n	800a05a <__sflush_r+0x1a>
 800a066:	2300      	movs	r3, #0
 800a068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a06c:	682f      	ldr	r7, [r5, #0]
 800a06e:	6a21      	ldr	r1, [r4, #32]
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	d032      	beq.n	800a0da <__sflush_r+0x9a>
 800a074:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	075a      	lsls	r2, r3, #29
 800a07a:	d505      	bpl.n	800a088 <__sflush_r+0x48>
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	1ac0      	subs	r0, r0, r3
 800a080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a082:	b10b      	cbz	r3, 800a088 <__sflush_r+0x48>
 800a084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a086:	1ac0      	subs	r0, r0, r3
 800a088:	2300      	movs	r3, #0
 800a08a:	4602      	mov	r2, r0
 800a08c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08e:	6a21      	ldr	r1, [r4, #32]
 800a090:	4628      	mov	r0, r5
 800a092:	47b0      	blx	r6
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	d106      	bne.n	800a0a8 <__sflush_r+0x68>
 800a09a:	6829      	ldr	r1, [r5, #0]
 800a09c:	291d      	cmp	r1, #29
 800a09e:	d848      	bhi.n	800a132 <__sflush_r+0xf2>
 800a0a0:	4a29      	ldr	r2, [pc, #164]	; (800a148 <__sflush_r+0x108>)
 800a0a2:	40ca      	lsrs	r2, r1
 800a0a4:	07d6      	lsls	r6, r2, #31
 800a0a6:	d544      	bpl.n	800a132 <__sflush_r+0xf2>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	6062      	str	r2, [r4, #4]
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	04d9      	lsls	r1, r3, #19
 800a0b0:	6022      	str	r2, [r4, #0]
 800a0b2:	d504      	bpl.n	800a0be <__sflush_r+0x7e>
 800a0b4:	1c42      	adds	r2, r0, #1
 800a0b6:	d101      	bne.n	800a0bc <__sflush_r+0x7c>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b903      	cbnz	r3, 800a0be <__sflush_r+0x7e>
 800a0bc:	6560      	str	r0, [r4, #84]	; 0x54
 800a0be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c0:	602f      	str	r7, [r5, #0]
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	d0c9      	beq.n	800a05a <__sflush_r+0x1a>
 800a0c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	d002      	beq.n	800a0d4 <__sflush_r+0x94>
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f7ff fb2a 	bl	8009728 <_free_r>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d8:	e7c0      	b.n	800a05c <__sflush_r+0x1c>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b0      	blx	r6
 800a0e0:	1c41      	adds	r1, r0, #1
 800a0e2:	d1c8      	bne.n	800a076 <__sflush_r+0x36>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c5      	beq.n	800a076 <__sflush_r+0x36>
 800a0ea:	2b1d      	cmp	r3, #29
 800a0ec:	d001      	beq.n	800a0f2 <__sflush_r+0xb2>
 800a0ee:	2b16      	cmp	r3, #22
 800a0f0:	d101      	bne.n	800a0f6 <__sflush_r+0xb6>
 800a0f2:	602f      	str	r7, [r5, #0]
 800a0f4:	e7b1      	b.n	800a05a <__sflush_r+0x1a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e7ad      	b.n	800a05c <__sflush_r+0x1c>
 800a100:	690f      	ldr	r7, [r1, #16]
 800a102:	2f00      	cmp	r7, #0
 800a104:	d0a9      	beq.n	800a05a <__sflush_r+0x1a>
 800a106:	0793      	lsls	r3, r2, #30
 800a108:	bf18      	it	ne
 800a10a:	2300      	movne	r3, #0
 800a10c:	680e      	ldr	r6, [r1, #0]
 800a10e:	bf08      	it	eq
 800a110:	694b      	ldreq	r3, [r1, #20]
 800a112:	eba6 0807 	sub.w	r8, r6, r7
 800a116:	600f      	str	r7, [r1, #0]
 800a118:	608b      	str	r3, [r1, #8]
 800a11a:	f1b8 0f00 	cmp.w	r8, #0
 800a11e:	dd9c      	ble.n	800a05a <__sflush_r+0x1a>
 800a120:	4643      	mov	r3, r8
 800a122:	463a      	mov	r2, r7
 800a124:	6a21      	ldr	r1, [r4, #32]
 800a126:	4628      	mov	r0, r5
 800a128:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a12a:	47b0      	blx	r6
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dc06      	bgt.n	800a13e <__sflush_r+0xfe>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e78e      	b.n	800a05c <__sflush_r+0x1c>
 800a13e:	4407      	add	r7, r0
 800a140:	eba8 0800 	sub.w	r8, r8, r0
 800a144:	e7e9      	b.n	800a11a <__sflush_r+0xda>
 800a146:	bf00      	nop
 800a148:	20400001 	.word	0x20400001

0800a14c <_fflush_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b1db      	cbz	r3, 800a18e <_fflush_r+0x42>
 800a156:	b118      	cbz	r0, 800a160 <_fflush_r+0x14>
 800a158:	6983      	ldr	r3, [r0, #24]
 800a15a:	b90b      	cbnz	r3, 800a160 <_fflush_r+0x14>
 800a15c:	f7fe faf0 	bl	8008740 <__sinit>
 800a160:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <_fflush_r+0x48>)
 800a162:	429c      	cmp	r4, r3
 800a164:	d109      	bne.n	800a17a <_fflush_r+0x2e>
 800a166:	686c      	ldr	r4, [r5, #4]
 800a168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16c:	b17b      	cbz	r3, 800a18e <_fflush_r+0x42>
 800a16e:	4621      	mov	r1, r4
 800a170:	4628      	mov	r0, r5
 800a172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a176:	f7ff bf63 	b.w	800a040 <__sflush_r>
 800a17a:	4b07      	ldr	r3, [pc, #28]	; (800a198 <_fflush_r+0x4c>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d101      	bne.n	800a184 <_fflush_r+0x38>
 800a180:	68ac      	ldr	r4, [r5, #8]
 800a182:	e7f1      	b.n	800a168 <_fflush_r+0x1c>
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <_fflush_r+0x50>)
 800a186:	429c      	cmp	r4, r3
 800a188:	bf08      	it	eq
 800a18a:	68ec      	ldreq	r4, [r5, #12]
 800a18c:	e7ec      	b.n	800a168 <_fflush_r+0x1c>
 800a18e:	2000      	movs	r0, #0
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	bf00      	nop
 800a194:	0800a4c8 	.word	0x0800a4c8
 800a198:	0800a4e8 	.word	0x0800a4e8
 800a19c:	0800a4a8 	.word	0x0800a4a8

0800a1a0 <_lseek_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4c05      	ldr	r4, [pc, #20]	; (800a1c0 <_lseek_r+0x20>)
 800a1ac:	6022      	str	r2, [r4, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f7f7 fdb1 	bl	8001d16 <_lseek>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_lseek_r+0x1e>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_lseek_r+0x1e>
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	200003e8 	.word	0x200003e8

0800a1c4 <__swhatbuf_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	460e      	mov	r6, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	b096      	sub	sp, #88	; 0x58
 800a1ce:	2900      	cmp	r1, #0
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	461d      	mov	r5, r3
 800a1d4:	da07      	bge.n	800a1e6 <__swhatbuf_r+0x22>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	89b3      	ldrh	r3, [r6, #12]
 800a1dc:	061a      	lsls	r2, r3, #24
 800a1de:	d410      	bmi.n	800a202 <__swhatbuf_r+0x3e>
 800a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e4:	e00e      	b.n	800a204 <__swhatbuf_r+0x40>
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f000 f8a4 	bl	800a334 <_fstat_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dbf2      	blt.n	800a1d6 <__swhatbuf_r+0x12>
 800a1f0:	9a01      	ldr	r2, [sp, #4]
 800a1f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1fa:	425a      	negs	r2, r3
 800a1fc:	415a      	adcs	r2, r3
 800a1fe:	602a      	str	r2, [r5, #0]
 800a200:	e7ee      	b.n	800a1e0 <__swhatbuf_r+0x1c>
 800a202:	2340      	movs	r3, #64	; 0x40
 800a204:	2000      	movs	r0, #0
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	b016      	add	sp, #88	; 0x58
 800a20a:	bd70      	pop	{r4, r5, r6, pc}

0800a20c <__smakebuf_r>:
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a210:	079d      	lsls	r5, r3, #30
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d507      	bpl.n	800a228 <__smakebuf_r+0x1c>
 800a218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	2301      	movs	r3, #1
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	b002      	add	sp, #8
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	ab01      	add	r3, sp, #4
 800a22a:	466a      	mov	r2, sp
 800a22c:	f7ff ffca 	bl	800a1c4 <__swhatbuf_r>
 800a230:	9900      	ldr	r1, [sp, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff fac3 	bl	80097c0 <_malloc_r>
 800a23a:	b948      	cbnz	r0, 800a250 <__smakebuf_r+0x44>
 800a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d4ef      	bmi.n	800a224 <__smakebuf_r+0x18>
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	e7e3      	b.n	800a218 <__smakebuf_r+0xc>
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <__smakebuf_r+0x7c>)
 800a252:	62b3      	str	r3, [r6, #40]	; 0x28
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	6020      	str	r0, [r4, #0]
 800a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	6120      	str	r0, [r4, #16]
 800a262:	6163      	str	r3, [r4, #20]
 800a264:	9b01      	ldr	r3, [sp, #4]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x74>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 f873 	bl	800a358 <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x74>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	431d      	orrs	r5, r3
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cd      	b.n	800a224 <__smakebuf_r+0x18>
 800a288:	08008709 	.word	0x08008709

0800a28c <memmove>:
 800a28c:	4288      	cmp	r0, r1
 800a28e:	b510      	push	{r4, lr}
 800a290:	eb01 0302 	add.w	r3, r1, r2
 800a294:	d807      	bhi.n	800a2a6 <memmove+0x1a>
 800a296:	1e42      	subs	r2, r0, #1
 800a298:	4299      	cmp	r1, r3
 800a29a:	d00a      	beq.n	800a2b2 <memmove+0x26>
 800a29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2a4:	e7f8      	b.n	800a298 <memmove+0xc>
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	d9f5      	bls.n	800a296 <memmove+0xa>
 800a2aa:	1881      	adds	r1, r0, r2
 800a2ac:	1ad2      	subs	r2, r2, r3
 800a2ae:	42d3      	cmn	r3, r2
 800a2b0:	d100      	bne.n	800a2b4 <memmove+0x28>
 800a2b2:	bd10      	pop	{r4, pc}
 800a2b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2bc:	e7f7      	b.n	800a2ae <memmove+0x22>

0800a2be <__malloc_lock>:
 800a2be:	4770      	bx	lr

0800a2c0 <__malloc_unlock>:
 800a2c0:	4770      	bx	lr

0800a2c2 <_realloc_r>:
 800a2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	460e      	mov	r6, r1
 800a2ca:	b921      	cbnz	r1, 800a2d6 <_realloc_r+0x14>
 800a2cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	f7ff ba75 	b.w	80097c0 <_malloc_r>
 800a2d6:	b922      	cbnz	r2, 800a2e2 <_realloc_r+0x20>
 800a2d8:	f7ff fa26 	bl	8009728 <_free_r>
 800a2dc:	4625      	mov	r5, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e2:	f000 f849 	bl	800a378 <_malloc_usable_size_r>
 800a2e6:	42a0      	cmp	r0, r4
 800a2e8:	d20f      	bcs.n	800a30a <_realloc_r+0x48>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff fa67 	bl	80097c0 <_malloc_r>
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d0f2      	beq.n	800a2de <_realloc_r+0x1c>
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	f7fb fe60 	bl	8005fc0 <memcpy>
 800a300:	4631      	mov	r1, r6
 800a302:	4638      	mov	r0, r7
 800a304:	f7ff fa10 	bl	8009728 <_free_r>
 800a308:	e7e9      	b.n	800a2de <_realloc_r+0x1c>
 800a30a:	4635      	mov	r5, r6
 800a30c:	e7e7      	b.n	800a2de <_realloc_r+0x1c>
	...

0800a310 <_read_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4605      	mov	r5, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	2200      	movs	r2, #0
 800a31a:	4c05      	ldr	r4, [pc, #20]	; (800a330 <_read_r+0x20>)
 800a31c:	6022      	str	r2, [r4, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f7 fc9c 	bl	8001c5c <_read>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_read_r+0x1e>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_read_r+0x1e>
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200003e8 	.word	0x200003e8

0800a334 <_fstat_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	2300      	movs	r3, #0
 800a338:	4c06      	ldr	r4, [pc, #24]	; (800a354 <_fstat_r+0x20>)
 800a33a:	4605      	mov	r5, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	4611      	mov	r1, r2
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	f7f7 fccf 	bl	8001ce4 <_fstat>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d102      	bne.n	800a350 <_fstat_r+0x1c>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	b103      	cbz	r3, 800a350 <_fstat_r+0x1c>
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	bd38      	pop	{r3, r4, r5, pc}
 800a352:	bf00      	nop
 800a354:	200003e8 	.word	0x200003e8

0800a358 <_isatty_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	2300      	movs	r3, #0
 800a35c:	4c05      	ldr	r4, [pc, #20]	; (800a374 <_isatty_r+0x1c>)
 800a35e:	4605      	mov	r5, r0
 800a360:	4608      	mov	r0, r1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	f7f7 fccd 	bl	8001d02 <_isatty>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_isatty_r+0x1a>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_isatty_r+0x1a>
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	200003e8 	.word	0x200003e8

0800a378 <_malloc_usable_size_r>:
 800a378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a37c:	1f18      	subs	r0, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	bfbc      	itt	lt
 800a382:	580b      	ldrlt	r3, [r1, r0]
 800a384:	18c0      	addlt	r0, r0, r3
 800a386:	4770      	bx	lr

0800a388 <_init>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	bf00      	nop
 800a38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	469e      	mov	lr, r3
 800a392:	4770      	bx	lr

0800a394 <_fini>:
 800a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a396:	bf00      	nop
 800a398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39a:	bc08      	pop	{r3}
 800a39c:	469e      	mov	lr, r3
 800a39e:	4770      	bx	lr
