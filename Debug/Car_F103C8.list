
Car_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08009078  08009078  00019078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009368  08009368  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009368  08009368  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001dc  0800954c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800954c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aec  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003269  00000000  00000000  00037cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  0003af60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b4b2  00000000  00000000  0003ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004ffd  00000000  00000000  00048382  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0004d37f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005130  00000000  00000000  0004d3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009060 	.word	0x08009060

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009060 	.word	0x08009060

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <_ZN6ButtonC1EP12GPIO_TypeDeft>:
	/*
	 * @brief initialize button
	 * @para GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
	 * @retral none
	 */
	Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]
		isButtonDown = false;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	719a      	strb	r2, [r3, #6]
		this->GPIOx = GPIOx;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	601a      	str	r2, [r3, #0]
		this->GPIO_Pin = GPIO_Pin;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	809a      	strh	r2, [r3, #4]
	}
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
	/*
	 * @brief initialize encoder
	 * @para TIM_HandleTypeDef *htim
	 * @retral none
	 */
	Encoder(TIM_HandleTypeDef *htim) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
		this->encoderCount = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		this->htim = htim;
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
		//启动定时编码器
		HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	213c      	movs	r1, #60	; 0x3c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 ff46 	bl	8003f48 <HAL_TIM_Encoder_Start>
		//计数器清零
		__HAL_TIM_SET_COUNTER(htim, 0);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_t>:
	GPIO_TypeDef *GPIOx1;
	GPIO_TypeDef *GPIOx2;
	uint16_t GPIO_Pin1;
	uint16_t GPIO_Pin2;
public:
	Motor(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL_NUMBER,
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
			GPIO_TypeDef *GPIOx1, uint16_t GPIO_Pin1, GPIO_TypeDef *GPIOx2, uint16_t GPIO_Pin2) {
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_t+0x54>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	601a      	str	r2, [r3, #0]
		this->htim = htim;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	605a      	str	r2, [r3, #4]
		this->TIM_CHANNEL_NUMBER = TIM_CHANNEL_NUMBER;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
		this->GPIOx1 = GPIOx1;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	60da      	str	r2, [r3, #12]
		this->GPIOx2 = GPIOx2;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	611a      	str	r2, [r3, #16]
		this->GPIO_Pin1 = GPIO_Pin1;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8b3a      	ldrh	r2, [r7, #24]
 8001100:	829a      	strh	r2, [r3, #20]
		this->GPIO_Pin2 = GPIO_Pin2;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	8c3a      	ldrh	r2, [r7, #32]
 8001106:	82da      	strh	r2, [r3, #22]
		HAL_TIM_PWM_Start(this->htim, this->TIM_CHANNEL_NUMBER); //开启TIM3_CH2的PWM输出
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f002 fdd4 	bl	8003cc0 <HAL_TIM_PWM_Start>
	}
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08009094 	.word	0x08009094

08001128 <_ZN5Motor8frontRunEv>:
	void frontRun() {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(this->GPIOx1, this->GPIO_Pin1, GPIO_PIN_SET); //初始化BIN1引脚为低电平
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68d8      	ldr	r0, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	8a9b      	ldrh	r3, [r3, #20]
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f001 f8c5 	bl	80022ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(this->GPIOx2, this->GPIO_Pin2, GPIO_PIN_RESET); //初始化BIN2引脚为高电平
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6918      	ldr	r0, [r3, #16]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	8adb      	ldrh	r3, [r3, #22]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f001 f8bd 	bl	80022ca <HAL_GPIO_WritePin>
	}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN5MotorD1Ev>:
	}
	void stop() {
		HAL_GPIO_WritePin(this->GPIOx1, this->GPIO_Pin1, GPIO_PIN_RESET); //初始化BIN1引脚为低电平
		HAL_GPIO_WritePin(this->GPIOx2, this->GPIO_Pin2, GPIO_PIN_RESET); //初始化BIN2引脚为高电平
	}
	virtual ~Motor(){};
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <_ZN5MotorD1Ev+0x1c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	08009094 	.word	0x08009094

08001178 <_ZN5MotorD0Ev>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe9 	bl	8001158 <_ZN5MotorD1Ev>
 8001186:	2118      	movs	r1, #24
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f004 f9ed 	bl	8005568 <_ZdlPvj>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <CppMain>:
#include "CPPmain.h"




void CppMain() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af04      	add	r7, sp, #16
	Button button(Button_GPIO_Port, Button_Pin);
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a6:	4911      	ldr	r1, [pc, #68]	; (80011ec <CppMain+0x54>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff61 	bl	8001070 <_ZN6ButtonC1EP12GPIO_TypeDeft>
	Motor motor(&htim3, TIM_CHANNEL_2, BIN1_GPIO_Port, BIN1_Pin, BIN2_GPIO_Port,
	BIN2_Pin);
 80011ae:	f107 0008 	add.w	r0, r7, #8
 80011b2:	2310      	movs	r3, #16
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <CppMain+0x54>)
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2308      	movs	r3, #8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <CppMain+0x54>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	490b      	ldr	r1, [pc, #44]	; (80011f0 <CppMain+0x58>)
 80011c4:	f7ff ff84 	bl	80010d0 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_t>
	Encoder encoder(&htim4);
 80011c8:	463b      	mov	r3, r7
 80011ca:	490a      	ldr	r1, [pc, #40]	; (80011f4 <CppMain+0x5c>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff65 	bl	800109c <_ZN7EncoderC1EP17TIM_HandleTypeDef>
	motor.frontRun();
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffa6 	bl	8001128 <_ZN5Motor8frontRunEv>
	/* USER CODE BEGIN 1 */
//	int iTempTim4Encoder; ///临时存放从TIM4编码器接口捕获到的脉冲数据
//	short accx, accy, accz;	//加速度x轴、y轴、z轴数据
//	short gyrox, gyroy, gyroz;	//陀螺仪x轴、y轴、z轴数据
	if (!MPU_Init())	//如果MPU6050初始化成功，返回0，!0则为1
 80011dc:	f003 ffd8 	bl	8005190 <_Z8MPU_Initv>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
//		MPU_Get_Gyroscope(&gyrox, &gyroy, &gyroz);	//获取MPU6050陀螺仪数据
//		printf("accx=%d,accy=%d,accz=%d\n", accx, accy, accz);	//打印MPU6050加速度数据
//		printf("gyrox=%d,gyroy=%d,gyroz=%d\n", gyrox, gyroy, gyroz);//打印MPU6050陀螺仪数据
//		printf("小车角度 = %f\r\n",g_fCarAngle);//打印实时角度
//		HAL_Delay(5);    //延时0.5s，防止打印发送数据太快
		OutPut_Data();
 80011e4:	f004 f91c 	bl	8005420 <OutPut_Data>
 80011e8:	e7fc      	b.n	80011e4 <CppMain+0x4c>
 80011ea:	bf00      	nop
 80011ec:	40010800 	.word	0x40010800
 80011f0:	200002d0 	.word	0x200002d0
 80011f4:	20000288 	.word	0x20000288

080011f8 <GetMotorPulse>:
    OutData[1]=g_fGyroAngleSpeed;//发送陀螺仪角速度
    OutData[2]=g_fCarAngle;//发送数据融合得到的角度
}
/************************************************************************************************/
void GetMotorPulse(void)//读取电机脉冲
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    g_nLeftMotorPulse = (short)(__HAL_TIM_GET_COUNTER(&htim4));//获取计数器值
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <GetMotorPulse+0x24>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	b21b      	sxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <GetMotorPulse+0x28>)
 8001208:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim4,0);//计数器清零
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <GetMotorPulse+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000288 	.word	0x20000288
 8001220:	200001fc 	.word	0x200001fc

08001224 <SpeedInnerControl>:

int SpeedInnerControl(int nPulse,int nTarget)//速度内环控制
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
    int nError;//偏差
    float fP = 10.0, fI = 0.9;//这里只用到PI，参数由电机的种类和负载决定
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <SpeedInnerControl+0xc8>)
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <SpeedInnerControl+0xcc>)
 8001234:	613b      	str	r3, [r7, #16]

    nError = nPulse - nTarget ;//偏差 = 目标速度 - 实际速度
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	60fb      	str	r3, [r7, #12]

    nPwmBais = fP * (nError - nErrorPrev) + fI * nError;//增量式PI控制器
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <SpeedInnerControl+0xd0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd48 	bl	8000cdc <__aeabi_i2f>
 800124c:	4603      	mov	r3, r0
 800124e:	6979      	ldr	r1, [r7, #20]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd97 	bl	8000d84 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	461c      	mov	r4, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fd3e 	bl	8000cdc <__aeabi_i2f>
 8001260:	4603      	mov	r3, r0
 8001262:	6939      	ldr	r1, [r7, #16]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd8d 	bl	8000d84 <__aeabi_fmul>
 800126a:	4603      	mov	r3, r0
 800126c:	4619      	mov	r1, r3
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff fc80 	bl	8000b74 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fed4 	bl	8001024 <__aeabi_f2iz>
 800127c:	4602      	mov	r2, r0
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <SpeedInnerControl+0xd4>)
 8001280:	601a      	str	r2, [r3, #0]

    nErrorPrev = nError;//保存上一次偏差
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <SpeedInnerControl+0xd0>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6013      	str	r3, [r2, #0]

    nPwm += nPwmBais;//增量输出
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <SpeedInnerControl+0xd8>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <SpeedInnerControl+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4413      	add	r3, r2
 8001292:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <SpeedInnerControl+0xd8>)
 8001294:	6013      	str	r3, [r2, #0]

    if(nPwm > 100) nPwm = 100;//限制上限，防止超出PWM量程
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <SpeedInnerControl+0xd8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	dd02      	ble.n	80012a4 <SpeedInnerControl+0x80>
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <SpeedInnerControl+0xd8>)
 80012a0:	2264      	movs	r2, #100	; 0x64
 80012a2:	601a      	str	r2, [r3, #0]
    if(nPwm <-100) nPwm =-100;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <SpeedInnerControl+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80012ac:	da03      	bge.n	80012b6 <SpeedInnerControl+0x92>
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <SpeedInnerControl+0xd8>)
 80012b0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80012b4:	601a      	str	r2, [r3, #0]

    OutData[0]=(float)nPulse;//速度实际值
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd10 	bl	8000cdc <__aeabi_i2f>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <SpeedInnerControl+0xdc>)
 80012c0:	601a      	str	r2, [r3, #0]
    OutData[1]=(float)nTarget ;//速度目标值
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f7ff fd0a 	bl	8000cdc <__aeabi_i2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <SpeedInnerControl+0xdc>)
 80012cc:	605a      	str	r2, [r3, #4]
    OutData[2]=(float)nPwm;//PWM输出值
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <SpeedInnerControl+0xd8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd02 	bl	8000cdc <__aeabi_i2f>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <SpeedInnerControl+0xdc>)
 80012dc:	609a      	str	r2, [r3, #8]

    return nPwm;//返回输出值
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <SpeedInnerControl+0xd8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	41200000 	.word	0x41200000
 80012f0:	3f666666 	.word	0x3f666666
 80012f4:	20000208 	.word	0x20000208
 80012f8:	2000020c 	.word	0x2000020c
 80012fc:	20000210 	.word	0x20000210
 8001300:	2000021c 	.word	0x2000021c

08001304 <SetMotorVoltageAndDirection>:

void SetMotorVoltageAndDirection(int nMotorPwm)//设置电机电压和方向
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    if(nMotorPwm < 0)//反转
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da11      	bge.n	8001336 <SetMotorVoltageAndDirection+0x32>
        {
            HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2108      	movs	r1, #8
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <SetMotorVoltageAndDirection+0x58>)
 8001318:	f000 ffd7 	bl	80022ca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2110      	movs	r1, #16
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <SetMotorVoltageAndDirection+0x58>)
 8001322:	f000 ffd2 	bl	80022ca <HAL_GPIO_WritePin>
            nMotorPwm = (-nMotorPwm);//如果计算值是负值，先取负得正，因为PWM寄存器只能是正值
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	425b      	negs	r3, r3
 800132a:	607b      	str	r3, [r7, #4]
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nMotorPwm);
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <SetMotorVoltageAndDirection+0x5c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
        {
            HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nMotorPwm);
        }
}
 8001334:	e00d      	b.n	8001352 <SetMotorVoltageAndDirection+0x4e>
            HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2108      	movs	r1, #8
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <SetMotorVoltageAndDirection+0x58>)
 800133c:	f000 ffc5 	bl	80022ca <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <SetMotorVoltageAndDirection+0x58>)
 8001346:	f000 ffc0 	bl	80022ca <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nMotorPwm);
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SetMotorVoltageAndDirection+0x5c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010800 	.word	0x40010800
 8001360:	200002d0 	.word	0x200002d0

08001364 <ShowPlus>:


void ShowPlus(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	  g_ucMainEventCount++;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <ShowPlus+0x5c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <ShowPlus+0x5c>)
 8001372:	701a      	strb	r2, [r3, #0]
	  if(g_ucMainEventCount>=5)//SysTick是1ms一次，这里判断语句大于5就是5ms运行一次
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <ShowPlus+0x5c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d905      	bls.n	8001388 <ShowPlus+0x24>
	    {
	        g_ucMainEventCount=0;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <ShowPlus+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	        GetMotorPulse();
 8001382:	f7ff ff39 	bl	80011f8 <GetMotorPulse>
	    }
//	  extern Button button;
//	  extern Motor motor;
//	  button.buttonScan(&motor);
	/* USER CODE END SysTick_IRQn 0 */
}
 8001386:	e019      	b.n	80013bc <ShowPlus+0x58>
	    }else if(g_ucMainEventCount==1)
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <ShowPlus+0x5c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d10c      	bne.n	80013aa <ShowPlus+0x46>
	        g_nLeftMotorOutput = SpeedInnerControl(g_nLeftMotorPulse,g_nSpeedTarget);
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <ShowPlus+0x60>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <ShowPlus+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff ff41 	bl	8001224 <SpeedInnerControl>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <ShowPlus+0x68>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	e008      	b.n	80013bc <ShowPlus+0x58>
	    }else if(g_ucMainEventCount==2)
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <ShowPlus+0x5c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d104      	bne.n	80013bc <ShowPlus+0x58>
	        SetMotorVoltageAndDirection(g_nLeftMotorOutput);
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <ShowPlus+0x68>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffa4 	bl	8001304 <SetMotorVoltageAndDirection>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	200001fc 	.word	0x200001fc
 80013c8:	20000200 	.word	0x20000200
 80013cc:	20000204 	.word	0x20000204

080013d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <MX_GPIO_Init+0xf8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <MX_GPIO_Init+0xf8>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <MX_GPIO_Init+0xf8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_GPIO_Init+0xf8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <MX_GPIO_Init+0xf8>)
 8001402:	f043 0320 	orr.w	r3, r3, #32
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <MX_GPIO_Init+0xf8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <MX_GPIO_Init+0xf8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <MX_GPIO_Init+0xf8>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <MX_GPIO_Init+0xf8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_GPIO_Init+0xf8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <MX_GPIO_Init+0xf8>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_GPIO_Init+0xf8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2118      	movs	r1, #24
 8001448:	4820      	ldr	r0, [pc, #128]	; (80014cc <MX_GPIO_Init+0xfc>)
 800144a:	f000 ff3e 	bl	80022ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001454:	481e      	ldr	r0, [pc, #120]	; (80014d0 <MX_GPIO_Init+0x100>)
 8001456:	f000 ff38 	bl	80022ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 800145a:	2318      	movs	r3, #24
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	4816      	ldr	r0, [pc, #88]	; (80014cc <MX_GPIO_Init+0xfc>)
 8001472:	f000 fdb9 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_GPIO_Init+0x100>)
 8001490:	f000 fdaa 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_GPIO_Init+0x104>)
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <MX_GPIO_Init+0xfc>)
 80014aa:	f000 fd9d 	bl	8001fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	2017      	movs	r0, #23
 80014b4:	f000 fceb 	bl	8001e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014b8:	2017      	movs	r0, #23
 80014ba:	f000 fd04 	bl	8001ec6 <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	10210000 	.word	0x10210000

080014d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <MX_I2C1_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x50>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_I2C1_Init+0x58>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_I2C1_Init+0x50>)
 8001516:	f000 ff21 	bl	800235c <HAL_I2C_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001520:	f000 f8b0 	bl	8001684 <Error_Handler>
  }

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000234 	.word	0x20000234
 800152c:	40005400 	.word	0x40005400
 8001530:	000186a0 	.word	0x000186a0

08001534 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_I2C_MspInit+0x90>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d132      	bne.n	80015ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001572:	2312      	movs	r3, #18
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4812      	ldr	r0, [pc, #72]	; (80015cc <HAL_I2C_MspInit+0x98>)
 8001582:	f000 fd31 	bl	8001fe8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_I2C_MspInit+0x9c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <HAL_I2C_MspInit+0x9c>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_I2C_MspInit+0x94>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40010000 	.word	0x40010000

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d8:	f000 fafe 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f80d 	bl	80015fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e0:	f7ff fef6 	bl	80013d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015e4:	f000 fa54 	bl	8001a90 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80015e8:	f000 f970 	bl	80018cc <MX_TIM4_Init>
  MX_TIM3_Init();
 80015ec:	f000 f8f8 	bl	80017e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80015f0:	f7ff ff72 	bl	80014d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	CppMain();
 80015f4:	f7ff fdd0 	bl	8001198 <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80015f8:	e7fe      	b.n	80015f8 <main+0x24>

080015fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b090      	sub	sp, #64	; 0x40
 80015fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2228      	movs	r2, #40	; 0x28
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fff6 	bl	80055fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001624:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fe78 	bl	8003338 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800164e:	f000 f819 	bl	8001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001656:	2302      	movs	r3, #2
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f8e3 	bl	8003838 <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001678:	f000 f804 	bl	8001684 <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3740      	adds	r7, #64	; 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800168a:	e7fe      	b.n	800168a <Error_Handler+0x6>

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_MspInit+0x5c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_MspInit+0x5c>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_MspInit+0x5c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_MspInit+0x5c>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_MspInit+0x60>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_MspInit+0x60>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000

080016f0 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */

	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	/*************lyd add here***************/
	extern void ShowPlus();

	ShowPlus();
 8001736:	f7ff fe15 	bl	8001364 <ShowPlus>
//		//角度环计算函数，每5ms执行一次
//		AngleCalculate();
//	}
	/*************lyd end here***************/
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800173a:	f000 fa93 	bl	8001c64 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001746:	f44f 7080 	mov.w	r0, #256	; 0x100
 800174a:	f000 fdef 	bl	800232c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <USART1_IRQHandler+0x10>)
 800175a:	f003 f9db 	bl	8004b14 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000318 	.word	0x20000318

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f003 feea 	bl	8005570 <__errno>
 800179c:	4602      	mov	r2, r0
 800179e:	230c      	movs	r3, #12
 80017a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20005000 	.word	0x20005000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000214 	.word	0x20000214
 80017d0:	20000360 	.word	0x20000360

080017d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001812:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <MX_TIM3_Init+0xe8>)
 8001814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001818:	2248      	movs	r2, #72	; 0x48
 800181a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <MX_TIM3_Init+0xe4>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <MX_TIM3_Init+0xe4>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001834:	4823      	ldr	r0, [pc, #140]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001836:	f002 f99b 	bl	8003b70 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001840:	f7ff ff20 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184e:	4619      	mov	r1, r3
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001852:	f002 fcc5 	bl	80041e0 <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800185c:	f7ff ff12 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001862:	f002 f9d4 	bl	8003c0e <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800186c:	f7ff ff0a 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4619      	mov	r1, r3
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <MX_TIM3_Init+0xe4>)
 8001880:	f003 f80a 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800188a:	f7ff fefb 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2204      	movs	r2, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM3_Init+0xe4>)
 80018a6:	f002 fbdd 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80018b0:	f7ff fee8 	bl	8001684 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM3_Init+0xe4>)
 80018b6:	f000 f8b9 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3738      	adds	r7, #56	; 0x38
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002d0 	.word	0x200002d0
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fe8d 	bl	80055fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_TIM4_Init+0xa0>)
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <MX_TIM4_Init+0xa4>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_TIM4_Init+0xa0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_TIM4_Init+0xa0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_TIM4_Init+0xa0>)
 80018fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_TIM4_Init+0xa0>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_TIM4_Init+0xa0>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800190e:	2303      	movs	r3, #3
 8001910:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001916:	2301      	movs	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001926:	2301      	movs	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_TIM4_Init+0xa0>)
 800193a:	f002 fa63 	bl	8003e04 <HAL_TIM_Encoder_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001944:	f7ff fe9e 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_TIM4_Init+0xa0>)
 8001956:	f002 ff9f 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001960:	f7ff fe90 	bl	8001684 <Error_Handler>
  }

}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000288 	.word	0x20000288
 8001970:	40000800 	.word	0x40000800

08001974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x34>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10b      	bne.n	800199e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_TIM_Base_MspInit+0x38>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_TIM_Base_MspInit+0x38>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_TIM_Base_MspInit+0x38>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_Encoder_MspInit+0x70>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d123      	bne.n	8001a18 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	61d3      	str	r3, [r2, #28]
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_Encoder_MspInit+0x74>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a00:	23c0      	movs	r3, #192	; 0xc0
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_TIM_Encoder_MspInit+0x78>)
 8001a14:	f000 fae8 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010c00 	.word	0x40010c00

08001a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_TIM_MspPostInit+0x58>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d117      	bne.n	8001a7c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_TIM_MspPostInit+0x60>)
 8001a78:	f000 fab6 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40000400 	.word	0x40000400
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_USART1_UART_Init+0x50>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f002 ff44 	bl	8004954 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad2:	f7ff fdd7 	bl	8001684 <Error_Handler>
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000318 	.word	0x20000318
 8001ae0:	40013800 	.word	0x40013800

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_UART_MspInit+0x9c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d139      	bne.n	8001b78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_UART_MspInit+0xa0>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480f      	ldr	r0, [pc, #60]	; (8001b88 <HAL_UART_MspInit+0xa4>)
 8001b4a:	f000 fa4d 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_UART_MspInit+0xa4>)
 8001b64:	f000 fa40 	bl	8001fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2025      	movs	r0, #37	; 0x25
 8001b6e:	f000 f98e 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b72:	2025      	movs	r0, #37	; 0x25
 8001b74:	f000 f9a7 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800

08001b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b8e:	e003      	b.n	8001b98 <LoopCopyDataInit>

08001b90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b96:	3104      	adds	r1, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ba0:	d3f6      	bcc.n	8001b90 <CopyDataInit>
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ba4:	e002      	b.n	8001bac <LoopFillZerobss>

08001ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ba8:	f842 3b04 	str.w	r3, [r2], #4

08001bac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bb0:	d3f9      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bb2:	f7ff fe0f 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f003 fce1 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bba:	f7ff fd0b 	bl	80015d4 <main>
  bx lr
 8001bbe:	4770      	bx	lr
  ldr r3, =_sidata
 8001bc0:	08009370 	.word	0x08009370
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bc8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001bcc:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001bd0:	20000360 	.word	0x20000360

08001bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_2_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_Init+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_Init+0x28>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f945 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fd4a 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f95d 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f925 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x20>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <HAL_IncTick+0x20>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000358 	.word	0x20000358

08001c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <HAL_GetTick+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000358 	.word	0x20000358

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_Delay+0x40>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffe0 	bl	8001c88 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4906      	ldr	r1, [pc, #24]	; (8001d78 <__NVIC_EnableIRQ+0x34>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff90 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff2d 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff42 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff90 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5f 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff35 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d005      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e051      	b.n	8001fc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 020e 	bic.w	r2, r2, #14
 8001f2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <HAL_DMA_Abort_IT+0xd0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d029      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xa0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <HAL_DMA_Abort_IT+0xd4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x9c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_DMA_Abort_IT+0xd8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01a      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x96>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_DMA_Abort_IT+0xdc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x90>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_DMA_Abort_IT+0xe0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00a      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x8a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_DMA_Abort_IT+0xe4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d102      	bne.n	8001f80 <HAL_DMA_Abort_IT+0x84>
 8001f7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f7e:	e00e      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f84:	e00b      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8a:	e008      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	e005      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	e002      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f98:	2310      	movs	r3, #16
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Abort_IT+0xa2>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_DMA_Abort_IT+0xe8>)
 8001fa0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
    } 
  }
  return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40020008 	.word	0x40020008
 8001fd0:	4002001c 	.word	0x4002001c
 8001fd4:	40020030 	.word	0x40020030
 8001fd8:	40020044 	.word	0x40020044
 8001fdc:	40020058 	.word	0x40020058
 8001fe0:	4002006c 	.word	0x4002006c
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e127      	b.n	800224c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 8116 	bne.w	8002246 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d034      	beq.n	800208c <HAL_GPIO_Init+0xa4>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d80d      	bhi.n	8002042 <HAL_GPIO_Init+0x5a>
 8002026:	2b02      	cmp	r3, #2
 8002028:	d02b      	beq.n	8002082 <HAL_GPIO_Init+0x9a>
 800202a:	2b02      	cmp	r3, #2
 800202c:	d804      	bhi.n	8002038 <HAL_GPIO_Init+0x50>
 800202e:	2b00      	cmp	r3, #0
 8002030:	d031      	beq.n	8002096 <HAL_GPIO_Init+0xae>
 8002032:	2b01      	cmp	r3, #1
 8002034:	d01c      	beq.n	8002070 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002036:	e048      	b.n	80020ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002038:	2b03      	cmp	r3, #3
 800203a:	d043      	beq.n	80020c4 <HAL_GPIO_Init+0xdc>
 800203c:	2b11      	cmp	r3, #17
 800203e:	d01b      	beq.n	8002078 <HAL_GPIO_Init+0x90>
          break;
 8002040:	e043      	b.n	80020ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002042:	4a89      	ldr	r2, [pc, #548]	; (8002268 <HAL_GPIO_Init+0x280>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d026      	beq.n	8002096 <HAL_GPIO_Init+0xae>
 8002048:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_GPIO_Init+0x280>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d806      	bhi.n	800205c <HAL_GPIO_Init+0x74>
 800204e:	4a87      	ldr	r2, [pc, #540]	; (800226c <HAL_GPIO_Init+0x284>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d020      	beq.n	8002096 <HAL_GPIO_Init+0xae>
 8002054:	4a86      	ldr	r2, [pc, #536]	; (8002270 <HAL_GPIO_Init+0x288>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_GPIO_Init+0xae>
          break;
 800205a:	e036      	b.n	80020ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800205c:	4a85      	ldr	r2, [pc, #532]	; (8002274 <HAL_GPIO_Init+0x28c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0xae>
 8002062:	4a85      	ldr	r2, [pc, #532]	; (8002278 <HAL_GPIO_Init+0x290>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d016      	beq.n	8002096 <HAL_GPIO_Init+0xae>
 8002068:	4a84      	ldr	r2, [pc, #528]	; (800227c <HAL_GPIO_Init+0x294>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0xae>
          break;
 800206e:	e02c      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	623b      	str	r3, [r7, #32]
          break;
 8002076:	e028      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e023      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	3308      	adds	r3, #8
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e01e      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	330c      	adds	r3, #12
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e019      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800209e:	2304      	movs	r3, #4
 80020a0:	623b      	str	r3, [r7, #32]
          break;
 80020a2:	e012      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ac:	2308      	movs	r3, #8
 80020ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	611a      	str	r2, [r3, #16]
          break;
 80020b6:	e008      	b.n	80020ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b8:	2308      	movs	r3, #8
 80020ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	615a      	str	r2, [r3, #20]
          break;
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d801      	bhi.n	80020d4 <HAL_GPIO_Init+0xec>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	e001      	b.n	80020d8 <HAL_GPIO_Init+0xf0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2bff      	cmp	r3, #255	; 0xff
 80020de:	d802      	bhi.n	80020e6 <HAL_GPIO_Init+0xfe>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x104>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	3b08      	subs	r3, #8
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	210f      	movs	r1, #15
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	431a      	orrs	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8096 	beq.w	8002246 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_GPIO_Init+0x298>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_GPIO_Init+0x298>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_GPIO_Init+0x298>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002132:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_GPIO_Init+0x29c>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4b      	ldr	r2, [pc, #300]	; (8002288 <HAL_GPIO_Init+0x2a0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x19e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4a      	ldr	r2, [pc, #296]	; (800228c <HAL_GPIO_Init+0x2a4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x19a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a49      	ldr	r2, [pc, #292]	; (8002290 <HAL_GPIO_Init+0x2a8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x196>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_GPIO_Init+0x2ac>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x192>
 8002176:	2303      	movs	r3, #3
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x1a0>
 800217a:	2304      	movs	r3, #4
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x1a0>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x1a0>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x1a0>
 8002186:	2300      	movs	r3, #0
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002198:	493a      	ldr	r1, [pc, #232]	; (8002284 <HAL_GPIO_Init+0x29c>)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4938      	ldr	r1, [pc, #224]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
 80021be:	e006      	b.n	80021ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	4933      	ldr	r1, [pc, #204]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	492e      	ldr	r1, [pc, #184]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4929      	ldr	r1, [pc, #164]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4924      	ldr	r1, [pc, #144]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
 800220e:	e006      	b.n	800221e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	43db      	mvns	r3, r3
 8002218:	491f      	ldr	r1, [pc, #124]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 800221a:	4013      	ands	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	491a      	ldr	r1, [pc, #104]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	60cb      	str	r3, [r1, #12]
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4915      	ldr	r1, [pc, #84]	; (8002298 <HAL_GPIO_Init+0x2b0>)
 8002242:	4013      	ands	r3, r2
 8002244:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f aed0 	bne.w	8001ffc <HAL_GPIO_Init+0x14>
  }
}
 800225c:	bf00      	nop
 800225e:	372c      	adds	r7, #44	; 0x2c
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	10210000 	.word	0x10210000
 800226c:	10110000 	.word	0x10110000
 8002270:	10120000 	.word	0x10120000
 8002274:	10310000 	.word	0x10310000
 8002278:	10320000 	.word	0x10320000
 800227c:	10220000 	.word	0x10220000
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	40010800 	.word	0x40010800
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40011000 	.word	0x40011000
 8002294:	40011400 	.word	0x40011400
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e001      	b.n	80022be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022da:	787b      	ldrb	r3, [r7, #1]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e6:	e003      	b.n	80022f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	611a      	str	r2, [r3, #16]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	041a      	lsls	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43d9      	mvns	r1, r3
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	400b      	ands	r3, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	4618      	mov	r0, r3
 800234c:	f002 feee 	bl	800512c <HAL_GPIO_EXTI_Callback>
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e11f      	b.n	80025ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff f8d6 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c0:	f001 fb90 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4a7b      	ldr	r2, [pc, #492]	; (80025b8 <HAL_I2C_Init+0x25c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d807      	bhi.n	80023e0 <HAL_I2C_Init+0x84>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_I2C_Init+0x260>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	bf94      	ite	ls
 80023d8:	2301      	movls	r3, #1
 80023da:	2300      	movhi	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e006      	b.n	80023ee <HAL_I2C_Init+0x92>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_I2C_Init+0x264>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0db      	b.n	80025ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <HAL_I2C_Init+0x268>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a64      	ldr	r2, [pc, #400]	; (80025b8 <HAL_I2C_Init+0x25c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d802      	bhi.n	8002430 <HAL_I2C_Init+0xd4>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3301      	adds	r3, #1
 800242e:	e009      	b.n	8002444 <HAL_I2C_Init+0xe8>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_I2C_Init+0x26c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	3301      	adds	r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4956      	ldr	r1, [pc, #344]	; (80025b8 <HAL_I2C_Init+0x25c>)
 8002460:	428b      	cmp	r3, r1
 8002462:	d80d      	bhi.n	8002480 <HAL_I2C_Init+0x124>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e59      	subs	r1, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b04      	cmp	r3, #4
 800247a:	bf38      	it	cc
 800247c:	2304      	movcc	r3, #4
 800247e:	e04f      	b.n	8002520 <HAL_I2C_Init+0x1c4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <HAL_I2C_Init+0x150>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e012      	b.n	80024d2 <HAL_I2C_Init+0x176>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e58      	subs	r0, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	0099      	lsls	r1, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Init+0x17e>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e022      	b.n	8002520 <HAL_I2C_Init+0x1c4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10e      	bne.n	8002500 <HAL_I2C_Init+0x1a4>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e58      	subs	r0, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	440b      	add	r3, r1
 80024f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fe:	e00f      	b.n	8002520 <HAL_I2C_Init+0x1c4>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	0099      	lsls	r1, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6809      	ldr	r1, [r1, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800254e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6911      	ldr	r1, [r2, #16]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	000186a0 	.word	0x000186a0
 80025bc:	001e847f 	.word	0x001e847f
 80025c0:	003d08ff 	.word	0x003d08ff
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	10624dd3 	.word	0x10624dd3

080025cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e6:	f7ff fb4f 	bl	8001c88 <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	f040 80d9 	bne.w	80027ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2319      	movs	r3, #25
 8002600:	2201      	movs	r2, #1
 8002602:	496d      	ldr	r1, [pc, #436]	; (80027b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fcbb 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
 8002612:	e0cc      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Mem_Write+0x56>
 800261e:	2302      	movs	r3, #2
 8002620:	e0c5      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d007      	beq.n	8002648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2221      	movs	r2, #33	; 0x21
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <HAL_I2C_Mem_Write+0x1f0>)
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268a:	88f8      	ldrh	r0, [r7, #6]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4603      	mov	r3, r0
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 faf2 	bl	8002c84 <I2C_RequestMemoryWrite>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d052      	beq.n	800274c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fd3c 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d11b      	bne.n	800274c <HAL_I2C_Mem_Write+0x180>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1aa      	bne.n	80026aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fd28 	bl	80031ae <I2C_WaitOnBTFFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b04      	cmp	r3, #4
 800276a:	d107      	bne.n	800277c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e016      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	00100002 	.word	0x00100002
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	460b      	mov	r3, r1
 80027d4:	813b      	strh	r3, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fa53 	bl	8001c88 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 823d 	bne.w	8002c6c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	4981      	ldr	r1, [pc, #516]	; (8002a00 <HAL_I2C_Mem_Read+0x240>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fbbf 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e230      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Read+0x5a>
 8002816:	2302      	movs	r3, #2
 8002818:	e229      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2222      	movs	r2, #34	; 0x22
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <HAL_I2C_Mem_Read+0x244>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fa8c 	bl	8002db0 <I2C_RequestMemoryRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e1e5      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d113      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e1b9      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d11d      	bne.n	8002916 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
 8002914:	e197      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b02      	cmp	r3, #2
 800291c:	d11d      	bne.n	800295a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800292e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002956:	b662      	cpsie	i
 8002958:	e175      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002968:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002980:	e161      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b03      	cmp	r3, #3
 8002988:	f200 811a 	bhi.w	8002bc0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	2b01      	cmp	r3, #1
 8002992:	d123      	bne.n	80029dc <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fc49 	bl	8003230 <I2C_WaitOnRXNEFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e162      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029da:	e134      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d150      	bne.n	8002a86 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	2200      	movs	r2, #0
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <HAL_I2C_Mem_Read+0x248>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fac6 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e137      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
 80029fe:	bf00      	nop
 8002a00:	00100002 	.word	0x00100002
 8002a04:	ffff0000 	.word	0xffff0000
 8002a08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a50:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a84:	e0df      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	497a      	ldr	r1, [pc, #488]	; (8002c78 <HAL_I2C_Mem_Read+0x4b8>)
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa75 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0e6      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_I2C_Mem_Read+0x4bc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_I2C_Mem_Read+0x4c0>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0a1a      	lsrs	r2, r3, #8
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00da      	lsls	r2, r3, #3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d117      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b2c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e099      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d1da      	bne.n	8002afe <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bbe:	e042      	b.n	8002c46 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb33 	bl	8003230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e04c      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d118      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f ae99 	bne.w	8002982 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	00010004 	.word	0x00010004
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	14f8b589 	.word	0x14f8b589

08002c84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	460b      	mov	r3, r1
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f960 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	d103      	bne.n	8002cde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e05f      	b.n	8002da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	492d      	ldr	r1, [pc, #180]	; (8002dac <I2C_RequestMemoryWrite+0x128>)
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f998 	bl	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e04c      	b.n	8002da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fa02 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02b      	b.n	8002da2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d50:	893b      	ldrh	r3, [r7, #8]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	e021      	b.n	8002da0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6a39      	ldr	r1, [r7, #32]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f9dc 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d107      	bne.n	8002d92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e005      	b.n	8002da2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	00010002 	.word	0x00010002

08002db0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	813b      	strh	r3, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8c2 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e10:	d103      	bne.n	8002e1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0aa      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	4952      	ldr	r1, [pc, #328]	; (8002f7c <I2C_RequestMemoryRead+0x1cc>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f8fa 	bl	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e097      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	6a39      	ldr	r1, [r7, #32]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f964 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d107      	bne.n	8002e82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e076      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	e021      	b.n	8002edc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f93e 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d107      	bne.n	8002ece <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e050      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed2:	893b      	ldrh	r3, [r7, #8]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	6a39      	ldr	r1, [r7, #32]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f923 	bl	800312c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e035      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f82b 	bl	8002f80 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d103      	bne.n	8002f48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e013      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	4906      	ldr	r1, [pc, #24]	; (8002f7c <I2C_RequestMemoryRead+0x1cc>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f863 	bl	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00010002 	.word	0x00010002

08002f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f90:	e025      	b.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d021      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7fe fe75 	bl	8001c88 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e023      	b.n	8003026 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10d      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	e00c      	b.n	800301e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	429a      	cmp	r2, r3
 8003022:	d0b6      	beq.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800303c:	e051      	b.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d123      	bne.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003066:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0204 	orr.w	r2, r3, #4
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e046      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d021      	beq.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7fe fdf3 	bl	8001c88 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d116      	bne.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e020      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e00b      	b.n	800311e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	43da      	mvns	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4013      	ands	r3, r2
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf14      	ite	ne
 8003118:	2301      	movne	r3, #1
 800311a:	2300      	moveq	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d18d      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003138:	e02d      	b.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8ce 	bl	80032dc <I2C_IsAcknowledgeFailed>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e02d      	b.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d021      	beq.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe fd99 	bl	8001c88 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d1ca      	bne.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ba:	e02d      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f88d 	bl	80032dc <I2C_IsAcknowledgeFailed>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e02d      	b.n	8003228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d021      	beq.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d4:	f7fe fd58 	bl	8001c88 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e007      	b.n	8003228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d1ca      	bne.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800323c:	e042      	b.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b10      	cmp	r3, #16
 800324a:	d119      	bne.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0210 	mvn.w	r2, #16
 8003254:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e029      	b.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003280:	f7fe fd02 	bl	8001c88 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e007      	b.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d1b5      	bne.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d11b      	bne.n	800332c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e26c      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003358:	4b92      	ldr	r3, [pc, #584]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003364:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d112      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d10b      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337e:	4b89      	ldr	r3, [pc, #548]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d06c      	beq.n	8003464 <HAL_RCC_OscConfig+0x12c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d168      	bne.n	8003464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e246      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x76>
 80033a0:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7f      	ldr	r2, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e02e      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a77      	ldr	r2, [pc, #476]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01d      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0xbc>
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033f4:	4b6b      	ldr	r3, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe fc38 	bl	8001c88 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fe fc34 	bl	8001c88 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1fa      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0xe4>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe fc24 	bl	8001c88 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fe fc20 	bl	8001c88 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e1e6      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x10c>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
 800348a:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1ba      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4939      	ldr	r1, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e03a      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fbd9 	bl	8001c88 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fe fbd5 	bl	8001c88 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e19b      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4927      	ldr	r1, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e015      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe fbb8 	bl	8001c88 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fe fbb4 	bl	8001c88 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e17a      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03a      	beq.n	80035bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fe fb98 	bl	8001c88 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe fb94 	bl	8001c88 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e15a      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f000 fada 	bl	8003b34 <RCC_Delay>
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe fb7e 	bl	8001c88 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358e:	e00f      	b.n	80035b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe fb7a 	bl	8001c88 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e140      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	42420000 	.word	0x42420000
 80035ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b9e      	ldr	r3, [pc, #632]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e9      	bne.n	8003590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a6 	beq.w	8003716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b97      	ldr	r3, [pc, #604]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b94      	ldr	r3, [pc, #592]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a93      	ldr	r2, [pc, #588]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]
 80035e6:	4b91      	ldr	r3, [pc, #580]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b8e      	ldr	r3, [pc, #568]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b8b      	ldr	r3, [pc, #556]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fe fb3b 	bl	8001c88 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fe fb37 	bl	8001c88 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	; 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0fd      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x312>
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a7a      	ldr	r2, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e02d      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x334>
 8003652:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a72      	ldr	r2, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	e01c      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d10c      	bne.n	800368e <HAL_RCC_OscConfig+0x356>
 8003674:	4b6d      	ldr	r3, [pc, #436]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a69      	ldr	r2, [pc, #420]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	e00b      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800368e:	4b67      	ldr	r3, [pc, #412]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a66      	ldr	r2, [pc, #408]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	4b64      	ldr	r3, [pc, #400]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe faeb 	bl	8001c88 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fe fae7 	bl	8001c88 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0ab      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ee      	beq.n	80036b6 <HAL_RCC_OscConfig+0x37e>
 80036d8:	e014      	b.n	8003704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fe fad5 	bl	8001c88 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fad1 	bl	8001c88 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e095      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ee      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a47      	ldr	r2, [pc, #284]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8081 	beq.w	8003822 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d061      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d146      	bne.n	80037c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe faa5 	bl	8001c88 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe faa1 	bl	8001c88 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e067      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	492d      	ldr	r1, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a19      	ldr	r1, [r3, #32]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	430b      	orrs	r3, r1
 800378e:	4927      	ldr	r1, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fa75 	bl	8001c88 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe fa71 	bl	8001c88 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e037      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x46a>
 80037c0:	e02f      	b.n	8003822 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fa5e 	bl	8001c88 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fa5a 	bl	8001c88 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e020      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x498>
 80037ee:	e018      	b.n	8003822 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e013      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	429a      	cmp	r2, r3
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
 8003834:	42420060 	.word	0x42420060

08003838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d0      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	4965      	ldr	r1, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e073      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4936      	ldr	r1, [pc, #216]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fe f9ae 	bl	8001c88 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fe f9aa 	bl	8001c88 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e053      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d210      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4922      	ldr	r1, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1cc>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1d0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe f90c 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0800909c 	.word	0x0800909c
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b490      	push	{r4, r7}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a14:	1d3c      	adds	r4, r7, #4
 8003a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a1c:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d002      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x46>
 8003a4a:	e02d      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a4e:	623b      	str	r3, [r7, #32]
      break;
 8003a50:	e02d      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	0c9b      	lsrs	r3, r3, #18
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a5e:	4413      	add	r3, r2
 8003a60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0c5b      	lsrs	r3, r3, #17
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7e:	4413      	add	r3, r2
 8003a80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a8a:	fb02 f203 	mul.w	r2, r2, r3
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e004      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	623b      	str	r3, [r7, #32]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aaa:	623b      	str	r3, [r7, #32]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc90      	pop	{r4, r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	08009078 	.word	0x08009078
 8003ac0:	08009088 	.word	0x08009088
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	007a1200 	.word	0x007a1200
 8003acc:	003d0900 	.word	0x003d0900

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff2 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003aec:	4601      	mov	r1, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	080090ac 	.word	0x080090ac

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b10:	f7ff ffde 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b14:	4601      	mov	r1, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	0adb      	lsrs	r3, r3, #11
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	080090ac 	.word	0x080090ac

08003b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <RCC_Delay+0x34>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <RCC_Delay+0x38>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0a5b      	lsrs	r3, r3, #9
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b50:	bf00      	nop
  }
  while (Delay --);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	60fa      	str	r2, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f9      	bne.n	8003b50 <RCC_Delay+0x1c>
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e041      	b.n	8003c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd feec 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fbce 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e041      	b.n	8003ca4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f839 	bl	8003cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 fb7f 	bl	8004350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0x24>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e022      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d109      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x3e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	e015      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d109      	bne.n	8003d18 <HAL_TIM_PWM_Start+0x58>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e008      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e05e      	b.n	8003df0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x82>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	e013      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	e00b      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	e003      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fd6c 	bl	8004850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_TIM_PWM_Start+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_TIM_PWM_Start+0x138>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIM_PWM_Start+0xfa>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d009      	beq.n	8003dba <HAL_TIM_PWM_Start+0xfa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <HAL_TIM_PWM_Start+0x13c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIM_PWM_Start+0xfa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <HAL_TIM_PWM_Start+0x140>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d010      	beq.n	8003dee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	e007      	b.n	8003dee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800

08003e04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e093      	b.n	8003f40 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd fdbf 	bl	80019b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e48:	f023 0307 	bic.w	r3, r3, #7
 8003e4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fa79 	bl	8004350 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	4313      	orrs	r3, r2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ea4:	f023 030c 	bic.w	r3, r3, #12
 8003ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	031b      	lsls	r3, r3, #12
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d110      	bne.n	8003f9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e068      	b.n	800405a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	e031      	b.n	8003ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d110      	bne.n	8003fc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa6:	7b3b      	ldrb	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e054      	b.n	800405a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc0:	e01d      	b.n	8003ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fd4:	7b3b      	ldrb	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e03d      	b.n	800405a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_TIM_Encoder_Start+0xc2>
 8004004:	2b04      	cmp	r3, #4
 8004006:	d008      	beq.n	800401a <HAL_TIM_Encoder_Start+0xd2>
 8004008:	e00f      	b.n	800402a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fc1c 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8004018:	e016      	b.n	8004048 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	2104      	movs	r1, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fc14 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8004028:	e00e      	b.n	8004048 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc0c 	bl	8004850 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2201      	movs	r2, #1
 800403e:	2104      	movs	r1, #4
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fc05 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8004046:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800407a:	2302      	movs	r3, #2
 800407c:	e0ac      	b.n	80041d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	f200 809f 	bhi.w	80041cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800408e:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080041cd 	.word	0x080041cd
 800409c:	080041cd 	.word	0x080041cd
 80040a0:	080041cd 	.word	0x080041cd
 80040a4:	08004109 	.word	0x08004109
 80040a8:	080041cd 	.word	0x080041cd
 80040ac:	080041cd 	.word	0x080041cd
 80040b0:	080041cd 	.word	0x080041cd
 80040b4:	0800414b 	.word	0x0800414b
 80040b8:	080041cd 	.word	0x080041cd
 80040bc:	080041cd 	.word	0x080041cd
 80040c0:	080041cd 	.word	0x080041cd
 80040c4:	0800418b 	.word	0x0800418b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f9a0 	bl	8004414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6999      	ldr	r1, [r3, #24]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
      break;
 8004106:	e062      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f9e6 	bl	80044e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]
      break;
 8004148:	e041      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa2f 	bl	80045b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0204 	bic.w	r2, r2, #4
 8004174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69d9      	ldr	r1, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	61da      	str	r2, [r3, #28]
      break;
 8004188:	e021      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fa79 	bl	8004688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	61da      	str	r2, [r3, #28]
      break;
 80041ca:	e000      	b.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_ConfigClockSource+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e0a6      	b.n	8004346 <HAL_TIM_ConfigClockSource+0x166>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d067      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x120>
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d80b      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x6c>
 8004234:	2b10      	cmp	r3, #16
 8004236:	d073      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0x140>
 8004238:	2b10      	cmp	r3, #16
 800423a:	d802      	bhi.n	8004242 <HAL_TIM_ConfigClockSource+0x62>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d06f      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004240:	e078      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004242:	2b20      	cmp	r3, #32
 8004244:	d06c      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0x140>
 8004246:	2b30      	cmp	r3, #48	; 0x30
 8004248:	d06a      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800424a:	e073      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800424c:	2b70      	cmp	r3, #112	; 0x70
 800424e:	d00d      	beq.n	800426c <HAL_TIM_ConfigClockSource+0x8c>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d804      	bhi.n	800425e <HAL_TIM_ConfigClockSource+0x7e>
 8004254:	2b50      	cmp	r3, #80	; 0x50
 8004256:	d033      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0xe0>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d041      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800425c:	e06a      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d066      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x152>
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d017      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800426a:	e063      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f000 fac9 	bl	8004812 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800428e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
      break;
 8004298:	e04c      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 fab2 	bl	8004812 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042bc:	609a      	str	r2, [r3, #8]
      break;
 80042be:	e039      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f000 fa29 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2150      	movs	r1, #80	; 0x50
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa80 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80042de:	e029      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f000 fa47 	bl	8004780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2160      	movs	r1, #96	; 0x60
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fa70 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80042fe:	e019      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	461a      	mov	r2, r3
 800430e:	f000 fa09 	bl	8004724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2140      	movs	r1, #64	; 0x40
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fa60 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 800431e:	e009      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fa57 	bl	80047de <TIM_ITRx_SetConfig>
        break;
 8004330:	e000      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_Base_SetConfig+0xbc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x30>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <TIM_Base_SetConfig+0xbc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_Base_SetConfig+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <TIM_Base_SetConfig+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800

08004414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 0302 	bic.w	r3, r3, #2
 800445c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <TIM_OC1_SetConfig+0xc8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0308 	bic.w	r3, r3, #8
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <TIM_OC1_SetConfig+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d111      	bne.n	80044b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0210 	bic.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0320 	bic.w	r3, r3, #32
 800452a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <TIM_OC2_SetConfig+0xd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10d      	bne.n	800455c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <TIM_OC2_SetConfig+0xd0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d113      	bne.n	800458c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40012c00 	.word	0x40012c00

080045b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <TIM_OC3_SetConfig+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10d      	bne.n	800462e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800462c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC3_SetConfig+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d113      	bne.n	800465e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800463c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00

08004688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <TIM_OC4_SetConfig+0x98>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00

08004724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 030a 	bic.w	r3, r3, #10
 8004760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f023 0210 	bic.w	r2, r3, #16
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	031b      	lsls	r3, r3, #12
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	621a      	str	r2, [r3, #32]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f043 0307 	orr.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	021a      	lsls	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	431a      	orrs	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	609a      	str	r2, [r3, #8]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2201      	movs	r2, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1a      	ldr	r2, [r3, #32]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e046      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a16      	ldr	r2, [pc, #88]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800

08004954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e03f      	b.n	80049e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fd f8b2 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	; 0x24
 8004984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fb39 	bl	8005010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d17c      	bne.n	8004b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_Transmit+0x2c>
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e075      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Transmit+0x3e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e06e      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2221      	movs	r2, #33	; 0x21
 8004a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a42:	f7fd f921 	bl	8001c88 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a80:	e02a      	b.n	8004ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f95c 	bl	8004d4a <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e036      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e007      	b.n	8004aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cf      	bne.n	8004a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2140      	movs	r1, #64	; 0x40
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f92c 	bl	8004d4a <UART_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e006      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_UART_IRQHandler+0x52>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9d5 	bl	8004f0e <UART_Receive_IT>
      return;
 8004b64:	e0d1      	b.n	8004d0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80b0 	beq.w	8004cce <HAL_UART_IRQHandler+0x1ba>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <HAL_UART_IRQHandler+0x70>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a5 	beq.w	8004cce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x90>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xb0>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	f043 0202 	orr.w	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_UART_IRQHandler+0xd0>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	f043 0204 	orr.w	r2, r3, #4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00f      	beq.n	8004c0e <HAL_UART_IRQHandler+0xfa>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <HAL_UART_IRQHandler+0xee>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c06:	f043 0208 	orr.w	r2, r3, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d078      	beq.n	8004d08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_UART_IRQHandler+0x11c>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f96f 	bl	8004f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <HAL_UART_IRQHandler+0x144>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d031      	beq.n	8004cbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8c0 	bl	8004dde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <HAL_UART_IRQHandler+0x1fc>)
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd f933 	bl	8001efc <HAL_DMA_Abort_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d016      	beq.n	8004cca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004caa:	e00e      	b.n	8004cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f843 	bl	8004d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb2:	e00a      	b.n	8004cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f83f 	bl	8004d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cba:	e006      	b.n	8004cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f83b 	bl	8004d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004cc8:	e01e      	b.n	8004d08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	bf00      	nop
    return;
 8004ccc:	e01c      	b.n	8004d08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_UART_IRQHandler+0x1d6>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8ac 	bl	8004e40 <UART_Transmit_IT>
    return;
 8004ce8:	e00f      	b.n	8004d0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1f6>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8ed 	bl	8004ede <UART_EndTransmit_IT>
    return;
 8004d04:	bf00      	nop
 8004d06:	e000      	b.n	8004d0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d08:	bf00      	nop
  }
}
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08004e19 	.word	0x08004e19

08004d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5a:	e02c      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d028      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d6a:	f7fc ff8d 	bl	8001c88 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d21d      	bcs.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e00f      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d0c3      	beq.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004df4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff ff80 	bl	8004d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b21      	cmp	r3, #33	; 0x21
 8004e52:	d13e      	bne.n	8004ed2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d114      	bne.n	8004e88 <UART_Transmit_IT+0x48>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d110      	bne.n	8004e88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]
 8004e86:	e008      	b.n	8004e9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	1c59      	adds	r1, r3, #1
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6211      	str	r1, [r2, #32]
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ff08 	bl	8004d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	d170      	bne.n	8005004 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	d117      	bne.n	8004f5c <UART_Receive_IT+0x4e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5a:	e026      	b.n	8004faa <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	d007      	beq.n	8004f80 <UART_Receive_IT+0x72>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <UART_Receive_IT+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e008      	b.n	8004fa0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d120      	bne.n	8005000 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0220 	bic.w	r2, r2, #32
 8004fcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe95 	bl	8004d26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e002      	b.n	8005006 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e000      	b.n	8005006 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800504a:	f023 030c 	bic.w	r3, r3, #12
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	430b      	orrs	r3, r1
 8005056:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <UART_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe fd48 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	e002      	b.n	8005086 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe fd30 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8005084:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009a      	lsls	r2, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <UART_SetConfig+0x118>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	0119      	lsls	r1, r3, #4
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009a      	lsls	r2, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <UART_SetConfig+0x118>)
 80050be:	fba3 0302 	umull	r0, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2064      	movs	r0, #100	; 0x64
 80050c6:	fb00 f303 	mul.w	r3, r0, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	; 0x32
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <UART_SetConfig+0x118>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050dc:	4419      	add	r1, r3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <UART_SetConfig+0x118>)
 80050f6:	fba3 0302 	umull	r0, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2064      	movs	r0, #100	; 0x64
 80050fe:	fb00 f303 	mul.w	r3, r0, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	3332      	adds	r3, #50	; 0x32
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <UART_SetConfig+0x118>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	440a      	add	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40013800 	.word	0x40013800
 8005128:	51eb851f 	.word	0x51eb851f

0800512c <HAL_GPIO_EXTI_Callback>:

/*
 * @brief: 当检测到外部中断触发并确定其为按键按下时，翻转led灯，按下标记被确定
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513c:	d11c      	bne.n	8005178 <HAL_GPIO_EXTI_Callback+0x4c>
		HAL_Delay(5);
 800513e:	2005      	movs	r0, #5
 8005140:	f7fc fdac 	bl	8001c9c <HAL_Delay>
		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET) {
 8005144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <HAL_GPIO_EXTI_Callback+0x54>)
 800514a:	f7fd f8a7 	bl	800229c <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_GPIO_EXTI_Callback+0x4c>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800515e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005162:	4808      	ldr	r0, [pc, #32]	; (8005184 <HAL_GPIO_EXTI_Callback+0x58>)
 8005164:	f7fd f8c9 	bl	80022fa <HAL_GPIO_TogglePin>
			buttonDownFlag = true;
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <HAL_GPIO_EXTI_Callback+0x5c>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
			g_nSpeedTarget +=10;
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_GPIO_EXTI_Callback+0x60>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330a      	adds	r3, #10
 8005174:	4a05      	ldr	r2, [pc, #20]	; (800518c <HAL_GPIO_EXTI_Callback+0x60>)
 8005176:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40010800 	.word	0x40010800
 8005184:	40010c00 	.word	0x40010c00
 8005188:	20000218 	.word	0x20000218
 800518c:	20000200 	.word	0x20000200

08005190 <_Z8MPU_Initv>:
#include <Mpu6050.h>

//初始化MPU6050
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Init(void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
	uint8_t res;

	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 8005196:	481f      	ldr	r0, [pc, #124]	; (8005214 <_Z8MPU_Initv+0x84>)
 8005198:	f7fd f8e0 	bl	800235c <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);	//复位MPU6050
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	206b      	movs	r0, #107	; 0x6b
 80051a0:	f000 f8b8 	bl	8005314 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);	//唤醒MPU6050
 80051a4:	2100      	movs	r1, #0
 80051a6:	206b      	movs	r0, #107	; 0x6b
 80051a8:	f000 f8b4 	bl	8005314 <_Z14MPU_Write_Bytehh>
	MPU_Set_Gyro_Fsr(3);						//陀螺仪传感器,±2000dps
 80051ac:	2003      	movs	r0, #3
 80051ae:	f000 f833 	bl	8005218 <_Z16MPU_Set_Gyro_Fsrh>
	MPU_Set_Accel_Fsr(0);						//加速度传感器,±2g
 80051b2:	2000      	movs	r0, #0
 80051b4:	f000 f841 	bl	800523a <_Z17MPU_Set_Accel_Fsrh>
	MPU_Set_Rate(50);							//设置采样率50Hz
 80051b8:	2032      	movs	r0, #50	; 0x32
 80051ba:	f000 f880 	bl	80052be <_Z12MPU_Set_Ratet>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);		//关闭所有中断
 80051be:	2100      	movs	r1, #0
 80051c0:	2038      	movs	r0, #56	; 0x38
 80051c2:	f000 f8a7 	bl	8005314 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);	//I2C主模式关闭
 80051c6:	2100      	movs	r1, #0
 80051c8:	206a      	movs	r0, #106	; 0x6a
 80051ca:	f000 f8a3 	bl	8005314 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);		//关闭FIFO
 80051ce:	2100      	movs	r1, #0
 80051d0:	2023      	movs	r0, #35	; 0x23
 80051d2:	f000 f89f 	bl	8005314 <_Z14MPU_Write_Bytehh>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);	//INT引脚低电平有效
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	2037      	movs	r0, #55	; 0x37
 80051da:	f000 f89b 	bl	8005314 <_Z14MPU_Write_Bytehh>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 80051de:	2075      	movs	r0, #117	; 0x75
 80051e0:	f000 f8be 	bl	8005360 <_Z13MPU_Read_Byteh>
 80051e4:	4603      	mov	r3, r0
 80051e6:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR)	//器件ID正确
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	2b68      	cmp	r3, #104	; 0x68
 80051ec:	d10c      	bne.n	8005208 <_Z8MPU_Initv+0x78>
	{
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);//设置CLKSEL,PLL X轴为参考
 80051ee:	2101      	movs	r1, #1
 80051f0:	206b      	movs	r0, #107	; 0x6b
 80051f2:	f000 f88f 	bl	8005314 <_Z14MPU_Write_Bytehh>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);//加速度与陀螺仪都工作
 80051f6:	2100      	movs	r1, #0
 80051f8:	206c      	movs	r0, #108	; 0x6c
 80051fa:	f000 f88b 	bl	8005314 <_Z14MPU_Write_Bytehh>
		MPU_Set_Rate(50);						//设置采样率为50Hz
 80051fe:	2032      	movs	r0, #50	; 0x32
 8005200:	f000 f85d 	bl	80052be <_Z12MPU_Set_Ratet>
	} else
		return 1;
	return 0;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <_Z8MPU_Initv+0x7a>
		return 1;
 8005208:	2301      	movs	r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000234 	.word	0x20000234

08005218 <_Z16MPU_Set_Gyro_Fsrh>:
//设置MPU6050陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr << 3);				//设置陀螺仪满量程范围
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	201b      	movs	r0, #27
 800522c:	f000 f872 	bl	8005314 <_Z14MPU_Write_Bytehh>
 8005230:	4603      	mov	r3, r0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_Z17MPU_Set_Accel_Fsrh>:
//设置MPU6050加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr) {
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr << 3);			//设置加速度传感器满量程范围
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	b2db      	uxtb	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	201c      	movs	r0, #28
 800524e:	f000 f861 	bl	8005314 <_Z14MPU_Write_Bytehh>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_Z11MPU_Set_LPFt>:
//设置MPU6050的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_LPF(uint16_t lpf) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
	uint8_t data = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2bbb      	cmp	r3, #187	; 0xbb
 800526e:	d902      	bls.n	8005276 <_Z11MPU_Set_LPFt+0x1a>
		data = 1;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	e019      	b.n	80052aa <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 98)
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b61      	cmp	r3, #97	; 0x61
 800527a:	d902      	bls.n	8005282 <_Z11MPU_Set_LPFt+0x26>
		data = 2;
 800527c:	2302      	movs	r3, #2
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e013      	b.n	80052aa <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 42)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b29      	cmp	r3, #41	; 0x29
 8005286:	d902      	bls.n	800528e <_Z11MPU_Set_LPFt+0x32>
		data = 3;
 8005288:	2303      	movs	r3, #3
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e00d      	b.n	80052aa <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 20)
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b13      	cmp	r3, #19
 8005292:	d902      	bls.n	800529a <_Z11MPU_Set_LPFt+0x3e>
		data = 4;
 8005294:	2304      	movs	r3, #4
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e007      	b.n	80052aa <_Z11MPU_Set_LPFt+0x4e>
	else if (lpf >= 10)
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b09      	cmp	r3, #9
 800529e:	d902      	bls.n	80052a6 <_Z11MPU_Set_LPFt+0x4a>
		data = 5;
 80052a0:	2305      	movs	r3, #5
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	e001      	b.n	80052aa <_Z11MPU_Set_LPFt+0x4e>
	else
		data = 6;
 80052a6:	2306      	movs	r3, #6
 80052a8:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);						//设置数字低通滤波器
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	4619      	mov	r1, r3
 80052ae:	201a      	movs	r0, #26
 80052b0:	f000 f830 	bl	8005314 <_Z14MPU_Write_Bytehh>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <_Z12MPU_Set_Ratet>:
//设置MPU6050的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Rate(uint16_t rate) {
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if (rate > 1000)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ce:	d902      	bls.n	80052d6 <_Z12MPU_Set_Ratet+0x18>
		rate = 1000;
 80052d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052d4:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d801      	bhi.n	80052e0 <_Z12MPU_Set_Ratet+0x22>
		rate = 4;
 80052dc:	2304      	movs	r3, #4
 80052de:	80fb      	strh	r3, [r7, #6]
	data = 1000 / rate - 1;
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);	//设置数字低通滤波器
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	4619      	mov	r1, r3
 80052f4:	2019      	movs	r0, #25
 80052f6:	f000 f80d 	bl	8005314 <_Z14MPU_Write_Bytehh>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
	return MPU_Set_LPF(rate / 2);	//自动设置LPF为采样率的一半
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	b29b      	uxth	r3, r3
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ffa9 	bl	800525c <_Z11MPU_Set_LPFt>
 800530a:	4603      	mov	r3, r0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_Z14MPU_Write_Bytehh>:
//IIC写一个字节
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Byte(uint8_t reg, uint8_t data) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af04      	add	r7, sp, #16
 800531a:	4603      	mov	r3, r0
 800531c:	460a      	mov	r2, r1
 800531e:	71fb      	strb	r3, [r7, #7]
 8005320:	4613      	mov	r3, r2
 8005322:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]

	W_Data = data;
 8005328:	79bb      	ldrb	r3, [r7, #6]
 800532a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1,
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	b29a      	uxth	r2, r3
 8005330:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	2301      	movs	r3, #1
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	f107 030f 	add.w	r3, r7, #15
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	21d0      	movs	r1, #208	; 0xd0
 8005344:	4805      	ldr	r0, [pc, #20]	; (800535c <_Z14MPU_Write_Bytehh+0x48>)
 8005346:	f7fd f941 	bl	80025cc <HAL_I2C_Mem_Write>
			0xfff);
	HAL_Delay(100);
 800534a:	2064      	movs	r0, #100	; 0x64
 800534c:	f7fc fca6 	bl	8001c9c <HAL_Delay>

	return 0;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000234 	.word	0x20000234

08005360 <_Z13MPU_Read_Byteh>:
//IIC读一个字节
//reg:寄存器地址
//返回值:读到的数据
uint8_t MPU_Read_Byte(uint8_t reg) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af04      	add	r7, sp, #16
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1,
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	b29a      	uxth	r2, r3
 8005372:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005376:	9302      	str	r3, [sp, #8]
 8005378:	2301      	movs	r3, #1
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	f107 030f 	add.w	r3, r7, #15
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	2301      	movs	r3, #1
 8005384:	21d1      	movs	r1, #209	; 0xd1
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <_Z13MPU_Read_Byteh+0x3c>)
 8005388:	f7fd fa1a 	bl	80027c0 <HAL_I2C_Mem_Read>
			0xfff);
	HAL_Delay(100);
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	f7fc fc85 	bl	8001c9c <HAL_Delay>

	return R_Data;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000234 	.word	0x20000234

080053a0 <_Z9CRC_CHECKPhh>:
#include "usart.h"

float OutData[4] = { 0 };

unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
    unsigned short CRC_Temp;
    unsigned char i,j;
    CRC_Temp = 0xffff;
 80053ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053b0:	81bb      	strh	r3, [r7, #12]

    for (i=0;i<CRC_CNT; i++){      
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d227      	bcs.n	800540e <_Z9CRC_CHECKPhh+0x6e>
        CRC_Temp ^= Buf[i];
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	89bb      	ldrh	r3, [r7, #12]
 80053ca:	4053      	eors	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	81bb      	strh	r3, [r7, #12]
        for (j=0;j<8;j++) {
 80053d0:	2300      	movs	r3, #0
 80053d2:	73bb      	strb	r3, [r7, #14]
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	d815      	bhi.n	8005406 <_Z9CRC_CHECKPhh+0x66>
            if (CRC_Temp & 0x01)
 80053da:	89bb      	ldrh	r3, [r7, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <_Z9CRC_CHECKPhh+0x56>
                CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
 80053e4:	89bb      	ldrh	r3, [r7, #12]
 80053e6:	105b      	asrs	r3, r3, #1
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <_Z9CRC_CHECKPhh+0x7c>)
 80053ec:	4053      	eors	r3, r2
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	81bb      	strh	r3, [r7, #12]
 80053f4:	e003      	b.n	80053fe <_Z9CRC_CHECKPhh+0x5e>
            else
                CRC_Temp = CRC_Temp >> 1;
 80053f6:	89bb      	ldrh	r3, [r7, #12]
 80053f8:	105b      	asrs	r3, r3, #1
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	81bb      	strh	r3, [r7, #12]
        for (j=0;j<8;j++) {
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	3301      	adds	r3, #1
 8005402:	73bb      	strb	r3, [r7, #14]
 8005404:	e7e6      	b.n	80053d4 <_Z9CRC_CHECKPhh+0x34>
    for (i=0;i<CRC_CNT; i++){      
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	3301      	adds	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e7d3      	b.n	80053b6 <_Z9CRC_CHECKPhh+0x16>
        }
    }
    return(CRC_Temp);
 800540e:	89bb      	ldrh	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	ffffa001 	.word	0xffffa001

08005420 <OutPut_Data>:

void OutPut_Data(void)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b08d      	sub	sp, #52	; 0x34
 8005424:	af00      	add	r7, sp, #0
  int temp[4] = {0};
 8005426:	f107 031c 	add.w	r3, r7, #28
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	60da      	str	r2, [r3, #12]
  unsigned int temp1[4] = {0};
 8005434:	f107 030c 	add.w	r3, r7, #12
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
  unsigned char databuf[10] = {0};
 8005442:	463b      	mov	r3, r7
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	811a      	strh	r2, [r3, #8]
  unsigned char i;
  unsigned short CRC16 = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for(i=0;i<4;i++)
 8005450:	2300      	movs	r3, #0
 8005452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800545a:	2b03      	cmp	r3, #3
 800545c:	d826      	bhi.n	80054ac <OutPut_Data+0x8c>
   {
    
    temp[i]  = (int)OutData[i];
 800545e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005462:	4a3f      	ldr	r2, [pc, #252]	; (8005560 <OutPut_Data+0x140>)
 8005464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005468:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb fdd9 	bl	8001024 <__aeabi_f2iz>
 8005472:	4602      	mov	r2, r0
 8005474:	00a3      	lsls	r3, r4, #2
 8005476:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800547a:	440b      	add	r3, r1
 800547c:	f843 2c14 	str.w	r2, [r3, #-20]
    temp1[i] = (unsigned int)temp[i];
 8005480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800548a:	4413      	add	r3, r2
 800548c:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8005490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800549a:	440b      	add	r3, r1
 800549c:	f843 2c24 	str.w	r2, [r3, #-36]
  for(i=0;i<4;i++)
 80054a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054a4:	3301      	adds	r3, #1
 80054a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054aa:	e7d4      	b.n	8005456 <OutPut_Data+0x36>
    
   }
   
  for(i=0;i<4;i++) 
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d829      	bhi.n	800550e <OutPut_Data+0xee>
  {
    databuf[i*2]   = (unsigned char)(temp1[i]%256);
 80054ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054c4:	4413      	add	r3, r2
 80054c6:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80054ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80054d6:	440b      	add	r3, r1
 80054d8:	f803 2c30 	strb.w	r2, [r3, #-48]
    databuf[i*2+1] = (unsigned char)(temp1[i]/256);
 80054dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054e6:	4413      	add	r3, r2
 80054e8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80054ec:	0a1a      	lsrs	r2, r3, #8
 80054ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	3301      	adds	r3, #1
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80054fc:	440b      	add	r3, r1
 80054fe:	f803 2c30 	strb.w	r2, [r3, #-48]
  for(i=0;i<4;i++) 
 8005502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005506:	3301      	adds	r3, #1
 8005508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800550c:	e7d1      	b.n	80054b2 <OutPut_Data+0x92>
  }
  
  CRC16 = CRC_CHECK(databuf,8);
 800550e:	463b      	mov	r3, r7
 8005510:	2108      	movs	r1, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff44 	bl	80053a0 <_Z9CRC_CHECKPhh>
 8005518:	4603      	mov	r3, r0
 800551a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  databuf[8] = CRC16%256;
 800551c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800551e:	b2db      	uxtb	r3, r3
 8005520:	723b      	strb	r3, [r7, #8]
  databuf[9] = CRC16/256;
 8005522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	b29b      	uxth	r3, r3
 8005528:	b2db      	uxtb	r3, r3
 800552a:	727b      	strb	r3, [r7, #9]
  
  for(i=0;i<10;i++)
 800552c:	2300      	movs	r3, #0
 800552e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005536:	2b09      	cmp	r3, #9
 8005538:	d80e      	bhi.n	8005558 <OutPut_Data+0x138>
    //uart_putchar(databuf[i]);
		HAL_UART_Transmit(&huart1,&databuf[i],1,0xFF);
 800553a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800553e:	463a      	mov	r2, r7
 8005540:	18d1      	adds	r1, r2, r3
 8005542:	23ff      	movs	r3, #255	; 0xff
 8005544:	2201      	movs	r2, #1
 8005546:	4807      	ldr	r0, [pc, #28]	; (8005564 <OutPut_Data+0x144>)
 8005548:	f7ff fa51 	bl	80049ee <HAL_UART_Transmit>
  for(i=0;i<10;i++)
 800554c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005550:	3301      	adds	r3, #1
 8005552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005556:	e7ec      	b.n	8005532 <OutPut_Data+0x112>
}
 8005558:	bf00      	nop
 800555a:	3734      	adds	r7, #52	; 0x34
 800555c:	46bd      	mov	sp, r7
 800555e:	bd90      	pop	{r4, r7, pc}
 8005560:	2000021c 	.word	0x2000021c
 8005564:	20000318 	.word	0x20000318

08005568 <_ZdlPvj>:
 8005568:	f000 b800 	b.w	800556c <_ZdlPv>

0800556c <_ZdlPv>:
 800556c:	f000 b832 	b.w	80055d4 <free>

08005570 <__errno>:
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <__errno+0x8>)
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	2000000c 	.word	0x2000000c

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	2500      	movs	r5, #0
 8005580:	4e0c      	ldr	r6, [pc, #48]	; (80055b4 <__libc_init_array+0x38>)
 8005582:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005584:	1ba4      	subs	r4, r4, r6
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	42a5      	cmp	r5, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	f003 fd68 	bl	8009060 <_init>
 8005590:	2500      	movs	r5, #0
 8005592:	4e0a      	ldr	r6, [pc, #40]	; (80055bc <__libc_init_array+0x40>)
 8005594:	4c0a      	ldr	r4, [pc, #40]	; (80055c0 <__libc_init_array+0x44>)
 8005596:	1ba4      	subs	r4, r4, r6
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	42a5      	cmp	r5, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055a4:	4798      	blx	r3
 80055a6:	3501      	adds	r5, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ae:	4798      	blx	r3
 80055b0:	3501      	adds	r5, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08009368 	.word	0x08009368
 80055b8:	08009368 	.word	0x08009368
 80055bc:	08009368 	.word	0x08009368
 80055c0:	0800936c 	.word	0x0800936c

080055c4 <malloc>:
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <malloc+0xc>)
 80055c6:	4601      	mov	r1, r0
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f000 b86b 	b.w	80056a4 <_malloc_r>
 80055ce:	bf00      	nop
 80055d0:	2000000c 	.word	0x2000000c

080055d4 <free>:
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <free+0xc>)
 80055d6:	4601      	mov	r1, r0
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f000 b817 	b.w	800560c <_free_r>
 80055de:	bf00      	nop
 80055e0:	2000000c 	.word	0x2000000c

080055e4 <memcpy>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	1e43      	subs	r3, r0, #1
 80055e8:	440a      	add	r2, r1
 80055ea:	4291      	cmp	r1, r2
 80055ec:	d100      	bne.n	80055f0 <memcpy+0xc>
 80055ee:	bd10      	pop	{r4, pc}
 80055f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f8:	e7f7      	b.n	80055ea <memcpy+0x6>

080055fa <memset>:
 80055fa:	4603      	mov	r3, r0
 80055fc:	4402      	add	r2, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	d100      	bne.n	8005604 <memset+0xa>
 8005602:	4770      	bx	lr
 8005604:	f803 1b01 	strb.w	r1, [r3], #1
 8005608:	e7f9      	b.n	80055fe <memset+0x4>
	...

0800560c <_free_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4605      	mov	r5, r0
 8005610:	2900      	cmp	r1, #0
 8005612:	d043      	beq.n	800569c <_free_r+0x90>
 8005614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005618:	1f0c      	subs	r4, r1, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfb8      	it	lt
 800561e:	18e4      	addlt	r4, r4, r3
 8005620:	f002 ff5e 	bl	80084e0 <__malloc_lock>
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <_free_r+0x94>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	4610      	mov	r0, r2
 800562a:	b933      	cbnz	r3, 800563a <_free_r+0x2e>
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	6014      	str	r4, [r2, #0]
 8005630:	4628      	mov	r0, r5
 8005632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005636:	f002 bf54 	b.w	80084e2 <__malloc_unlock>
 800563a:	42a3      	cmp	r3, r4
 800563c:	d90b      	bls.n	8005656 <_free_r+0x4a>
 800563e:	6821      	ldr	r1, [r4, #0]
 8005640:	1862      	adds	r2, r4, r1
 8005642:	4293      	cmp	r3, r2
 8005644:	bf01      	itttt	eq
 8005646:	681a      	ldreq	r2, [r3, #0]
 8005648:	685b      	ldreq	r3, [r3, #4]
 800564a:	1852      	addeq	r2, r2, r1
 800564c:	6022      	streq	r2, [r4, #0]
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	6004      	str	r4, [r0, #0]
 8005652:	e7ed      	b.n	8005630 <_free_r+0x24>
 8005654:	4613      	mov	r3, r2
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	b10a      	cbz	r2, 800565e <_free_r+0x52>
 800565a:	42a2      	cmp	r2, r4
 800565c:	d9fa      	bls.n	8005654 <_free_r+0x48>
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	1858      	adds	r0, r3, r1
 8005662:	42a0      	cmp	r0, r4
 8005664:	d10b      	bne.n	800567e <_free_r+0x72>
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	4401      	add	r1, r0
 800566a:	1858      	adds	r0, r3, r1
 800566c:	4282      	cmp	r2, r0
 800566e:	6019      	str	r1, [r3, #0]
 8005670:	d1de      	bne.n	8005630 <_free_r+0x24>
 8005672:	6810      	ldr	r0, [r2, #0]
 8005674:	6852      	ldr	r2, [r2, #4]
 8005676:	4401      	add	r1, r0
 8005678:	6019      	str	r1, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e7d8      	b.n	8005630 <_free_r+0x24>
 800567e:	d902      	bls.n	8005686 <_free_r+0x7a>
 8005680:	230c      	movs	r3, #12
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	e7d4      	b.n	8005630 <_free_r+0x24>
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	1821      	adds	r1, r4, r0
 800568a:	428a      	cmp	r2, r1
 800568c:	bf01      	itttt	eq
 800568e:	6811      	ldreq	r1, [r2, #0]
 8005690:	6852      	ldreq	r2, [r2, #4]
 8005692:	1809      	addeq	r1, r1, r0
 8005694:	6021      	streq	r1, [r4, #0]
 8005696:	6062      	str	r2, [r4, #4]
 8005698:	605c      	str	r4, [r3, #4]
 800569a:	e7c9      	b.n	8005630 <_free_r+0x24>
 800569c:	bd38      	pop	{r3, r4, r5, pc}
 800569e:	bf00      	nop
 80056a0:	2000022c 	.word	0x2000022c

080056a4 <_malloc_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	1ccd      	adds	r5, r1, #3
 80056a8:	f025 0503 	bic.w	r5, r5, #3
 80056ac:	3508      	adds	r5, #8
 80056ae:	2d0c      	cmp	r5, #12
 80056b0:	bf38      	it	cc
 80056b2:	250c      	movcc	r5, #12
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	4606      	mov	r6, r0
 80056b8:	db01      	blt.n	80056be <_malloc_r+0x1a>
 80056ba:	42a9      	cmp	r1, r5
 80056bc:	d903      	bls.n	80056c6 <_malloc_r+0x22>
 80056be:	230c      	movs	r3, #12
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	2000      	movs	r0, #0
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	f002 ff0b 	bl	80084e0 <__malloc_lock>
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <_malloc_r+0xac>)
 80056cc:	6814      	ldr	r4, [r2, #0]
 80056ce:	4621      	mov	r1, r4
 80056d0:	b991      	cbnz	r1, 80056f8 <_malloc_r+0x54>
 80056d2:	4c20      	ldr	r4, [pc, #128]	; (8005754 <_malloc_r+0xb0>)
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	b91b      	cbnz	r3, 80056e0 <_malloc_r+0x3c>
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 fe6d 	bl	80063b8 <_sbrk_r>
 80056de:	6020      	str	r0, [r4, #0]
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 fe68 	bl	80063b8 <_sbrk_r>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d124      	bne.n	8005736 <_malloc_r+0x92>
 80056ec:	230c      	movs	r3, #12
 80056ee:	4630      	mov	r0, r6
 80056f0:	6033      	str	r3, [r6, #0]
 80056f2:	f002 fef6 	bl	80084e2 <__malloc_unlock>
 80056f6:	e7e4      	b.n	80056c2 <_malloc_r+0x1e>
 80056f8:	680b      	ldr	r3, [r1, #0]
 80056fa:	1b5b      	subs	r3, r3, r5
 80056fc:	d418      	bmi.n	8005730 <_malloc_r+0x8c>
 80056fe:	2b0b      	cmp	r3, #11
 8005700:	d90f      	bls.n	8005722 <_malloc_r+0x7e>
 8005702:	600b      	str	r3, [r1, #0]
 8005704:	18cc      	adds	r4, r1, r3
 8005706:	50cd      	str	r5, [r1, r3]
 8005708:	4630      	mov	r0, r6
 800570a:	f002 feea 	bl	80084e2 <__malloc_unlock>
 800570e:	f104 000b 	add.w	r0, r4, #11
 8005712:	1d23      	adds	r3, r4, #4
 8005714:	f020 0007 	bic.w	r0, r0, #7
 8005718:	1ac3      	subs	r3, r0, r3
 800571a:	d0d3      	beq.n	80056c4 <_malloc_r+0x20>
 800571c:	425a      	negs	r2, r3
 800571e:	50e2      	str	r2, [r4, r3]
 8005720:	e7d0      	b.n	80056c4 <_malloc_r+0x20>
 8005722:	684b      	ldr	r3, [r1, #4]
 8005724:	428c      	cmp	r4, r1
 8005726:	bf16      	itet	ne
 8005728:	6063      	strne	r3, [r4, #4]
 800572a:	6013      	streq	r3, [r2, #0]
 800572c:	460c      	movne	r4, r1
 800572e:	e7eb      	b.n	8005708 <_malloc_r+0x64>
 8005730:	460c      	mov	r4, r1
 8005732:	6849      	ldr	r1, [r1, #4]
 8005734:	e7cc      	b.n	80056d0 <_malloc_r+0x2c>
 8005736:	1cc4      	adds	r4, r0, #3
 8005738:	f024 0403 	bic.w	r4, r4, #3
 800573c:	42a0      	cmp	r0, r4
 800573e:	d005      	beq.n	800574c <_malloc_r+0xa8>
 8005740:	1a21      	subs	r1, r4, r0
 8005742:	4630      	mov	r0, r6
 8005744:	f000 fe38 	bl	80063b8 <_sbrk_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d0cf      	beq.n	80056ec <_malloc_r+0x48>
 800574c:	6025      	str	r5, [r4, #0]
 800574e:	e7db      	b.n	8005708 <_malloc_r+0x64>
 8005750:	2000022c 	.word	0x2000022c
 8005754:	20000230 	.word	0x20000230

08005758 <__cvt>:
 8005758:	2b00      	cmp	r3, #0
 800575a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575e:	461e      	mov	r6, r3
 8005760:	bfbb      	ittet	lt
 8005762:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005766:	461e      	movlt	r6, r3
 8005768:	2300      	movge	r3, #0
 800576a:	232d      	movlt	r3, #45	; 0x2d
 800576c:	b088      	sub	sp, #32
 800576e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005770:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005774:	f027 0720 	bic.w	r7, r7, #32
 8005778:	2f46      	cmp	r7, #70	; 0x46
 800577a:	4614      	mov	r4, r2
 800577c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800577e:	700b      	strb	r3, [r1, #0]
 8005780:	d004      	beq.n	800578c <__cvt+0x34>
 8005782:	2f45      	cmp	r7, #69	; 0x45
 8005784:	d100      	bne.n	8005788 <__cvt+0x30>
 8005786:	3501      	adds	r5, #1
 8005788:	2302      	movs	r3, #2
 800578a:	e000      	b.n	800578e <__cvt+0x36>
 800578c:	2303      	movs	r3, #3
 800578e:	aa07      	add	r2, sp, #28
 8005790:	9204      	str	r2, [sp, #16]
 8005792:	aa06      	add	r2, sp, #24
 8005794:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005798:	e9cd 3500 	strd	r3, r5, [sp]
 800579c:	4622      	mov	r2, r4
 800579e:	4633      	mov	r3, r6
 80057a0:	f001 fd8e 	bl	80072c0 <_dtoa_r>
 80057a4:	2f47      	cmp	r7, #71	; 0x47
 80057a6:	4680      	mov	r8, r0
 80057a8:	d102      	bne.n	80057b0 <__cvt+0x58>
 80057aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057ac:	07db      	lsls	r3, r3, #31
 80057ae:	d526      	bpl.n	80057fe <__cvt+0xa6>
 80057b0:	2f46      	cmp	r7, #70	; 0x46
 80057b2:	eb08 0905 	add.w	r9, r8, r5
 80057b6:	d111      	bne.n	80057dc <__cvt+0x84>
 80057b8:	f898 3000 	ldrb.w	r3, [r8]
 80057bc:	2b30      	cmp	r3, #48	; 0x30
 80057be:	d10a      	bne.n	80057d6 <__cvt+0x7e>
 80057c0:	2200      	movs	r2, #0
 80057c2:	2300      	movs	r3, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	4631      	mov	r1, r6
 80057c8:	f7fb f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80057cc:	b918      	cbnz	r0, 80057d6 <__cvt+0x7e>
 80057ce:	f1c5 0501 	rsb	r5, r5, #1
 80057d2:	f8ca 5000 	str.w	r5, [sl]
 80057d6:	f8da 3000 	ldr.w	r3, [sl]
 80057da:	4499      	add	r9, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	2300      	movs	r3, #0
 80057e0:	4620      	mov	r0, r4
 80057e2:	4631      	mov	r1, r6
 80057e4:	f7fb f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80057e8:	b938      	cbnz	r0, 80057fa <__cvt+0xa2>
 80057ea:	2230      	movs	r2, #48	; 0x30
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	454b      	cmp	r3, r9
 80057f0:	d205      	bcs.n	80057fe <__cvt+0xa6>
 80057f2:	1c59      	adds	r1, r3, #1
 80057f4:	9107      	str	r1, [sp, #28]
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e7f8      	b.n	80057ec <__cvt+0x94>
 80057fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80057fe:	4640      	mov	r0, r8
 8005800:	9b07      	ldr	r3, [sp, #28]
 8005802:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005804:	eba3 0308 	sub.w	r3, r3, r8
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	b008      	add	sp, #32
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005810 <__exponent>:
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	2900      	cmp	r1, #0
 8005814:	bfb4      	ite	lt
 8005816:	232d      	movlt	r3, #45	; 0x2d
 8005818:	232b      	movge	r3, #43	; 0x2b
 800581a:	4604      	mov	r4, r0
 800581c:	bfb8      	it	lt
 800581e:	4249      	neglt	r1, r1
 8005820:	2909      	cmp	r1, #9
 8005822:	f804 2b02 	strb.w	r2, [r4], #2
 8005826:	7043      	strb	r3, [r0, #1]
 8005828:	dd21      	ble.n	800586e <__exponent+0x5e>
 800582a:	f10d 0307 	add.w	r3, sp, #7
 800582e:	461f      	mov	r7, r3
 8005830:	260a      	movs	r6, #10
 8005832:	fb91 f5f6 	sdiv	r5, r1, r6
 8005836:	fb06 1115 	mls	r1, r6, r5, r1
 800583a:	2d09      	cmp	r5, #9
 800583c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005840:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005844:	f103 32ff 	add.w	r2, r3, #4294967295
 8005848:	4629      	mov	r1, r5
 800584a:	dc09      	bgt.n	8005860 <__exponent+0x50>
 800584c:	3130      	adds	r1, #48	; 0x30
 800584e:	3b02      	subs	r3, #2
 8005850:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005854:	42bb      	cmp	r3, r7
 8005856:	4622      	mov	r2, r4
 8005858:	d304      	bcc.n	8005864 <__exponent+0x54>
 800585a:	1a10      	subs	r0, r2, r0
 800585c:	b003      	add	sp, #12
 800585e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005860:	4613      	mov	r3, r2
 8005862:	e7e6      	b.n	8005832 <__exponent+0x22>
 8005864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005868:	f804 2b01 	strb.w	r2, [r4], #1
 800586c:	e7f2      	b.n	8005854 <__exponent+0x44>
 800586e:	2330      	movs	r3, #48	; 0x30
 8005870:	4419      	add	r1, r3
 8005872:	7083      	strb	r3, [r0, #2]
 8005874:	1d02      	adds	r2, r0, #4
 8005876:	70c1      	strb	r1, [r0, #3]
 8005878:	e7ef      	b.n	800585a <__exponent+0x4a>
	...

0800587c <_printf_float>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	b091      	sub	sp, #68	; 0x44
 8005882:	460c      	mov	r4, r1
 8005884:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005886:	4693      	mov	fp, r2
 8005888:	461e      	mov	r6, r3
 800588a:	4605      	mov	r5, r0
 800588c:	f002 fdfa 	bl	8008484 <_localeconv_r>
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	9309      	str	r3, [sp, #36]	; 0x24
 8005896:	f7fa fc5b 	bl	8000150 <strlen>
 800589a:	2300      	movs	r3, #0
 800589c:	930e      	str	r3, [sp, #56]	; 0x38
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	900a      	str	r0, [sp, #40]	; 0x28
 80058a2:	3307      	adds	r3, #7
 80058a4:	f023 0307 	bic.w	r3, r3, #7
 80058a8:	f103 0208 	add.w	r2, r3, #8
 80058ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80058b0:	f8d4 a000 	ldr.w	sl, [r4]
 80058b4:	603a      	str	r2, [r7, #0]
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80058c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	4ba6      	ldr	r3, [pc, #664]	; (8005b68 <_printf_float+0x2ec>)
 80058ce:	4638      	mov	r0, r7
 80058d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058d2:	f7fb f89b 	bl	8000a0c <__aeabi_dcmpun>
 80058d6:	bb68      	cbnz	r0, 8005934 <_printf_float+0xb8>
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	4ba2      	ldr	r3, [pc, #648]	; (8005b68 <_printf_float+0x2ec>)
 80058de:	4638      	mov	r0, r7
 80058e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058e2:	f7fb f875 	bl	80009d0 <__aeabi_dcmple>
 80058e6:	bb28      	cbnz	r0, 8005934 <_printf_float+0xb8>
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	4638      	mov	r0, r7
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fb f864 	bl	80009bc <__aeabi_dcmplt>
 80058f4:	b110      	cbz	r0, 80058fc <_printf_float+0x80>
 80058f6:	232d      	movs	r3, #45	; 0x2d
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	4f9b      	ldr	r7, [pc, #620]	; (8005b6c <_printf_float+0x2f0>)
 80058fe:	4b9c      	ldr	r3, [pc, #624]	; (8005b70 <_printf_float+0x2f4>)
 8005900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005904:	bf98      	it	ls
 8005906:	461f      	movls	r7, r3
 8005908:	2303      	movs	r3, #3
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	f02a 0304 	bic.w	r3, sl, #4
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	9600      	str	r6, [sp, #0]
 8005918:	465b      	mov	r3, fp
 800591a:	aa0f      	add	r2, sp, #60	; 0x3c
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f000 f9e2 	bl	8005ce8 <_printf_common>
 8005924:	3001      	adds	r0, #1
 8005926:	f040 8090 	bne.w	8005a4a <_printf_float+0x1ce>
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	b011      	add	sp, #68	; 0x44
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	463a      	mov	r2, r7
 8005936:	464b      	mov	r3, r9
 8005938:	4638      	mov	r0, r7
 800593a:	4649      	mov	r1, r9
 800593c:	f7fb f866 	bl	8000a0c <__aeabi_dcmpun>
 8005940:	b110      	cbz	r0, 8005948 <_printf_float+0xcc>
 8005942:	4f8c      	ldr	r7, [pc, #560]	; (8005b74 <_printf_float+0x2f8>)
 8005944:	4b8c      	ldr	r3, [pc, #560]	; (8005b78 <_printf_float+0x2fc>)
 8005946:	e7db      	b.n	8005900 <_printf_float+0x84>
 8005948:	6863      	ldr	r3, [r4, #4]
 800594a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	a80d      	add	r0, sp, #52	; 0x34
 8005952:	a90e      	add	r1, sp, #56	; 0x38
 8005954:	d140      	bne.n	80059d8 <_printf_float+0x15c>
 8005956:	2306      	movs	r3, #6
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	f04f 0c00 	mov.w	ip, #0
 800595e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005962:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6022      	str	r2, [r4, #0]
 800596a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	463a      	mov	r2, r7
 8005972:	464b      	mov	r3, r9
 8005974:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005978:	4628      	mov	r0, r5
 800597a:	f7ff feed 	bl	8005758 <__cvt>
 800597e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005982:	2b47      	cmp	r3, #71	; 0x47
 8005984:	4607      	mov	r7, r0
 8005986:	d109      	bne.n	800599c <_printf_float+0x120>
 8005988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800598a:	1cd8      	adds	r0, r3, #3
 800598c:	db02      	blt.n	8005994 <_printf_float+0x118>
 800598e:	6862      	ldr	r2, [r4, #4]
 8005990:	4293      	cmp	r3, r2
 8005992:	dd47      	ble.n	8005a24 <_printf_float+0x1a8>
 8005994:	f1a8 0802 	sub.w	r8, r8, #2
 8005998:	fa5f f888 	uxtb.w	r8, r8
 800599c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80059a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059a2:	d824      	bhi.n	80059ee <_printf_float+0x172>
 80059a4:	3901      	subs	r1, #1
 80059a6:	4642      	mov	r2, r8
 80059a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059ac:	910d      	str	r1, [sp, #52]	; 0x34
 80059ae:	f7ff ff2f 	bl	8005810 <__exponent>
 80059b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b4:	4681      	mov	r9, r0
 80059b6:	1813      	adds	r3, r2, r0
 80059b8:	2a01      	cmp	r2, #1
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	dc02      	bgt.n	80059c4 <_printf_float+0x148>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	07d1      	lsls	r1, r2, #31
 80059c2:	d501      	bpl.n	80059c8 <_printf_float+0x14c>
 80059c4:	3301      	adds	r3, #1
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0a2      	beq.n	8005916 <_printf_float+0x9a>
 80059d0:	232d      	movs	r3, #45	; 0x2d
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d6:	e79e      	b.n	8005916 <_printf_float+0x9a>
 80059d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80059dc:	f000 816e 	beq.w	8005cbc <_printf_float+0x440>
 80059e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059e4:	d1b9      	bne.n	800595a <_printf_float+0xde>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1b7      	bne.n	800595a <_printf_float+0xde>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e7b4      	b.n	8005958 <_printf_float+0xdc>
 80059ee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80059f2:	d119      	bne.n	8005a28 <_printf_float+0x1ac>
 80059f4:	2900      	cmp	r1, #0
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	dd0c      	ble.n	8005a14 <_printf_float+0x198>
 80059fa:	6121      	str	r1, [r4, #16]
 80059fc:	b913      	cbnz	r3, 8005a04 <_printf_float+0x188>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	07d2      	lsls	r2, r2, #31
 8005a02:	d502      	bpl.n	8005a0a <_printf_float+0x18e>
 8005a04:	3301      	adds	r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a12:	e7d9      	b.n	80059c8 <_printf_float+0x14c>
 8005a14:	b913      	cbnz	r3, 8005a1c <_printf_float+0x1a0>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d501      	bpl.n	8005a20 <_printf_float+0x1a4>
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	e7f3      	b.n	8005a08 <_printf_float+0x18c>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e7f1      	b.n	8005a08 <_printf_float+0x18c>
 8005a24:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005a28:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	db05      	blt.n	8005a3c <_printf_float+0x1c0>
 8005a30:	6822      	ldr	r2, [r4, #0]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	07d1      	lsls	r1, r2, #31
 8005a36:	d5e8      	bpl.n	8005a0a <_printf_float+0x18e>
 8005a38:	3301      	adds	r3, #1
 8005a3a:	e7e5      	b.n	8005a08 <_printf_float+0x18c>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfcc      	ite	gt
 8005a40:	2301      	movgt	r3, #1
 8005a42:	f1c3 0302 	rsble	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	e7de      	b.n	8005a08 <_printf_float+0x18c>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	055a      	lsls	r2, r3, #21
 8005a4e:	d407      	bmi.n	8005a60 <_printf_float+0x1e4>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	463a      	mov	r2, r7
 8005a54:	4659      	mov	r1, fp
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b0      	blx	r6
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d129      	bne.n	8005ab2 <_printf_float+0x236>
 8005a5e:	e764      	b.n	800592a <_printf_float+0xae>
 8005a60:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005a64:	f240 80d7 	bls.w	8005c16 <_printf_float+0x39a>
 8005a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f7fa ff9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005a74:	b388      	cbz	r0, 8005ada <_printf_float+0x25e>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <_printf_float+0x300>)
 8005a7a:	4659      	mov	r1, fp
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b0      	blx	r6
 8005a80:	3001      	adds	r0, #1
 8005a82:	f43f af52 	beq.w	800592a <_printf_float+0xae>
 8005a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	db02      	blt.n	8005a94 <_printf_float+0x218>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	07d8      	lsls	r0, r3, #31
 8005a92:	d50e      	bpl.n	8005ab2 <_printf_float+0x236>
 8005a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a98:	4659      	mov	r1, fp
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b0      	blx	r6
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f43f af43 	beq.w	800592a <_printf_float+0xae>
 8005aa4:	2700      	movs	r7, #0
 8005aa6:	f104 081a 	add.w	r8, r4, #26
 8005aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aac:	3b01      	subs	r3, #1
 8005aae:	42bb      	cmp	r3, r7
 8005ab0:	dc09      	bgt.n	8005ac6 <_printf_float+0x24a>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	079f      	lsls	r7, r3, #30
 8005ab6:	f100 80fd 	bmi.w	8005cb4 <_printf_float+0x438>
 8005aba:	68e0      	ldr	r0, [r4, #12]
 8005abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005abe:	4298      	cmp	r0, r3
 8005ac0:	bfb8      	it	lt
 8005ac2:	4618      	movlt	r0, r3
 8005ac4:	e733      	b.n	800592e <_printf_float+0xb2>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4659      	mov	r1, fp
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f af2a 	beq.w	800592a <_printf_float+0xae>
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	e7e7      	b.n	8005aaa <_printf_float+0x22e>
 8005ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dc2b      	bgt.n	8005b38 <_printf_float+0x2bc>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <_printf_float+0x300>)
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b0      	blx	r6
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af1d 	beq.w	800592a <_printf_float+0xae>
 8005af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af2:	b923      	cbnz	r3, 8005afe <_printf_float+0x282>
 8005af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af6:	b913      	cbnz	r3, 8005afe <_printf_float+0x282>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07d9      	lsls	r1, r3, #31
 8005afc:	d5d9      	bpl.n	8005ab2 <_printf_float+0x236>
 8005afe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b02:	4659      	mov	r1, fp
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b0      	blx	r6
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f43f af0e 	beq.w	800592a <_printf_float+0xae>
 8005b0e:	f04f 0800 	mov.w	r8, #0
 8005b12:	f104 091a 	add.w	r9, r4, #26
 8005b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b18:	425b      	negs	r3, r3
 8005b1a:	4543      	cmp	r3, r8
 8005b1c:	dc01      	bgt.n	8005b22 <_printf_float+0x2a6>
 8005b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b20:	e797      	b.n	8005a52 <_printf_float+0x1d6>
 8005b22:	2301      	movs	r3, #1
 8005b24:	464a      	mov	r2, r9
 8005b26:	4659      	mov	r1, fp
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b0      	blx	r6
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f aefc 	beq.w	800592a <_printf_float+0xae>
 8005b32:	f108 0801 	add.w	r8, r8, #1
 8005b36:	e7ee      	b.n	8005b16 <_printf_float+0x29a>
 8005b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	bfa8      	it	ge
 8005b40:	461a      	movge	r2, r3
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	4690      	mov	r8, r2
 8005b46:	dd07      	ble.n	8005b58 <_printf_float+0x2dc>
 8005b48:	4613      	mov	r3, r2
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	463a      	mov	r2, r7
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b0      	blx	r6
 8005b52:	3001      	adds	r0, #1
 8005b54:	f43f aee9 	beq.w	800592a <_printf_float+0xae>
 8005b58:	f104 031a 	add.w	r3, r4, #26
 8005b5c:	f04f 0a00 	mov.w	sl, #0
 8005b60:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b66:	e015      	b.n	8005b94 <_printf_float+0x318>
 8005b68:	7fefffff 	.word	0x7fefffff
 8005b6c:	080090b8 	.word	0x080090b8
 8005b70:	080090b4 	.word	0x080090b4
 8005b74:	080090c0 	.word	0x080090c0
 8005b78:	080090bc 	.word	0x080090bc
 8005b7c:	080090c4 	.word	0x080090c4
 8005b80:	2301      	movs	r3, #1
 8005b82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b84:	4659      	mov	r1, fp
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b0      	blx	r6
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f aecd 	beq.w	800592a <_printf_float+0xae>
 8005b90:	f10a 0a01 	add.w	sl, sl, #1
 8005b94:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005b98:	eba9 0308 	sub.w	r3, r9, r8
 8005b9c:	4553      	cmp	r3, sl
 8005b9e:	dcef      	bgt.n	8005b80 <_printf_float+0x304>
 8005ba0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	444f      	add	r7, r9
 8005ba8:	db14      	blt.n	8005bd4 <_printf_float+0x358>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	07da      	lsls	r2, r3, #31
 8005bae:	d411      	bmi.n	8005bd4 <_printf_float+0x358>
 8005bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bb4:	eba3 0209 	sub.w	r2, r3, r9
 8005bb8:	eba3 0901 	sub.w	r9, r3, r1
 8005bbc:	4591      	cmp	r9, r2
 8005bbe:	bfa8      	it	ge
 8005bc0:	4691      	movge	r9, r2
 8005bc2:	f1b9 0f00 	cmp.w	r9, #0
 8005bc6:	dc0d      	bgt.n	8005be4 <_printf_float+0x368>
 8005bc8:	2700      	movs	r7, #0
 8005bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bce:	f104 081a 	add.w	r8, r4, #26
 8005bd2:	e018      	b.n	8005c06 <_printf_float+0x38a>
 8005bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd8:	4659      	mov	r1, fp
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b0      	blx	r6
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1e6      	bne.n	8005bb0 <_printf_float+0x334>
 8005be2:	e6a2      	b.n	800592a <_printf_float+0xae>
 8005be4:	464b      	mov	r3, r9
 8005be6:	463a      	mov	r2, r7
 8005be8:	4659      	mov	r1, fp
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b0      	blx	r6
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d1ea      	bne.n	8005bc8 <_printf_float+0x34c>
 8005bf2:	e69a      	b.n	800592a <_printf_float+0xae>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b0      	blx	r6
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f ae93 	beq.w	800592a <_printf_float+0xae>
 8005c04:	3701      	adds	r7, #1
 8005c06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	eba3 0309 	sub.w	r3, r3, r9
 8005c10:	42bb      	cmp	r3, r7
 8005c12:	dcef      	bgt.n	8005bf4 <_printf_float+0x378>
 8005c14:	e74d      	b.n	8005ab2 <_printf_float+0x236>
 8005c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c18:	2a01      	cmp	r2, #1
 8005c1a:	dc01      	bgt.n	8005c20 <_printf_float+0x3a4>
 8005c1c:	07db      	lsls	r3, r3, #31
 8005c1e:	d538      	bpl.n	8005c92 <_printf_float+0x416>
 8005c20:	2301      	movs	r3, #1
 8005c22:	463a      	mov	r2, r7
 8005c24:	4659      	mov	r1, fp
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f ae7d 	beq.w	800592a <_printf_float+0xae>
 8005c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c34:	4659      	mov	r1, fp
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b0      	blx	r6
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f107 0701 	add.w	r7, r7, #1
 8005c40:	f43f ae73 	beq.w	800592a <_printf_float+0xae>
 8005c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005c50:	2300      	movs	r3, #0
 8005c52:	f7fa fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8005c56:	b9c0      	cbnz	r0, 8005c8a <_printf_float+0x40e>
 8005c58:	4643      	mov	r3, r8
 8005c5a:	463a      	mov	r2, r7
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b0      	blx	r6
 8005c62:	3001      	adds	r0, #1
 8005c64:	d10d      	bne.n	8005c82 <_printf_float+0x406>
 8005c66:	e660      	b.n	800592a <_printf_float+0xae>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b0      	blx	r6
 8005c72:	3001      	adds	r0, #1
 8005c74:	f43f ae59 	beq.w	800592a <_printf_float+0xae>
 8005c78:	3701      	adds	r7, #1
 8005c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	42bb      	cmp	r3, r7
 8005c80:	dcf2      	bgt.n	8005c68 <_printf_float+0x3ec>
 8005c82:	464b      	mov	r3, r9
 8005c84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c88:	e6e4      	b.n	8005a54 <_printf_float+0x1d8>
 8005c8a:	2700      	movs	r7, #0
 8005c8c:	f104 081a 	add.w	r8, r4, #26
 8005c90:	e7f3      	b.n	8005c7a <_printf_float+0x3fe>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7e1      	b.n	8005c5a <_printf_float+0x3de>
 8005c96:	2301      	movs	r3, #1
 8005c98:	4642      	mov	r2, r8
 8005c9a:	4659      	mov	r1, fp
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae42 	beq.w	800592a <_printf_float+0xae>
 8005ca6:	3701      	adds	r7, #1
 8005ca8:	68e3      	ldr	r3, [r4, #12]
 8005caa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	42bb      	cmp	r3, r7
 8005cb0:	dcf1      	bgt.n	8005c96 <_printf_float+0x41a>
 8005cb2:	e702      	b.n	8005aba <_printf_float+0x23e>
 8005cb4:	2700      	movs	r7, #0
 8005cb6:	f104 0819 	add.w	r8, r4, #25
 8005cba:	e7f5      	b.n	8005ca8 <_printf_float+0x42c>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f43f ae94 	beq.w	80059ea <_printf_float+0x16e>
 8005cc2:	f04f 0c00 	mov.w	ip, #0
 8005cc6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005cca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005cce:	6022      	str	r2, [r4, #0]
 8005cd0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005cd4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	463a      	mov	r2, r7
 8005cdc:	464b      	mov	r3, r9
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7ff fd3a 	bl	8005758 <__cvt>
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	e64f      	b.n	8005988 <_printf_float+0x10c>

08005ce8 <_printf_common>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4691      	mov	r9, r2
 8005cee:	461f      	mov	r7, r3
 8005cf0:	688a      	ldr	r2, [r1, #8]
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bfb8      	it	lt
 8005cfa:	4613      	movlt	r3, r2
 8005cfc:	f8c9 3000 	str.w	r3, [r9]
 8005d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d04:	460c      	mov	r4, r1
 8005d06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d0a:	b112      	cbz	r2, 8005d12 <_printf_common+0x2a>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c9 3000 	str.w	r3, [r9]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	0699      	lsls	r1, r3, #26
 8005d16:	bf42      	ittt	mi
 8005d18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d1c:	3302      	addmi	r3, #2
 8005d1e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	f015 0506 	ands.w	r5, r5, #6
 8005d28:	d107      	bne.n	8005d3a <_printf_common+0x52>
 8005d2a:	f104 0a19 	add.w	sl, r4, #25
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	f8d9 2000 	ldr.w	r2, [r9]
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	42ab      	cmp	r3, r5
 8005d38:	dc29      	bgt.n	8005d8e <_printf_common+0xa6>
 8005d3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	3300      	adds	r3, #0
 8005d42:	bf18      	it	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	0692      	lsls	r2, r2, #26
 8005d48:	d42e      	bmi.n	8005da8 <_printf_common+0xc0>
 8005d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4630      	mov	r0, r6
 8005d52:	47c0      	blx	r8
 8005d54:	3001      	adds	r0, #1
 8005d56:	d021      	beq.n	8005d9c <_printf_common+0xb4>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	68e5      	ldr	r5, [r4, #12]
 8005d5c:	f003 0306 	and.w	r3, r3, #6
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	bf18      	it	ne
 8005d64:	2500      	movne	r5, #0
 8005d66:	f8d9 2000 	ldr.w	r2, [r9]
 8005d6a:	f04f 0900 	mov.w	r9, #0
 8005d6e:	bf08      	it	eq
 8005d70:	1aad      	subeq	r5, r5, r2
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	bf08      	it	eq
 8005d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bfc4      	itt	gt
 8005d80:	1a9b      	subgt	r3, r3, r2
 8005d82:	18ed      	addgt	r5, r5, r3
 8005d84:	341a      	adds	r4, #26
 8005d86:	454d      	cmp	r5, r9
 8005d88:	d11a      	bne.n	8005dc0 <_printf_common+0xd8>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e008      	b.n	8005da0 <_printf_common+0xb8>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4652      	mov	r2, sl
 8005d92:	4639      	mov	r1, r7
 8005d94:	4630      	mov	r0, r6
 8005d96:	47c0      	blx	r8
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d103      	bne.n	8005da4 <_printf_common+0xbc>
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da4:	3501      	adds	r5, #1
 8005da6:	e7c2      	b.n	8005d2e <_printf_common+0x46>
 8005da8:	2030      	movs	r0, #48	; 0x30
 8005daa:	18e1      	adds	r1, r4, r3
 8005dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005db6:	4422      	add	r2, r4
 8005db8:	3302      	adds	r3, #2
 8005dba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dbe:	e7c4      	b.n	8005d4a <_printf_common+0x62>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d0e6      	beq.n	8005d9c <_printf_common+0xb4>
 8005dce:	f109 0901 	add.w	r9, r9, #1
 8005dd2:	e7d8      	b.n	8005d86 <_printf_common+0x9e>

08005dd4 <_printf_i>:
 8005dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ddc:	460c      	mov	r4, r1
 8005dde:	7e09      	ldrb	r1, [r1, #24]
 8005de0:	b085      	sub	sp, #20
 8005de2:	296e      	cmp	r1, #110	; 0x6e
 8005de4:	4617      	mov	r7, r2
 8005de6:	4606      	mov	r6, r0
 8005de8:	4698      	mov	r8, r3
 8005dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dec:	f000 80b3 	beq.w	8005f56 <_printf_i+0x182>
 8005df0:	d822      	bhi.n	8005e38 <_printf_i+0x64>
 8005df2:	2963      	cmp	r1, #99	; 0x63
 8005df4:	d036      	beq.n	8005e64 <_printf_i+0x90>
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x3a>
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	f000 80b9 	beq.w	8005f70 <_printf_i+0x19c>
 8005dfe:	2958      	cmp	r1, #88	; 0x58
 8005e00:	f000 8083 	beq.w	8005f0a <_printf_i+0x136>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e0c:	e032      	b.n	8005e74 <_printf_i+0xa0>
 8005e0e:	2964      	cmp	r1, #100	; 0x64
 8005e10:	d001      	beq.n	8005e16 <_printf_i+0x42>
 8005e12:	2969      	cmp	r1, #105	; 0x69
 8005e14:	d1f6      	bne.n	8005e04 <_printf_i+0x30>
 8005e16:	6820      	ldr	r0, [r4, #0]
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	0605      	lsls	r5, r0, #24
 8005e1c:	f103 0104 	add.w	r1, r3, #4
 8005e20:	d52a      	bpl.n	8005e78 <_printf_i+0xa4>
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da03      	bge.n	8005e32 <_printf_i+0x5e>
 8005e2a:	222d      	movs	r2, #45	; 0x2d
 8005e2c:	425b      	negs	r3, r3
 8005e2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e32:	486f      	ldr	r0, [pc, #444]	; (8005ff0 <_printf_i+0x21c>)
 8005e34:	220a      	movs	r2, #10
 8005e36:	e039      	b.n	8005eac <_printf_i+0xd8>
 8005e38:	2973      	cmp	r1, #115	; 0x73
 8005e3a:	f000 809d 	beq.w	8005f78 <_printf_i+0x1a4>
 8005e3e:	d808      	bhi.n	8005e52 <_printf_i+0x7e>
 8005e40:	296f      	cmp	r1, #111	; 0x6f
 8005e42:	d020      	beq.n	8005e86 <_printf_i+0xb2>
 8005e44:	2970      	cmp	r1, #112	; 0x70
 8005e46:	d1dd      	bne.n	8005e04 <_printf_i+0x30>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f043 0320 	orr.w	r3, r3, #32
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	e003      	b.n	8005e5a <_printf_i+0x86>
 8005e52:	2975      	cmp	r1, #117	; 0x75
 8005e54:	d017      	beq.n	8005e86 <_printf_i+0xb2>
 8005e56:	2978      	cmp	r1, #120	; 0x78
 8005e58:	d1d4      	bne.n	8005e04 <_printf_i+0x30>
 8005e5a:	2378      	movs	r3, #120	; 0x78
 8005e5c:	4865      	ldr	r0, [pc, #404]	; (8005ff4 <_printf_i+0x220>)
 8005e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e62:	e055      	b.n	8005f10 <_printf_i+0x13c>
 8005e64:	6813      	ldr	r3, [r2, #0]
 8005e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e6a:	1d19      	adds	r1, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6011      	str	r1, [r2, #0]
 8005e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e74:	2301      	movs	r3, #1
 8005e76:	e08c      	b.n	8005f92 <_printf_i+0x1be>
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e7e:	6011      	str	r1, [r2, #0]
 8005e80:	bf18      	it	ne
 8005e82:	b21b      	sxthne	r3, r3
 8005e84:	e7cf      	b.n	8005e26 <_printf_i+0x52>
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	6825      	ldr	r5, [r4, #0]
 8005e8a:	1d18      	adds	r0, r3, #4
 8005e8c:	6010      	str	r0, [r2, #0]
 8005e8e:	0628      	lsls	r0, r5, #24
 8005e90:	d501      	bpl.n	8005e96 <_printf_i+0xc2>
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	e002      	b.n	8005e9c <_printf_i+0xc8>
 8005e96:	0668      	lsls	r0, r5, #25
 8005e98:	d5fb      	bpl.n	8005e92 <_printf_i+0xbe>
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	296f      	cmp	r1, #111	; 0x6f
 8005e9e:	bf14      	ite	ne
 8005ea0:	220a      	movne	r2, #10
 8005ea2:	2208      	moveq	r2, #8
 8005ea4:	4852      	ldr	r0, [pc, #328]	; (8005ff0 <_printf_i+0x21c>)
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eac:	6865      	ldr	r5, [r4, #4]
 8005eae:	2d00      	cmp	r5, #0
 8005eb0:	60a5      	str	r5, [r4, #8]
 8005eb2:	f2c0 8095 	blt.w	8005fe0 <_printf_i+0x20c>
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	f021 0104 	bic.w	r1, r1, #4
 8005ebc:	6021      	str	r1, [r4, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d13d      	bne.n	8005f3e <_printf_i+0x16a>
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	f040 808e 	bne.w	8005fe4 <_printf_i+0x210>
 8005ec8:	4665      	mov	r5, ip
 8005eca:	2a08      	cmp	r2, #8
 8005ecc:	d10b      	bne.n	8005ee6 <_printf_i+0x112>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07db      	lsls	r3, r3, #31
 8005ed2:	d508      	bpl.n	8005ee6 <_printf_i+0x112>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	bfde      	ittt	le
 8005edc:	2330      	movle	r3, #48	; 0x30
 8005ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ee6:	ebac 0305 	sub.w	r3, ip, r5
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	f8cd 8000 	str.w	r8, [sp]
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	aa03      	add	r2, sp, #12
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff fef6 	bl	8005ce8 <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d14d      	bne.n	8005f9c <_printf_i+0x1c8>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	b005      	add	sp, #20
 8005f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f0a:	4839      	ldr	r0, [pc, #228]	; (8005ff0 <_printf_i+0x21c>)
 8005f0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f10:	6813      	ldr	r3, [r2, #0]
 8005f12:	6821      	ldr	r1, [r4, #0]
 8005f14:	1d1d      	adds	r5, r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6015      	str	r5, [r2, #0]
 8005f1a:	060a      	lsls	r2, r1, #24
 8005f1c:	d50b      	bpl.n	8005f36 <_printf_i+0x162>
 8005f1e:	07ca      	lsls	r2, r1, #31
 8005f20:	bf44      	itt	mi
 8005f22:	f041 0120 	orrmi.w	r1, r1, #32
 8005f26:	6021      	strmi	r1, [r4, #0]
 8005f28:	b91b      	cbnz	r3, 8005f32 <_printf_i+0x15e>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	f022 0220 	bic.w	r2, r2, #32
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	2210      	movs	r2, #16
 8005f34:	e7b7      	b.n	8005ea6 <_printf_i+0xd2>
 8005f36:	064d      	lsls	r5, r1, #25
 8005f38:	bf48      	it	mi
 8005f3a:	b29b      	uxthmi	r3, r3
 8005f3c:	e7ef      	b.n	8005f1e <_printf_i+0x14a>
 8005f3e:	4665      	mov	r5, ip
 8005f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f44:	fb02 3311 	mls	r3, r2, r1, r3
 8005f48:	5cc3      	ldrb	r3, [r0, r3]
 8005f4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f4e:	460b      	mov	r3, r1
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d1f5      	bne.n	8005f40 <_printf_i+0x16c>
 8005f54:	e7b9      	b.n	8005eca <_printf_i+0xf6>
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	1d18      	adds	r0, r3, #4
 8005f5c:	6961      	ldr	r1, [r4, #20]
 8005f5e:	6010      	str	r0, [r2, #0]
 8005f60:	0628      	lsls	r0, r5, #24
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	d501      	bpl.n	8005f6a <_printf_i+0x196>
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	e002      	b.n	8005f70 <_printf_i+0x19c>
 8005f6a:	066a      	lsls	r2, r5, #25
 8005f6c:	d5fb      	bpl.n	8005f66 <_printf_i+0x192>
 8005f6e:	8019      	strh	r1, [r3, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	4665      	mov	r5, ip
 8005f74:	6123      	str	r3, [r4, #16]
 8005f76:	e7b9      	b.n	8005eec <_printf_i+0x118>
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	1d19      	adds	r1, r3, #4
 8005f7c:	6011      	str	r1, [r2, #0]
 8005f7e:	681d      	ldr	r5, [r3, #0]
 8005f80:	6862      	ldr	r2, [r4, #4]
 8005f82:	2100      	movs	r1, #0
 8005f84:	4628      	mov	r0, r5
 8005f86:	f002 fa9d 	bl	80084c4 <memchr>
 8005f8a:	b108      	cbz	r0, 8005f90 <_printf_i+0x1bc>
 8005f8c:	1b40      	subs	r0, r0, r5
 8005f8e:	6060      	str	r0, [r4, #4]
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2300      	movs	r3, #0
 8005f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9a:	e7a7      	b.n	8005eec <_printf_i+0x118>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	47c0      	blx	r8
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0aa      	beq.n	8005f00 <_printf_i+0x12c>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	079b      	lsls	r3, r3, #30
 8005fae:	d413      	bmi.n	8005fd8 <_printf_i+0x204>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e7a3      	b.n	8005f04 <_printf_i+0x130>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	464a      	mov	r2, r9
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d09a      	beq.n	8005f00 <_printf_i+0x12c>
 8005fca:	3501      	adds	r5, #1
 8005fcc:	68e3      	ldr	r3, [r4, #12]
 8005fce:	9a03      	ldr	r2, [sp, #12]
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	42ab      	cmp	r3, r5
 8005fd4:	dcf2      	bgt.n	8005fbc <_printf_i+0x1e8>
 8005fd6:	e7eb      	b.n	8005fb0 <_printf_i+0x1dc>
 8005fd8:	2500      	movs	r5, #0
 8005fda:	f104 0919 	add.w	r9, r4, #25
 8005fde:	e7f5      	b.n	8005fcc <_printf_i+0x1f8>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ac      	bne.n	8005f3e <_printf_i+0x16a>
 8005fe4:	7803      	ldrb	r3, [r0, #0]
 8005fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fee:	e76c      	b.n	8005eca <_printf_i+0xf6>
 8005ff0:	080090c6 	.word	0x080090c6
 8005ff4:	080090d7 	.word	0x080090d7

08005ff8 <_scanf_float>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	469a      	mov	sl, r3
 8005ffe:	688b      	ldr	r3, [r1, #8]
 8006000:	4616      	mov	r6, r2
 8006002:	1e5a      	subs	r2, r3, #1
 8006004:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006008:	bf88      	it	hi
 800600a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800600e:	b087      	sub	sp, #28
 8006010:	bf85      	ittet	hi
 8006012:	189b      	addhi	r3, r3, r2
 8006014:	9301      	strhi	r3, [sp, #4]
 8006016:	2300      	movls	r3, #0
 8006018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800601c:	4688      	mov	r8, r1
 800601e:	f04f 0b00 	mov.w	fp, #0
 8006022:	bf8c      	ite	hi
 8006024:	608b      	strhi	r3, [r1, #8]
 8006026:	9301      	strls	r3, [sp, #4]
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	4607      	mov	r7, r0
 800602c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006030:	f848 3b1c 	str.w	r3, [r8], #28
 8006034:	460c      	mov	r4, r1
 8006036:	4645      	mov	r5, r8
 8006038:	465a      	mov	r2, fp
 800603a:	46d9      	mov	r9, fp
 800603c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006040:	f8cd b008 	str.w	fp, [sp, #8]
 8006044:	68a1      	ldr	r1, [r4, #8]
 8006046:	b181      	cbz	r1, 800606a <_scanf_float+0x72>
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b49      	cmp	r3, #73	; 0x49
 800604e:	d071      	beq.n	8006134 <_scanf_float+0x13c>
 8006050:	d84d      	bhi.n	80060ee <_scanf_float+0xf6>
 8006052:	2b39      	cmp	r3, #57	; 0x39
 8006054:	d840      	bhi.n	80060d8 <_scanf_float+0xe0>
 8006056:	2b31      	cmp	r3, #49	; 0x31
 8006058:	f080 8088 	bcs.w	800616c <_scanf_float+0x174>
 800605c:	2b2d      	cmp	r3, #45	; 0x2d
 800605e:	f000 8090 	beq.w	8006182 <_scanf_float+0x18a>
 8006062:	d815      	bhi.n	8006090 <_scanf_float+0x98>
 8006064:	2b2b      	cmp	r3, #43	; 0x2b
 8006066:	f000 808c 	beq.w	8006182 <_scanf_float+0x18a>
 800606a:	f1b9 0f00 	cmp.w	r9, #0
 800606e:	d003      	beq.n	8006078 <_scanf_float+0x80>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	3a01      	subs	r2, #1
 800607a:	2a01      	cmp	r2, #1
 800607c:	f200 80ea 	bhi.w	8006254 <_scanf_float+0x25c>
 8006080:	4545      	cmp	r5, r8
 8006082:	f200 80dc 	bhi.w	800623e <_scanf_float+0x246>
 8006086:	2601      	movs	r6, #1
 8006088:	4630      	mov	r0, r6
 800608a:	b007      	add	sp, #28
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006090:	2b2e      	cmp	r3, #46	; 0x2e
 8006092:	f000 809f 	beq.w	80061d4 <_scanf_float+0x1dc>
 8006096:	2b30      	cmp	r3, #48	; 0x30
 8006098:	d1e7      	bne.n	800606a <_scanf_float+0x72>
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	f410 7f80 	tst.w	r0, #256	; 0x100
 80060a0:	d064      	beq.n	800616c <_scanf_float+0x174>
 80060a2:	9b01      	ldr	r3, [sp, #4]
 80060a4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80060a8:	6020      	str	r0, [r4, #0]
 80060aa:	f109 0901 	add.w	r9, r9, #1
 80060ae:	b11b      	cbz	r3, 80060b8 <_scanf_float+0xc0>
 80060b0:	3b01      	subs	r3, #1
 80060b2:	3101      	adds	r1, #1
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	60a1      	str	r1, [r4, #8]
 80060b8:	68a3      	ldr	r3, [r4, #8]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	60a3      	str	r3, [r4, #8]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	6123      	str	r3, [r4, #16]
 80060c4:	6873      	ldr	r3, [r6, #4]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	6073      	str	r3, [r6, #4]
 80060cc:	f340 80ac 	ble.w	8006228 <_scanf_float+0x230>
 80060d0:	6833      	ldr	r3, [r6, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	6033      	str	r3, [r6, #0]
 80060d6:	e7b5      	b.n	8006044 <_scanf_float+0x4c>
 80060d8:	2b45      	cmp	r3, #69	; 0x45
 80060da:	f000 8085 	beq.w	80061e8 <_scanf_float+0x1f0>
 80060de:	2b46      	cmp	r3, #70	; 0x46
 80060e0:	d06a      	beq.n	80061b8 <_scanf_float+0x1c0>
 80060e2:	2b41      	cmp	r3, #65	; 0x41
 80060e4:	d1c1      	bne.n	800606a <_scanf_float+0x72>
 80060e6:	2a01      	cmp	r2, #1
 80060e8:	d1bf      	bne.n	800606a <_scanf_float+0x72>
 80060ea:	2202      	movs	r2, #2
 80060ec:	e046      	b.n	800617c <_scanf_float+0x184>
 80060ee:	2b65      	cmp	r3, #101	; 0x65
 80060f0:	d07a      	beq.n	80061e8 <_scanf_float+0x1f0>
 80060f2:	d818      	bhi.n	8006126 <_scanf_float+0x12e>
 80060f4:	2b54      	cmp	r3, #84	; 0x54
 80060f6:	d066      	beq.n	80061c6 <_scanf_float+0x1ce>
 80060f8:	d811      	bhi.n	800611e <_scanf_float+0x126>
 80060fa:	2b4e      	cmp	r3, #78	; 0x4e
 80060fc:	d1b5      	bne.n	800606a <_scanf_float+0x72>
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d146      	bne.n	8006190 <_scanf_float+0x198>
 8006102:	f1b9 0f00 	cmp.w	r9, #0
 8006106:	d145      	bne.n	8006194 <_scanf_float+0x19c>
 8006108:	6821      	ldr	r1, [r4, #0]
 800610a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800610e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006112:	d13f      	bne.n	8006194 <_scanf_float+0x19c>
 8006114:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006118:	6021      	str	r1, [r4, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	e02e      	b.n	800617c <_scanf_float+0x184>
 800611e:	2b59      	cmp	r3, #89	; 0x59
 8006120:	d01e      	beq.n	8006160 <_scanf_float+0x168>
 8006122:	2b61      	cmp	r3, #97	; 0x61
 8006124:	e7de      	b.n	80060e4 <_scanf_float+0xec>
 8006126:	2b6e      	cmp	r3, #110	; 0x6e
 8006128:	d0e9      	beq.n	80060fe <_scanf_float+0x106>
 800612a:	d815      	bhi.n	8006158 <_scanf_float+0x160>
 800612c:	2b66      	cmp	r3, #102	; 0x66
 800612e:	d043      	beq.n	80061b8 <_scanf_float+0x1c0>
 8006130:	2b69      	cmp	r3, #105	; 0x69
 8006132:	d19a      	bne.n	800606a <_scanf_float+0x72>
 8006134:	f1bb 0f00 	cmp.w	fp, #0
 8006138:	d138      	bne.n	80061ac <_scanf_float+0x1b4>
 800613a:	f1b9 0f00 	cmp.w	r9, #0
 800613e:	d197      	bne.n	8006070 <_scanf_float+0x78>
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006146:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800614a:	d195      	bne.n	8006078 <_scanf_float+0x80>
 800614c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006150:	6021      	str	r1, [r4, #0]
 8006152:	f04f 0b01 	mov.w	fp, #1
 8006156:	e011      	b.n	800617c <_scanf_float+0x184>
 8006158:	2b74      	cmp	r3, #116	; 0x74
 800615a:	d034      	beq.n	80061c6 <_scanf_float+0x1ce>
 800615c:	2b79      	cmp	r3, #121	; 0x79
 800615e:	d184      	bne.n	800606a <_scanf_float+0x72>
 8006160:	f1bb 0f07 	cmp.w	fp, #7
 8006164:	d181      	bne.n	800606a <_scanf_float+0x72>
 8006166:	f04f 0b08 	mov.w	fp, #8
 800616a:	e007      	b.n	800617c <_scanf_float+0x184>
 800616c:	eb12 0f0b 	cmn.w	r2, fp
 8006170:	f47f af7b 	bne.w	800606a <_scanf_float+0x72>
 8006174:	6821      	ldr	r1, [r4, #0]
 8006176:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800617a:	6021      	str	r1, [r4, #0]
 800617c:	702b      	strb	r3, [r5, #0]
 800617e:	3501      	adds	r5, #1
 8006180:	e79a      	b.n	80060b8 <_scanf_float+0xc0>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	0608      	lsls	r0, r1, #24
 8006186:	f57f af70 	bpl.w	800606a <_scanf_float+0x72>
 800618a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800618e:	e7f4      	b.n	800617a <_scanf_float+0x182>
 8006190:	2a02      	cmp	r2, #2
 8006192:	d047      	beq.n	8006224 <_scanf_float+0x22c>
 8006194:	f1bb 0f01 	cmp.w	fp, #1
 8006198:	d003      	beq.n	80061a2 <_scanf_float+0x1aa>
 800619a:	f1bb 0f04 	cmp.w	fp, #4
 800619e:	f47f af64 	bne.w	800606a <_scanf_float+0x72>
 80061a2:	f10b 0b01 	add.w	fp, fp, #1
 80061a6:	fa5f fb8b 	uxtb.w	fp, fp
 80061aa:	e7e7      	b.n	800617c <_scanf_float+0x184>
 80061ac:	f1bb 0f03 	cmp.w	fp, #3
 80061b0:	d0f7      	beq.n	80061a2 <_scanf_float+0x1aa>
 80061b2:	f1bb 0f05 	cmp.w	fp, #5
 80061b6:	e7f2      	b.n	800619e <_scanf_float+0x1a6>
 80061b8:	f1bb 0f02 	cmp.w	fp, #2
 80061bc:	f47f af55 	bne.w	800606a <_scanf_float+0x72>
 80061c0:	f04f 0b03 	mov.w	fp, #3
 80061c4:	e7da      	b.n	800617c <_scanf_float+0x184>
 80061c6:	f1bb 0f06 	cmp.w	fp, #6
 80061ca:	f47f af4e 	bne.w	800606a <_scanf_float+0x72>
 80061ce:	f04f 0b07 	mov.w	fp, #7
 80061d2:	e7d3      	b.n	800617c <_scanf_float+0x184>
 80061d4:	6821      	ldr	r1, [r4, #0]
 80061d6:	0588      	lsls	r0, r1, #22
 80061d8:	f57f af47 	bpl.w	800606a <_scanf_float+0x72>
 80061dc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80061e0:	6021      	str	r1, [r4, #0]
 80061e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80061e6:	e7c9      	b.n	800617c <_scanf_float+0x184>
 80061e8:	6821      	ldr	r1, [r4, #0]
 80061ea:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80061ee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80061f2:	d006      	beq.n	8006202 <_scanf_float+0x20a>
 80061f4:	0548      	lsls	r0, r1, #21
 80061f6:	f57f af38 	bpl.w	800606a <_scanf_float+0x72>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	f43f af3b 	beq.w	8006078 <_scanf_float+0x80>
 8006202:	0588      	lsls	r0, r1, #22
 8006204:	bf58      	it	pl
 8006206:	9802      	ldrpl	r0, [sp, #8]
 8006208:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800620c:	bf58      	it	pl
 800620e:	eba9 0000 	subpl.w	r0, r9, r0
 8006212:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006216:	bf58      	it	pl
 8006218:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	f04f 0900 	mov.w	r9, #0
 8006222:	e7ab      	b.n	800617c <_scanf_float+0x184>
 8006224:	2203      	movs	r2, #3
 8006226:	e7a9      	b.n	800617c <_scanf_float+0x184>
 8006228:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800622c:	4631      	mov	r1, r6
 800622e:	4638      	mov	r0, r7
 8006230:	9205      	str	r2, [sp, #20]
 8006232:	4798      	blx	r3
 8006234:	9a05      	ldr	r2, [sp, #20]
 8006236:	2800      	cmp	r0, #0
 8006238:	f43f af04 	beq.w	8006044 <_scanf_float+0x4c>
 800623c:	e715      	b.n	800606a <_scanf_float+0x72>
 800623e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006242:	4632      	mov	r2, r6
 8006244:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006248:	4638      	mov	r0, r7
 800624a:	4798      	blx	r3
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	3b01      	subs	r3, #1
 8006250:	6123      	str	r3, [r4, #16]
 8006252:	e715      	b.n	8006080 <_scanf_float+0x88>
 8006254:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006258:	2b06      	cmp	r3, #6
 800625a:	d80a      	bhi.n	8006272 <_scanf_float+0x27a>
 800625c:	f1bb 0f02 	cmp.w	fp, #2
 8006260:	d967      	bls.n	8006332 <_scanf_float+0x33a>
 8006262:	f1ab 0b03 	sub.w	fp, fp, #3
 8006266:	fa5f fb8b 	uxtb.w	fp, fp
 800626a:	eba5 0b0b 	sub.w	fp, r5, fp
 800626e:	455d      	cmp	r5, fp
 8006270:	d14a      	bne.n	8006308 <_scanf_float+0x310>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	05da      	lsls	r2, r3, #23
 8006276:	d51f      	bpl.n	80062b8 <_scanf_float+0x2c0>
 8006278:	055b      	lsls	r3, r3, #21
 800627a:	d467      	bmi.n	800634c <_scanf_float+0x354>
 800627c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	2965      	cmp	r1, #101	; 0x65
 8006284:	f103 33ff 	add.w	r3, r3, #4294967295
 8006288:	f105 3bff 	add.w	fp, r5, #4294967295
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	d00d      	beq.n	80062ac <_scanf_float+0x2b4>
 8006290:	2945      	cmp	r1, #69	; 0x45
 8006292:	d00b      	beq.n	80062ac <_scanf_float+0x2b4>
 8006294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006298:	4632      	mov	r2, r6
 800629a:	4638      	mov	r0, r7
 800629c:	4798      	blx	r3
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	f1a5 0b02 	sub.w	fp, r5, #2
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062b0:	4632      	mov	r2, r6
 80062b2:	4638      	mov	r0, r7
 80062b4:	4798      	blx	r3
 80062b6:	465d      	mov	r5, fp
 80062b8:	6826      	ldr	r6, [r4, #0]
 80062ba:	f016 0610 	ands.w	r6, r6, #16
 80062be:	d176      	bne.n	80063ae <_scanf_float+0x3b6>
 80062c0:	702e      	strb	r6, [r5, #0]
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d141      	bne.n	8006352 <_scanf_float+0x35a>
 80062ce:	9b02      	ldr	r3, [sp, #8]
 80062d0:	eba9 0303 	sub.w	r3, r9, r3
 80062d4:	425a      	negs	r2, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d148      	bne.n	800636c <_scanf_float+0x374>
 80062da:	4641      	mov	r1, r8
 80062dc:	2200      	movs	r2, #0
 80062de:	4638      	mov	r0, r7
 80062e0:	f000 fec2 	bl	8007068 <_strtod_r>
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	4680      	mov	r8, r0
 80062e8:	f015 0f02 	tst.w	r5, #2
 80062ec:	4689      	mov	r9, r1
 80062ee:	f8da 3000 	ldr.w	r3, [sl]
 80062f2:	d046      	beq.n	8006382 <_scanf_float+0x38a>
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	f8ca 2000 	str.w	r2, [sl]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	e9c3 8900 	strd	r8, r9, [r3]
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	e6bf      	b.n	8006088 <_scanf_float+0x90>
 8006308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800630c:	4632      	mov	r2, r6
 800630e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006312:	4638      	mov	r0, r7
 8006314:	4798      	blx	r3
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	3b01      	subs	r3, #1
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	e7a7      	b.n	800626e <_scanf_float+0x276>
 800631e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006322:	4632      	mov	r2, r6
 8006324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006328:	4638      	mov	r0, r7
 800632a:	4798      	blx	r3
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	3b01      	subs	r3, #1
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	4545      	cmp	r5, r8
 8006334:	d8f3      	bhi.n	800631e <_scanf_float+0x326>
 8006336:	e6a6      	b.n	8006086 <_scanf_float+0x8e>
 8006338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800633c:	4632      	mov	r2, r6
 800633e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006342:	4638      	mov	r0, r7
 8006344:	4798      	blx	r3
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	4545      	cmp	r5, r8
 800634e:	d8f3      	bhi.n	8006338 <_scanf_float+0x340>
 8006350:	e699      	b.n	8006086 <_scanf_float+0x8e>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0c0      	beq.n	80062da <_scanf_float+0x2e2>
 8006358:	9904      	ldr	r1, [sp, #16]
 800635a:	230a      	movs	r3, #10
 800635c:	4632      	mov	r2, r6
 800635e:	3101      	adds	r1, #1
 8006360:	4638      	mov	r0, r7
 8006362:	f000 ff0d 	bl	8007180 <_strtol_r>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	9d04      	ldr	r5, [sp, #16]
 800636a:	1ac2      	subs	r2, r0, r3
 800636c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006370:	429d      	cmp	r5, r3
 8006372:	bf28      	it	cs
 8006374:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <_scanf_float+0x3bc>)
 800637a:	4628      	mov	r0, r5
 800637c:	f000 f830 	bl	80063e0 <siprintf>
 8006380:	e7ab      	b.n	80062da <_scanf_float+0x2e2>
 8006382:	1d1f      	adds	r7, r3, #4
 8006384:	f015 0504 	ands.w	r5, r5, #4
 8006388:	f8ca 7000 	str.w	r7, [sl]
 800638c:	d1b5      	bne.n	80062fa <_scanf_float+0x302>
 800638e:	681f      	ldr	r7, [r3, #0]
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	f7fa fb3a 	bl	8000a0c <__aeabi_dcmpun>
 8006398:	b120      	cbz	r0, 80063a4 <_scanf_float+0x3ac>
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f81c 	bl	80063d8 <nanf>
 80063a0:	6038      	str	r0, [r7, #0]
 80063a2:	e7ad      	b.n	8006300 <_scanf_float+0x308>
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fb8e 	bl	8000ac8 <__aeabi_d2f>
 80063ac:	e7f8      	b.n	80063a0 <_scanf_float+0x3a8>
 80063ae:	2600      	movs	r6, #0
 80063b0:	e66a      	b.n	8006088 <_scanf_float+0x90>
 80063b2:	bf00      	nop
 80063b4:	080090e8 	.word	0x080090e8

080063b8 <_sbrk_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	2300      	movs	r3, #0
 80063bc:	4c05      	ldr	r4, [pc, #20]	; (80063d4 <_sbrk_r+0x1c>)
 80063be:	4605      	mov	r5, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	f7fb f9d0 	bl	8001768 <_sbrk>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_sbrk_r+0x1a>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_sbrk_r+0x1a>
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	2000035c 	.word	0x2000035c

080063d8 <nanf>:
 80063d8:	4800      	ldr	r0, [pc, #0]	; (80063dc <nanf+0x4>)
 80063da:	4770      	bx	lr
 80063dc:	7fc00000 	.word	0x7fc00000

080063e0 <siprintf>:
 80063e0:	b40e      	push	{r1, r2, r3}
 80063e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e6:	b500      	push	{lr}
 80063e8:	b09c      	sub	sp, #112	; 0x70
 80063ea:	ab1d      	add	r3, sp, #116	; 0x74
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	9107      	str	r1, [sp, #28]
 80063f2:	9104      	str	r1, [sp, #16]
 80063f4:	4808      	ldr	r0, [pc, #32]	; (8006418 <siprintf+0x38>)
 80063f6:	4909      	ldr	r1, [pc, #36]	; (800641c <siprintf+0x3c>)
 80063f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	a902      	add	r1, sp, #8
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f002 fcce 	bl	8008da4 <_svfiprintf_r>
 8006408:	2200      	movs	r2, #0
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	b01c      	add	sp, #112	; 0x70
 8006410:	f85d eb04 	ldr.w	lr, [sp], #4
 8006414:	b003      	add	sp, #12
 8006416:	4770      	bx	lr
 8006418:	2000000c 	.word	0x2000000c
 800641c:	ffff0208 	.word	0xffff0208

08006420 <sulp>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	460f      	mov	r7, r1
 8006426:	4690      	mov	r8, r2
 8006428:	f002 fb26 	bl	8008a78 <__ulp>
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	f1b8 0f00 	cmp.w	r8, #0
 8006434:	d011      	beq.n	800645a <sulp+0x3a>
 8006436:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800643a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800643e:	2b00      	cmp	r3, #0
 8006440:	dd0b      	ble.n	800645a <sulp+0x3a>
 8006442:	2400      	movs	r4, #0
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800644a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f841 	bl	80004d8 <__aeabi_dmul>
 8006456:	4604      	mov	r4, r0
 8006458:	460d      	mov	r5, r1
 800645a:	4620      	mov	r0, r4
 800645c:	4629      	mov	r1, r5
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006462:	0000      	movs	r0, r0
 8006464:	0000      	movs	r0, r0
	...

08006468 <_strtod_l>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	461f      	mov	r7, r3
 800646e:	2300      	movs	r3, #0
 8006470:	b0a1      	sub	sp, #132	; 0x84
 8006472:	4683      	mov	fp, r0
 8006474:	4638      	mov	r0, r7
 8006476:	460e      	mov	r6, r1
 8006478:	9217      	str	r2, [sp, #92]	; 0x5c
 800647a:	931c      	str	r3, [sp, #112]	; 0x70
 800647c:	f001 ffff 	bl	800847e <__localeconv_l>
 8006480:	4680      	mov	r8, r0
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	f7f9 fe64 	bl	8000150 <strlen>
 8006488:	f04f 0900 	mov.w	r9, #0
 800648c:	4604      	mov	r4, r0
 800648e:	f04f 0a00 	mov.w	sl, #0
 8006492:	961b      	str	r6, [sp, #108]	; 0x6c
 8006494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	2a0d      	cmp	r2, #13
 800649a:	d832      	bhi.n	8006502 <_strtod_l+0x9a>
 800649c:	2a09      	cmp	r2, #9
 800649e:	d236      	bcs.n	800650e <_strtod_l+0xa6>
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d03e      	beq.n	8006522 <_strtod_l+0xba>
 80064a4:	2300      	movs	r3, #0
 80064a6:	930d      	str	r3, [sp, #52]	; 0x34
 80064a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80064aa:	782b      	ldrb	r3, [r5, #0]
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	f040 80ac 	bne.w	800660a <_strtod_l+0x1a2>
 80064b2:	786b      	ldrb	r3, [r5, #1]
 80064b4:	2b58      	cmp	r3, #88	; 0x58
 80064b6:	d001      	beq.n	80064bc <_strtod_l+0x54>
 80064b8:	2b78      	cmp	r3, #120	; 0x78
 80064ba:	d167      	bne.n	800658c <_strtod_l+0x124>
 80064bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064be:	9702      	str	r7, [sp, #8]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	ab1c      	add	r3, sp, #112	; 0x70
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	4a89      	ldr	r2, [pc, #548]	; (80066ec <_strtod_l+0x284>)
 80064c8:	ab1d      	add	r3, sp, #116	; 0x74
 80064ca:	a91b      	add	r1, sp, #108	; 0x6c
 80064cc:	4658      	mov	r0, fp
 80064ce:	f001 fcfb 	bl	8007ec8 <__gethex>
 80064d2:	f010 0407 	ands.w	r4, r0, #7
 80064d6:	4606      	mov	r6, r0
 80064d8:	d005      	beq.n	80064e6 <_strtod_l+0x7e>
 80064da:	2c06      	cmp	r4, #6
 80064dc:	d12b      	bne.n	8006536 <_strtod_l+0xce>
 80064de:	2300      	movs	r3, #0
 80064e0:	3501      	adds	r5, #1
 80064e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80064e4:	930d      	str	r3, [sp, #52]	; 0x34
 80064e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 85a6 	bne.w	800703a <_strtod_l+0xbd2>
 80064ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f0:	b1e3      	cbz	r3, 800652c <_strtod_l+0xc4>
 80064f2:	464a      	mov	r2, r9
 80064f4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80064f8:	4610      	mov	r0, r2
 80064fa:	4619      	mov	r1, r3
 80064fc:	b021      	add	sp, #132	; 0x84
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	2a2b      	cmp	r2, #43	; 0x2b
 8006504:	d015      	beq.n	8006532 <_strtod_l+0xca>
 8006506:	2a2d      	cmp	r2, #45	; 0x2d
 8006508:	d004      	beq.n	8006514 <_strtod_l+0xac>
 800650a:	2a20      	cmp	r2, #32
 800650c:	d1ca      	bne.n	80064a4 <_strtod_l+0x3c>
 800650e:	3301      	adds	r3, #1
 8006510:	931b      	str	r3, [sp, #108]	; 0x6c
 8006512:	e7bf      	b.n	8006494 <_strtod_l+0x2c>
 8006514:	2201      	movs	r2, #1
 8006516:	920d      	str	r2, [sp, #52]	; 0x34
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	921b      	str	r2, [sp, #108]	; 0x6c
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1c2      	bne.n	80064a8 <_strtod_l+0x40>
 8006522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006524:	961b      	str	r6, [sp, #108]	; 0x6c
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 8585 	bne.w	8007036 <_strtod_l+0xbce>
 800652c:	464a      	mov	r2, r9
 800652e:	4653      	mov	r3, sl
 8006530:	e7e2      	b.n	80064f8 <_strtod_l+0x90>
 8006532:	2200      	movs	r2, #0
 8006534:	e7ef      	b.n	8006516 <_strtod_l+0xae>
 8006536:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006538:	b13a      	cbz	r2, 800654a <_strtod_l+0xe2>
 800653a:	2135      	movs	r1, #53	; 0x35
 800653c:	a81e      	add	r0, sp, #120	; 0x78
 800653e:	f002 fb8e 	bl	8008c5e <__copybits>
 8006542:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006544:	4658      	mov	r0, fp
 8006546:	f002 f801 	bl	800854c <_Bfree>
 800654a:	3c01      	subs	r4, #1
 800654c:	2c04      	cmp	r4, #4
 800654e:	d806      	bhi.n	800655e <_strtod_l+0xf6>
 8006550:	e8df f004 	tbb	[pc, r4]
 8006554:	1714030a 	.word	0x1714030a
 8006558:	0a          	.byte	0x0a
 8006559:	00          	.byte	0x00
 800655a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800655e:	0731      	lsls	r1, r6, #28
 8006560:	d5c1      	bpl.n	80064e6 <_strtod_l+0x7e>
 8006562:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006566:	e7be      	b.n	80064e6 <_strtod_l+0x7e>
 8006568:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800656a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800656e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006576:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800657a:	e7f0      	b.n	800655e <_strtod_l+0xf6>
 800657c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80066f0 <_strtod_l+0x288>
 8006580:	e7ed      	b.n	800655e <_strtod_l+0xf6>
 8006582:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006586:	f04f 39ff 	mov.w	r9, #4294967295
 800658a:	e7e8      	b.n	800655e <_strtod_l+0xf6>
 800658c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	921b      	str	r2, [sp, #108]	; 0x6c
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d0f9      	beq.n	800658c <_strtod_l+0x124>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0a4      	beq.n	80064e6 <_strtod_l+0x7e>
 800659c:	2301      	movs	r3, #1
 800659e:	2500      	movs	r5, #0
 80065a0:	220a      	movs	r2, #10
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065a6:	9506      	str	r5, [sp, #24]
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	9504      	str	r5, [sp, #16]
 80065ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80065ae:	7807      	ldrb	r7, [r0, #0]
 80065b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80065b4:	b2d9      	uxtb	r1, r3
 80065b6:	2909      	cmp	r1, #9
 80065b8:	d929      	bls.n	800660e <_strtod_l+0x1a6>
 80065ba:	4622      	mov	r2, r4
 80065bc:	f8d8 1000 	ldr.w	r1, [r8]
 80065c0:	f002 fce8 	bl	8008f94 <strncmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d031      	beq.n	800662c <_strtod_l+0x1c4>
 80065c8:	2000      	movs	r0, #0
 80065ca:	463b      	mov	r3, r7
 80065cc:	4602      	mov	r2, r0
 80065ce:	9c04      	ldr	r4, [sp, #16]
 80065d0:	9005      	str	r0, [sp, #20]
 80065d2:	2b65      	cmp	r3, #101	; 0x65
 80065d4:	d001      	beq.n	80065da <_strtod_l+0x172>
 80065d6:	2b45      	cmp	r3, #69	; 0x45
 80065d8:	d114      	bne.n	8006604 <_strtod_l+0x19c>
 80065da:	b924      	cbnz	r4, 80065e6 <_strtod_l+0x17e>
 80065dc:	b910      	cbnz	r0, 80065e4 <_strtod_l+0x17c>
 80065de:	9b07      	ldr	r3, [sp, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d09e      	beq.n	8006522 <_strtod_l+0xba>
 80065e4:	2400      	movs	r4, #0
 80065e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80065e8:	1c73      	adds	r3, r6, #1
 80065ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80065ec:	7873      	ldrb	r3, [r6, #1]
 80065ee:	2b2b      	cmp	r3, #43	; 0x2b
 80065f0:	d078      	beq.n	80066e4 <_strtod_l+0x27c>
 80065f2:	2b2d      	cmp	r3, #45	; 0x2d
 80065f4:	d070      	beq.n	80066d8 <_strtod_l+0x270>
 80065f6:	f04f 0c00 	mov.w	ip, #0
 80065fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80065fe:	2f09      	cmp	r7, #9
 8006600:	d97c      	bls.n	80066fc <_strtod_l+0x294>
 8006602:	961b      	str	r6, [sp, #108]	; 0x6c
 8006604:	f04f 0e00 	mov.w	lr, #0
 8006608:	e09a      	b.n	8006740 <_strtod_l+0x2d8>
 800660a:	2300      	movs	r3, #0
 800660c:	e7c7      	b.n	800659e <_strtod_l+0x136>
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	3001      	adds	r0, #1
 8006612:	2908      	cmp	r1, #8
 8006614:	bfd7      	itett	le
 8006616:	9906      	ldrle	r1, [sp, #24]
 8006618:	fb02 3505 	mlagt	r5, r2, r5, r3
 800661c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006620:	9306      	strle	r3, [sp, #24]
 8006622:	9b04      	ldr	r3, [sp, #16]
 8006624:	901b      	str	r0, [sp, #108]	; 0x6c
 8006626:	3301      	adds	r3, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	e7bf      	b.n	80065ac <_strtod_l+0x144>
 800662c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800662e:	191a      	adds	r2, r3, r4
 8006630:	921b      	str	r2, [sp, #108]	; 0x6c
 8006632:	9a04      	ldr	r2, [sp, #16]
 8006634:	5d1b      	ldrb	r3, [r3, r4]
 8006636:	2a00      	cmp	r2, #0
 8006638:	d037      	beq.n	80066aa <_strtod_l+0x242>
 800663a:	4602      	mov	r2, r0
 800663c:	9c04      	ldr	r4, [sp, #16]
 800663e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006642:	2909      	cmp	r1, #9
 8006644:	d913      	bls.n	800666e <_strtod_l+0x206>
 8006646:	2101      	movs	r1, #1
 8006648:	9105      	str	r1, [sp, #20]
 800664a:	e7c2      	b.n	80065d2 <_strtod_l+0x16a>
 800664c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800664e:	3001      	adds	r0, #1
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	921b      	str	r2, [sp, #108]	; 0x6c
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b30      	cmp	r3, #48	; 0x30
 8006658:	d0f8      	beq.n	800664c <_strtod_l+0x1e4>
 800665a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800665e:	2a08      	cmp	r2, #8
 8006660:	f200 84f0 	bhi.w	8007044 <_strtod_l+0xbdc>
 8006664:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006666:	9208      	str	r2, [sp, #32]
 8006668:	4602      	mov	r2, r0
 800666a:	2000      	movs	r0, #0
 800666c:	4604      	mov	r4, r0
 800666e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006672:	f100 0101 	add.w	r1, r0, #1
 8006676:	d012      	beq.n	800669e <_strtod_l+0x236>
 8006678:	440a      	add	r2, r1
 800667a:	270a      	movs	r7, #10
 800667c:	4621      	mov	r1, r4
 800667e:	eb00 0c04 	add.w	ip, r0, r4
 8006682:	458c      	cmp	ip, r1
 8006684:	d113      	bne.n	80066ae <_strtod_l+0x246>
 8006686:	1821      	adds	r1, r4, r0
 8006688:	2908      	cmp	r1, #8
 800668a:	f104 0401 	add.w	r4, r4, #1
 800668e:	4404      	add	r4, r0
 8006690:	dc19      	bgt.n	80066c6 <_strtod_l+0x25e>
 8006692:	210a      	movs	r1, #10
 8006694:	9b06      	ldr	r3, [sp, #24]
 8006696:	fb01 e303 	mla	r3, r1, r3, lr
 800669a:	9306      	str	r3, [sp, #24]
 800669c:	2100      	movs	r1, #0
 800669e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066a0:	1c58      	adds	r0, r3, #1
 80066a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	4608      	mov	r0, r1
 80066a8:	e7c9      	b.n	800663e <_strtod_l+0x1d6>
 80066aa:	9804      	ldr	r0, [sp, #16]
 80066ac:	e7d3      	b.n	8006656 <_strtod_l+0x1ee>
 80066ae:	2908      	cmp	r1, #8
 80066b0:	f101 0101 	add.w	r1, r1, #1
 80066b4:	dc03      	bgt.n	80066be <_strtod_l+0x256>
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	437b      	muls	r3, r7
 80066ba:	9306      	str	r3, [sp, #24]
 80066bc:	e7e1      	b.n	8006682 <_strtod_l+0x21a>
 80066be:	2910      	cmp	r1, #16
 80066c0:	bfd8      	it	le
 80066c2:	437d      	mulle	r5, r7
 80066c4:	e7dd      	b.n	8006682 <_strtod_l+0x21a>
 80066c6:	2c10      	cmp	r4, #16
 80066c8:	bfdc      	itt	le
 80066ca:	210a      	movle	r1, #10
 80066cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80066d0:	e7e4      	b.n	800669c <_strtod_l+0x234>
 80066d2:	2301      	movs	r3, #1
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	e781      	b.n	80065dc <_strtod_l+0x174>
 80066d8:	f04f 0c01 	mov.w	ip, #1
 80066dc:	1cb3      	adds	r3, r6, #2
 80066de:	931b      	str	r3, [sp, #108]	; 0x6c
 80066e0:	78b3      	ldrb	r3, [r6, #2]
 80066e2:	e78a      	b.n	80065fa <_strtod_l+0x192>
 80066e4:	f04f 0c00 	mov.w	ip, #0
 80066e8:	e7f8      	b.n	80066dc <_strtod_l+0x274>
 80066ea:	bf00      	nop
 80066ec:	080090f0 	.word	0x080090f0
 80066f0:	7ff00000 	.word	0x7ff00000
 80066f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066f6:	1c5f      	adds	r7, r3, #1
 80066f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d0f9      	beq.n	80066f4 <_strtod_l+0x28c>
 8006700:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006704:	2f08      	cmp	r7, #8
 8006706:	f63f af7d 	bhi.w	8006604 <_strtod_l+0x19c>
 800670a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800670e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006714:	1c5f      	adds	r7, r3, #1
 8006716:	971b      	str	r7, [sp, #108]	; 0x6c
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800671e:	f1b8 0f09 	cmp.w	r8, #9
 8006722:	d937      	bls.n	8006794 <_strtod_l+0x32c>
 8006724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006726:	1a7f      	subs	r7, r7, r1
 8006728:	2f08      	cmp	r7, #8
 800672a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800672e:	dc37      	bgt.n	80067a0 <_strtod_l+0x338>
 8006730:	45be      	cmp	lr, r7
 8006732:	bfa8      	it	ge
 8006734:	46be      	movge	lr, r7
 8006736:	f1bc 0f00 	cmp.w	ip, #0
 800673a:	d001      	beq.n	8006740 <_strtod_l+0x2d8>
 800673c:	f1ce 0e00 	rsb	lr, lr, #0
 8006740:	2c00      	cmp	r4, #0
 8006742:	d151      	bne.n	80067e8 <_strtod_l+0x380>
 8006744:	2800      	cmp	r0, #0
 8006746:	f47f aece 	bne.w	80064e6 <_strtod_l+0x7e>
 800674a:	9a07      	ldr	r2, [sp, #28]
 800674c:	2a00      	cmp	r2, #0
 800674e:	f47f aeca 	bne.w	80064e6 <_strtod_l+0x7e>
 8006752:	9a05      	ldr	r2, [sp, #20]
 8006754:	2a00      	cmp	r2, #0
 8006756:	f47f aee4 	bne.w	8006522 <_strtod_l+0xba>
 800675a:	2b4e      	cmp	r3, #78	; 0x4e
 800675c:	d027      	beq.n	80067ae <_strtod_l+0x346>
 800675e:	dc21      	bgt.n	80067a4 <_strtod_l+0x33c>
 8006760:	2b49      	cmp	r3, #73	; 0x49
 8006762:	f47f aede 	bne.w	8006522 <_strtod_l+0xba>
 8006766:	49a4      	ldr	r1, [pc, #656]	; (80069f8 <_strtod_l+0x590>)
 8006768:	a81b      	add	r0, sp, #108	; 0x6c
 800676a:	f001 fde1 	bl	8008330 <__match>
 800676e:	2800      	cmp	r0, #0
 8006770:	f43f aed7 	beq.w	8006522 <_strtod_l+0xba>
 8006774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006776:	49a1      	ldr	r1, [pc, #644]	; (80069fc <_strtod_l+0x594>)
 8006778:	3b01      	subs	r3, #1
 800677a:	a81b      	add	r0, sp, #108	; 0x6c
 800677c:	931b      	str	r3, [sp, #108]	; 0x6c
 800677e:	f001 fdd7 	bl	8008330 <__match>
 8006782:	b910      	cbnz	r0, 800678a <_strtod_l+0x322>
 8006784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006786:	3301      	adds	r3, #1
 8006788:	931b      	str	r3, [sp, #108]	; 0x6c
 800678a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006a10 <_strtod_l+0x5a8>
 800678e:	f04f 0900 	mov.w	r9, #0
 8006792:	e6a8      	b.n	80064e6 <_strtod_l+0x7e>
 8006794:	210a      	movs	r1, #10
 8006796:	fb01 3e0e 	mla	lr, r1, lr, r3
 800679a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800679e:	e7b8      	b.n	8006712 <_strtod_l+0x2aa>
 80067a0:	46be      	mov	lr, r7
 80067a2:	e7c8      	b.n	8006736 <_strtod_l+0x2ce>
 80067a4:	2b69      	cmp	r3, #105	; 0x69
 80067a6:	d0de      	beq.n	8006766 <_strtod_l+0x2fe>
 80067a8:	2b6e      	cmp	r3, #110	; 0x6e
 80067aa:	f47f aeba 	bne.w	8006522 <_strtod_l+0xba>
 80067ae:	4994      	ldr	r1, [pc, #592]	; (8006a00 <_strtod_l+0x598>)
 80067b0:	a81b      	add	r0, sp, #108	; 0x6c
 80067b2:	f001 fdbd 	bl	8008330 <__match>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f43f aeb3 	beq.w	8006522 <_strtod_l+0xba>
 80067bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b28      	cmp	r3, #40	; 0x28
 80067c2:	d10e      	bne.n	80067e2 <_strtod_l+0x37a>
 80067c4:	aa1e      	add	r2, sp, #120	; 0x78
 80067c6:	498f      	ldr	r1, [pc, #572]	; (8006a04 <_strtod_l+0x59c>)
 80067c8:	a81b      	add	r0, sp, #108	; 0x6c
 80067ca:	f001 fdc5 	bl	8008358 <__hexnan>
 80067ce:	2805      	cmp	r0, #5
 80067d0:	d107      	bne.n	80067e2 <_strtod_l+0x37a>
 80067d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067d4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80067d8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80067dc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80067e0:	e681      	b.n	80064e6 <_strtod_l+0x7e>
 80067e2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006a18 <_strtod_l+0x5b0>
 80067e6:	e7d2      	b.n	800678e <_strtod_l+0x326>
 80067e8:	ebae 0302 	sub.w	r3, lr, r2
 80067ec:	9307      	str	r3, [sp, #28]
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	9806      	ldr	r0, [sp, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf08      	it	eq
 80067f6:	4623      	moveq	r3, r4
 80067f8:	2c10      	cmp	r4, #16
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	46a0      	mov	r8, r4
 80067fe:	bfa8      	it	ge
 8006800:	f04f 0810 	movge.w	r8, #16
 8006804:	f7f9 fdee 	bl	80003e4 <__aeabi_ui2d>
 8006808:	2c09      	cmp	r4, #9
 800680a:	4681      	mov	r9, r0
 800680c:	468a      	mov	sl, r1
 800680e:	dc13      	bgt.n	8006838 <_strtod_l+0x3d0>
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f43f ae67 	beq.w	80064e6 <_strtod_l+0x7e>
 8006818:	9b07      	ldr	r3, [sp, #28]
 800681a:	dd7e      	ble.n	800691a <_strtod_l+0x4b2>
 800681c:	2b16      	cmp	r3, #22
 800681e:	dc65      	bgt.n	80068ec <_strtod_l+0x484>
 8006820:	4a79      	ldr	r2, [pc, #484]	; (8006a08 <_strtod_l+0x5a0>)
 8006822:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006826:	464a      	mov	r2, r9
 8006828:	e9de 0100 	ldrd	r0, r1, [lr]
 800682c:	4653      	mov	r3, sl
 800682e:	f7f9 fe53 	bl	80004d8 <__aeabi_dmul>
 8006832:	4681      	mov	r9, r0
 8006834:	468a      	mov	sl, r1
 8006836:	e656      	b.n	80064e6 <_strtod_l+0x7e>
 8006838:	4b73      	ldr	r3, [pc, #460]	; (8006a08 <_strtod_l+0x5a0>)
 800683a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800683e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	4606      	mov	r6, r0
 8006848:	4628      	mov	r0, r5
 800684a:	460f      	mov	r7, r1
 800684c:	f7f9 fdca 	bl	80003e4 <__aeabi_ui2d>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	f7f9 fc88 	bl	800016c <__adddf3>
 800685c:	2c0f      	cmp	r4, #15
 800685e:	4681      	mov	r9, r0
 8006860:	468a      	mov	sl, r1
 8006862:	ddd5      	ble.n	8006810 <_strtod_l+0x3a8>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	eba4 0808 	sub.w	r8, r4, r8
 800686a:	4498      	add	r8, r3
 800686c:	f1b8 0f00 	cmp.w	r8, #0
 8006870:	f340 809a 	ble.w	80069a8 <_strtod_l+0x540>
 8006874:	f018 030f 	ands.w	r3, r8, #15
 8006878:	d00a      	beq.n	8006890 <_strtod_l+0x428>
 800687a:	4963      	ldr	r1, [pc, #396]	; (8006a08 <_strtod_l+0x5a0>)
 800687c:	464a      	mov	r2, r9
 800687e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006886:	4653      	mov	r3, sl
 8006888:	f7f9 fe26 	bl	80004d8 <__aeabi_dmul>
 800688c:	4681      	mov	r9, r0
 800688e:	468a      	mov	sl, r1
 8006890:	f038 080f 	bics.w	r8, r8, #15
 8006894:	d077      	beq.n	8006986 <_strtod_l+0x51e>
 8006896:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800689a:	dd4b      	ble.n	8006934 <_strtod_l+0x4cc>
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80068a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80068a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80068ac:	2322      	movs	r3, #34	; 0x22
 80068ae:	f04f 0900 	mov.w	r9, #0
 80068b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006a10 <_strtod_l+0x5a8>
 80068b6:	f8cb 3000 	str.w	r3, [fp]
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f43f ae12 	beq.w	80064e6 <_strtod_l+0x7e>
 80068c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068c4:	4658      	mov	r0, fp
 80068c6:	f001 fe41 	bl	800854c <_Bfree>
 80068ca:	9906      	ldr	r1, [sp, #24]
 80068cc:	4658      	mov	r0, fp
 80068ce:	f001 fe3d 	bl	800854c <_Bfree>
 80068d2:	9904      	ldr	r1, [sp, #16]
 80068d4:	4658      	mov	r0, fp
 80068d6:	f001 fe39 	bl	800854c <_Bfree>
 80068da:	9908      	ldr	r1, [sp, #32]
 80068dc:	4658      	mov	r0, fp
 80068de:	f001 fe35 	bl	800854c <_Bfree>
 80068e2:	4641      	mov	r1, r8
 80068e4:	4658      	mov	r0, fp
 80068e6:	f001 fe31 	bl	800854c <_Bfree>
 80068ea:	e5fc      	b.n	80064e6 <_strtod_l+0x7e>
 80068ec:	9a07      	ldr	r2, [sp, #28]
 80068ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068f2:	4293      	cmp	r3, r2
 80068f4:	dbb6      	blt.n	8006864 <_strtod_l+0x3fc>
 80068f6:	4d44      	ldr	r5, [pc, #272]	; (8006a08 <_strtod_l+0x5a0>)
 80068f8:	f1c4 040f 	rsb	r4, r4, #15
 80068fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006900:	464a      	mov	r2, r9
 8006902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006906:	4653      	mov	r3, sl
 8006908:	f7f9 fde6 	bl	80004d8 <__aeabi_dmul>
 800690c:	9b07      	ldr	r3, [sp, #28]
 800690e:	1b1c      	subs	r4, r3, r4
 8006910:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006914:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006918:	e789      	b.n	800682e <_strtod_l+0x3c6>
 800691a:	f113 0f16 	cmn.w	r3, #22
 800691e:	dba1      	blt.n	8006864 <_strtod_l+0x3fc>
 8006920:	4a39      	ldr	r2, [pc, #228]	; (8006a08 <_strtod_l+0x5a0>)
 8006922:	4648      	mov	r0, r9
 8006924:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006928:	e9d2 2300 	ldrd	r2, r3, [r2]
 800692c:	4651      	mov	r1, sl
 800692e:	f7f9 fefd 	bl	800072c <__aeabi_ddiv>
 8006932:	e77e      	b.n	8006832 <_strtod_l+0x3ca>
 8006934:	2300      	movs	r3, #0
 8006936:	4648      	mov	r0, r9
 8006938:	4651      	mov	r1, sl
 800693a:	461d      	mov	r5, r3
 800693c:	4e33      	ldr	r6, [pc, #204]	; (8006a0c <_strtod_l+0x5a4>)
 800693e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006942:	f1b8 0f01 	cmp.w	r8, #1
 8006946:	dc21      	bgt.n	800698c <_strtod_l+0x524>
 8006948:	b10b      	cbz	r3, 800694e <_strtod_l+0x4e6>
 800694a:	4681      	mov	r9, r0
 800694c:	468a      	mov	sl, r1
 800694e:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <_strtod_l+0x5a4>)
 8006950:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006954:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006958:	464a      	mov	r2, r9
 800695a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800695e:	4653      	mov	r3, sl
 8006960:	f7f9 fdba 	bl	80004d8 <__aeabi_dmul>
 8006964:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <_strtod_l+0x5a8>)
 8006966:	460a      	mov	r2, r1
 8006968:	400b      	ands	r3, r1
 800696a:	492a      	ldr	r1, [pc, #168]	; (8006a14 <_strtod_l+0x5ac>)
 800696c:	4681      	mov	r9, r0
 800696e:	428b      	cmp	r3, r1
 8006970:	d894      	bhi.n	800689c <_strtod_l+0x434>
 8006972:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006976:	428b      	cmp	r3, r1
 8006978:	bf86      	itte	hi
 800697a:	f04f 39ff 	movhi.w	r9, #4294967295
 800697e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8006a1c <_strtod_l+0x5b4>
 8006982:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006986:	2300      	movs	r3, #0
 8006988:	9305      	str	r3, [sp, #20]
 800698a:	e07b      	b.n	8006a84 <_strtod_l+0x61c>
 800698c:	f018 0f01 	tst.w	r8, #1
 8006990:	d006      	beq.n	80069a0 <_strtod_l+0x538>
 8006992:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f7f9 fd9d 	bl	80004d8 <__aeabi_dmul>
 800699e:	2301      	movs	r3, #1
 80069a0:	3501      	adds	r5, #1
 80069a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069a6:	e7cc      	b.n	8006942 <_strtod_l+0x4da>
 80069a8:	d0ed      	beq.n	8006986 <_strtod_l+0x51e>
 80069aa:	f1c8 0800 	rsb	r8, r8, #0
 80069ae:	f018 020f 	ands.w	r2, r8, #15
 80069b2:	d00a      	beq.n	80069ca <_strtod_l+0x562>
 80069b4:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <_strtod_l+0x5a0>)
 80069b6:	4648      	mov	r0, r9
 80069b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069bc:	4651      	mov	r1, sl
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 feb3 	bl	800072c <__aeabi_ddiv>
 80069c6:	4681      	mov	r9, r0
 80069c8:	468a      	mov	sl, r1
 80069ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069ce:	d0da      	beq.n	8006986 <_strtod_l+0x51e>
 80069d0:	f1b8 0f1f 	cmp.w	r8, #31
 80069d4:	dd24      	ble.n	8006a20 <_strtod_l+0x5b8>
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	f8cd 8010 	str.w	r8, [sp, #16]
 80069de:	f8cd 8020 	str.w	r8, [sp, #32]
 80069e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80069e6:	2322      	movs	r3, #34	; 0x22
 80069e8:	f04f 0900 	mov.w	r9, #0
 80069ec:	f04f 0a00 	mov.w	sl, #0
 80069f0:	f8cb 3000 	str.w	r3, [fp]
 80069f4:	e761      	b.n	80068ba <_strtod_l+0x452>
 80069f6:	bf00      	nop
 80069f8:	080090b9 	.word	0x080090b9
 80069fc:	08009143 	.word	0x08009143
 8006a00:	080090c1 	.word	0x080090c1
 8006a04:	08009104 	.word	0x08009104
 8006a08:	08009180 	.word	0x08009180
 8006a0c:	08009158 	.word	0x08009158
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	7ca00000 	.word	0x7ca00000
 8006a18:	fff80000 	.word	0xfff80000
 8006a1c:	7fefffff 	.word	0x7fefffff
 8006a20:	f018 0310 	ands.w	r3, r8, #16
 8006a24:	bf18      	it	ne
 8006a26:	236a      	movne	r3, #106	; 0x6a
 8006a28:	4648      	mov	r0, r9
 8006a2a:	9305      	str	r3, [sp, #20]
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4da1      	ldr	r5, [pc, #644]	; (8006cb8 <_strtod_l+0x850>)
 8006a32:	f1b8 0f00 	cmp.w	r8, #0
 8006a36:	f300 8113 	bgt.w	8006c60 <_strtod_l+0x7f8>
 8006a3a:	b10b      	cbz	r3, 8006a40 <_strtod_l+0x5d8>
 8006a3c:	4681      	mov	r9, r0
 8006a3e:	468a      	mov	sl, r1
 8006a40:	9b05      	ldr	r3, [sp, #20]
 8006a42:	b1bb      	cbz	r3, 8006a74 <_strtod_l+0x60c>
 8006a44:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006a48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	4651      	mov	r1, sl
 8006a50:	dd10      	ble.n	8006a74 <_strtod_l+0x60c>
 8006a52:	2b1f      	cmp	r3, #31
 8006a54:	f340 8110 	ble.w	8006c78 <_strtod_l+0x810>
 8006a58:	2b34      	cmp	r3, #52	; 0x34
 8006a5a:	bfd8      	it	le
 8006a5c:	f04f 32ff 	movle.w	r2, #4294967295
 8006a60:	f04f 0900 	mov.w	r9, #0
 8006a64:	bfcf      	iteee	gt
 8006a66:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8006a6a:	3b20      	suble	r3, #32
 8006a6c:	fa02 f303 	lslle.w	r3, r2, r3
 8006a70:	ea03 0a01 	andle.w	sl, r3, r1
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	4648      	mov	r0, r9
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	f7f9 ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d1a8      	bne.n	80069d6 <_strtod_l+0x56e>
 8006a84:	9b06      	ldr	r3, [sp, #24]
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	9908      	ldr	r1, [sp, #32]
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	4658      	mov	r0, fp
 8006a90:	f001 fdae 	bl	80085f0 <__s2b>
 8006a94:	9008      	str	r0, [sp, #32]
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f43f af00 	beq.w	800689c <_strtod_l+0x434>
 8006a9c:	9a07      	ldr	r2, [sp, #28]
 8006a9e:	9b07      	ldr	r3, [sp, #28]
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	f1c3 0300 	rsb	r3, r3, #0
 8006aa6:	bfa8      	it	ge
 8006aa8:	2300      	movge	r3, #0
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	930e      	str	r3, [sp, #56]	; 0x38
 8006ab0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ab4:	9316      	str	r3, [sp, #88]	; 0x58
 8006ab6:	f8cd 8010 	str.w	r8, [sp, #16]
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	4658      	mov	r0, fp
 8006abe:	6859      	ldr	r1, [r3, #4]
 8006ac0:	f001 fd10 	bl	80084e4 <_Balloc>
 8006ac4:	9006      	str	r0, [sp, #24]
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f aef0 	beq.w	80068ac <_strtod_l+0x444>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	300c      	adds	r0, #12
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	f103 010c 	add.w	r1, r3, #12
 8006ad6:	3202      	adds	r2, #2
 8006ad8:	0092      	lsls	r2, r2, #2
 8006ada:	f7fe fd83 	bl	80055e4 <memcpy>
 8006ade:	ab1e      	add	r3, sp, #120	; 0x78
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	464a      	mov	r2, r9
 8006ae8:	4653      	mov	r3, sl
 8006aea:	4658      	mov	r0, fp
 8006aec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006af0:	f002 f838 	bl	8008b64 <__d2b>
 8006af4:	901c      	str	r0, [sp, #112]	; 0x70
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f aed8 	beq.w	80068ac <_strtod_l+0x444>
 8006afc:	2101      	movs	r1, #1
 8006afe:	4658      	mov	r0, fp
 8006b00:	f001 fe02 	bl	8008708 <__i2b>
 8006b04:	9004      	str	r0, [sp, #16]
 8006b06:	4603      	mov	r3, r0
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f43f aecf 	beq.w	80068ac <_strtod_l+0x444>
 8006b0e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006b10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b12:	2d00      	cmp	r5, #0
 8006b14:	bfab      	itete	ge
 8006b16:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006b18:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006b1a:	18ee      	addge	r6, r5, r3
 8006b1c:	1b5c      	sublt	r4, r3, r5
 8006b1e:	9b05      	ldr	r3, [sp, #20]
 8006b20:	bfa8      	it	ge
 8006b22:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006b24:	eba5 0503 	sub.w	r5, r5, r3
 8006b28:	4415      	add	r5, r2
 8006b2a:	4b64      	ldr	r3, [pc, #400]	; (8006cbc <_strtod_l+0x854>)
 8006b2c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006b30:	bfb8      	it	lt
 8006b32:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006b34:	429d      	cmp	r5, r3
 8006b36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b3a:	f280 80af 	bge.w	8006c9c <_strtod_l+0x834>
 8006b3e:	1b5b      	subs	r3, r3, r5
 8006b40:	2b1f      	cmp	r3, #31
 8006b42:	eba2 0203 	sub.w	r2, r2, r3
 8006b46:	f04f 0701 	mov.w	r7, #1
 8006b4a:	f300 809c 	bgt.w	8006c86 <_strtod_l+0x81e>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	fa07 f303 	lsl.w	r3, r7, r3
 8006b54:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b56:	18b7      	adds	r7, r6, r2
 8006b58:	9b05      	ldr	r3, [sp, #20]
 8006b5a:	42be      	cmp	r6, r7
 8006b5c:	4414      	add	r4, r2
 8006b5e:	441c      	add	r4, r3
 8006b60:	4633      	mov	r3, r6
 8006b62:	bfa8      	it	ge
 8006b64:	463b      	movge	r3, r7
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	bfa8      	it	ge
 8006b6a:	4623      	movge	r3, r4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	bfc2      	ittt	gt
 8006b70:	1aff      	subgt	r7, r7, r3
 8006b72:	1ae4      	subgt	r4, r4, r3
 8006b74:	1af6      	subgt	r6, r6, r3
 8006b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b78:	b1bb      	cbz	r3, 8006baa <_strtod_l+0x742>
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	9904      	ldr	r1, [sp, #16]
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f001 fe60 	bl	8008844 <__pow5mult>
 8006b84:	9004      	str	r0, [sp, #16]
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f ae90 	beq.w	80068ac <_strtod_l+0x444>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b90:	4658      	mov	r0, fp
 8006b92:	f001 fdc2 	bl	800871a <__multiply>
 8006b96:	9009      	str	r0, [sp, #36]	; 0x24
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f43f ae87 	beq.w	80068ac <_strtod_l+0x444>
 8006b9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ba0:	4658      	mov	r0, fp
 8006ba2:	f001 fcd3 	bl	800854c <_Bfree>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	931c      	str	r3, [sp, #112]	; 0x70
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	dc7a      	bgt.n	8006ca4 <_strtod_l+0x83c>
 8006bae:	9b07      	ldr	r3, [sp, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dd08      	ble.n	8006bc6 <_strtod_l+0x75e>
 8006bb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006bb6:	9906      	ldr	r1, [sp, #24]
 8006bb8:	4658      	mov	r0, fp
 8006bba:	f001 fe43 	bl	8008844 <__pow5mult>
 8006bbe:	9006      	str	r0, [sp, #24]
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f43f ae73 	beq.w	80068ac <_strtod_l+0x444>
 8006bc6:	2c00      	cmp	r4, #0
 8006bc8:	dd08      	ble.n	8006bdc <_strtod_l+0x774>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	9906      	ldr	r1, [sp, #24]
 8006bce:	4658      	mov	r0, fp
 8006bd0:	f001 fe86 	bl	80088e0 <__lshift>
 8006bd4:	9006      	str	r0, [sp, #24]
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f43f ae68 	beq.w	80068ac <_strtod_l+0x444>
 8006bdc:	2e00      	cmp	r6, #0
 8006bde:	dd08      	ble.n	8006bf2 <_strtod_l+0x78a>
 8006be0:	4632      	mov	r2, r6
 8006be2:	9904      	ldr	r1, [sp, #16]
 8006be4:	4658      	mov	r0, fp
 8006be6:	f001 fe7b 	bl	80088e0 <__lshift>
 8006bea:	9004      	str	r0, [sp, #16]
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f43f ae5d 	beq.w	80068ac <_strtod_l+0x444>
 8006bf2:	9a06      	ldr	r2, [sp, #24]
 8006bf4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	f001 fee0 	bl	80089bc <__mdiff>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f ae54 	beq.w	80068ac <_strtod_l+0x444>
 8006c04:	2400      	movs	r4, #0
 8006c06:	68c3      	ldr	r3, [r0, #12]
 8006c08:	9904      	ldr	r1, [sp, #16]
 8006c0a:	60c4      	str	r4, [r0, #12]
 8006c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0e:	f001 febb 	bl	8008988 <__mcmp>
 8006c12:	42a0      	cmp	r0, r4
 8006c14:	da54      	bge.n	8006cc0 <_strtod_l+0x858>
 8006c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c18:	b9f3      	cbnz	r3, 8006c58 <_strtod_l+0x7f0>
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	d11b      	bne.n	8006c58 <_strtod_l+0x7f0>
 8006c20:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006c24:	b9c3      	cbnz	r3, 8006c58 <_strtod_l+0x7f0>
 8006c26:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006c2a:	0d1b      	lsrs	r3, r3, #20
 8006c2c:	051b      	lsls	r3, r3, #20
 8006c2e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c32:	d911      	bls.n	8006c58 <_strtod_l+0x7f0>
 8006c34:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006c38:	b91b      	cbnz	r3, 8006c42 <_strtod_l+0x7da>
 8006c3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	dd0a      	ble.n	8006c58 <_strtod_l+0x7f0>
 8006c42:	4641      	mov	r1, r8
 8006c44:	2201      	movs	r2, #1
 8006c46:	4658      	mov	r0, fp
 8006c48:	f001 fe4a 	bl	80088e0 <__lshift>
 8006c4c:	9904      	ldr	r1, [sp, #16]
 8006c4e:	4680      	mov	r8, r0
 8006c50:	f001 fe9a 	bl	8008988 <__mcmp>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	dc68      	bgt.n	8006d2a <_strtod_l+0x8c2>
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d172      	bne.n	8006d44 <_strtod_l+0x8dc>
 8006c5e:	e630      	b.n	80068c2 <_strtod_l+0x45a>
 8006c60:	f018 0f01 	tst.w	r8, #1
 8006c64:	d004      	beq.n	8006c70 <_strtod_l+0x808>
 8006c66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c6a:	f7f9 fc35 	bl	80004d8 <__aeabi_dmul>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c74:	3508      	adds	r5, #8
 8006c76:	e6dc      	b.n	8006a32 <_strtod_l+0x5ca>
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	ea03 0909 	and.w	r9, r3, r9
 8006c84:	e6f6      	b.n	8006a74 <_strtod_l+0x60c>
 8006c86:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006c8a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006c8e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006c92:	35e2      	adds	r5, #226	; 0xe2
 8006c94:	fa07 f505 	lsl.w	r5, r7, r5
 8006c98:	970f      	str	r7, [sp, #60]	; 0x3c
 8006c9a:	e75c      	b.n	8006b56 <_strtod_l+0x6ee>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ca2:	e758      	b.n	8006b56 <_strtod_l+0x6ee>
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f001 fe19 	bl	80088e0 <__lshift>
 8006cae:	901c      	str	r0, [sp, #112]	; 0x70
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	f47f af7c 	bne.w	8006bae <_strtod_l+0x746>
 8006cb6:	e5f9      	b.n	80068ac <_strtod_l+0x444>
 8006cb8:	08009118 	.word	0x08009118
 8006cbc:	fffffc02 	.word	0xfffffc02
 8006cc0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006cc4:	f040 8089 	bne.w	8006dda <_strtod_l+0x972>
 8006cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006cce:	b342      	cbz	r2, 8006d22 <_strtod_l+0x8ba>
 8006cd0:	4aaf      	ldr	r2, [pc, #700]	; (8006f90 <_strtod_l+0xb28>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d156      	bne.n	8006d84 <_strtod_l+0x91c>
 8006cd6:	9b05      	ldr	r3, [sp, #20]
 8006cd8:	4648      	mov	r0, r9
 8006cda:	b1eb      	cbz	r3, 8006d18 <_strtod_l+0x8b0>
 8006cdc:	4653      	mov	r3, sl
 8006cde:	4aad      	ldr	r2, [pc, #692]	; (8006f94 <_strtod_l+0xb2c>)
 8006ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006cea:	d818      	bhi.n	8006d1e <_strtod_l+0x8b6>
 8006cec:	0d12      	lsrs	r2, r2, #20
 8006cee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	4298      	cmp	r0, r3
 8006cf8:	d144      	bne.n	8006d84 <_strtod_l+0x91c>
 8006cfa:	4ba7      	ldr	r3, [pc, #668]	; (8006f98 <_strtod_l+0xb30>)
 8006cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d102      	bne.n	8006d08 <_strtod_l+0x8a0>
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f add2 	beq.w	80068ac <_strtod_l+0x444>
 8006d08:	4ba2      	ldr	r3, [pc, #648]	; (8006f94 <_strtod_l+0xb2c>)
 8006d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	401a      	ands	r2, r3
 8006d12:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006d16:	e79f      	b.n	8006c58 <_strtod_l+0x7f0>
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1c:	e7eb      	b.n	8006cf6 <_strtod_l+0x88e>
 8006d1e:	460b      	mov	r3, r1
 8006d20:	e7e9      	b.n	8006cf6 <_strtod_l+0x88e>
 8006d22:	bb7b      	cbnz	r3, 8006d84 <_strtod_l+0x91c>
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	d12c      	bne.n	8006d84 <_strtod_l+0x91c>
 8006d2a:	9905      	ldr	r1, [sp, #20]
 8006d2c:	4653      	mov	r3, sl
 8006d2e:	4a99      	ldr	r2, [pc, #612]	; (8006f94 <_strtod_l+0xb2c>)
 8006d30:	b1f1      	cbz	r1, 8006d70 <_strtod_l+0x908>
 8006d32:	ea02 010a 	and.w	r1, r2, sl
 8006d36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d3a:	dc19      	bgt.n	8006d70 <_strtod_l+0x908>
 8006d3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d40:	f77f ae51 	ble.w	80069e6 <_strtod_l+0x57e>
 8006d44:	2300      	movs	r3, #0
 8006d46:	4a95      	ldr	r2, [pc, #596]	; (8006f9c <_strtod_l+0xb34>)
 8006d48:	4648      	mov	r0, r9
 8006d4a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006d4e:	4651      	mov	r1, sl
 8006d50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d54:	f7f9 fbc0 	bl	80004d8 <__aeabi_dmul>
 8006d58:	4681      	mov	r9, r0
 8006d5a:	468a      	mov	sl, r1
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	f47f adb0 	bne.w	80068c2 <_strtod_l+0x45a>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f47f adad 	bne.w	80068c2 <_strtod_l+0x45a>
 8006d68:	2322      	movs	r3, #34	; 0x22
 8006d6a:	f8cb 3000 	str.w	r3, [fp]
 8006d6e:	e5a8      	b.n	80068c2 <_strtod_l+0x45a>
 8006d70:	4013      	ands	r3, r2
 8006d72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d76:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8006d7a:	f04f 39ff 	mov.w	r9, #4294967295
 8006d7e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006d82:	e769      	b.n	8006c58 <_strtod_l+0x7f0>
 8006d84:	b19d      	cbz	r5, 8006dae <_strtod_l+0x946>
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	421d      	tst	r5, r3
 8006d8a:	f43f af65 	beq.w	8006c58 <_strtod_l+0x7f0>
 8006d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d90:	9a05      	ldr	r2, [sp, #20]
 8006d92:	4648      	mov	r0, r9
 8006d94:	4651      	mov	r1, sl
 8006d96:	b173      	cbz	r3, 8006db6 <_strtod_l+0x94e>
 8006d98:	f7ff fb42 	bl	8006420 <sulp>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006da4:	f7f9 f9e2 	bl	800016c <__adddf3>
 8006da8:	4681      	mov	r9, r0
 8006daa:	468a      	mov	sl, r1
 8006dac:	e754      	b.n	8006c58 <_strtod_l+0x7f0>
 8006dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006db0:	ea13 0f09 	tst.w	r3, r9
 8006db4:	e7e9      	b.n	8006d8a <_strtod_l+0x922>
 8006db6:	f7ff fb33 	bl	8006420 <sulp>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dc2:	f7f9 f9d1 	bl	8000168 <__aeabi_dsub>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4681      	mov	r9, r0
 8006dcc:	468a      	mov	sl, r1
 8006dce:	f7f9 fdeb 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f47f ae07 	bne.w	80069e6 <_strtod_l+0x57e>
 8006dd8:	e73e      	b.n	8006c58 <_strtod_l+0x7f0>
 8006dda:	9904      	ldr	r1, [sp, #16]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	f001 ff10 	bl	8008c02 <__ratio>
 8006de2:	2200      	movs	r2, #0
 8006de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	f7f9 fdf0 	bl	80009d0 <__aeabi_dcmple>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d075      	beq.n	8006ee0 <_strtod_l+0xa78>
 8006df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d047      	beq.n	8006e8a <_strtod_l+0xa22>
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	4f68      	ldr	r7, [pc, #416]	; (8006fa0 <_strtod_l+0xb38>)
 8006dfe:	4d68      	ldr	r5, [pc, #416]	; (8006fa0 <_strtod_l+0xb38>)
 8006e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	0d1b      	lsrs	r3, r3, #20
 8006e08:	051b      	lsls	r3, r3, #20
 8006e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e0e:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <_strtod_l+0xb3c>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	f040 80cf 	bne.w	8006fb4 <_strtod_l+0xb4c>
 8006e16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e20:	4648      	mov	r0, r9
 8006e22:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006e26:	4651      	mov	r1, sl
 8006e28:	f001 fe26 	bl	8008a78 <__ulp>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 fb50 	bl	80004d8 <__aeabi_dmul>
 8006e38:	464a      	mov	r2, r9
 8006e3a:	4653      	mov	r3, sl
 8006e3c:	f7f9 f996 	bl	800016c <__adddf3>
 8006e40:	460b      	mov	r3, r1
 8006e42:	4954      	ldr	r1, [pc, #336]	; (8006f94 <_strtod_l+0xb2c>)
 8006e44:	4a58      	ldr	r2, [pc, #352]	; (8006fa8 <_strtod_l+0xb40>)
 8006e46:	4019      	ands	r1, r3
 8006e48:	4291      	cmp	r1, r2
 8006e4a:	4681      	mov	r9, r0
 8006e4c:	d95e      	bls.n	8006f0c <_strtod_l+0xaa4>
 8006e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d103      	bne.n	8006e60 <_strtod_l+0x9f8>
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f43f ad26 	beq.w	80068ac <_strtod_l+0x444>
 8006e60:	f04f 39ff 	mov.w	r9, #4294967295
 8006e64:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006f98 <_strtod_l+0xb30>
 8006e68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	f001 fb6e 	bl	800854c <_Bfree>
 8006e70:	9906      	ldr	r1, [sp, #24]
 8006e72:	4658      	mov	r0, fp
 8006e74:	f001 fb6a 	bl	800854c <_Bfree>
 8006e78:	9904      	ldr	r1, [sp, #16]
 8006e7a:	4658      	mov	r0, fp
 8006e7c:	f001 fb66 	bl	800854c <_Bfree>
 8006e80:	4641      	mov	r1, r8
 8006e82:	4658      	mov	r0, fp
 8006e84:	f001 fb62 	bl	800854c <_Bfree>
 8006e88:	e617      	b.n	8006aba <_strtod_l+0x652>
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d119      	bne.n	8006ec4 <_strtod_l+0xa5c>
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e96:	b9e3      	cbnz	r3, 8006ed2 <_strtod_l+0xa6a>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4b41      	ldr	r3, [pc, #260]	; (8006fa0 <_strtod_l+0xb38>)
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	f7f9 fd8c 	bl	80009bc <__aeabi_dcmplt>
 8006ea4:	b9c8      	cbnz	r0, 8006eda <_strtod_l+0xa72>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4b40      	ldr	r3, [pc, #256]	; (8006fac <_strtod_l+0xb44>)
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 fb13 	bl	80004d8 <__aeabi_dmul>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006eba:	9418      	str	r4, [sp, #96]	; 0x60
 8006ebc:	9319      	str	r3, [sp, #100]	; 0x64
 8006ebe:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006ec2:	e79d      	b.n	8006e00 <_strtod_l+0x998>
 8006ec4:	f1b9 0f01 	cmp.w	r9, #1
 8006ec8:	d103      	bne.n	8006ed2 <_strtod_l+0xa6a>
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f43f ad8a 	beq.w	80069e6 <_strtod_l+0x57e>
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	4f36      	ldr	r7, [pc, #216]	; (8006fb0 <_strtod_l+0xb48>)
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	e791      	b.n	8006dfe <_strtod_l+0x996>
 8006eda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006edc:	4d33      	ldr	r5, [pc, #204]	; (8006fac <_strtod_l+0xb44>)
 8006ede:	e7ea      	b.n	8006eb6 <_strtod_l+0xa4e>
 8006ee0:	4b32      	ldr	r3, [pc, #200]	; (8006fac <_strtod_l+0xb44>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f7f9 faf6 	bl	80004d8 <__aeabi_dmul>
 8006eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	b933      	cbnz	r3, 8006f02 <_strtod_l+0xa9a>
 8006ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ef8:	9010      	str	r0, [sp, #64]	; 0x40
 8006efa:	9311      	str	r3, [sp, #68]	; 0x44
 8006efc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f00:	e77e      	b.n	8006e00 <_strtod_l+0x998>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f0a:	e7f7      	b.n	8006efc <_strtod_l+0xa94>
 8006f0c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006f10:	9b05      	ldr	r3, [sp, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1a8      	bne.n	8006e68 <_strtod_l+0xa00>
 8006f16:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006f1a:	0d1b      	lsrs	r3, r3, #20
 8006f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f1e:	051b      	lsls	r3, r3, #20
 8006f20:	429a      	cmp	r2, r3
 8006f22:	4656      	mov	r6, sl
 8006f24:	d1a0      	bne.n	8006e68 <_strtod_l+0xa00>
 8006f26:	4629      	mov	r1, r5
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7f9 fd85 	bl	8000a38 <__aeabi_d2iz>
 8006f2e:	f7f9 fa69 	bl	8000404 <__aeabi_i2d>
 8006f32:	460b      	mov	r3, r1
 8006f34:	4602      	mov	r2, r0
 8006f36:	4629      	mov	r1, r5
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7f9 f915 	bl	8000168 <__aeabi_dsub>
 8006f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f40:	4604      	mov	r4, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	b933      	cbnz	r3, 8006f54 <_strtod_l+0xaec>
 8006f46:	f1b9 0f00 	cmp.w	r9, #0
 8006f4a:	d103      	bne.n	8006f54 <_strtod_l+0xaec>
 8006f4c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	d06a      	beq.n	800702a <_strtod_l+0xbc2>
 8006f54:	a30a      	add	r3, pc, #40	; (adr r3, 8006f80 <_strtod_l+0xb18>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 fd2d 	bl	80009bc <__aeabi_dcmplt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f47f acad 	bne.w	80068c2 <_strtod_l+0x45a>
 8006f68:	a307      	add	r3, pc, #28	; (adr r3, 8006f88 <_strtod_l+0xb20>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fd41 	bl	80009f8 <__aeabi_dcmpgt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f af76 	beq.w	8006e68 <_strtod_l+0xa00>
 8006f7c:	e4a1      	b.n	80068c2 <_strtod_l+0x45a>
 8006f7e:	bf00      	nop
 8006f80:	94a03595 	.word	0x94a03595
 8006f84:	3fdfffff 	.word	0x3fdfffff
 8006f88:	35afe535 	.word	0x35afe535
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	000fffff 	.word	0x000fffff
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	7fefffff 	.word	0x7fefffff
 8006f9c:	39500000 	.word	0x39500000
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	7fe00000 	.word	0x7fe00000
 8006fa8:	7c9fffff 	.word	0x7c9fffff
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	bff00000 	.word	0xbff00000
 8006fb4:	9b05      	ldr	r3, [sp, #20]
 8006fb6:	b313      	cbz	r3, 8006ffe <_strtod_l+0xb96>
 8006fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fbe:	d81e      	bhi.n	8006ffe <_strtod_l+0xb96>
 8006fc0:	a325      	add	r3, pc, #148	; (adr r3, 8007058 <_strtod_l+0xbf0>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fd01 	bl	80009d0 <__aeabi_dcmple>
 8006fce:	b190      	cbz	r0, 8006ff6 <_strtod_l+0xb8e>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f7f9 fd58 	bl	8000a88 <__aeabi_d2uiz>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	bf08      	it	eq
 8006fdc:	2001      	moveq	r0, #1
 8006fde:	f7f9 fa01 	bl	80003e4 <__aeabi_ui2d>
 8006fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	b9d3      	cbnz	r3, 8007020 <_strtod_l+0xbb8>
 8006fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fee:	9012      	str	r0, [sp, #72]	; 0x48
 8006ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ff2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006ff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ff8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006ffc:	1a9f      	subs	r7, r3, r2
 8006ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007002:	f001 fd39 	bl	8008a78 <__ulp>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007016:	f7f9 f8a9 	bl	800016c <__adddf3>
 800701a:	4681      	mov	r9, r0
 800701c:	468a      	mov	sl, r1
 800701e:	e777      	b.n	8006f10 <_strtod_l+0xaa8>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007028:	e7e3      	b.n	8006ff2 <_strtod_l+0xb8a>
 800702a:	a30d      	add	r3, pc, #52	; (adr r3, 8007060 <_strtod_l+0xbf8>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 fcc4 	bl	80009bc <__aeabi_dcmplt>
 8007034:	e79f      	b.n	8006f76 <_strtod_l+0xb0e>
 8007036:	2300      	movs	r3, #0
 8007038:	930d      	str	r3, [sp, #52]	; 0x34
 800703a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800703c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	f7ff ba55 	b.w	80064ee <_strtod_l+0x86>
 8007044:	2b65      	cmp	r3, #101	; 0x65
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f43f ab42 	beq.w	80066d2 <_strtod_l+0x26a>
 800704e:	2101      	movs	r1, #1
 8007050:	4614      	mov	r4, r2
 8007052:	9105      	str	r1, [sp, #20]
 8007054:	f7ff babf 	b.w	80065d6 <_strtod_l+0x16e>
 8007058:	ffc00000 	.word	0xffc00000
 800705c:	41dfffff 	.word	0x41dfffff
 8007060:	94a03595 	.word	0x94a03595
 8007064:	3fcfffff 	.word	0x3fcfffff

08007068 <_strtod_r>:
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <_strtod_r+0x18>)
 800706a:	b410      	push	{r4}
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4c05      	ldr	r4, [pc, #20]	; (8007084 <_strtod_r+0x1c>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf08      	it	eq
 8007076:	4623      	moveq	r3, r4
 8007078:	bc10      	pop	{r4}
 800707a:	f7ff b9f5 	b.w	8006468 <_strtod_l>
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c
 8007084:	20000070 	.word	0x20000070

08007088 <_strtol_l.isra.0>:
 8007088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	4680      	mov	r8, r0
 800708e:	4689      	mov	r9, r1
 8007090:	4692      	mov	sl, r2
 8007092:	461e      	mov	r6, r3
 8007094:	460f      	mov	r7, r1
 8007096:	463d      	mov	r5, r7
 8007098:	9808      	ldr	r0, [sp, #32]
 800709a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800709e:	f001 f9eb 	bl	8008478 <__locale_ctype_ptr_l>
 80070a2:	4420      	add	r0, r4
 80070a4:	7843      	ldrb	r3, [r0, #1]
 80070a6:	f013 0308 	ands.w	r3, r3, #8
 80070aa:	d132      	bne.n	8007112 <_strtol_l.isra.0+0x8a>
 80070ac:	2c2d      	cmp	r4, #45	; 0x2d
 80070ae:	d132      	bne.n	8007116 <_strtol_l.isra.0+0x8e>
 80070b0:	2201      	movs	r2, #1
 80070b2:	787c      	ldrb	r4, [r7, #1]
 80070b4:	1cbd      	adds	r5, r7, #2
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	d05d      	beq.n	8007176 <_strtol_l.isra.0+0xee>
 80070ba:	2e10      	cmp	r6, #16
 80070bc:	d109      	bne.n	80070d2 <_strtol_l.isra.0+0x4a>
 80070be:	2c30      	cmp	r4, #48	; 0x30
 80070c0:	d107      	bne.n	80070d2 <_strtol_l.isra.0+0x4a>
 80070c2:	782b      	ldrb	r3, [r5, #0]
 80070c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070c8:	2b58      	cmp	r3, #88	; 0x58
 80070ca:	d14f      	bne.n	800716c <_strtol_l.isra.0+0xe4>
 80070cc:	2610      	movs	r6, #16
 80070ce:	786c      	ldrb	r4, [r5, #1]
 80070d0:	3502      	adds	r5, #2
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	bf14      	ite	ne
 80070d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80070da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80070de:	2700      	movs	r7, #0
 80070e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80070e4:	4638      	mov	r0, r7
 80070e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80070ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d817      	bhi.n	8007122 <_strtol_l.isra.0+0x9a>
 80070f2:	461c      	mov	r4, r3
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	dd23      	ble.n	8007140 <_strtol_l.isra.0+0xb8>
 80070f8:	1c7b      	adds	r3, r7, #1
 80070fa:	d007      	beq.n	800710c <_strtol_l.isra.0+0x84>
 80070fc:	4584      	cmp	ip, r0
 80070fe:	d31c      	bcc.n	800713a <_strtol_l.isra.0+0xb2>
 8007100:	d101      	bne.n	8007106 <_strtol_l.isra.0+0x7e>
 8007102:	45a6      	cmp	lr, r4
 8007104:	db19      	blt.n	800713a <_strtol_l.isra.0+0xb2>
 8007106:	2701      	movs	r7, #1
 8007108:	fb00 4006 	mla	r0, r0, r6, r4
 800710c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007110:	e7eb      	b.n	80070ea <_strtol_l.isra.0+0x62>
 8007112:	462f      	mov	r7, r5
 8007114:	e7bf      	b.n	8007096 <_strtol_l.isra.0+0xe>
 8007116:	2c2b      	cmp	r4, #43	; 0x2b
 8007118:	bf04      	itt	eq
 800711a:	1cbd      	addeq	r5, r7, #2
 800711c:	787c      	ldrbeq	r4, [r7, #1]
 800711e:	461a      	mov	r2, r3
 8007120:	e7c9      	b.n	80070b6 <_strtol_l.isra.0+0x2e>
 8007122:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007126:	2b19      	cmp	r3, #25
 8007128:	d801      	bhi.n	800712e <_strtol_l.isra.0+0xa6>
 800712a:	3c37      	subs	r4, #55	; 0x37
 800712c:	e7e2      	b.n	80070f4 <_strtol_l.isra.0+0x6c>
 800712e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007132:	2b19      	cmp	r3, #25
 8007134:	d804      	bhi.n	8007140 <_strtol_l.isra.0+0xb8>
 8007136:	3c57      	subs	r4, #87	; 0x57
 8007138:	e7dc      	b.n	80070f4 <_strtol_l.isra.0+0x6c>
 800713a:	f04f 37ff 	mov.w	r7, #4294967295
 800713e:	e7e5      	b.n	800710c <_strtol_l.isra.0+0x84>
 8007140:	1c7b      	adds	r3, r7, #1
 8007142:	d108      	bne.n	8007156 <_strtol_l.isra.0+0xce>
 8007144:	2322      	movs	r3, #34	; 0x22
 8007146:	4608      	mov	r0, r1
 8007148:	f8c8 3000 	str.w	r3, [r8]
 800714c:	f1ba 0f00 	cmp.w	sl, #0
 8007150:	d107      	bne.n	8007162 <_strtol_l.isra.0+0xda>
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	b102      	cbz	r2, 800715a <_strtol_l.isra.0+0xd2>
 8007158:	4240      	negs	r0, r0
 800715a:	f1ba 0f00 	cmp.w	sl, #0
 800715e:	d0f8      	beq.n	8007152 <_strtol_l.isra.0+0xca>
 8007160:	b10f      	cbz	r7, 8007166 <_strtol_l.isra.0+0xde>
 8007162:	f105 39ff 	add.w	r9, r5, #4294967295
 8007166:	f8ca 9000 	str.w	r9, [sl]
 800716a:	e7f2      	b.n	8007152 <_strtol_l.isra.0+0xca>
 800716c:	2430      	movs	r4, #48	; 0x30
 800716e:	2e00      	cmp	r6, #0
 8007170:	d1af      	bne.n	80070d2 <_strtol_l.isra.0+0x4a>
 8007172:	2608      	movs	r6, #8
 8007174:	e7ad      	b.n	80070d2 <_strtol_l.isra.0+0x4a>
 8007176:	2c30      	cmp	r4, #48	; 0x30
 8007178:	d0a3      	beq.n	80070c2 <_strtol_l.isra.0+0x3a>
 800717a:	260a      	movs	r6, #10
 800717c:	e7a9      	b.n	80070d2 <_strtol_l.isra.0+0x4a>
	...

08007180 <_strtol_r>:
 8007180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007182:	4c06      	ldr	r4, [pc, #24]	; (800719c <_strtol_r+0x1c>)
 8007184:	4d06      	ldr	r5, [pc, #24]	; (80071a0 <_strtol_r+0x20>)
 8007186:	6824      	ldr	r4, [r4, #0]
 8007188:	6a24      	ldr	r4, [r4, #32]
 800718a:	2c00      	cmp	r4, #0
 800718c:	bf08      	it	eq
 800718e:	462c      	moveq	r4, r5
 8007190:	9400      	str	r4, [sp, #0]
 8007192:	f7ff ff79 	bl	8007088 <_strtol_l.isra.0>
 8007196:	b003      	add	sp, #12
 8007198:	bd30      	pop	{r4, r5, pc}
 800719a:	bf00      	nop
 800719c:	2000000c 	.word	0x2000000c
 80071a0:	20000070 	.word	0x20000070

080071a4 <quorem>:
 80071a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	6903      	ldr	r3, [r0, #16]
 80071aa:	690c      	ldr	r4, [r1, #16]
 80071ac:	4680      	mov	r8, r0
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	f2c0 8084 	blt.w	80072bc <quorem+0x118>
 80071b4:	3c01      	subs	r4, #1
 80071b6:	f101 0714 	add.w	r7, r1, #20
 80071ba:	f100 0614 	add.w	r6, r0, #20
 80071be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071c6:	3501      	adds	r5, #1
 80071c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80071cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80071d0:	eb06 030c 	add.w	r3, r6, ip
 80071d4:	eb07 090c 	add.w	r9, r7, ip
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	b39d      	cbz	r5, 8007244 <quorem+0xa0>
 80071dc:	f04f 0a00 	mov.w	sl, #0
 80071e0:	4638      	mov	r0, r7
 80071e2:	46b6      	mov	lr, r6
 80071e4:	46d3      	mov	fp, sl
 80071e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80071ea:	b293      	uxth	r3, r2
 80071ec:	fb05 a303 	mla	r3, r5, r3, sl
 80071f0:	0c12      	lsrs	r2, r2, #16
 80071f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f6:	fb05 a202 	mla	r2, r5, r2, sl
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ebab 0303 	sub.w	r3, fp, r3
 8007200:	f8de b000 	ldr.w	fp, [lr]
 8007204:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007208:	fa1f fb8b 	uxth.w	fp, fp
 800720c:	445b      	add	r3, fp
 800720e:	fa1f fb82 	uxth.w	fp, r2
 8007212:	f8de 2000 	ldr.w	r2, [lr]
 8007216:	4581      	cmp	r9, r0
 8007218:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800721c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007226:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800722a:	f84e 3b04 	str.w	r3, [lr], #4
 800722e:	d2da      	bcs.n	80071e6 <quorem+0x42>
 8007230:	f856 300c 	ldr.w	r3, [r6, ip]
 8007234:	b933      	cbnz	r3, 8007244 <quorem+0xa0>
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	3b04      	subs	r3, #4
 800723a:	429e      	cmp	r6, r3
 800723c:	461a      	mov	r2, r3
 800723e:	d331      	bcc.n	80072a4 <quorem+0x100>
 8007240:	f8c8 4010 	str.w	r4, [r8, #16]
 8007244:	4640      	mov	r0, r8
 8007246:	f001 fb9f 	bl	8008988 <__mcmp>
 800724a:	2800      	cmp	r0, #0
 800724c:	db26      	blt.n	800729c <quorem+0xf8>
 800724e:	4630      	mov	r0, r6
 8007250:	f04f 0c00 	mov.w	ip, #0
 8007254:	3501      	adds	r5, #1
 8007256:	f857 1b04 	ldr.w	r1, [r7], #4
 800725a:	f8d0 e000 	ldr.w	lr, [r0]
 800725e:	b28b      	uxth	r3, r1
 8007260:	ebac 0303 	sub.w	r3, ip, r3
 8007264:	fa1f f28e 	uxth.w	r2, lr
 8007268:	4413      	add	r3, r2
 800726a:	0c0a      	lsrs	r2, r1, #16
 800726c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007274:	b29b      	uxth	r3, r3
 8007276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800727a:	45b9      	cmp	r9, r7
 800727c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007280:	f840 3b04 	str.w	r3, [r0], #4
 8007284:	d2e7      	bcs.n	8007256 <quorem+0xb2>
 8007286:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800728a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800728e:	b92a      	cbnz	r2, 800729c <quorem+0xf8>
 8007290:	3b04      	subs	r3, #4
 8007292:	429e      	cmp	r6, r3
 8007294:	461a      	mov	r2, r3
 8007296:	d30b      	bcc.n	80072b0 <quorem+0x10c>
 8007298:	f8c8 4010 	str.w	r4, [r8, #16]
 800729c:	4628      	mov	r0, r5
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d1c9      	bne.n	8007240 <quorem+0x9c>
 80072ac:	3c01      	subs	r4, #1
 80072ae:	e7c4      	b.n	800723a <quorem+0x96>
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d1ef      	bne.n	8007298 <quorem+0xf4>
 80072b8:	3c01      	subs	r4, #1
 80072ba:	e7ea      	b.n	8007292 <quorem+0xee>
 80072bc:	2000      	movs	r0, #0
 80072be:	e7ee      	b.n	800729e <quorem+0xfa>

080072c0 <_dtoa_r>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	4616      	mov	r6, r2
 80072c6:	461f      	mov	r7, r3
 80072c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072ca:	b095      	sub	sp, #84	; 0x54
 80072cc:	4604      	mov	r4, r0
 80072ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80072d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80072d6:	b93d      	cbnz	r5, 80072e8 <_dtoa_r+0x28>
 80072d8:	2010      	movs	r0, #16
 80072da:	f7fe f973 	bl	80055c4 <malloc>
 80072de:	6260      	str	r0, [r4, #36]	; 0x24
 80072e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072e4:	6005      	str	r5, [r0, #0]
 80072e6:	60c5      	str	r5, [r0, #12]
 80072e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ea:	6819      	ldr	r1, [r3, #0]
 80072ec:	b151      	cbz	r1, 8007304 <_dtoa_r+0x44>
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	2301      	movs	r3, #1
 80072f2:	4093      	lsls	r3, r2
 80072f4:	604a      	str	r2, [r1, #4]
 80072f6:	608b      	str	r3, [r1, #8]
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 f927 	bl	800854c <_Bfree>
 80072fe:	2200      	movs	r2, #0
 8007300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	1e3b      	subs	r3, r7, #0
 8007306:	bfaf      	iteee	ge
 8007308:	2300      	movge	r3, #0
 800730a:	2201      	movlt	r2, #1
 800730c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007310:	9303      	strlt	r3, [sp, #12]
 8007312:	bfac      	ite	ge
 8007314:	f8c8 3000 	strge.w	r3, [r8]
 8007318:	f8c8 2000 	strlt.w	r2, [r8]
 800731c:	4bae      	ldr	r3, [pc, #696]	; (80075d8 <_dtoa_r+0x318>)
 800731e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007322:	ea33 0308 	bics.w	r3, r3, r8
 8007326:	d11b      	bne.n	8007360 <_dtoa_r+0xa0>
 8007328:	f242 730f 	movw	r3, #9999	; 0x270f
 800732c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	b923      	cbnz	r3, 800733e <_dtoa_r+0x7e>
 8007334:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007338:	2800      	cmp	r0, #0
 800733a:	f000 8545 	beq.w	8007dc8 <_dtoa_r+0xb08>
 800733e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007340:	b953      	cbnz	r3, 8007358 <_dtoa_r+0x98>
 8007342:	4ba6      	ldr	r3, [pc, #664]	; (80075dc <_dtoa_r+0x31c>)
 8007344:	e021      	b.n	800738a <_dtoa_r+0xca>
 8007346:	4ba6      	ldr	r3, [pc, #664]	; (80075e0 <_dtoa_r+0x320>)
 8007348:	9306      	str	r3, [sp, #24]
 800734a:	3308      	adds	r3, #8
 800734c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	9806      	ldr	r0, [sp, #24]
 8007352:	b015      	add	sp, #84	; 0x54
 8007354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007358:	4ba0      	ldr	r3, [pc, #640]	; (80075dc <_dtoa_r+0x31c>)
 800735a:	9306      	str	r3, [sp, #24]
 800735c:	3303      	adds	r3, #3
 800735e:	e7f5      	b.n	800734c <_dtoa_r+0x8c>
 8007360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007370:	4682      	mov	sl, r0
 8007372:	b160      	cbz	r0, 800738e <_dtoa_r+0xce>
 8007374:	2301      	movs	r3, #1
 8007376:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8520 	beq.w	8007dc2 <_dtoa_r+0xb02>
 8007382:	4b98      	ldr	r3, [pc, #608]	; (80075e4 <_dtoa_r+0x324>)
 8007384:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	3b01      	subs	r3, #1
 800738a:	9306      	str	r3, [sp, #24]
 800738c:	e7e0      	b.n	8007350 <_dtoa_r+0x90>
 800738e:	ab12      	add	r3, sp, #72	; 0x48
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	ab13      	add	r3, sp, #76	; 0x4c
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4632      	mov	r2, r6
 8007398:	463b      	mov	r3, r7
 800739a:	4620      	mov	r0, r4
 800739c:	f001 fbe2 	bl	8008b64 <__d2b>
 80073a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80073a4:	4683      	mov	fp, r0
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	d07d      	beq.n	80074a6 <_dtoa_r+0x1e6>
 80073aa:	46b0      	mov	r8, r6
 80073ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80073b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80073b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80073c0:	2200      	movs	r2, #0
 80073c2:	4b89      	ldr	r3, [pc, #548]	; (80075e8 <_dtoa_r+0x328>)
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f8 fece 	bl	8000168 <__aeabi_dsub>
 80073cc:	a37c      	add	r3, pc, #496	; (adr r3, 80075c0 <_dtoa_r+0x300>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 f881 	bl	80004d8 <__aeabi_dmul>
 80073d6:	a37c      	add	r3, pc, #496	; (adr r3, 80075c8 <_dtoa_r+0x308>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f8 fec6 	bl	800016c <__adddf3>
 80073e0:	4606      	mov	r6, r0
 80073e2:	4628      	mov	r0, r5
 80073e4:	460f      	mov	r7, r1
 80073e6:	f7f9 f80d 	bl	8000404 <__aeabi_i2d>
 80073ea:	a379      	add	r3, pc, #484	; (adr r3, 80075d0 <_dtoa_r+0x310>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f9 f872 	bl	80004d8 <__aeabi_dmul>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f8 feb6 	bl	800016c <__adddf3>
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
 8007404:	f7f9 fb18 	bl	8000a38 <__aeabi_d2iz>
 8007408:	2200      	movs	r2, #0
 800740a:	4682      	mov	sl, r0
 800740c:	2300      	movs	r3, #0
 800740e:	4630      	mov	r0, r6
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 fad3 	bl	80009bc <__aeabi_dcmplt>
 8007416:	b148      	cbz	r0, 800742c <_dtoa_r+0x16c>
 8007418:	4650      	mov	r0, sl
 800741a:	f7f8 fff3 	bl	8000404 <__aeabi_i2d>
 800741e:	4632      	mov	r2, r6
 8007420:	463b      	mov	r3, r7
 8007422:	f7f9 fac1 	bl	80009a8 <__aeabi_dcmpeq>
 8007426:	b908      	cbnz	r0, 800742c <_dtoa_r+0x16c>
 8007428:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742c:	f1ba 0f16 	cmp.w	sl, #22
 8007430:	d85a      	bhi.n	80074e8 <_dtoa_r+0x228>
 8007432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007436:	496d      	ldr	r1, [pc, #436]	; (80075ec <_dtoa_r+0x32c>)
 8007438:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800743c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007440:	f7f9 fada 	bl	80009f8 <__aeabi_dcmpgt>
 8007444:	2800      	cmp	r0, #0
 8007446:	d051      	beq.n	80074ec <_dtoa_r+0x22c>
 8007448:	2300      	movs	r3, #0
 800744a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800744e:	930d      	str	r3, [sp, #52]	; 0x34
 8007450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007452:	1b5d      	subs	r5, r3, r5
 8007454:	1e6b      	subs	r3, r5, #1
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	bf43      	ittte	mi
 800745a:	2300      	movmi	r3, #0
 800745c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007460:	9307      	strmi	r3, [sp, #28]
 8007462:	f04f 0900 	movpl.w	r9, #0
 8007466:	f1ba 0f00 	cmp.w	sl, #0
 800746a:	db41      	blt.n	80074f0 <_dtoa_r+0x230>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007472:	4453      	add	r3, sl
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	2300      	movs	r3, #0
 8007478:	9308      	str	r3, [sp, #32]
 800747a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800747c:	2b09      	cmp	r3, #9
 800747e:	f200 808f 	bhi.w	80075a0 <_dtoa_r+0x2e0>
 8007482:	2b05      	cmp	r3, #5
 8007484:	bfc4      	itt	gt
 8007486:	3b04      	subgt	r3, #4
 8007488:	931e      	strgt	r3, [sp, #120]	; 0x78
 800748a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800748c:	bfc8      	it	gt
 800748e:	2500      	movgt	r5, #0
 8007490:	f1a3 0302 	sub.w	r3, r3, #2
 8007494:	bfd8      	it	le
 8007496:	2501      	movle	r5, #1
 8007498:	2b03      	cmp	r3, #3
 800749a:	f200 808d 	bhi.w	80075b8 <_dtoa_r+0x2f8>
 800749e:	e8df f003 	tbb	[pc, r3]
 80074a2:	7d7b      	.short	0x7d7b
 80074a4:	6f2f      	.short	0x6f2f
 80074a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80074aa:	441d      	add	r5, r3
 80074ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80074b0:	2820      	cmp	r0, #32
 80074b2:	dd13      	ble.n	80074dc <_dtoa_r+0x21c>
 80074b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	fa08 f800 	lsl.w	r8, r8, r0
 80074be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80074c2:	fa23 f000 	lsr.w	r0, r3, r0
 80074c6:	ea48 0000 	orr.w	r0, r8, r0
 80074ca:	f7f8 ff8b 	bl	80003e4 <__aeabi_ui2d>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4680      	mov	r8, r0
 80074d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80074d6:	3d01      	subs	r5, #1
 80074d8:	9310      	str	r3, [sp, #64]	; 0x40
 80074da:	e771      	b.n	80073c0 <_dtoa_r+0x100>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	f1c0 0020 	rsb	r0, r0, #32
 80074e2:	fa03 f000 	lsl.w	r0, r3, r0
 80074e6:	e7f0      	b.n	80074ca <_dtoa_r+0x20a>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e7b0      	b.n	800744e <_dtoa_r+0x18e>
 80074ec:	900d      	str	r0, [sp, #52]	; 0x34
 80074ee:	e7af      	b.n	8007450 <_dtoa_r+0x190>
 80074f0:	f1ca 0300 	rsb	r3, sl, #0
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	2300      	movs	r3, #0
 80074f8:	eba9 090a 	sub.w	r9, r9, sl
 80074fc:	930c      	str	r3, [sp, #48]	; 0x30
 80074fe:	e7bc      	b.n	800747a <_dtoa_r+0x1ba>
 8007500:	2301      	movs	r3, #1
 8007502:	9309      	str	r3, [sp, #36]	; 0x24
 8007504:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007506:	2b00      	cmp	r3, #0
 8007508:	dd74      	ble.n	80075f4 <_dtoa_r+0x334>
 800750a:	4698      	mov	r8, r3
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	2200      	movs	r2, #0
 8007510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007512:	6072      	str	r2, [r6, #4]
 8007514:	2204      	movs	r2, #4
 8007516:	f102 0014 	add.w	r0, r2, #20
 800751a:	4298      	cmp	r0, r3
 800751c:	6871      	ldr	r1, [r6, #4]
 800751e:	d96e      	bls.n	80075fe <_dtoa_r+0x33e>
 8007520:	4620      	mov	r0, r4
 8007522:	f000 ffdf 	bl	80084e4 <_Balloc>
 8007526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007528:	6030      	str	r0, [r6, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f1b8 0f0e 	cmp.w	r8, #14
 8007530:	9306      	str	r3, [sp, #24]
 8007532:	f200 80ed 	bhi.w	8007710 <_dtoa_r+0x450>
 8007536:	2d00      	cmp	r5, #0
 8007538:	f000 80ea 	beq.w	8007710 <_dtoa_r+0x450>
 800753c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007548:	dd77      	ble.n	800763a <_dtoa_r+0x37a>
 800754a:	4a28      	ldr	r2, [pc, #160]	; (80075ec <_dtoa_r+0x32c>)
 800754c:	f00a 030f 	and.w	r3, sl, #15
 8007550:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007554:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007558:	06f0      	lsls	r0, r6, #27
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007562:	d568      	bpl.n	8007636 <_dtoa_r+0x376>
 8007564:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007568:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <_dtoa_r+0x330>)
 800756a:	2503      	movs	r5, #3
 800756c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007570:	f7f9 f8dc 	bl	800072c <__aeabi_ddiv>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	f006 060f 	and.w	r6, r6, #15
 800757c:	4f1c      	ldr	r7, [pc, #112]	; (80075f0 <_dtoa_r+0x330>)
 800757e:	e04f      	b.n	8007620 <_dtoa_r+0x360>
 8007580:	2301      	movs	r3, #1
 8007582:	9309      	str	r3, [sp, #36]	; 0x24
 8007584:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007586:	4453      	add	r3, sl
 8007588:	f103 0801 	add.w	r8, r3, #1
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	4643      	mov	r3, r8
 8007590:	2b01      	cmp	r3, #1
 8007592:	bfb8      	it	lt
 8007594:	2301      	movlt	r3, #1
 8007596:	e7ba      	b.n	800750e <_dtoa_r+0x24e>
 8007598:	2300      	movs	r3, #0
 800759a:	e7b2      	b.n	8007502 <_dtoa_r+0x242>
 800759c:	2300      	movs	r3, #0
 800759e:	e7f0      	b.n	8007582 <_dtoa_r+0x2c2>
 80075a0:	2501      	movs	r5, #1
 80075a2:	2300      	movs	r3, #0
 80075a4:	9509      	str	r5, [sp, #36]	; 0x24
 80075a6:	931e      	str	r3, [sp, #120]	; 0x78
 80075a8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ac:	2200      	movs	r2, #0
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	4698      	mov	r8, r3
 80075b2:	2312      	movs	r3, #18
 80075b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80075b6:	e7aa      	b.n	800750e <_dtoa_r+0x24e>
 80075b8:	2301      	movs	r3, #1
 80075ba:	9309      	str	r3, [sp, #36]	; 0x24
 80075bc:	e7f4      	b.n	80075a8 <_dtoa_r+0x2e8>
 80075be:	bf00      	nop
 80075c0:	636f4361 	.word	0x636f4361
 80075c4:	3fd287a7 	.word	0x3fd287a7
 80075c8:	8b60c8b3 	.word	0x8b60c8b3
 80075cc:	3fc68a28 	.word	0x3fc68a28
 80075d0:	509f79fb 	.word	0x509f79fb
 80075d4:	3fd34413 	.word	0x3fd34413
 80075d8:	7ff00000 	.word	0x7ff00000
 80075dc:	08009149 	.word	0x08009149
 80075e0:	08009140 	.word	0x08009140
 80075e4:	080090c5 	.word	0x080090c5
 80075e8:	3ff80000 	.word	0x3ff80000
 80075ec:	08009180 	.word	0x08009180
 80075f0:	08009158 	.word	0x08009158
 80075f4:	2301      	movs	r3, #1
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	4698      	mov	r8, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	e7da      	b.n	80075b4 <_dtoa_r+0x2f4>
 80075fe:	3101      	adds	r1, #1
 8007600:	6071      	str	r1, [r6, #4]
 8007602:	0052      	lsls	r2, r2, #1
 8007604:	e787      	b.n	8007516 <_dtoa_r+0x256>
 8007606:	07f1      	lsls	r1, r6, #31
 8007608:	d508      	bpl.n	800761c <_dtoa_r+0x35c>
 800760a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800760e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007612:	f7f8 ff61 	bl	80004d8 <__aeabi_dmul>
 8007616:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800761a:	3501      	adds	r5, #1
 800761c:	1076      	asrs	r6, r6, #1
 800761e:	3708      	adds	r7, #8
 8007620:	2e00      	cmp	r6, #0
 8007622:	d1f0      	bne.n	8007606 <_dtoa_r+0x346>
 8007624:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762c:	f7f9 f87e 	bl	800072c <__aeabi_ddiv>
 8007630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007634:	e01b      	b.n	800766e <_dtoa_r+0x3ae>
 8007636:	2502      	movs	r5, #2
 8007638:	e7a0      	b.n	800757c <_dtoa_r+0x2bc>
 800763a:	f000 80a4 	beq.w	8007786 <_dtoa_r+0x4c6>
 800763e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007642:	f1ca 0600 	rsb	r6, sl, #0
 8007646:	4ba0      	ldr	r3, [pc, #640]	; (80078c8 <_dtoa_r+0x608>)
 8007648:	f006 020f 	and.w	r2, r6, #15
 800764c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 ff40 	bl	80004d8 <__aeabi_dmul>
 8007658:	2502      	movs	r5, #2
 800765a:	2300      	movs	r3, #0
 800765c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007660:	4f9a      	ldr	r7, [pc, #616]	; (80078cc <_dtoa_r+0x60c>)
 8007662:	1136      	asrs	r6, r6, #4
 8007664:	2e00      	cmp	r6, #0
 8007666:	f040 8083 	bne.w	8007770 <_dtoa_r+0x4b0>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e0      	bne.n	8007630 <_dtoa_r+0x370>
 800766e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 808a 	beq.w	800778a <_dtoa_r+0x4ca>
 8007676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800767e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007682:	2200      	movs	r2, #0
 8007684:	4b92      	ldr	r3, [pc, #584]	; (80078d0 <_dtoa_r+0x610>)
 8007686:	f7f9 f999 	bl	80009bc <__aeabi_dcmplt>
 800768a:	2800      	cmp	r0, #0
 800768c:	d07d      	beq.n	800778a <_dtoa_r+0x4ca>
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	d07a      	beq.n	800778a <_dtoa_r+0x4ca>
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd36      	ble.n	8007708 <_dtoa_r+0x448>
 800769a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800769e:	2200      	movs	r2, #0
 80076a0:	4b8c      	ldr	r3, [pc, #560]	; (80078d4 <_dtoa_r+0x614>)
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076aa:	9e04      	ldr	r6, [sp, #16]
 80076ac:	f10a 37ff 	add.w	r7, sl, #4294967295
 80076b0:	3501      	adds	r5, #1
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7f8 fea6 	bl	8000404 <__aeabi_i2d>
 80076b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076bc:	f7f8 ff0c 	bl	80004d8 <__aeabi_dmul>
 80076c0:	2200      	movs	r2, #0
 80076c2:	4b85      	ldr	r3, [pc, #532]	; (80078d8 <_dtoa_r+0x618>)
 80076c4:	f7f8 fd52 	bl	800016c <__adddf3>
 80076c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80076cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	d15c      	bne.n	8007790 <_dtoa_r+0x4d0>
 80076d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	4b7f      	ldr	r3, [pc, #508]	; (80078dc <_dtoa_r+0x61c>)
 80076de:	f7f8 fd43 	bl	8000168 <__aeabi_dsub>
 80076e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e4:	462b      	mov	r3, r5
 80076e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ea:	f7f9 f985 	bl	80009f8 <__aeabi_dcmpgt>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f040 8281 	bne.w	8007bf6 <_dtoa_r+0x936>
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076fe:	f7f9 f95d 	bl	80009bc <__aeabi_dcmplt>
 8007702:	2800      	cmp	r0, #0
 8007704:	f040 8275 	bne.w	8007bf2 <_dtoa_r+0x932>
 8007708:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800770c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007712:	2b00      	cmp	r3, #0
 8007714:	f2c0 814b 	blt.w	80079ae <_dtoa_r+0x6ee>
 8007718:	f1ba 0f0e 	cmp.w	sl, #14
 800771c:	f300 8147 	bgt.w	80079ae <_dtoa_r+0x6ee>
 8007720:	4b69      	ldr	r3, [pc, #420]	; (80078c8 <_dtoa_r+0x608>)
 8007722:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800772e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007730:	2b00      	cmp	r3, #0
 8007732:	f280 80d7 	bge.w	80078e4 <_dtoa_r+0x624>
 8007736:	f1b8 0f00 	cmp.w	r8, #0
 800773a:	f300 80d3 	bgt.w	80078e4 <_dtoa_r+0x624>
 800773e:	f040 8257 	bne.w	8007bf0 <_dtoa_r+0x930>
 8007742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007746:	2200      	movs	r2, #0
 8007748:	4b64      	ldr	r3, [pc, #400]	; (80078dc <_dtoa_r+0x61c>)
 800774a:	f7f8 fec5 	bl	80004d8 <__aeabi_dmul>
 800774e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007752:	f7f9 f947 	bl	80009e4 <__aeabi_dcmpge>
 8007756:	4646      	mov	r6, r8
 8007758:	4647      	mov	r7, r8
 800775a:	2800      	cmp	r0, #0
 800775c:	f040 822d 	bne.w	8007bba <_dtoa_r+0x8fa>
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	9a06      	ldr	r2, [sp, #24]
 8007764:	1c5d      	adds	r5, r3, #1
 8007766:	2331      	movs	r3, #49	; 0x31
 8007768:	f10a 0a01 	add.w	sl, sl, #1
 800776c:	7013      	strb	r3, [r2, #0]
 800776e:	e228      	b.n	8007bc2 <_dtoa_r+0x902>
 8007770:	07f2      	lsls	r2, r6, #31
 8007772:	d505      	bpl.n	8007780 <_dtoa_r+0x4c0>
 8007774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007778:	f7f8 feae 	bl	80004d8 <__aeabi_dmul>
 800777c:	2301      	movs	r3, #1
 800777e:	3501      	adds	r5, #1
 8007780:	1076      	asrs	r6, r6, #1
 8007782:	3708      	adds	r7, #8
 8007784:	e76e      	b.n	8007664 <_dtoa_r+0x3a4>
 8007786:	2502      	movs	r5, #2
 8007788:	e771      	b.n	800766e <_dtoa_r+0x3ae>
 800778a:	4657      	mov	r7, sl
 800778c:	4646      	mov	r6, r8
 800778e:	e790      	b.n	80076b2 <_dtoa_r+0x3f2>
 8007790:	4b4d      	ldr	r3, [pc, #308]	; (80078c8 <_dtoa_r+0x608>)
 8007792:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007796:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d048      	beq.n	8007832 <_dtoa_r+0x572>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	2000      	movs	r0, #0
 80077a6:	494e      	ldr	r1, [pc, #312]	; (80078e0 <_dtoa_r+0x620>)
 80077a8:	f7f8 ffc0 	bl	800072c <__aeabi_ddiv>
 80077ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077b0:	f7f8 fcda 	bl	8000168 <__aeabi_dsub>
 80077b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077b8:	9d06      	ldr	r5, [sp, #24]
 80077ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077be:	f7f9 f93b 	bl	8000a38 <__aeabi_d2iz>
 80077c2:	9011      	str	r0, [sp, #68]	; 0x44
 80077c4:	f7f8 fe1e 	bl	8000404 <__aeabi_i2d>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	f7f8 fcca 	bl	8000168 <__aeabi_dsub>
 80077d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077da:	3330      	adds	r3, #48	; 0x30
 80077dc:	f805 3b01 	strb.w	r3, [r5], #1
 80077e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077e4:	f7f9 f8ea 	bl	80009bc <__aeabi_dcmplt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d163      	bne.n	80078b4 <_dtoa_r+0x5f4>
 80077ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077f0:	2000      	movs	r0, #0
 80077f2:	4937      	ldr	r1, [pc, #220]	; (80078d0 <_dtoa_r+0x610>)
 80077f4:	f7f8 fcb8 	bl	8000168 <__aeabi_dsub>
 80077f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077fc:	f7f9 f8de 	bl	80009bc <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	f040 80b5 	bne.w	8007970 <_dtoa_r+0x6b0>
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	1aeb      	subs	r3, r5, r3
 800780a:	429e      	cmp	r6, r3
 800780c:	f77f af7c 	ble.w	8007708 <_dtoa_r+0x448>
 8007810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007814:	2200      	movs	r2, #0
 8007816:	4b2f      	ldr	r3, [pc, #188]	; (80078d4 <_dtoa_r+0x614>)
 8007818:	f7f8 fe5e 	bl	80004d8 <__aeabi_dmul>
 800781c:	2200      	movs	r2, #0
 800781e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <_dtoa_r+0x614>)
 8007828:	f7f8 fe56 	bl	80004d8 <__aeabi_dmul>
 800782c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007830:	e7c3      	b.n	80077ba <_dtoa_r+0x4fa>
 8007832:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007836:	f7f8 fe4f 	bl	80004d8 <__aeabi_dmul>
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007840:	199d      	adds	r5, r3, r6
 8007842:	461e      	mov	r6, r3
 8007844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007848:	f7f9 f8f6 	bl	8000a38 <__aeabi_d2iz>
 800784c:	9011      	str	r0, [sp, #68]	; 0x44
 800784e:	f7f8 fdd9 	bl	8000404 <__aeabi_i2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785a:	f7f8 fc85 	bl	8000168 <__aeabi_dsub>
 800785e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007864:	3330      	adds	r3, #48	; 0x30
 8007866:	f806 3b01 	strb.w	r3, [r6], #1
 800786a:	42ae      	cmp	r6, r5
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	d124      	bne.n	80078bc <_dtoa_r+0x5fc>
 8007872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007876:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <_dtoa_r+0x620>)
 8007878:	f7f8 fc78 	bl	800016c <__adddf3>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007884:	f7f9 f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 8007888:	2800      	cmp	r0, #0
 800788a:	d171      	bne.n	8007970 <_dtoa_r+0x6b0>
 800788c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007890:	2000      	movs	r0, #0
 8007892:	4913      	ldr	r1, [pc, #76]	; (80078e0 <_dtoa_r+0x620>)
 8007894:	f7f8 fc68 	bl	8000168 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a0:	f7f9 f88c 	bl	80009bc <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f43f af2f 	beq.w	8007708 <_dtoa_r+0x448>
 80078aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078ae:	1e6a      	subs	r2, r5, #1
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d001      	beq.n	80078b8 <_dtoa_r+0x5f8>
 80078b4:	46ba      	mov	sl, r7
 80078b6:	e04a      	b.n	800794e <_dtoa_r+0x68e>
 80078b8:	4615      	mov	r5, r2
 80078ba:	e7f6      	b.n	80078aa <_dtoa_r+0x5ea>
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <_dtoa_r+0x614>)
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c6:	e7bd      	b.n	8007844 <_dtoa_r+0x584>
 80078c8:	08009180 	.word	0x08009180
 80078cc:	08009158 	.word	0x08009158
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	40240000 	.word	0x40240000
 80078d8:	401c0000 	.word	0x401c0000
 80078dc:	40140000 	.word	0x40140000
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	9d06      	ldr	r5, [sp, #24]
 80078e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	f7f8 ff1b 	bl	800072c <__aeabi_ddiv>
 80078f6:	f7f9 f89f 	bl	8000a38 <__aeabi_d2iz>
 80078fa:	4681      	mov	r9, r0
 80078fc:	f7f8 fd82 	bl	8000404 <__aeabi_i2d>
 8007900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f8 fc2a 	bl	8000168 <__aeabi_dsub>
 8007914:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007918:	f805 6b01 	strb.w	r6, [r5], #1
 800791c:	9e06      	ldr	r6, [sp, #24]
 800791e:	4602      	mov	r2, r0
 8007920:	1bae      	subs	r6, r5, r6
 8007922:	45b0      	cmp	r8, r6
 8007924:	460b      	mov	r3, r1
 8007926:	d135      	bne.n	8007994 <_dtoa_r+0x6d4>
 8007928:	f7f8 fc20 	bl	800016c <__adddf3>
 800792c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	f7f9 f860 	bl	80009f8 <__aeabi_dcmpgt>
 8007938:	b9c8      	cbnz	r0, 800796e <_dtoa_r+0x6ae>
 800793a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f9 f831 	bl	80009a8 <__aeabi_dcmpeq>
 8007946:	b110      	cbz	r0, 800794e <_dtoa_r+0x68e>
 8007948:	f019 0f01 	tst.w	r9, #1
 800794c:	d10f      	bne.n	800796e <_dtoa_r+0x6ae>
 800794e:	4659      	mov	r1, fp
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fdfb 	bl	800854c <_Bfree>
 8007956:	2300      	movs	r3, #0
 8007958:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800795a:	702b      	strb	r3, [r5, #0]
 800795c:	f10a 0301 	add.w	r3, sl, #1
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007964:	2b00      	cmp	r3, #0
 8007966:	f43f acf3 	beq.w	8007350 <_dtoa_r+0x90>
 800796a:	601d      	str	r5, [r3, #0]
 800796c:	e4f0      	b.n	8007350 <_dtoa_r+0x90>
 800796e:	4657      	mov	r7, sl
 8007970:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007974:	1e6b      	subs	r3, r5, #1
 8007976:	2a39      	cmp	r2, #57	; 0x39
 8007978:	d106      	bne.n	8007988 <_dtoa_r+0x6c8>
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	429a      	cmp	r2, r3
 800797e:	d107      	bne.n	8007990 <_dtoa_r+0x6d0>
 8007980:	2330      	movs	r3, #48	; 0x30
 8007982:	7013      	strb	r3, [r2, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	3701      	adds	r7, #1
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	3201      	adds	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e791      	b.n	80078b4 <_dtoa_r+0x5f4>
 8007990:	461d      	mov	r5, r3
 8007992:	e7ed      	b.n	8007970 <_dtoa_r+0x6b0>
 8007994:	2200      	movs	r2, #0
 8007996:	4b99      	ldr	r3, [pc, #612]	; (8007bfc <_dtoa_r+0x93c>)
 8007998:	f7f8 fd9e 	bl	80004d8 <__aeabi_dmul>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	f7f9 f800 	bl	80009a8 <__aeabi_dcmpeq>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d09e      	beq.n	80078ea <_dtoa_r+0x62a>
 80079ac:	e7cf      	b.n	800794e <_dtoa_r+0x68e>
 80079ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	f000 8088 	beq.w	8007ac6 <_dtoa_r+0x806>
 80079b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079b8:	2a01      	cmp	r2, #1
 80079ba:	dc6d      	bgt.n	8007a98 <_dtoa_r+0x7d8>
 80079bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079be:	2a00      	cmp	r2, #0
 80079c0:	d066      	beq.n	8007a90 <_dtoa_r+0x7d0>
 80079c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079c6:	464d      	mov	r5, r9
 80079c8:	9e08      	ldr	r6, [sp, #32]
 80079ca:	9a07      	ldr	r2, [sp, #28]
 80079cc:	2101      	movs	r1, #1
 80079ce:	441a      	add	r2, r3
 80079d0:	4620      	mov	r0, r4
 80079d2:	4499      	add	r9, r3
 80079d4:	9207      	str	r2, [sp, #28]
 80079d6:	f000 fe97 	bl	8008708 <__i2b>
 80079da:	4607      	mov	r7, r0
 80079dc:	2d00      	cmp	r5, #0
 80079de:	dd0b      	ble.n	80079f8 <_dtoa_r+0x738>
 80079e0:	9b07      	ldr	r3, [sp, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd08      	ble.n	80079f8 <_dtoa_r+0x738>
 80079e6:	42ab      	cmp	r3, r5
 80079e8:	bfa8      	it	ge
 80079ea:	462b      	movge	r3, r5
 80079ec:	9a07      	ldr	r2, [sp, #28]
 80079ee:	eba9 0903 	sub.w	r9, r9, r3
 80079f2:	1aed      	subs	r5, r5, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	b1eb      	cbz	r3, 8007a38 <_dtoa_r+0x778>
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d065      	beq.n	8007ace <_dtoa_r+0x80e>
 8007a02:	b18e      	cbz	r6, 8007a28 <_dtoa_r+0x768>
 8007a04:	4639      	mov	r1, r7
 8007a06:	4632      	mov	r2, r6
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 ff1b 	bl	8008844 <__pow5mult>
 8007a0e:	465a      	mov	r2, fp
 8007a10:	4601      	mov	r1, r0
 8007a12:	4607      	mov	r7, r0
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fe80 	bl	800871a <__multiply>
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	900a      	str	r0, [sp, #40]	; 0x28
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fd94 	bl	800854c <_Bfree>
 8007a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a26:	469b      	mov	fp, r3
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	1b9a      	subs	r2, r3, r6
 8007a2c:	d004      	beq.n	8007a38 <_dtoa_r+0x778>
 8007a2e:	4659      	mov	r1, fp
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 ff07 	bl	8008844 <__pow5mult>
 8007a36:	4683      	mov	fp, r0
 8007a38:	2101      	movs	r1, #1
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fe64 	bl	8008708 <__i2b>
 8007a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a42:	4606      	mov	r6, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 81c6 	beq.w	8007dd6 <_dtoa_r+0xb16>
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 fef8 	bl	8008844 <__pow5mult>
 8007a54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a56:	4606      	mov	r6, r0
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	dc3e      	bgt.n	8007ada <_dtoa_r+0x81a>
 8007a5c:	9b02      	ldr	r3, [sp, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d137      	bne.n	8007ad2 <_dtoa_r+0x812>
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d134      	bne.n	8007ad6 <_dtoa_r+0x816>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	0d1b      	lsrs	r3, r3, #20
 8007a74:	051b      	lsls	r3, r3, #20
 8007a76:	b12b      	cbz	r3, 8007a84 <_dtoa_r+0x7c4>
 8007a78:	9b07      	ldr	r3, [sp, #28]
 8007a7a:	f109 0901 	add.w	r9, r9, #1
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9307      	str	r3, [sp, #28]
 8007a82:	2301      	movs	r3, #1
 8007a84:	9308      	str	r3, [sp, #32]
 8007a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d128      	bne.n	8007ade <_dtoa_r+0x81e>
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	e02e      	b.n	8007aee <_dtoa_r+0x82e>
 8007a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a96:	e796      	b.n	80079c6 <_dtoa_r+0x706>
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	f108 36ff 	add.w	r6, r8, #4294967295
 8007a9e:	42b3      	cmp	r3, r6
 8007aa0:	bfb7      	itett	lt
 8007aa2:	9b08      	ldrlt	r3, [sp, #32]
 8007aa4:	1b9e      	subge	r6, r3, r6
 8007aa6:	1af2      	sublt	r2, r6, r3
 8007aa8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007aaa:	bfbf      	itttt	lt
 8007aac:	9608      	strlt	r6, [sp, #32]
 8007aae:	189b      	addlt	r3, r3, r2
 8007ab0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007ab2:	2600      	movlt	r6, #0
 8007ab4:	f1b8 0f00 	cmp.w	r8, #0
 8007ab8:	bfb9      	ittee	lt
 8007aba:	eba9 0508 	sublt.w	r5, r9, r8
 8007abe:	2300      	movlt	r3, #0
 8007ac0:	464d      	movge	r5, r9
 8007ac2:	4643      	movge	r3, r8
 8007ac4:	e781      	b.n	80079ca <_dtoa_r+0x70a>
 8007ac6:	9e08      	ldr	r6, [sp, #32]
 8007ac8:	464d      	mov	r5, r9
 8007aca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007acc:	e786      	b.n	80079dc <_dtoa_r+0x71c>
 8007ace:	9a08      	ldr	r2, [sp, #32]
 8007ad0:	e7ad      	b.n	8007a2e <_dtoa_r+0x76e>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e7d6      	b.n	8007a84 <_dtoa_r+0x7c4>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	e7d4      	b.n	8007a84 <_dtoa_r+0x7c4>
 8007ada:	2300      	movs	r3, #0
 8007adc:	9308      	str	r3, [sp, #32]
 8007ade:	6933      	ldr	r3, [r6, #16]
 8007ae0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ae4:	6918      	ldr	r0, [r3, #16]
 8007ae6:	f000 fdc1 	bl	800866c <__hi0bits>
 8007aea:	f1c0 0020 	rsb	r0, r0, #32
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	4418      	add	r0, r3
 8007af2:	f010 001f 	ands.w	r0, r0, #31
 8007af6:	d047      	beq.n	8007b88 <_dtoa_r+0x8c8>
 8007af8:	f1c0 0320 	rsb	r3, r0, #32
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	dd3b      	ble.n	8007b78 <_dtoa_r+0x8b8>
 8007b00:	9b07      	ldr	r3, [sp, #28]
 8007b02:	f1c0 001c 	rsb	r0, r0, #28
 8007b06:	4481      	add	r9, r0
 8007b08:	4405      	add	r5, r0
 8007b0a:	4403      	add	r3, r0
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	f1b9 0f00 	cmp.w	r9, #0
 8007b12:	dd05      	ble.n	8007b20 <_dtoa_r+0x860>
 8007b14:	4659      	mov	r1, fp
 8007b16:	464a      	mov	r2, r9
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fee1 	bl	80088e0 <__lshift>
 8007b1e:	4683      	mov	fp, r0
 8007b20:	9b07      	ldr	r3, [sp, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dd05      	ble.n	8007b32 <_dtoa_r+0x872>
 8007b26:	4631      	mov	r1, r6
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fed8 	bl	80088e0 <__lshift>
 8007b30:	4606      	mov	r6, r0
 8007b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b34:	b353      	cbz	r3, 8007b8c <_dtoa_r+0x8cc>
 8007b36:	4631      	mov	r1, r6
 8007b38:	4658      	mov	r0, fp
 8007b3a:	f000 ff25 	bl	8008988 <__mcmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	da24      	bge.n	8007b8c <_dtoa_r+0x8cc>
 8007b42:	2300      	movs	r3, #0
 8007b44:	4659      	mov	r1, fp
 8007b46:	220a      	movs	r2, #10
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fd16 	bl	800857a <__multadd>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b54:	4683      	mov	fp, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 8144 	beq.w	8007de4 <_dtoa_r+0xb24>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4639      	mov	r1, r7
 8007b60:	220a      	movs	r2, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fd09 	bl	800857a <__multadd>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc4d      	bgt.n	8007c0c <_dtoa_r+0x94c>
 8007b70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	dd4a      	ble.n	8007c0c <_dtoa_r+0x94c>
 8007b76:	e011      	b.n	8007b9c <_dtoa_r+0x8dc>
 8007b78:	d0c9      	beq.n	8007b0e <_dtoa_r+0x84e>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	331c      	adds	r3, #28
 8007b7e:	441a      	add	r2, r3
 8007b80:	4499      	add	r9, r3
 8007b82:	441d      	add	r5, r3
 8007b84:	4613      	mov	r3, r2
 8007b86:	e7c1      	b.n	8007b0c <_dtoa_r+0x84c>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e7f6      	b.n	8007b7a <_dtoa_r+0x8ba>
 8007b8c:	f1b8 0f00 	cmp.w	r8, #0
 8007b90:	dc36      	bgt.n	8007c00 <_dtoa_r+0x940>
 8007b92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	dd33      	ble.n	8007c00 <_dtoa_r+0x940>
 8007b98:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	b963      	cbnz	r3, 8007bba <_dtoa_r+0x8fa>
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 fce8 	bl	800857a <__multadd>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4606      	mov	r6, r0
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 feea 	bl	8008988 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f73f add3 	bgt.w	8007760 <_dtoa_r+0x4a0>
 8007bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bbc:	9d06      	ldr	r5, [sp, #24]
 8007bbe:	ea6f 0a03 	mvn.w	sl, r3
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fcbf 	bl	800854c <_Bfree>
 8007bce:	2f00      	cmp	r7, #0
 8007bd0:	f43f aebd 	beq.w	800794e <_dtoa_r+0x68e>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	d005      	beq.n	8007be6 <_dtoa_r+0x926>
 8007bda:	45b9      	cmp	r9, r7
 8007bdc:	d003      	beq.n	8007be6 <_dtoa_r+0x926>
 8007bde:	4649      	mov	r1, r9
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fcb3 	bl	800854c <_Bfree>
 8007be6:	4639      	mov	r1, r7
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fcaf 	bl	800854c <_Bfree>
 8007bee:	e6ae      	b.n	800794e <_dtoa_r+0x68e>
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	4637      	mov	r7, r6
 8007bf4:	e7e1      	b.n	8007bba <_dtoa_r+0x8fa>
 8007bf6:	46ba      	mov	sl, r7
 8007bf8:	4637      	mov	r7, r6
 8007bfa:	e5b1      	b.n	8007760 <_dtoa_r+0x4a0>
 8007bfc:	40240000 	.word	0x40240000
 8007c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c02:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80f3 	beq.w	8007df2 <_dtoa_r+0xb32>
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	dd05      	ble.n	8007c1c <_dtoa_r+0x95c>
 8007c10:	4639      	mov	r1, r7
 8007c12:	462a      	mov	r2, r5
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fe63 	bl	80088e0 <__lshift>
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04c      	beq.n	8007cbc <_dtoa_r+0x9fc>
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fc5d 	bl	80084e4 <_Balloc>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	f107 010c 	add.w	r1, r7, #12
 8007c32:	3202      	adds	r2, #2
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	300c      	adds	r0, #12
 8007c38:	f7fd fcd4 	bl	80055e4 <memcpy>
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 fe4d 	bl	80088e0 <__lshift>
 8007c46:	46b9      	mov	r9, r7
 8007c48:	4607      	mov	r7, r0
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	9307      	str	r3, [sp, #28]
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	4631      	mov	r1, r6
 8007c58:	4658      	mov	r0, fp
 8007c5a:	f7ff faa3 	bl	80071a4 <quorem>
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4605      	mov	r5, r0
 8007c62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c66:	4658      	mov	r0, fp
 8007c68:	f000 fe8e 	bl	8008988 <__mcmp>
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	9002      	str	r0, [sp, #8]
 8007c70:	4631      	mov	r1, r6
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fea2 	bl	80089bc <__mdiff>
 8007c78:	68c3      	ldr	r3, [r0, #12]
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	bb03      	cbnz	r3, 8007cc0 <_dtoa_r+0xa00>
 8007c7e:	4601      	mov	r1, r0
 8007c80:	9009      	str	r0, [sp, #36]	; 0x24
 8007c82:	4658      	mov	r0, fp
 8007c84:	f000 fe80 	bl	8008988 <__mcmp>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4620      	mov	r0, r4
 8007c90:	9309      	str	r3, [sp, #36]	; 0x24
 8007c92:	f000 fc5b 	bl	800854c <_Bfree>
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	b9a3      	cbnz	r3, 8007cc4 <_dtoa_r+0xa04>
 8007c9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c9c:	b992      	cbnz	r2, 8007cc4 <_dtoa_r+0xa04>
 8007c9e:	9a08      	ldr	r2, [sp, #32]
 8007ca0:	b982      	cbnz	r2, 8007cc4 <_dtoa_r+0xa04>
 8007ca2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ca6:	d029      	beq.n	8007cfc <_dtoa_r+0xa3c>
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dd01      	ble.n	8007cb2 <_dtoa_r+0x9f2>
 8007cae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007cb2:	9b07      	ldr	r3, [sp, #28]
 8007cb4:	1c5d      	adds	r5, r3, #1
 8007cb6:	f883 8000 	strb.w	r8, [r3]
 8007cba:	e784      	b.n	8007bc6 <_dtoa_r+0x906>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	e7c2      	b.n	8007c46 <_dtoa_r+0x986>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7e3      	b.n	8007c8c <_dtoa_r+0x9cc>
 8007cc4:	9a02      	ldr	r2, [sp, #8]
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	db04      	blt.n	8007cd4 <_dtoa_r+0xa14>
 8007cca:	d123      	bne.n	8007d14 <_dtoa_r+0xa54>
 8007ccc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007cce:	bb0a      	cbnz	r2, 8007d14 <_dtoa_r+0xa54>
 8007cd0:	9a08      	ldr	r2, [sp, #32]
 8007cd2:	b9fa      	cbnz	r2, 8007d14 <_dtoa_r+0xa54>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	ddec      	ble.n	8007cb2 <_dtoa_r+0x9f2>
 8007cd8:	4659      	mov	r1, fp
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fdff 	bl	80088e0 <__lshift>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4683      	mov	fp, r0
 8007ce6:	f000 fe4f 	bl	8008988 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dc03      	bgt.n	8007cf6 <_dtoa_r+0xa36>
 8007cee:	d1e0      	bne.n	8007cb2 <_dtoa_r+0x9f2>
 8007cf0:	f018 0f01 	tst.w	r8, #1
 8007cf4:	d0dd      	beq.n	8007cb2 <_dtoa_r+0x9f2>
 8007cf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cfa:	d1d8      	bne.n	8007cae <_dtoa_r+0x9ee>
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	9a07      	ldr	r2, [sp, #28]
 8007d00:	1c5d      	adds	r5, r3, #1
 8007d02:	2339      	movs	r3, #57	; 0x39
 8007d04:	7013      	strb	r3, [r2, #0]
 8007d06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d0a:	1e6a      	subs	r2, r5, #1
 8007d0c:	2b39      	cmp	r3, #57	; 0x39
 8007d0e:	d04d      	beq.n	8007dac <_dtoa_r+0xaec>
 8007d10:	3301      	adds	r3, #1
 8007d12:	e052      	b.n	8007dba <_dtoa_r+0xafa>
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f102 0501 	add.w	r5, r2, #1
 8007d1c:	dd06      	ble.n	8007d2c <_dtoa_r+0xa6c>
 8007d1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d22:	d0eb      	beq.n	8007cfc <_dtoa_r+0xa3c>
 8007d24:	f108 0801 	add.w	r8, r8, #1
 8007d28:	9b07      	ldr	r3, [sp, #28]
 8007d2a:	e7c4      	b.n	8007cb6 <_dtoa_r+0x9f6>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	9a04      	ldr	r2, [sp, #16]
 8007d30:	1aeb      	subs	r3, r5, r3
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d38:	d021      	beq.n	8007d7e <_dtoa_r+0xabe>
 8007d3a:	4659      	mov	r1, fp
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	220a      	movs	r2, #10
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fc1a 	bl	800857a <__multadd>
 8007d46:	45b9      	cmp	r9, r7
 8007d48:	4683      	mov	fp, r0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	f04f 020a 	mov.w	r2, #10
 8007d52:	4649      	mov	r1, r9
 8007d54:	4620      	mov	r0, r4
 8007d56:	d105      	bne.n	8007d64 <_dtoa_r+0xaa4>
 8007d58:	f000 fc0f 	bl	800857a <__multadd>
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	4607      	mov	r7, r0
 8007d60:	9507      	str	r5, [sp, #28]
 8007d62:	e778      	b.n	8007c56 <_dtoa_r+0x996>
 8007d64:	f000 fc09 	bl	800857a <__multadd>
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4681      	mov	r9, r0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fc02 	bl	800857a <__multadd>
 8007d76:	4607      	mov	r7, r0
 8007d78:	e7f2      	b.n	8007d60 <_dtoa_r+0xaa0>
 8007d7a:	f04f 0900 	mov.w	r9, #0
 8007d7e:	4659      	mov	r1, fp
 8007d80:	2201      	movs	r2, #1
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fdac 	bl	80088e0 <__lshift>
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4683      	mov	fp, r0
 8007d8c:	f000 fdfc 	bl	8008988 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dcb8      	bgt.n	8007d06 <_dtoa_r+0xa46>
 8007d94:	d102      	bne.n	8007d9c <_dtoa_r+0xadc>
 8007d96:	f018 0f01 	tst.w	r8, #1
 8007d9a:	d1b4      	bne.n	8007d06 <_dtoa_r+0xa46>
 8007d9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007da0:	1e6a      	subs	r2, r5, #1
 8007da2:	2b30      	cmp	r3, #48	; 0x30
 8007da4:	f47f af0f 	bne.w	8007bc6 <_dtoa_r+0x906>
 8007da8:	4615      	mov	r5, r2
 8007daa:	e7f7      	b.n	8007d9c <_dtoa_r+0xadc>
 8007dac:	9b06      	ldr	r3, [sp, #24]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d105      	bne.n	8007dbe <_dtoa_r+0xafe>
 8007db2:	2331      	movs	r3, #49	; 0x31
 8007db4:	9a06      	ldr	r2, [sp, #24]
 8007db6:	f10a 0a01 	add.w	sl, sl, #1
 8007dba:	7013      	strb	r3, [r2, #0]
 8007dbc:	e703      	b.n	8007bc6 <_dtoa_r+0x906>
 8007dbe:	4615      	mov	r5, r2
 8007dc0:	e7a1      	b.n	8007d06 <_dtoa_r+0xa46>
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <_dtoa_r+0xb60>)
 8007dc4:	f7ff bae1 	b.w	800738a <_dtoa_r+0xca>
 8007dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f47f aabb 	bne.w	8007346 <_dtoa_r+0x86>
 8007dd0:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <_dtoa_r+0xb64>)
 8007dd2:	f7ff bada 	b.w	800738a <_dtoa_r+0xca>
 8007dd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	f77f ae3f 	ble.w	8007a5c <_dtoa_r+0x79c>
 8007dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de0:	9308      	str	r3, [sp, #32]
 8007de2:	e653      	b.n	8007a8c <_dtoa_r+0x7cc>
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dc03      	bgt.n	8007df2 <_dtoa_r+0xb32>
 8007dea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	f73f aed5 	bgt.w	8007b9c <_dtoa_r+0x8dc>
 8007df2:	9d06      	ldr	r5, [sp, #24]
 8007df4:	4631      	mov	r1, r6
 8007df6:	4658      	mov	r0, fp
 8007df8:	f7ff f9d4 	bl	80071a4 <quorem>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e02:	f805 8b01 	strb.w	r8, [r5], #1
 8007e06:	9a04      	ldr	r2, [sp, #16]
 8007e08:	1aeb      	subs	r3, r5, r3
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	ddb5      	ble.n	8007d7a <_dtoa_r+0xaba>
 8007e0e:	4659      	mov	r1, fp
 8007e10:	2300      	movs	r3, #0
 8007e12:	220a      	movs	r2, #10
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fbb0 	bl	800857a <__multadd>
 8007e1a:	4683      	mov	fp, r0
 8007e1c:	e7ea      	b.n	8007df4 <_dtoa_r+0xb34>
 8007e1e:	bf00      	nop
 8007e20:	080090c4 	.word	0x080090c4
 8007e24:	08009140 	.word	0x08009140

08007e28 <rshift>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	6906      	ldr	r6, [r0, #16]
 8007e2c:	114b      	asrs	r3, r1, #5
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	f100 0414 	add.w	r4, r0, #20
 8007e34:	dd31      	ble.n	8007e9a <rshift+0x72>
 8007e36:	f011 011f 	ands.w	r1, r1, #31
 8007e3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e42:	d108      	bne.n	8007e56 <rshift+0x2e>
 8007e44:	4621      	mov	r1, r4
 8007e46:	42b2      	cmp	r2, r6
 8007e48:	460b      	mov	r3, r1
 8007e4a:	d211      	bcs.n	8007e70 <rshift+0x48>
 8007e4c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e50:	f841 3b04 	str.w	r3, [r1], #4
 8007e54:	e7f7      	b.n	8007e46 <rshift+0x1e>
 8007e56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	f1c1 0c20 	rsb	ip, r1, #32
 8007e60:	40cd      	lsrs	r5, r1
 8007e62:	3204      	adds	r2, #4
 8007e64:	42b2      	cmp	r2, r6
 8007e66:	4617      	mov	r7, r2
 8007e68:	d30d      	bcc.n	8007e86 <rshift+0x5e>
 8007e6a:	601d      	str	r5, [r3, #0]
 8007e6c:	b105      	cbz	r5, 8007e70 <rshift+0x48>
 8007e6e:	3304      	adds	r3, #4
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	eba3 0204 	sub.w	r2, r3, r4
 8007e76:	bf08      	it	eq
 8007e78:	2300      	moveq	r3, #0
 8007e7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e7e:	6102      	str	r2, [r0, #16]
 8007e80:	bf08      	it	eq
 8007e82:	6143      	streq	r3, [r0, #20]
 8007e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e86:	683f      	ldr	r7, [r7, #0]
 8007e88:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e8c:	433d      	orrs	r5, r7
 8007e8e:	f843 5b04 	str.w	r5, [r3], #4
 8007e92:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e96:	40cd      	lsrs	r5, r1
 8007e98:	e7e4      	b.n	8007e64 <rshift+0x3c>
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	e7e8      	b.n	8007e70 <rshift+0x48>

08007e9e <__hexdig_fun>:
 8007e9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ea2:	2b09      	cmp	r3, #9
 8007ea4:	d802      	bhi.n	8007eac <__hexdig_fun+0xe>
 8007ea6:	3820      	subs	r0, #32
 8007ea8:	b2c0      	uxtb	r0, r0
 8007eaa:	4770      	bx	lr
 8007eac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007eb0:	2b05      	cmp	r3, #5
 8007eb2:	d801      	bhi.n	8007eb8 <__hexdig_fun+0x1a>
 8007eb4:	3847      	subs	r0, #71	; 0x47
 8007eb6:	e7f7      	b.n	8007ea8 <__hexdig_fun+0xa>
 8007eb8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d801      	bhi.n	8007ec4 <__hexdig_fun+0x26>
 8007ec0:	3827      	subs	r0, #39	; 0x27
 8007ec2:	e7f1      	b.n	8007ea8 <__hexdig_fun+0xa>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	4770      	bx	lr

08007ec8 <__gethex>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	b08b      	sub	sp, #44	; 0x2c
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ed2:	468a      	mov	sl, r1
 8007ed4:	4690      	mov	r8, r2
 8007ed6:	9306      	str	r3, [sp, #24]
 8007ed8:	f000 fad1 	bl	800847e <__localeconv_l>
 8007edc:	6803      	ldr	r3, [r0, #0]
 8007ede:	f04f 0b00 	mov.w	fp, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	f7f8 f933 	bl	8000150 <strlen>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	9001      	str	r0, [sp, #4]
 8007eee:	4403      	add	r3, r0
 8007ef0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	f8da 3000 	ldr.w	r3, [sl]
 8007efa:	3302      	adds	r3, #2
 8007efc:	461f      	mov	r7, r3
 8007efe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f02:	2830      	cmp	r0, #48	; 0x30
 8007f04:	d06c      	beq.n	8007fe0 <__gethex+0x118>
 8007f06:	f7ff ffca 	bl	8007e9e <__hexdig_fun>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d16a      	bne.n	8007fe6 <__gethex+0x11e>
 8007f10:	9a01      	ldr	r2, [sp, #4]
 8007f12:	9903      	ldr	r1, [sp, #12]
 8007f14:	4638      	mov	r0, r7
 8007f16:	f001 f83d 	bl	8008f94 <strncmp>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d166      	bne.n	8007fec <__gethex+0x124>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	5cf8      	ldrb	r0, [r7, r3]
 8007f22:	18fe      	adds	r6, r7, r3
 8007f24:	f7ff ffbb 	bl	8007e9e <__hexdig_fun>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d062      	beq.n	8007ff2 <__gethex+0x12a>
 8007f2c:	4633      	mov	r3, r6
 8007f2e:	7818      	ldrb	r0, [r3, #0]
 8007f30:	461f      	mov	r7, r3
 8007f32:	2830      	cmp	r0, #48	; 0x30
 8007f34:	f103 0301 	add.w	r3, r3, #1
 8007f38:	d0f9      	beq.n	8007f2e <__gethex+0x66>
 8007f3a:	f7ff ffb0 	bl	8007e9e <__hexdig_fun>
 8007f3e:	fab0 f580 	clz	r5, r0
 8007f42:	4634      	mov	r4, r6
 8007f44:	f04f 0b01 	mov.w	fp, #1
 8007f48:	096d      	lsrs	r5, r5, #5
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	7830      	ldrb	r0, [r6, #0]
 8007f50:	3201      	adds	r2, #1
 8007f52:	f7ff ffa4 	bl	8007e9e <__hexdig_fun>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1f8      	bne.n	8007f4c <__gethex+0x84>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	9903      	ldr	r1, [sp, #12]
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f001 f818 	bl	8008f94 <strncmp>
 8007f64:	b950      	cbnz	r0, 8007f7c <__gethex+0xb4>
 8007f66:	b954      	cbnz	r4, 8007f7e <__gethex+0xb6>
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	18f4      	adds	r4, r6, r3
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4616      	mov	r6, r2
 8007f70:	7830      	ldrb	r0, [r6, #0]
 8007f72:	3201      	adds	r2, #1
 8007f74:	f7ff ff93 	bl	8007e9e <__hexdig_fun>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d1f8      	bne.n	8007f6e <__gethex+0xa6>
 8007f7c:	b10c      	cbz	r4, 8007f82 <__gethex+0xba>
 8007f7e:	1ba4      	subs	r4, r4, r6
 8007f80:	00a4      	lsls	r4, r4, #2
 8007f82:	7833      	ldrb	r3, [r6, #0]
 8007f84:	2b50      	cmp	r3, #80	; 0x50
 8007f86:	d001      	beq.n	8007f8c <__gethex+0xc4>
 8007f88:	2b70      	cmp	r3, #112	; 0x70
 8007f8a:	d140      	bne.n	800800e <__gethex+0x146>
 8007f8c:	7873      	ldrb	r3, [r6, #1]
 8007f8e:	2b2b      	cmp	r3, #43	; 0x2b
 8007f90:	d031      	beq.n	8007ff6 <__gethex+0x12e>
 8007f92:	2b2d      	cmp	r3, #45	; 0x2d
 8007f94:	d033      	beq.n	8007ffe <__gethex+0x136>
 8007f96:	f04f 0900 	mov.w	r9, #0
 8007f9a:	1c71      	adds	r1, r6, #1
 8007f9c:	7808      	ldrb	r0, [r1, #0]
 8007f9e:	f7ff ff7e 	bl	8007e9e <__hexdig_fun>
 8007fa2:	1e43      	subs	r3, r0, #1
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b18      	cmp	r3, #24
 8007fa8:	d831      	bhi.n	800800e <__gethex+0x146>
 8007faa:	f1a0 0210 	sub.w	r2, r0, #16
 8007fae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fb2:	f7ff ff74 	bl	8007e9e <__hexdig_fun>
 8007fb6:	1e43      	subs	r3, r0, #1
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b18      	cmp	r3, #24
 8007fbc:	d922      	bls.n	8008004 <__gethex+0x13c>
 8007fbe:	f1b9 0f00 	cmp.w	r9, #0
 8007fc2:	d000      	beq.n	8007fc6 <__gethex+0xfe>
 8007fc4:	4252      	negs	r2, r2
 8007fc6:	4414      	add	r4, r2
 8007fc8:	f8ca 1000 	str.w	r1, [sl]
 8007fcc:	b30d      	cbz	r5, 8008012 <__gethex+0x14a>
 8007fce:	f1bb 0f00 	cmp.w	fp, #0
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2706      	moveq	r7, #6
 8007fd6:	2700      	movne	r7, #0
 8007fd8:	4638      	mov	r0, r7
 8007fda:	b00b      	add	sp, #44	; 0x2c
 8007fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe0:	f10b 0b01 	add.w	fp, fp, #1
 8007fe4:	e78a      	b.n	8007efc <__gethex+0x34>
 8007fe6:	2500      	movs	r5, #0
 8007fe8:	462c      	mov	r4, r5
 8007fea:	e7ae      	b.n	8007f4a <__gethex+0x82>
 8007fec:	463e      	mov	r6, r7
 8007fee:	2501      	movs	r5, #1
 8007ff0:	e7c7      	b.n	8007f82 <__gethex+0xba>
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	e7fb      	b.n	8007fee <__gethex+0x126>
 8007ff6:	f04f 0900 	mov.w	r9, #0
 8007ffa:	1cb1      	adds	r1, r6, #2
 8007ffc:	e7ce      	b.n	8007f9c <__gethex+0xd4>
 8007ffe:	f04f 0901 	mov.w	r9, #1
 8008002:	e7fa      	b.n	8007ffa <__gethex+0x132>
 8008004:	230a      	movs	r3, #10
 8008006:	fb03 0202 	mla	r2, r3, r2, r0
 800800a:	3a10      	subs	r2, #16
 800800c:	e7cf      	b.n	8007fae <__gethex+0xe6>
 800800e:	4631      	mov	r1, r6
 8008010:	e7da      	b.n	8007fc8 <__gethex+0x100>
 8008012:	4629      	mov	r1, r5
 8008014:	1bf3      	subs	r3, r6, r7
 8008016:	3b01      	subs	r3, #1
 8008018:	2b07      	cmp	r3, #7
 800801a:	dc49      	bgt.n	80080b0 <__gethex+0x1e8>
 800801c:	9802      	ldr	r0, [sp, #8]
 800801e:	f000 fa61 	bl	80084e4 <_Balloc>
 8008022:	f04f 0b00 	mov.w	fp, #0
 8008026:	4605      	mov	r5, r0
 8008028:	46da      	mov	sl, fp
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	f100 0914 	add.w	r9, r0, #20
 8008030:	f1c3 0301 	rsb	r3, r3, #1
 8008034:	f8cd 9010 	str.w	r9, [sp, #16]
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	42b7      	cmp	r7, r6
 800803c:	d33b      	bcc.n	80080b6 <__gethex+0x1ee>
 800803e:	9804      	ldr	r0, [sp, #16]
 8008040:	f840 ab04 	str.w	sl, [r0], #4
 8008044:	eba0 0009 	sub.w	r0, r0, r9
 8008048:	1080      	asrs	r0, r0, #2
 800804a:	6128      	str	r0, [r5, #16]
 800804c:	0147      	lsls	r7, r0, #5
 800804e:	4650      	mov	r0, sl
 8008050:	f000 fb0c 	bl	800866c <__hi0bits>
 8008054:	f8d8 6000 	ldr.w	r6, [r8]
 8008058:	1a3f      	subs	r7, r7, r0
 800805a:	42b7      	cmp	r7, r6
 800805c:	dd64      	ble.n	8008128 <__gethex+0x260>
 800805e:	1bbf      	subs	r7, r7, r6
 8008060:	4639      	mov	r1, r7
 8008062:	4628      	mov	r0, r5
 8008064:	f000 fe15 	bl	8008c92 <__any_on>
 8008068:	4682      	mov	sl, r0
 800806a:	b178      	cbz	r0, 800808c <__gethex+0x1c4>
 800806c:	f04f 0a01 	mov.w	sl, #1
 8008070:	1e7b      	subs	r3, r7, #1
 8008072:	1159      	asrs	r1, r3, #5
 8008074:	f003 021f 	and.w	r2, r3, #31
 8008078:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800807c:	fa0a f202 	lsl.w	r2, sl, r2
 8008080:	420a      	tst	r2, r1
 8008082:	d003      	beq.n	800808c <__gethex+0x1c4>
 8008084:	4553      	cmp	r3, sl
 8008086:	dc46      	bgt.n	8008116 <__gethex+0x24e>
 8008088:	f04f 0a02 	mov.w	sl, #2
 800808c:	4639      	mov	r1, r7
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff feca 	bl	8007e28 <rshift>
 8008094:	443c      	add	r4, r7
 8008096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800809a:	42a3      	cmp	r3, r4
 800809c:	da52      	bge.n	8008144 <__gethex+0x27c>
 800809e:	4629      	mov	r1, r5
 80080a0:	9802      	ldr	r0, [sp, #8]
 80080a2:	f000 fa53 	bl	800854c <_Bfree>
 80080a6:	2300      	movs	r3, #0
 80080a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080aa:	27a3      	movs	r7, #163	; 0xa3
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	e793      	b.n	8007fd8 <__gethex+0x110>
 80080b0:	3101      	adds	r1, #1
 80080b2:	105b      	asrs	r3, r3, #1
 80080b4:	e7b0      	b.n	8008018 <__gethex+0x150>
 80080b6:	1e73      	subs	r3, r6, #1
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	9a07      	ldr	r2, [sp, #28]
 80080bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <__gethex+0x22e>
 80080c4:	f1bb 0f20 	cmp.w	fp, #32
 80080c8:	d107      	bne.n	80080da <__gethex+0x212>
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	f8c3 a000 	str.w	sl, [r3]
 80080d0:	f04f 0a00 	mov.w	sl, #0
 80080d4:	46d3      	mov	fp, sl
 80080d6:	3304      	adds	r3, #4
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080de:	f7ff fede 	bl	8007e9e <__hexdig_fun>
 80080e2:	f000 000f 	and.w	r0, r0, #15
 80080e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80080ea:	ea4a 0a00 	orr.w	sl, sl, r0
 80080ee:	f10b 0b04 	add.w	fp, fp, #4
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	e00d      	b.n	8008112 <__gethex+0x24a>
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	9a08      	ldr	r2, [sp, #32]
 80080fa:	4413      	add	r3, r2
 80080fc:	42bb      	cmp	r3, r7
 80080fe:	d3e1      	bcc.n	80080c4 <__gethex+0x1fc>
 8008100:	4618      	mov	r0, r3
 8008102:	9a01      	ldr	r2, [sp, #4]
 8008104:	9903      	ldr	r1, [sp, #12]
 8008106:	9309      	str	r3, [sp, #36]	; 0x24
 8008108:	f000 ff44 	bl	8008f94 <strncmp>
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	2800      	cmp	r0, #0
 8008110:	d1d8      	bne.n	80080c4 <__gethex+0x1fc>
 8008112:	461e      	mov	r6, r3
 8008114:	e791      	b.n	800803a <__gethex+0x172>
 8008116:	1eb9      	subs	r1, r7, #2
 8008118:	4628      	mov	r0, r5
 800811a:	f000 fdba 	bl	8008c92 <__any_on>
 800811e:	2800      	cmp	r0, #0
 8008120:	d0b2      	beq.n	8008088 <__gethex+0x1c0>
 8008122:	f04f 0a03 	mov.w	sl, #3
 8008126:	e7b1      	b.n	800808c <__gethex+0x1c4>
 8008128:	da09      	bge.n	800813e <__gethex+0x276>
 800812a:	1bf7      	subs	r7, r6, r7
 800812c:	4629      	mov	r1, r5
 800812e:	463a      	mov	r2, r7
 8008130:	9802      	ldr	r0, [sp, #8]
 8008132:	f000 fbd5 	bl	80088e0 <__lshift>
 8008136:	4605      	mov	r5, r0
 8008138:	1be4      	subs	r4, r4, r7
 800813a:	f100 0914 	add.w	r9, r0, #20
 800813e:	f04f 0a00 	mov.w	sl, #0
 8008142:	e7a8      	b.n	8008096 <__gethex+0x1ce>
 8008144:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008148:	42a0      	cmp	r0, r4
 800814a:	dd6b      	ble.n	8008224 <__gethex+0x35c>
 800814c:	1b04      	subs	r4, r0, r4
 800814e:	42a6      	cmp	r6, r4
 8008150:	dc2e      	bgt.n	80081b0 <__gethex+0x2e8>
 8008152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d022      	beq.n	80081a0 <__gethex+0x2d8>
 800815a:	2b03      	cmp	r3, #3
 800815c:	d024      	beq.n	80081a8 <__gethex+0x2e0>
 800815e:	2b01      	cmp	r3, #1
 8008160:	d115      	bne.n	800818e <__gethex+0x2c6>
 8008162:	42a6      	cmp	r6, r4
 8008164:	d113      	bne.n	800818e <__gethex+0x2c6>
 8008166:	2e01      	cmp	r6, #1
 8008168:	dc0b      	bgt.n	8008182 <__gethex+0x2ba>
 800816a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800816e:	9a06      	ldr	r2, [sp, #24]
 8008170:	2762      	movs	r7, #98	; 0x62
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	2301      	movs	r3, #1
 8008176:	612b      	str	r3, [r5, #16]
 8008178:	f8c9 3000 	str.w	r3, [r9]
 800817c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800817e:	601d      	str	r5, [r3, #0]
 8008180:	e72a      	b.n	8007fd8 <__gethex+0x110>
 8008182:	1e71      	subs	r1, r6, #1
 8008184:	4628      	mov	r0, r5
 8008186:	f000 fd84 	bl	8008c92 <__any_on>
 800818a:	2800      	cmp	r0, #0
 800818c:	d1ed      	bne.n	800816a <__gethex+0x2a2>
 800818e:	4629      	mov	r1, r5
 8008190:	9802      	ldr	r0, [sp, #8]
 8008192:	f000 f9db 	bl	800854c <_Bfree>
 8008196:	2300      	movs	r3, #0
 8008198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800819a:	2750      	movs	r7, #80	; 0x50
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e71b      	b.n	8007fd8 <__gethex+0x110>
 80081a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0e1      	beq.n	800816a <__gethex+0x2a2>
 80081a6:	e7f2      	b.n	800818e <__gethex+0x2c6>
 80081a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1dd      	bne.n	800816a <__gethex+0x2a2>
 80081ae:	e7ee      	b.n	800818e <__gethex+0x2c6>
 80081b0:	1e67      	subs	r7, r4, #1
 80081b2:	f1ba 0f00 	cmp.w	sl, #0
 80081b6:	d132      	bne.n	800821e <__gethex+0x356>
 80081b8:	b127      	cbz	r7, 80081c4 <__gethex+0x2fc>
 80081ba:	4639      	mov	r1, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 fd68 	bl	8008c92 <__any_on>
 80081c2:	4682      	mov	sl, r0
 80081c4:	2301      	movs	r3, #1
 80081c6:	117a      	asrs	r2, r7, #5
 80081c8:	f007 071f 	and.w	r7, r7, #31
 80081cc:	fa03 f707 	lsl.w	r7, r3, r7
 80081d0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081d4:	4621      	mov	r1, r4
 80081d6:	421f      	tst	r7, r3
 80081d8:	f04f 0702 	mov.w	r7, #2
 80081dc:	4628      	mov	r0, r5
 80081de:	bf18      	it	ne
 80081e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80081e4:	1b36      	subs	r6, r6, r4
 80081e6:	f7ff fe1f 	bl	8007e28 <rshift>
 80081ea:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081ee:	f1ba 0f00 	cmp.w	sl, #0
 80081f2:	d048      	beq.n	8008286 <__gethex+0x3be>
 80081f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d015      	beq.n	8008228 <__gethex+0x360>
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d017      	beq.n	8008230 <__gethex+0x368>
 8008200:	2b01      	cmp	r3, #1
 8008202:	d109      	bne.n	8008218 <__gethex+0x350>
 8008204:	f01a 0f02 	tst.w	sl, #2
 8008208:	d006      	beq.n	8008218 <__gethex+0x350>
 800820a:	f8d9 3000 	ldr.w	r3, [r9]
 800820e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008212:	f01a 0f01 	tst.w	sl, #1
 8008216:	d10e      	bne.n	8008236 <__gethex+0x36e>
 8008218:	f047 0710 	orr.w	r7, r7, #16
 800821c:	e033      	b.n	8008286 <__gethex+0x3be>
 800821e:	f04f 0a01 	mov.w	sl, #1
 8008222:	e7cf      	b.n	80081c4 <__gethex+0x2fc>
 8008224:	2701      	movs	r7, #1
 8008226:	e7e2      	b.n	80081ee <__gethex+0x326>
 8008228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822a:	f1c3 0301 	rsb	r3, r3, #1
 800822e:	9315      	str	r3, [sp, #84]	; 0x54
 8008230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f0      	beq.n	8008218 <__gethex+0x350>
 8008236:	f04f 0c00 	mov.w	ip, #0
 800823a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800823e:	f105 0314 	add.w	r3, r5, #20
 8008242:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008246:	eb03 010a 	add.w	r1, r3, sl
 800824a:	4618      	mov	r0, r3
 800824c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008250:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008254:	d01c      	beq.n	8008290 <__gethex+0x3c8>
 8008256:	3201      	adds	r2, #1
 8008258:	6002      	str	r2, [r0, #0]
 800825a:	2f02      	cmp	r7, #2
 800825c:	f105 0314 	add.w	r3, r5, #20
 8008260:	d138      	bne.n	80082d4 <__gethex+0x40c>
 8008262:	f8d8 2000 	ldr.w	r2, [r8]
 8008266:	3a01      	subs	r2, #1
 8008268:	42b2      	cmp	r2, r6
 800826a:	d10a      	bne.n	8008282 <__gethex+0x3ba>
 800826c:	2201      	movs	r2, #1
 800826e:	1171      	asrs	r1, r6, #5
 8008270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008274:	f006 061f 	and.w	r6, r6, #31
 8008278:	fa02 f606 	lsl.w	r6, r2, r6
 800827c:	421e      	tst	r6, r3
 800827e:	bf18      	it	ne
 8008280:	4617      	movne	r7, r2
 8008282:	f047 0720 	orr.w	r7, r7, #32
 8008286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008288:	601d      	str	r5, [r3, #0]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	601c      	str	r4, [r3, #0]
 800828e:	e6a3      	b.n	8007fd8 <__gethex+0x110>
 8008290:	4299      	cmp	r1, r3
 8008292:	f843 cc04 	str.w	ip, [r3, #-4]
 8008296:	d8d8      	bhi.n	800824a <__gethex+0x382>
 8008298:	68ab      	ldr	r3, [r5, #8]
 800829a:	4599      	cmp	r9, r3
 800829c:	db12      	blt.n	80082c4 <__gethex+0x3fc>
 800829e:	6869      	ldr	r1, [r5, #4]
 80082a0:	9802      	ldr	r0, [sp, #8]
 80082a2:	3101      	adds	r1, #1
 80082a4:	f000 f91e 	bl	80084e4 <_Balloc>
 80082a8:	4683      	mov	fp, r0
 80082aa:	692a      	ldr	r2, [r5, #16]
 80082ac:	f105 010c 	add.w	r1, r5, #12
 80082b0:	3202      	adds	r2, #2
 80082b2:	0092      	lsls	r2, r2, #2
 80082b4:	300c      	adds	r0, #12
 80082b6:	f7fd f995 	bl	80055e4 <memcpy>
 80082ba:	4629      	mov	r1, r5
 80082bc:	9802      	ldr	r0, [sp, #8]
 80082be:	f000 f945 	bl	800854c <_Bfree>
 80082c2:	465d      	mov	r5, fp
 80082c4:	692b      	ldr	r3, [r5, #16]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	612a      	str	r2, [r5, #16]
 80082ca:	2201      	movs	r2, #1
 80082cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082d0:	615a      	str	r2, [r3, #20]
 80082d2:	e7c2      	b.n	800825a <__gethex+0x392>
 80082d4:	692a      	ldr	r2, [r5, #16]
 80082d6:	454a      	cmp	r2, r9
 80082d8:	dd0b      	ble.n	80082f2 <__gethex+0x42a>
 80082da:	2101      	movs	r1, #1
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff fda3 	bl	8007e28 <rshift>
 80082e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e6:	3401      	adds	r4, #1
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	f6ff aed8 	blt.w	800809e <__gethex+0x1d6>
 80082ee:	2701      	movs	r7, #1
 80082f0:	e7c7      	b.n	8008282 <__gethex+0x3ba>
 80082f2:	f016 061f 	ands.w	r6, r6, #31
 80082f6:	d0fa      	beq.n	80082ee <__gethex+0x426>
 80082f8:	449a      	add	sl, r3
 80082fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082fe:	f000 f9b5 	bl	800866c <__hi0bits>
 8008302:	f1c6 0620 	rsb	r6, r6, #32
 8008306:	42b0      	cmp	r0, r6
 8008308:	dbe7      	blt.n	80082da <__gethex+0x412>
 800830a:	e7f0      	b.n	80082ee <__gethex+0x426>

0800830c <L_shift>:
 800830c:	f1c2 0208 	rsb	r2, r2, #8
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	f1c2 0620 	rsb	r6, r2, #32
 8008318:	6843      	ldr	r3, [r0, #4]
 800831a:	6804      	ldr	r4, [r0, #0]
 800831c:	fa03 f506 	lsl.w	r5, r3, r6
 8008320:	432c      	orrs	r4, r5
 8008322:	40d3      	lsrs	r3, r2
 8008324:	6004      	str	r4, [r0, #0]
 8008326:	f840 3f04 	str.w	r3, [r0, #4]!
 800832a:	4288      	cmp	r0, r1
 800832c:	d3f4      	bcc.n	8008318 <L_shift+0xc>
 800832e:	bd70      	pop	{r4, r5, r6, pc}

08008330 <__match>:
 8008330:	b530      	push	{r4, r5, lr}
 8008332:	6803      	ldr	r3, [r0, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800833a:	b914      	cbnz	r4, 8008342 <__match+0x12>
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	bd30      	pop	{r4, r5, pc}
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800834a:	2d19      	cmp	r5, #25
 800834c:	bf98      	it	ls
 800834e:	3220      	addls	r2, #32
 8008350:	42a2      	cmp	r2, r4
 8008352:	d0f0      	beq.n	8008336 <__match+0x6>
 8008354:	2000      	movs	r0, #0
 8008356:	e7f3      	b.n	8008340 <__match+0x10>

08008358 <__hexnan>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	2500      	movs	r5, #0
 800835e:	680b      	ldr	r3, [r1, #0]
 8008360:	4682      	mov	sl, r0
 8008362:	115f      	asrs	r7, r3, #5
 8008364:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008368:	f013 031f 	ands.w	r3, r3, #31
 800836c:	bf18      	it	ne
 800836e:	3704      	addne	r7, #4
 8008370:	1f3e      	subs	r6, r7, #4
 8008372:	4690      	mov	r8, r2
 8008374:	46b1      	mov	r9, r6
 8008376:	4634      	mov	r4, r6
 8008378:	46ab      	mov	fp, r5
 800837a:	b087      	sub	sp, #28
 800837c:	6801      	ldr	r1, [r0, #0]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	f847 5c04 	str.w	r5, [r7, #-4]
 8008384:	9502      	str	r5, [sp, #8]
 8008386:	784a      	ldrb	r2, [r1, #1]
 8008388:	1c4b      	adds	r3, r1, #1
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	b342      	cbz	r2, 80083e0 <__hexnan+0x88>
 800838e:	4610      	mov	r0, r2
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	9204      	str	r2, [sp, #16]
 8008394:	f7ff fd83 	bl	8007e9e <__hexdig_fun>
 8008398:	2800      	cmp	r0, #0
 800839a:	d143      	bne.n	8008424 <__hexnan+0xcc>
 800839c:	9a04      	ldr	r2, [sp, #16]
 800839e:	9905      	ldr	r1, [sp, #20]
 80083a0:	2a20      	cmp	r2, #32
 80083a2:	d818      	bhi.n	80083d6 <__hexnan+0x7e>
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	459b      	cmp	fp, r3
 80083a8:	dd13      	ble.n	80083d2 <__hexnan+0x7a>
 80083aa:	454c      	cmp	r4, r9
 80083ac:	d206      	bcs.n	80083bc <__hexnan+0x64>
 80083ae:	2d07      	cmp	r5, #7
 80083b0:	dc04      	bgt.n	80083bc <__hexnan+0x64>
 80083b2:	462a      	mov	r2, r5
 80083b4:	4649      	mov	r1, r9
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff ffa8 	bl	800830c <L_shift>
 80083bc:	4544      	cmp	r4, r8
 80083be:	d944      	bls.n	800844a <__hexnan+0xf2>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f1a4 0904 	sub.w	r9, r4, #4
 80083c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083ca:	461d      	mov	r5, r3
 80083cc:	464c      	mov	r4, r9
 80083ce:	f8cd b008 	str.w	fp, [sp, #8]
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	e7d7      	b.n	8008386 <__hexnan+0x2e>
 80083d6:	2a29      	cmp	r2, #41	; 0x29
 80083d8:	d14a      	bne.n	8008470 <__hexnan+0x118>
 80083da:	3102      	adds	r1, #2
 80083dc:	f8ca 1000 	str.w	r1, [sl]
 80083e0:	f1bb 0f00 	cmp.w	fp, #0
 80083e4:	d044      	beq.n	8008470 <__hexnan+0x118>
 80083e6:	454c      	cmp	r4, r9
 80083e8:	d206      	bcs.n	80083f8 <__hexnan+0xa0>
 80083ea:	2d07      	cmp	r5, #7
 80083ec:	dc04      	bgt.n	80083f8 <__hexnan+0xa0>
 80083ee:	462a      	mov	r2, r5
 80083f0:	4649      	mov	r1, r9
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff ff8a 	bl	800830c <L_shift>
 80083f8:	4544      	cmp	r4, r8
 80083fa:	d928      	bls.n	800844e <__hexnan+0xf6>
 80083fc:	4643      	mov	r3, r8
 80083fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8008402:	42a6      	cmp	r6, r4
 8008404:	f843 2b04 	str.w	r2, [r3], #4
 8008408:	d2f9      	bcs.n	80083fe <__hexnan+0xa6>
 800840a:	2200      	movs	r2, #0
 800840c:	f843 2b04 	str.w	r2, [r3], #4
 8008410:	429e      	cmp	r6, r3
 8008412:	d2fb      	bcs.n	800840c <__hexnan+0xb4>
 8008414:	6833      	ldr	r3, [r6, #0]
 8008416:	b91b      	cbnz	r3, 8008420 <__hexnan+0xc8>
 8008418:	4546      	cmp	r6, r8
 800841a:	d127      	bne.n	800846c <__hexnan+0x114>
 800841c:	2301      	movs	r3, #1
 800841e:	6033      	str	r3, [r6, #0]
 8008420:	2005      	movs	r0, #5
 8008422:	e026      	b.n	8008472 <__hexnan+0x11a>
 8008424:	3501      	adds	r5, #1
 8008426:	2d08      	cmp	r5, #8
 8008428:	f10b 0b01 	add.w	fp, fp, #1
 800842c:	dd06      	ble.n	800843c <__hexnan+0xe4>
 800842e:	4544      	cmp	r4, r8
 8008430:	d9cf      	bls.n	80083d2 <__hexnan+0x7a>
 8008432:	2300      	movs	r3, #0
 8008434:	2501      	movs	r5, #1
 8008436:	f844 3c04 	str.w	r3, [r4, #-4]
 800843a:	3c04      	subs	r4, #4
 800843c:	6822      	ldr	r2, [r4, #0]
 800843e:	f000 000f 	and.w	r0, r0, #15
 8008442:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	e7c3      	b.n	80083d2 <__hexnan+0x7a>
 800844a:	2508      	movs	r5, #8
 800844c:	e7c1      	b.n	80083d2 <__hexnan+0x7a>
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0df      	beq.n	8008414 <__hexnan+0xbc>
 8008454:	f04f 32ff 	mov.w	r2, #4294967295
 8008458:	f1c3 0320 	rsb	r3, r3, #32
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
 8008460:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008464:	401a      	ands	r2, r3
 8008466:	f847 2c04 	str.w	r2, [r7, #-4]
 800846a:	e7d3      	b.n	8008414 <__hexnan+0xbc>
 800846c:	3e04      	subs	r6, #4
 800846e:	e7d1      	b.n	8008414 <__hexnan+0xbc>
 8008470:	2004      	movs	r0, #4
 8008472:	b007      	add	sp, #28
 8008474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008478 <__locale_ctype_ptr_l>:
 8008478:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800847c:	4770      	bx	lr

0800847e <__localeconv_l>:
 800847e:	30f0      	adds	r0, #240	; 0xf0
 8008480:	4770      	bx	lr
	...

08008484 <_localeconv_r>:
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <_localeconv_r+0x14>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6a18      	ldr	r0, [r3, #32]
 800848a:	4b04      	ldr	r3, [pc, #16]	; (800849c <_localeconv_r+0x18>)
 800848c:	2800      	cmp	r0, #0
 800848e:	bf08      	it	eq
 8008490:	4618      	moveq	r0, r3
 8008492:	30f0      	adds	r0, #240	; 0xf0
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	2000000c 	.word	0x2000000c
 800849c:	20000070 	.word	0x20000070

080084a0 <__ascii_mbtowc>:
 80084a0:	b082      	sub	sp, #8
 80084a2:	b901      	cbnz	r1, 80084a6 <__ascii_mbtowc+0x6>
 80084a4:	a901      	add	r1, sp, #4
 80084a6:	b142      	cbz	r2, 80084ba <__ascii_mbtowc+0x1a>
 80084a8:	b14b      	cbz	r3, 80084be <__ascii_mbtowc+0x1e>
 80084aa:	7813      	ldrb	r3, [r2, #0]
 80084ac:	600b      	str	r3, [r1, #0]
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	1c10      	adds	r0, r2, #0
 80084b2:	bf18      	it	ne
 80084b4:	2001      	movne	r0, #1
 80084b6:	b002      	add	sp, #8
 80084b8:	4770      	bx	lr
 80084ba:	4610      	mov	r0, r2
 80084bc:	e7fb      	b.n	80084b6 <__ascii_mbtowc+0x16>
 80084be:	f06f 0001 	mvn.w	r0, #1
 80084c2:	e7f8      	b.n	80084b6 <__ascii_mbtowc+0x16>

080084c4 <memchr>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	b2c9      	uxtb	r1, r1
 80084c8:	4402      	add	r2, r0
 80084ca:	4290      	cmp	r0, r2
 80084cc:	4603      	mov	r3, r0
 80084ce:	d101      	bne.n	80084d4 <memchr+0x10>
 80084d0:	2300      	movs	r3, #0
 80084d2:	e003      	b.n	80084dc <memchr+0x18>
 80084d4:	781c      	ldrb	r4, [r3, #0]
 80084d6:	3001      	adds	r0, #1
 80084d8:	428c      	cmp	r4, r1
 80084da:	d1f6      	bne.n	80084ca <memchr+0x6>
 80084dc:	4618      	mov	r0, r3
 80084de:	bd10      	pop	{r4, pc}

080084e0 <__malloc_lock>:
 80084e0:	4770      	bx	lr

080084e2 <__malloc_unlock>:
 80084e2:	4770      	bx	lr

080084e4 <_Balloc>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084e8:	4604      	mov	r4, r0
 80084ea:	460e      	mov	r6, r1
 80084ec:	b93d      	cbnz	r5, 80084fe <_Balloc+0x1a>
 80084ee:	2010      	movs	r0, #16
 80084f0:	f7fd f868 	bl	80055c4 <malloc>
 80084f4:	6260      	str	r0, [r4, #36]	; 0x24
 80084f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084fa:	6005      	str	r5, [r0, #0]
 80084fc:	60c5      	str	r5, [r0, #12]
 80084fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008500:	68eb      	ldr	r3, [r5, #12]
 8008502:	b183      	cbz	r3, 8008526 <_Balloc+0x42>
 8008504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800850c:	b9b8      	cbnz	r0, 800853e <_Balloc+0x5a>
 800850e:	2101      	movs	r1, #1
 8008510:	fa01 f506 	lsl.w	r5, r1, r6
 8008514:	1d6a      	adds	r2, r5, #5
 8008516:	0092      	lsls	r2, r2, #2
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fbdb 	bl	8008cd4 <_calloc_r>
 800851e:	b160      	cbz	r0, 800853a <_Balloc+0x56>
 8008520:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008524:	e00e      	b.n	8008544 <_Balloc+0x60>
 8008526:	2221      	movs	r2, #33	; 0x21
 8008528:	2104      	movs	r1, #4
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fbd2 	bl	8008cd4 <_calloc_r>
 8008530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008532:	60e8      	str	r0, [r5, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e4      	bne.n	8008504 <_Balloc+0x20>
 800853a:	2000      	movs	r0, #0
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	6802      	ldr	r2, [r0, #0]
 8008540:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008544:	2300      	movs	r3, #0
 8008546:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854a:	e7f7      	b.n	800853c <_Balloc+0x58>

0800854c <_Bfree>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008550:	4606      	mov	r6, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b93c      	cbnz	r4, 8008566 <_Bfree+0x1a>
 8008556:	2010      	movs	r0, #16
 8008558:	f7fd f834 	bl	80055c4 <malloc>
 800855c:	6270      	str	r0, [r6, #36]	; 0x24
 800855e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008562:	6004      	str	r4, [r0, #0]
 8008564:	60c4      	str	r4, [r0, #12]
 8008566:	b13d      	cbz	r5, 8008578 <_Bfree+0x2c>
 8008568:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800856a:	686a      	ldr	r2, [r5, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008572:	6029      	str	r1, [r5, #0]
 8008574:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008578:	bd70      	pop	{r4, r5, r6, pc}

0800857a <__multadd>:
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	461f      	mov	r7, r3
 8008580:	4606      	mov	r6, r0
 8008582:	460c      	mov	r4, r1
 8008584:	2300      	movs	r3, #0
 8008586:	690d      	ldr	r5, [r1, #16]
 8008588:	f101 0c14 	add.w	ip, r1, #20
 800858c:	f8dc 0000 	ldr.w	r0, [ip]
 8008590:	3301      	adds	r3, #1
 8008592:	b281      	uxth	r1, r0
 8008594:	fb02 7101 	mla	r1, r2, r1, r7
 8008598:	0c00      	lsrs	r0, r0, #16
 800859a:	0c0f      	lsrs	r7, r1, #16
 800859c:	fb02 7000 	mla	r0, r2, r0, r7
 80085a0:	b289      	uxth	r1, r1
 80085a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80085a6:	429d      	cmp	r5, r3
 80085a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80085ac:	f84c 1b04 	str.w	r1, [ip], #4
 80085b0:	dcec      	bgt.n	800858c <__multadd+0x12>
 80085b2:	b1d7      	cbz	r7, 80085ea <__multadd+0x70>
 80085b4:	68a3      	ldr	r3, [r4, #8]
 80085b6:	42ab      	cmp	r3, r5
 80085b8:	dc12      	bgt.n	80085e0 <__multadd+0x66>
 80085ba:	6861      	ldr	r1, [r4, #4]
 80085bc:	4630      	mov	r0, r6
 80085be:	3101      	adds	r1, #1
 80085c0:	f7ff ff90 	bl	80084e4 <_Balloc>
 80085c4:	4680      	mov	r8, r0
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	f104 010c 	add.w	r1, r4, #12
 80085cc:	3202      	adds	r2, #2
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	300c      	adds	r0, #12
 80085d2:	f7fd f807 	bl	80055e4 <memcpy>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff ffb7 	bl	800854c <_Bfree>
 80085de:	4644      	mov	r4, r8
 80085e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e4:	3501      	adds	r5, #1
 80085e6:	615f      	str	r7, [r3, #20]
 80085e8:	6125      	str	r5, [r4, #16]
 80085ea:	4620      	mov	r0, r4
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085f0 <__s2b>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	4615      	mov	r5, r2
 80085f6:	2209      	movs	r2, #9
 80085f8:	461f      	mov	r7, r3
 80085fa:	3308      	adds	r3, #8
 80085fc:	460c      	mov	r4, r1
 80085fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008602:	4606      	mov	r6, r0
 8008604:	2201      	movs	r2, #1
 8008606:	2100      	movs	r1, #0
 8008608:	429a      	cmp	r2, r3
 800860a:	db20      	blt.n	800864e <__s2b+0x5e>
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff ff69 	bl	80084e4 <_Balloc>
 8008612:	9b08      	ldr	r3, [sp, #32]
 8008614:	2d09      	cmp	r5, #9
 8008616:	6143      	str	r3, [r0, #20]
 8008618:	f04f 0301 	mov.w	r3, #1
 800861c:	6103      	str	r3, [r0, #16]
 800861e:	dd19      	ble.n	8008654 <__s2b+0x64>
 8008620:	f104 0809 	add.w	r8, r4, #9
 8008624:	46c1      	mov	r9, r8
 8008626:	442c      	add	r4, r5
 8008628:	f819 3b01 	ldrb.w	r3, [r9], #1
 800862c:	4601      	mov	r1, r0
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	220a      	movs	r2, #10
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff ffa1 	bl	800857a <__multadd>
 8008638:	45a1      	cmp	r9, r4
 800863a:	d1f5      	bne.n	8008628 <__s2b+0x38>
 800863c:	eb08 0405 	add.w	r4, r8, r5
 8008640:	3c08      	subs	r4, #8
 8008642:	1b2d      	subs	r5, r5, r4
 8008644:	1963      	adds	r3, r4, r5
 8008646:	42bb      	cmp	r3, r7
 8008648:	db07      	blt.n	800865a <__s2b+0x6a>
 800864a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	3101      	adds	r1, #1
 8008652:	e7d9      	b.n	8008608 <__s2b+0x18>
 8008654:	340a      	adds	r4, #10
 8008656:	2509      	movs	r5, #9
 8008658:	e7f3      	b.n	8008642 <__s2b+0x52>
 800865a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800865e:	4601      	mov	r1, r0
 8008660:	3b30      	subs	r3, #48	; 0x30
 8008662:	220a      	movs	r2, #10
 8008664:	4630      	mov	r0, r6
 8008666:	f7ff ff88 	bl	800857a <__multadd>
 800866a:	e7eb      	b.n	8008644 <__s2b+0x54>

0800866c <__hi0bits>:
 800866c:	0c02      	lsrs	r2, r0, #16
 800866e:	0412      	lsls	r2, r2, #16
 8008670:	4603      	mov	r3, r0
 8008672:	b9b2      	cbnz	r2, 80086a2 <__hi0bits+0x36>
 8008674:	0403      	lsls	r3, r0, #16
 8008676:	2010      	movs	r0, #16
 8008678:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800867c:	bf04      	itt	eq
 800867e:	021b      	lsleq	r3, r3, #8
 8008680:	3008      	addeq	r0, #8
 8008682:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008686:	bf04      	itt	eq
 8008688:	011b      	lsleq	r3, r3, #4
 800868a:	3004      	addeq	r0, #4
 800868c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008690:	bf04      	itt	eq
 8008692:	009b      	lsleq	r3, r3, #2
 8008694:	3002      	addeq	r0, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	db06      	blt.n	80086a8 <__hi0bits+0x3c>
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	d503      	bpl.n	80086a6 <__hi0bits+0x3a>
 800869e:	3001      	adds	r0, #1
 80086a0:	4770      	bx	lr
 80086a2:	2000      	movs	r0, #0
 80086a4:	e7e8      	b.n	8008678 <__hi0bits+0xc>
 80086a6:	2020      	movs	r0, #32
 80086a8:	4770      	bx	lr

080086aa <__lo0bits>:
 80086aa:	6803      	ldr	r3, [r0, #0]
 80086ac:	4601      	mov	r1, r0
 80086ae:	f013 0207 	ands.w	r2, r3, #7
 80086b2:	d00b      	beq.n	80086cc <__lo0bits+0x22>
 80086b4:	07da      	lsls	r2, r3, #31
 80086b6:	d423      	bmi.n	8008700 <__lo0bits+0x56>
 80086b8:	0798      	lsls	r0, r3, #30
 80086ba:	bf49      	itett	mi
 80086bc:	085b      	lsrmi	r3, r3, #1
 80086be:	089b      	lsrpl	r3, r3, #2
 80086c0:	2001      	movmi	r0, #1
 80086c2:	600b      	strmi	r3, [r1, #0]
 80086c4:	bf5c      	itt	pl
 80086c6:	600b      	strpl	r3, [r1, #0]
 80086c8:	2002      	movpl	r0, #2
 80086ca:	4770      	bx	lr
 80086cc:	b298      	uxth	r0, r3
 80086ce:	b9a8      	cbnz	r0, 80086fc <__lo0bits+0x52>
 80086d0:	2010      	movs	r0, #16
 80086d2:	0c1b      	lsrs	r3, r3, #16
 80086d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086d8:	bf04      	itt	eq
 80086da:	0a1b      	lsreq	r3, r3, #8
 80086dc:	3008      	addeq	r0, #8
 80086de:	071a      	lsls	r2, r3, #28
 80086e0:	bf04      	itt	eq
 80086e2:	091b      	lsreq	r3, r3, #4
 80086e4:	3004      	addeq	r0, #4
 80086e6:	079a      	lsls	r2, r3, #30
 80086e8:	bf04      	itt	eq
 80086ea:	089b      	lsreq	r3, r3, #2
 80086ec:	3002      	addeq	r0, #2
 80086ee:	07da      	lsls	r2, r3, #31
 80086f0:	d402      	bmi.n	80086f8 <__lo0bits+0x4e>
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	d006      	beq.n	8008704 <__lo0bits+0x5a>
 80086f6:	3001      	adds	r0, #1
 80086f8:	600b      	str	r3, [r1, #0]
 80086fa:	4770      	bx	lr
 80086fc:	4610      	mov	r0, r2
 80086fe:	e7e9      	b.n	80086d4 <__lo0bits+0x2a>
 8008700:	2000      	movs	r0, #0
 8008702:	4770      	bx	lr
 8008704:	2020      	movs	r0, #32
 8008706:	4770      	bx	lr

08008708 <__i2b>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	2101      	movs	r1, #1
 800870e:	f7ff fee9 	bl	80084e4 <_Balloc>
 8008712:	2201      	movs	r2, #1
 8008714:	6144      	str	r4, [r0, #20]
 8008716:	6102      	str	r2, [r0, #16]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__multiply>:
 800871a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871e:	4614      	mov	r4, r2
 8008720:	690a      	ldr	r2, [r1, #16]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	4688      	mov	r8, r1
 8008726:	429a      	cmp	r2, r3
 8008728:	bfbe      	ittt	lt
 800872a:	460b      	movlt	r3, r1
 800872c:	46a0      	movlt	r8, r4
 800872e:	461c      	movlt	r4, r3
 8008730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008734:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008738:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008740:	eb07 0609 	add.w	r6, r7, r9
 8008744:	42b3      	cmp	r3, r6
 8008746:	bfb8      	it	lt
 8008748:	3101      	addlt	r1, #1
 800874a:	f7ff fecb 	bl	80084e4 <_Balloc>
 800874e:	f100 0514 	add.w	r5, r0, #20
 8008752:	462b      	mov	r3, r5
 8008754:	2200      	movs	r2, #0
 8008756:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800875a:	4573      	cmp	r3, lr
 800875c:	d316      	bcc.n	800878c <__multiply+0x72>
 800875e:	f104 0214 	add.w	r2, r4, #20
 8008762:	f108 0114 	add.w	r1, r8, #20
 8008766:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800876a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	9b00      	ldr	r3, [sp, #0]
 8008772:	9201      	str	r2, [sp, #4]
 8008774:	4293      	cmp	r3, r2
 8008776:	d80c      	bhi.n	8008792 <__multiply+0x78>
 8008778:	2e00      	cmp	r6, #0
 800877a:	dd03      	ble.n	8008784 <__multiply+0x6a>
 800877c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008780:	2b00      	cmp	r3, #0
 8008782:	d05d      	beq.n	8008840 <__multiply+0x126>
 8008784:	6106      	str	r6, [r0, #16]
 8008786:	b003      	add	sp, #12
 8008788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878c:	f843 2b04 	str.w	r2, [r3], #4
 8008790:	e7e3      	b.n	800875a <__multiply+0x40>
 8008792:	f8b2 b000 	ldrh.w	fp, [r2]
 8008796:	f1bb 0f00 	cmp.w	fp, #0
 800879a:	d023      	beq.n	80087e4 <__multiply+0xca>
 800879c:	4689      	mov	r9, r1
 800879e:	46ac      	mov	ip, r5
 80087a0:	f04f 0800 	mov.w	r8, #0
 80087a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80087a8:	f8dc a000 	ldr.w	sl, [ip]
 80087ac:	b2a3      	uxth	r3, r4
 80087ae:	fa1f fa8a 	uxth.w	sl, sl
 80087b2:	fb0b a303 	mla	r3, fp, r3, sl
 80087b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087ba:	f8dc 4000 	ldr.w	r4, [ip]
 80087be:	4443      	add	r3, r8
 80087c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80087c8:	46e2      	mov	sl, ip
 80087ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087d4:	454f      	cmp	r7, r9
 80087d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087da:	f84a 3b04 	str.w	r3, [sl], #4
 80087de:	d82b      	bhi.n	8008838 <__multiply+0x11e>
 80087e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	3204      	adds	r2, #4
 80087e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087ec:	f1ba 0f00 	cmp.w	sl, #0
 80087f0:	d020      	beq.n	8008834 <__multiply+0x11a>
 80087f2:	4689      	mov	r9, r1
 80087f4:	46a8      	mov	r8, r5
 80087f6:	f04f 0b00 	mov.w	fp, #0
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008800:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008804:	b29b      	uxth	r3, r3
 8008806:	fb0a 440c 	mla	r4, sl, ip, r4
 800880a:	46c4      	mov	ip, r8
 800880c:	445c      	add	r4, fp
 800880e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008812:	f84c 3b04 	str.w	r3, [ip], #4
 8008816:	f859 3b04 	ldr.w	r3, [r9], #4
 800881a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	fb0a b303 	mla	r3, sl, r3, fp
 8008824:	454f      	cmp	r7, r9
 8008826:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800882a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800882e:	d805      	bhi.n	800883c <__multiply+0x122>
 8008830:	f8c8 3004 	str.w	r3, [r8, #4]
 8008834:	3504      	adds	r5, #4
 8008836:	e79b      	b.n	8008770 <__multiply+0x56>
 8008838:	46d4      	mov	ip, sl
 800883a:	e7b3      	b.n	80087a4 <__multiply+0x8a>
 800883c:	46e0      	mov	r8, ip
 800883e:	e7dd      	b.n	80087fc <__multiply+0xe2>
 8008840:	3e01      	subs	r6, #1
 8008842:	e799      	b.n	8008778 <__multiply+0x5e>

08008844 <__pow5mult>:
 8008844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008848:	4615      	mov	r5, r2
 800884a:	f012 0203 	ands.w	r2, r2, #3
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	d007      	beq.n	8008864 <__pow5mult+0x20>
 8008854:	4c21      	ldr	r4, [pc, #132]	; (80088dc <__pow5mult+0x98>)
 8008856:	3a01      	subs	r2, #1
 8008858:	2300      	movs	r3, #0
 800885a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800885e:	f7ff fe8c 	bl	800857a <__multadd>
 8008862:	4607      	mov	r7, r0
 8008864:	10ad      	asrs	r5, r5, #2
 8008866:	d035      	beq.n	80088d4 <__pow5mult+0x90>
 8008868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800886a:	b93c      	cbnz	r4, 800887c <__pow5mult+0x38>
 800886c:	2010      	movs	r0, #16
 800886e:	f7fc fea9 	bl	80055c4 <malloc>
 8008872:	6270      	str	r0, [r6, #36]	; 0x24
 8008874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	60c4      	str	r4, [r0, #12]
 800887c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008884:	b94c      	cbnz	r4, 800889a <__pow5mult+0x56>
 8008886:	f240 2171 	movw	r1, #625	; 0x271
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff3c 	bl	8008708 <__i2b>
 8008890:	2300      	movs	r3, #0
 8008892:	4604      	mov	r4, r0
 8008894:	f8c8 0008 	str.w	r0, [r8, #8]
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	07eb      	lsls	r3, r5, #31
 80088a0:	d50a      	bpl.n	80088b8 <__pow5mult+0x74>
 80088a2:	4639      	mov	r1, r7
 80088a4:	4622      	mov	r2, r4
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff37 	bl	800871a <__multiply>
 80088ac:	4681      	mov	r9, r0
 80088ae:	4639      	mov	r1, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff fe4b 	bl	800854c <_Bfree>
 80088b6:	464f      	mov	r7, r9
 80088b8:	106d      	asrs	r5, r5, #1
 80088ba:	d00b      	beq.n	80088d4 <__pow5mult+0x90>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	b938      	cbnz	r0, 80088d0 <__pow5mult+0x8c>
 80088c0:	4622      	mov	r2, r4
 80088c2:	4621      	mov	r1, r4
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff ff28 	bl	800871a <__multiply>
 80088ca:	6020      	str	r0, [r4, #0]
 80088cc:	f8c0 8000 	str.w	r8, [r0]
 80088d0:	4604      	mov	r4, r0
 80088d2:	e7e4      	b.n	800889e <__pow5mult+0x5a>
 80088d4:	4638      	mov	r0, r7
 80088d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088da:	bf00      	nop
 80088dc:	08009248 	.word	0x08009248

080088e0 <__lshift>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	4607      	mov	r7, r0
 80088e8:	4616      	mov	r6, r2
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f0:	eb0a 0903 	add.w	r9, sl, r3
 80088f4:	6849      	ldr	r1, [r1, #4]
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	f109 0501 	add.w	r5, r9, #1
 80088fc:	42ab      	cmp	r3, r5
 80088fe:	db32      	blt.n	8008966 <__lshift+0x86>
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fdef 	bl	80084e4 <_Balloc>
 8008906:	2300      	movs	r3, #0
 8008908:	4680      	mov	r8, r0
 800890a:	461a      	mov	r2, r3
 800890c:	f100 0114 	add.w	r1, r0, #20
 8008910:	4553      	cmp	r3, sl
 8008912:	db2b      	blt.n	800896c <__lshift+0x8c>
 8008914:	6920      	ldr	r0, [r4, #16]
 8008916:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800891a:	f104 0314 	add.w	r3, r4, #20
 800891e:	f016 021f 	ands.w	r2, r6, #31
 8008922:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008926:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800892a:	d025      	beq.n	8008978 <__lshift+0x98>
 800892c:	2000      	movs	r0, #0
 800892e:	f1c2 0e20 	rsb	lr, r2, #32
 8008932:	468a      	mov	sl, r1
 8008934:	681e      	ldr	r6, [r3, #0]
 8008936:	4096      	lsls	r6, r2
 8008938:	4330      	orrs	r0, r6
 800893a:	f84a 0b04 	str.w	r0, [sl], #4
 800893e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008942:	459c      	cmp	ip, r3
 8008944:	fa20 f00e 	lsr.w	r0, r0, lr
 8008948:	d814      	bhi.n	8008974 <__lshift+0x94>
 800894a:	6048      	str	r0, [r1, #4]
 800894c:	b108      	cbz	r0, 8008952 <__lshift+0x72>
 800894e:	f109 0502 	add.w	r5, r9, #2
 8008952:	3d01      	subs	r5, #1
 8008954:	4638      	mov	r0, r7
 8008956:	f8c8 5010 	str.w	r5, [r8, #16]
 800895a:	4621      	mov	r1, r4
 800895c:	f7ff fdf6 	bl	800854c <_Bfree>
 8008960:	4640      	mov	r0, r8
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008966:	3101      	adds	r1, #1
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	e7c7      	b.n	80088fc <__lshift+0x1c>
 800896c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008970:	3301      	adds	r3, #1
 8008972:	e7cd      	b.n	8008910 <__lshift+0x30>
 8008974:	4651      	mov	r1, sl
 8008976:	e7dc      	b.n	8008932 <__lshift+0x52>
 8008978:	3904      	subs	r1, #4
 800897a:	f853 2b04 	ldr.w	r2, [r3], #4
 800897e:	459c      	cmp	ip, r3
 8008980:	f841 2f04 	str.w	r2, [r1, #4]!
 8008984:	d8f9      	bhi.n	800897a <__lshift+0x9a>
 8008986:	e7e4      	b.n	8008952 <__lshift+0x72>

08008988 <__mcmp>:
 8008988:	6903      	ldr	r3, [r0, #16]
 800898a:	690a      	ldr	r2, [r1, #16]
 800898c:	b530      	push	{r4, r5, lr}
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	d10c      	bne.n	80089ac <__mcmp+0x24>
 8008992:	0092      	lsls	r2, r2, #2
 8008994:	3014      	adds	r0, #20
 8008996:	3114      	adds	r1, #20
 8008998:	1884      	adds	r4, r0, r2
 800899a:	4411      	add	r1, r2
 800899c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a4:	4295      	cmp	r5, r2
 80089a6:	d003      	beq.n	80089b0 <__mcmp+0x28>
 80089a8:	d305      	bcc.n	80089b6 <__mcmp+0x2e>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4618      	mov	r0, r3
 80089ae:	bd30      	pop	{r4, r5, pc}
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d3f3      	bcc.n	800899c <__mcmp+0x14>
 80089b4:	e7fa      	b.n	80089ac <__mcmp+0x24>
 80089b6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ba:	e7f7      	b.n	80089ac <__mcmp+0x24>

080089bc <__mdiff>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	460d      	mov	r5, r1
 80089c2:	4607      	mov	r7, r0
 80089c4:	4611      	mov	r1, r2
 80089c6:	4628      	mov	r0, r5
 80089c8:	4614      	mov	r4, r2
 80089ca:	f7ff ffdd 	bl	8008988 <__mcmp>
 80089ce:	1e06      	subs	r6, r0, #0
 80089d0:	d108      	bne.n	80089e4 <__mdiff+0x28>
 80089d2:	4631      	mov	r1, r6
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff fd85 	bl	80084e4 <_Balloc>
 80089da:	2301      	movs	r3, #1
 80089dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e4:	bfa4      	itt	ge
 80089e6:	4623      	movge	r3, r4
 80089e8:	462c      	movge	r4, r5
 80089ea:	4638      	mov	r0, r7
 80089ec:	6861      	ldr	r1, [r4, #4]
 80089ee:	bfa6      	itte	ge
 80089f0:	461d      	movge	r5, r3
 80089f2:	2600      	movge	r6, #0
 80089f4:	2601      	movlt	r6, #1
 80089f6:	f7ff fd75 	bl	80084e4 <_Balloc>
 80089fa:	f04f 0e00 	mov.w	lr, #0
 80089fe:	60c6      	str	r6, [r0, #12]
 8008a00:	692b      	ldr	r3, [r5, #16]
 8008a02:	6926      	ldr	r6, [r4, #16]
 8008a04:	f104 0214 	add.w	r2, r4, #20
 8008a08:	f105 0914 	add.w	r9, r5, #20
 8008a0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a14:	f100 0114 	add.w	r1, r0, #20
 8008a18:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a1c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008a20:	fa1f f38a 	uxth.w	r3, sl
 8008a24:	4473      	add	r3, lr
 8008a26:	b2ac      	uxth	r4, r5
 8008a28:	1b1b      	subs	r3, r3, r4
 8008a2a:	0c2c      	lsrs	r4, r5, #16
 8008a2c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008a30:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008a3a:	45c8      	cmp	r8, r9
 8008a3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008a40:	4694      	mov	ip, r2
 8008a42:	f841 4b04 	str.w	r4, [r1], #4
 8008a46:	d8e7      	bhi.n	8008a18 <__mdiff+0x5c>
 8008a48:	45bc      	cmp	ip, r7
 8008a4a:	d304      	bcc.n	8008a56 <__mdiff+0x9a>
 8008a4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a50:	b183      	cbz	r3, 8008a74 <__mdiff+0xb8>
 8008a52:	6106      	str	r6, [r0, #16]
 8008a54:	e7c4      	b.n	80089e0 <__mdiff+0x24>
 8008a56:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008a5a:	b2a2      	uxth	r2, r4
 8008a5c:	4472      	add	r2, lr
 8008a5e:	1413      	asrs	r3, r2, #16
 8008a60:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a64:	b292      	uxth	r2, r2
 8008a66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a6a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a6e:	f841 2b04 	str.w	r2, [r1], #4
 8008a72:	e7e9      	b.n	8008a48 <__mdiff+0x8c>
 8008a74:	3e01      	subs	r6, #1
 8008a76:	e7e9      	b.n	8008a4c <__mdiff+0x90>

08008a78 <__ulp>:
 8008a78:	4b10      	ldr	r3, [pc, #64]	; (8008abc <__ulp+0x44>)
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dd02      	ble.n	8008a8a <__ulp+0x12>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4619      	mov	r1, r3
 8008a88:	4770      	bx	lr
 8008a8a:	425b      	negs	r3, r3
 8008a8c:	151b      	asrs	r3, r3, #20
 8008a8e:	2b13      	cmp	r3, #19
 8008a90:	f04f 0000 	mov.w	r0, #0
 8008a94:	f04f 0100 	mov.w	r1, #0
 8008a98:	dc04      	bgt.n	8008aa4 <__ulp+0x2c>
 8008a9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a9e:	fa42 f103 	asr.w	r1, r2, r3
 8008aa2:	4770      	bx	lr
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	3b14      	subs	r3, #20
 8008aa8:	2b1e      	cmp	r3, #30
 8008aaa:	bfce      	itee	gt
 8008aac:	4613      	movgt	r3, r2
 8008aae:	f1c3 031f 	rsble	r3, r3, #31
 8008ab2:	fa02 f303 	lslle.w	r3, r2, r3
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	7ff00000 	.word	0x7ff00000

08008ac0 <__b2d>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	6907      	ldr	r7, [r0, #16]
 8008ac6:	f100 0914 	add.w	r9, r0, #20
 8008aca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008ace:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008ad2:	f1a7 0804 	sub.w	r8, r7, #4
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f7ff fdc8 	bl	800866c <__hi0bits>
 8008adc:	f1c0 0320 	rsb	r3, r0, #32
 8008ae0:	280a      	cmp	r0, #10
 8008ae2:	600b      	str	r3, [r1, #0]
 8008ae4:	491e      	ldr	r1, [pc, #120]	; (8008b60 <__b2d+0xa0>)
 8008ae6:	dc17      	bgt.n	8008b18 <__b2d+0x58>
 8008ae8:	45c1      	cmp	r9, r8
 8008aea:	bf28      	it	cs
 8008aec:	2200      	movcs	r2, #0
 8008aee:	f1c0 0c0b 	rsb	ip, r0, #11
 8008af2:	fa26 f30c 	lsr.w	r3, r6, ip
 8008af6:	bf38      	it	cc
 8008af8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008afc:	ea43 0501 	orr.w	r5, r3, r1
 8008b00:	f100 0315 	add.w	r3, r0, #21
 8008b04:	fa06 f303 	lsl.w	r3, r6, r3
 8008b08:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b0c:	ea43 0402 	orr.w	r4, r3, r2
 8008b10:	4620      	mov	r0, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b18:	45c1      	cmp	r9, r8
 8008b1a:	bf3a      	itte	cc
 8008b1c:	f1a7 0808 	subcc.w	r8, r7, #8
 8008b20:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b24:	2200      	movcs	r2, #0
 8008b26:	f1b0 030b 	subs.w	r3, r0, #11
 8008b2a:	d015      	beq.n	8008b58 <__b2d+0x98>
 8008b2c:	409e      	lsls	r6, r3
 8008b2e:	f1c3 0720 	rsb	r7, r3, #32
 8008b32:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008b36:	fa22 f107 	lsr.w	r1, r2, r7
 8008b3a:	45c8      	cmp	r8, r9
 8008b3c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008b40:	ea46 0501 	orr.w	r5, r6, r1
 8008b44:	bf94      	ite	ls
 8008b46:	2100      	movls	r1, #0
 8008b48:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b4c:	fa02 f003 	lsl.w	r0, r2, r3
 8008b50:	40f9      	lsrs	r1, r7
 8008b52:	ea40 0401 	orr.w	r4, r0, r1
 8008b56:	e7db      	b.n	8008b10 <__b2d+0x50>
 8008b58:	ea46 0501 	orr.w	r5, r6, r1
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	e7d7      	b.n	8008b10 <__b2d+0x50>
 8008b60:	3ff00000 	.word	0x3ff00000

08008b64 <__d2b>:
 8008b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b68:	461c      	mov	r4, r3
 8008b6a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4690      	mov	r8, r2
 8008b72:	f7ff fcb7 	bl	80084e4 <_Balloc>
 8008b76:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b7a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008b7e:	4607      	mov	r7, r0
 8008b80:	bb34      	cbnz	r4, 8008bd0 <__d2b+0x6c>
 8008b82:	9201      	str	r2, [sp, #4]
 8008b84:	f1b8 0200 	subs.w	r2, r8, #0
 8008b88:	d027      	beq.n	8008bda <__d2b+0x76>
 8008b8a:	a802      	add	r0, sp, #8
 8008b8c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008b90:	f7ff fd8b 	bl	80086aa <__lo0bits>
 8008b94:	9900      	ldr	r1, [sp, #0]
 8008b96:	b1f0      	cbz	r0, 8008bd6 <__d2b+0x72>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	f1c0 0320 	rsb	r3, r0, #32
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	40c2      	lsrs	r2, r0
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	9201      	str	r2, [sp, #4]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf14      	ite	ne
 8008bb0:	2102      	movne	r1, #2
 8008bb2:	2101      	moveq	r1, #1
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	6139      	str	r1, [r7, #16]
 8008bb8:	b1c4      	cbz	r4, 8008bec <__d2b+0x88>
 8008bba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bbe:	4404      	add	r4, r0
 8008bc0:	6034      	str	r4, [r6, #0]
 8008bc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bc6:	6028      	str	r0, [r5, #0]
 8008bc8:	4638      	mov	r0, r7
 8008bca:	b002      	add	sp, #8
 8008bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008bd4:	e7d5      	b.n	8008b82 <__d2b+0x1e>
 8008bd6:	6179      	str	r1, [r7, #20]
 8008bd8:	e7e7      	b.n	8008baa <__d2b+0x46>
 8008bda:	a801      	add	r0, sp, #4
 8008bdc:	f7ff fd65 	bl	80086aa <__lo0bits>
 8008be0:	2101      	movs	r1, #1
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	6139      	str	r1, [r7, #16]
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	3020      	adds	r0, #32
 8008bea:	e7e5      	b.n	8008bb8 <__d2b+0x54>
 8008bec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008bf4:	6030      	str	r0, [r6, #0]
 8008bf6:	6918      	ldr	r0, [r3, #16]
 8008bf8:	f7ff fd38 	bl	800866c <__hi0bits>
 8008bfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c00:	e7e1      	b.n	8008bc6 <__d2b+0x62>

08008c02 <__ratio>:
 8008c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c06:	4688      	mov	r8, r1
 8008c08:	4669      	mov	r1, sp
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	f7ff ff58 	bl	8008ac0 <__b2d>
 8008c10:	468b      	mov	fp, r1
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	4640      	mov	r0, r8
 8008c18:	a901      	add	r1, sp, #4
 8008c1a:	f7ff ff51 	bl	8008ac0 <__b2d>
 8008c1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c26:	460d      	mov	r5, r1
 8008c28:	eba3 0c02 	sub.w	ip, r3, r2
 8008c2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfd5      	itete	le
 8008c3a:	460a      	movle	r2, r1
 8008c3c:	463a      	movgt	r2, r7
 8008c3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c42:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c46:	bfd8      	it	le
 8008c48:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4659      	mov	r1, fp
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f7 fd6a 	bl	800072c <__aeabi_ddiv>
 8008c58:	b003      	add	sp, #12
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c5e <__copybits>:
 8008c5e:	3901      	subs	r1, #1
 8008c60:	b510      	push	{r4, lr}
 8008c62:	1149      	asrs	r1, r1, #5
 8008c64:	6914      	ldr	r4, [r2, #16]
 8008c66:	3101      	adds	r1, #1
 8008c68:	f102 0314 	add.w	r3, r2, #20
 8008c6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	4602      	mov	r2, r0
 8008c78:	d303      	bcc.n	8008c82 <__copybits+0x24>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	428a      	cmp	r2, r1
 8008c7e:	d305      	bcc.n	8008c8c <__copybits+0x2e>
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	f840 2b04 	str.w	r2, [r0], #4
 8008c8a:	e7f3      	b.n	8008c74 <__copybits+0x16>
 8008c8c:	f842 3b04 	str.w	r3, [r2], #4
 8008c90:	e7f4      	b.n	8008c7c <__copybits+0x1e>

08008c92 <__any_on>:
 8008c92:	f100 0214 	add.w	r2, r0, #20
 8008c96:	6900      	ldr	r0, [r0, #16]
 8008c98:	114b      	asrs	r3, r1, #5
 8008c9a:	4298      	cmp	r0, r3
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	db11      	blt.n	8008cc4 <__any_on+0x32>
 8008ca0:	dd0a      	ble.n	8008cb8 <__any_on+0x26>
 8008ca2:	f011 011f 	ands.w	r1, r1, #31
 8008ca6:	d007      	beq.n	8008cb8 <__any_on+0x26>
 8008ca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cac:	fa24 f001 	lsr.w	r0, r4, r1
 8008cb0:	fa00 f101 	lsl.w	r1, r0, r1
 8008cb4:	428c      	cmp	r4, r1
 8008cb6:	d10b      	bne.n	8008cd0 <__any_on+0x3e>
 8008cb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d803      	bhi.n	8008cc8 <__any_on+0x36>
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	bd10      	pop	{r4, pc}
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	e7f7      	b.n	8008cb8 <__any_on+0x26>
 8008cc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	d0f5      	beq.n	8008cbc <__any_on+0x2a>
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	e7f6      	b.n	8008cc2 <__any_on+0x30>

08008cd4 <_calloc_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	fb02 f401 	mul.w	r4, r2, r1
 8008cda:	4621      	mov	r1, r4
 8008cdc:	f7fc fce2 	bl	80056a4 <_malloc_r>
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	b118      	cbz	r0, 8008cec <_calloc_r+0x18>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	f7fc fc87 	bl	80055fa <memset>
 8008cec:	4628      	mov	r0, r5
 8008cee:	bd38      	pop	{r3, r4, r5, pc}

08008cf0 <__ssputs_r>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	688e      	ldr	r6, [r1, #8]
 8008cf6:	4682      	mov	sl, r0
 8008cf8:	429e      	cmp	r6, r3
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	4699      	mov	r9, r3
 8008d00:	d837      	bhi.n	8008d72 <__ssputs_r+0x82>
 8008d02:	898a      	ldrh	r2, [r1, #12]
 8008d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d08:	d031      	beq.n	8008d6e <__ssputs_r+0x7e>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	6909      	ldr	r1, [r1, #16]
 8008d10:	1a6f      	subs	r7, r5, r1
 8008d12:	6965      	ldr	r5, [r4, #20]
 8008d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d18:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d1c:	f109 0301 	add.w	r3, r9, #1
 8008d20:	443b      	add	r3, r7
 8008d22:	429d      	cmp	r5, r3
 8008d24:	bf38      	it	cc
 8008d26:	461d      	movcc	r5, r3
 8008d28:	0553      	lsls	r3, r2, #21
 8008d2a:	d530      	bpl.n	8008d8e <__ssputs_r+0x9e>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7fc fcb9 	bl	80056a4 <_malloc_r>
 8008d32:	4606      	mov	r6, r0
 8008d34:	b950      	cbnz	r0, 8008d4c <__ssputs_r+0x5c>
 8008d36:	230c      	movs	r3, #12
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	f8ca 3000 	str.w	r3, [sl]
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4c:	463a      	mov	r2, r7
 8008d4e:	6921      	ldr	r1, [r4, #16]
 8008d50:	f7fc fc48 	bl	80055e4 <memcpy>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6126      	str	r6, [r4, #16]
 8008d62:	443e      	add	r6, r7
 8008d64:	6026      	str	r6, [r4, #0]
 8008d66:	464e      	mov	r6, r9
 8008d68:	6165      	str	r5, [r4, #20]
 8008d6a:	1bed      	subs	r5, r5, r7
 8008d6c:	60a5      	str	r5, [r4, #8]
 8008d6e:	454e      	cmp	r6, r9
 8008d70:	d900      	bls.n	8008d74 <__ssputs_r+0x84>
 8008d72:	464e      	mov	r6, r9
 8008d74:	4632      	mov	r2, r6
 8008d76:	4641      	mov	r1, r8
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	f000 f92a 	bl	8008fd2 <memmove>
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	2000      	movs	r0, #0
 8008d82:	1b9b      	subs	r3, r3, r6
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	441e      	add	r6, r3
 8008d8a:	6026      	str	r6, [r4, #0]
 8008d8c:	e7dc      	b.n	8008d48 <__ssputs_r+0x58>
 8008d8e:	462a      	mov	r2, r5
 8008d90:	f000 f938 	bl	8009004 <_realloc_r>
 8008d94:	4606      	mov	r6, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1e2      	bne.n	8008d60 <__ssputs_r+0x70>
 8008d9a:	6921      	ldr	r1, [r4, #16]
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f7fc fc35 	bl	800560c <_free_r>
 8008da2:	e7c8      	b.n	8008d36 <__ssputs_r+0x46>

08008da4 <_svfiprintf_r>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	461d      	mov	r5, r3
 8008daa:	898b      	ldrh	r3, [r1, #12]
 8008dac:	b09d      	sub	sp, #116	; 0x74
 8008dae:	061f      	lsls	r7, r3, #24
 8008db0:	4680      	mov	r8, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	4616      	mov	r6, r2
 8008db6:	d50f      	bpl.n	8008dd8 <_svfiprintf_r+0x34>
 8008db8:	690b      	ldr	r3, [r1, #16]
 8008dba:	b96b      	cbnz	r3, 8008dd8 <_svfiprintf_r+0x34>
 8008dbc:	2140      	movs	r1, #64	; 0x40
 8008dbe:	f7fc fc71 	bl	80056a4 <_malloc_r>
 8008dc2:	6020      	str	r0, [r4, #0]
 8008dc4:	6120      	str	r0, [r4, #16]
 8008dc6:	b928      	cbnz	r0, 8008dd4 <_svfiprintf_r+0x30>
 8008dc8:	230c      	movs	r3, #12
 8008dca:	f8c8 3000 	str.w	r3, [r8]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	e0c8      	b.n	8008f66 <_svfiprintf_r+0x1c2>
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	6163      	str	r3, [r4, #20]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008de2:	2330      	movs	r3, #48	; 0x30
 8008de4:	f04f 0b01 	mov.w	fp, #1
 8008de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dec:	9503      	str	r5, [sp, #12]
 8008dee:	4637      	mov	r7, r6
 8008df0:	463d      	mov	r5, r7
 8008df2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008df6:	b10b      	cbz	r3, 8008dfc <_svfiprintf_r+0x58>
 8008df8:	2b25      	cmp	r3, #37	; 0x25
 8008dfa:	d13e      	bne.n	8008e7a <_svfiprintf_r+0xd6>
 8008dfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e00:	d00b      	beq.n	8008e1a <_svfiprintf_r+0x76>
 8008e02:	4653      	mov	r3, sl
 8008e04:	4632      	mov	r2, r6
 8008e06:	4621      	mov	r1, r4
 8008e08:	4640      	mov	r0, r8
 8008e0a:	f7ff ff71 	bl	8008cf0 <__ssputs_r>
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f000 80a4 	beq.w	8008f5c <_svfiprintf_r+0x1b8>
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	4453      	add	r3, sl
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	783b      	ldrb	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 809d 	beq.w	8008f5c <_svfiprintf_r+0x1b8>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295
 8008e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	9307      	str	r3, [sp, #28]
 8008e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e34:	931a      	str	r3, [sp, #104]	; 0x68
 8008e36:	462f      	mov	r7, r5
 8008e38:	2205      	movs	r2, #5
 8008e3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e3e:	4850      	ldr	r0, [pc, #320]	; (8008f80 <_svfiprintf_r+0x1dc>)
 8008e40:	f7ff fb40 	bl	80084c4 <memchr>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	b9d0      	cbnz	r0, 8008e7e <_svfiprintf_r+0xda>
 8008e48:	06d9      	lsls	r1, r3, #27
 8008e4a:	bf44      	itt	mi
 8008e4c:	2220      	movmi	r2, #32
 8008e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e52:	071a      	lsls	r2, r3, #28
 8008e54:	bf44      	itt	mi
 8008e56:	222b      	movmi	r2, #43	; 0x2b
 8008e58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e5c:	782a      	ldrb	r2, [r5, #0]
 8008e5e:	2a2a      	cmp	r2, #42	; 0x2a
 8008e60:	d015      	beq.n	8008e8e <_svfiprintf_r+0xea>
 8008e62:	462f      	mov	r7, r5
 8008e64:	2000      	movs	r0, #0
 8008e66:	250a      	movs	r5, #10
 8008e68:	9a07      	ldr	r2, [sp, #28]
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e70:	3b30      	subs	r3, #48	; 0x30
 8008e72:	2b09      	cmp	r3, #9
 8008e74:	d94d      	bls.n	8008f12 <_svfiprintf_r+0x16e>
 8008e76:	b1b8      	cbz	r0, 8008ea8 <_svfiprintf_r+0x104>
 8008e78:	e00f      	b.n	8008e9a <_svfiprintf_r+0xf6>
 8008e7a:	462f      	mov	r7, r5
 8008e7c:	e7b8      	b.n	8008df0 <_svfiprintf_r+0x4c>
 8008e7e:	4a40      	ldr	r2, [pc, #256]	; (8008f80 <_svfiprintf_r+0x1dc>)
 8008e80:	463d      	mov	r5, r7
 8008e82:	1a80      	subs	r0, r0, r2
 8008e84:	fa0b f000 	lsl.w	r0, fp, r0
 8008e88:	4318      	orrs	r0, r3
 8008e8a:	9004      	str	r0, [sp, #16]
 8008e8c:	e7d3      	b.n	8008e36 <_svfiprintf_r+0x92>
 8008e8e:	9a03      	ldr	r2, [sp, #12]
 8008e90:	1d11      	adds	r1, r2, #4
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	9103      	str	r1, [sp, #12]
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	db01      	blt.n	8008e9e <_svfiprintf_r+0xfa>
 8008e9a:	9207      	str	r2, [sp, #28]
 8008e9c:	e004      	b.n	8008ea8 <_svfiprintf_r+0x104>
 8008e9e:	4252      	negs	r2, r2
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	9207      	str	r2, [sp, #28]
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	783b      	ldrb	r3, [r7, #0]
 8008eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8008eac:	d10c      	bne.n	8008ec8 <_svfiprintf_r+0x124>
 8008eae:	787b      	ldrb	r3, [r7, #1]
 8008eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb2:	d133      	bne.n	8008f1c <_svfiprintf_r+0x178>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	3702      	adds	r7, #2
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9203      	str	r2, [sp, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfb8      	it	lt
 8008ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	4d2e      	ldr	r5, [pc, #184]	; (8008f84 <_svfiprintf_r+0x1e0>)
 8008eca:	2203      	movs	r2, #3
 8008ecc:	7839      	ldrb	r1, [r7, #0]
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7ff faf8 	bl	80084c4 <memchr>
 8008ed4:	b138      	cbz	r0, 8008ee6 <_svfiprintf_r+0x142>
 8008ed6:	2340      	movs	r3, #64	; 0x40
 8008ed8:	1b40      	subs	r0, r0, r5
 8008eda:	fa03 f000 	lsl.w	r0, r3, r0
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	3701      	adds	r7, #1
 8008ee2:	4303      	orrs	r3, r0
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	7839      	ldrb	r1, [r7, #0]
 8008ee8:	2206      	movs	r2, #6
 8008eea:	4827      	ldr	r0, [pc, #156]	; (8008f88 <_svfiprintf_r+0x1e4>)
 8008eec:	1c7e      	adds	r6, r7, #1
 8008eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ef2:	f7ff fae7 	bl	80084c4 <memchr>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d038      	beq.n	8008f6c <_svfiprintf_r+0x1c8>
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <_svfiprintf_r+0x1e8>)
 8008efc:	bb13      	cbnz	r3, 8008f44 <_svfiprintf_r+0x1a0>
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	3307      	adds	r3, #7
 8008f02:	f023 0307 	bic.w	r3, r3, #7
 8008f06:	3308      	adds	r3, #8
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0c:	444b      	add	r3, r9
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	e76d      	b.n	8008dee <_svfiprintf_r+0x4a>
 8008f12:	fb05 3202 	mla	r2, r5, r2, r3
 8008f16:	2001      	movs	r0, #1
 8008f18:	460f      	mov	r7, r1
 8008f1a:	e7a6      	b.n	8008e6a <_svfiprintf_r+0xc6>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	250a      	movs	r5, #10
 8008f20:	4619      	mov	r1, r3
 8008f22:	3701      	adds	r7, #1
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4638      	mov	r0, r7
 8008f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2c:	3a30      	subs	r2, #48	; 0x30
 8008f2e:	2a09      	cmp	r2, #9
 8008f30:	d903      	bls.n	8008f3a <_svfiprintf_r+0x196>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c8      	beq.n	8008ec8 <_svfiprintf_r+0x124>
 8008f36:	9105      	str	r1, [sp, #20]
 8008f38:	e7c6      	b.n	8008ec8 <_svfiprintf_r+0x124>
 8008f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4607      	mov	r7, r0
 8008f42:	e7f0      	b.n	8008f26 <_svfiprintf_r+0x182>
 8008f44:	ab03      	add	r3, sp, #12
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	4622      	mov	r2, r4
 8008f4a:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <_svfiprintf_r+0x1ec>)
 8008f4c:	a904      	add	r1, sp, #16
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f7fc fc94 	bl	800587c <_printf_float>
 8008f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f58:	4681      	mov	r9, r0
 8008f5a:	d1d6      	bne.n	8008f0a <_svfiprintf_r+0x166>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	065b      	lsls	r3, r3, #25
 8008f60:	f53f af35 	bmi.w	8008dce <_svfiprintf_r+0x2a>
 8008f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f66:	b01d      	add	sp, #116	; 0x74
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	ab03      	add	r3, sp, #12
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4622      	mov	r2, r4
 8008f72:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <_svfiprintf_r+0x1ec>)
 8008f74:	a904      	add	r1, sp, #16
 8008f76:	4640      	mov	r0, r8
 8008f78:	f7fc ff2c 	bl	8005dd4 <_printf_i>
 8008f7c:	e7ea      	b.n	8008f54 <_svfiprintf_r+0x1b0>
 8008f7e:	bf00      	nop
 8008f80:	08009254 	.word	0x08009254
 8008f84:	0800925a 	.word	0x0800925a
 8008f88:	0800925e 	.word	0x0800925e
 8008f8c:	0800587d 	.word	0x0800587d
 8008f90:	08008cf1 	.word	0x08008cf1

08008f94 <strncmp>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	b16a      	cbz	r2, 8008fb4 <strncmp+0x20>
 8008f98:	3901      	subs	r1, #1
 8008f9a:	1884      	adds	r4, r0, r2
 8008f9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008fa0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d103      	bne.n	8008fb0 <strncmp+0x1c>
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d001      	beq.n	8008fb0 <strncmp+0x1c>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1f5      	bne.n	8008f9c <strncmp+0x8>
 8008fb0:	1a98      	subs	r0, r3, r2
 8008fb2:	bd10      	pop	{r4, pc}
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	e7fc      	b.n	8008fb2 <strncmp+0x1e>

08008fb8 <__ascii_wctomb>:
 8008fb8:	b149      	cbz	r1, 8008fce <__ascii_wctomb+0x16>
 8008fba:	2aff      	cmp	r2, #255	; 0xff
 8008fbc:	bf8b      	itete	hi
 8008fbe:	238a      	movhi	r3, #138	; 0x8a
 8008fc0:	700a      	strbls	r2, [r1, #0]
 8008fc2:	6003      	strhi	r3, [r0, #0]
 8008fc4:	2001      	movls	r0, #1
 8008fc6:	bf88      	it	hi
 8008fc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fcc:	4770      	bx	lr
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4770      	bx	lr

08008fd2 <memmove>:
 8008fd2:	4288      	cmp	r0, r1
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	eb01 0302 	add.w	r3, r1, r2
 8008fda:	d807      	bhi.n	8008fec <memmove+0x1a>
 8008fdc:	1e42      	subs	r2, r0, #1
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	d00a      	beq.n	8008ff8 <memmove+0x26>
 8008fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008fea:	e7f8      	b.n	8008fde <memmove+0xc>
 8008fec:	4283      	cmp	r3, r0
 8008fee:	d9f5      	bls.n	8008fdc <memmove+0xa>
 8008ff0:	1881      	adds	r1, r0, r2
 8008ff2:	1ad2      	subs	r2, r2, r3
 8008ff4:	42d3      	cmn	r3, r2
 8008ff6:	d100      	bne.n	8008ffa <memmove+0x28>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ffe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009002:	e7f7      	b.n	8008ff4 <memmove+0x22>

08009004 <_realloc_r>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	4607      	mov	r7, r0
 8009008:	4614      	mov	r4, r2
 800900a:	460e      	mov	r6, r1
 800900c:	b921      	cbnz	r1, 8009018 <_realloc_r+0x14>
 800900e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009012:	4611      	mov	r1, r2
 8009014:	f7fc bb46 	b.w	80056a4 <_malloc_r>
 8009018:	b922      	cbnz	r2, 8009024 <_realloc_r+0x20>
 800901a:	f7fc faf7 	bl	800560c <_free_r>
 800901e:	4625      	mov	r5, r4
 8009020:	4628      	mov	r0, r5
 8009022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009024:	f000 f814 	bl	8009050 <_malloc_usable_size_r>
 8009028:	42a0      	cmp	r0, r4
 800902a:	d20f      	bcs.n	800904c <_realloc_r+0x48>
 800902c:	4621      	mov	r1, r4
 800902e:	4638      	mov	r0, r7
 8009030:	f7fc fb38 	bl	80056a4 <_malloc_r>
 8009034:	4605      	mov	r5, r0
 8009036:	2800      	cmp	r0, #0
 8009038:	d0f2      	beq.n	8009020 <_realloc_r+0x1c>
 800903a:	4631      	mov	r1, r6
 800903c:	4622      	mov	r2, r4
 800903e:	f7fc fad1 	bl	80055e4 <memcpy>
 8009042:	4631      	mov	r1, r6
 8009044:	4638      	mov	r0, r7
 8009046:	f7fc fae1 	bl	800560c <_free_r>
 800904a:	e7e9      	b.n	8009020 <_realloc_r+0x1c>
 800904c:	4635      	mov	r5, r6
 800904e:	e7e7      	b.n	8009020 <_realloc_r+0x1c>

08009050 <_malloc_usable_size_r>:
 8009050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009054:	1f18      	subs	r0, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfbc      	itt	lt
 800905a:	580b      	ldrlt	r3, [r1, r0]
 800905c:	18c0      	addlt	r0, r0, r3
 800905e:	4770      	bx	lr

08009060 <_init>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr

0800906c <_fini>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr
