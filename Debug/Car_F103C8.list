
Car_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034e0  080034e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e0  080034e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003558  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef09  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002494  00000000  00000000  0002efa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00031438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00032148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b3ed  00000000  00000000  00032d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c242  00000000  00000000  0004e10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bbba  00000000  00000000  0005a34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000e5f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033c4 	.word	0x080033c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033c4 	.word	0x080033c4

0800014c <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#endif

extern bool buttonDownFlag;
class Button {
public:
	Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
		isButtonDown = false;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	2200      	movs	r2, #0
 800015e:	719a      	strb	r2, [r3, #6]
		this->GPIOx = GPIOx;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	601a      	str	r2, [r3, #0]
		this->GPIO_Pin = GPIO_Pin;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	88fa      	ldrh	r2, [r7, #6]
 800016a:	809a      	strh	r2, [r3, #4]
	}
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4618      	mov	r0, r3
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr

08000178 <_ZN6Button10buttonScanEv>:
	void buttonScan(){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
		isButtonDown = buttonDownFlag;
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <_ZN6Button10buttonScanEv+0x2c>)
 8000182:	781a      	ldrb	r2, [r3, #0]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	719a      	strb	r2, [r3, #6]
		if (Button::isButtonDown) {
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	799b      	ldrb	r3, [r3, #6]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <_ZN6Button10buttonScanEv+0x1e>
			printf("button is down\r\n");
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <_ZN6Button10buttonScanEv+0x30>)
 8000192:	f002 fa39 	bl	8002608 <puts>
		}
		buttonDownFlag = false;
 8000196:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <_ZN6Button10buttonScanEv+0x2c>)
 8000198:	2200      	movs	r2, #0
 800019a:	701a      	strb	r2, [r3, #0]
	}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000090 	.word	0x20000090
 80001a8:	080033dc 	.word	0x080033dc

080001ac <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
	/*
	 * @brief initialize encoder
	 * @para TIM_HandleTypeDef *htim
	 * @retral none
	 */
	Encoder(TIM_HandleTypeDef *htim) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
		this->encoderCount = 0;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
		this->htim = htim;
 80001bc:	683a      	ldr	r2, [r7, #0]
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	605a      	str	r2, [r3, #4]
		//启动定时编码器
		HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	213c      	movs	r1, #60	; 0x3c
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fbee 	bl	80019a8 <HAL_TIM_Encoder_Start>
		//计数器清零
		__HAL_TIM_SET_COUNTER(htim, 0);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2200      	movs	r2, #0
 80001d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <_ZN7Encoder15getEncoderCountEv>:
	/*
	 * @brief get encoder number and set it zero
	 * @para none
	 * @retral int
	 */
	int getEncoderCount() {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
		//先读取脉冲数
		this->encoderCount = (short) (__HAL_TIM_GET_COUNTER(htim));
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f0:	b21b      	sxth	r3, r3
 80001f2:	461a      	mov	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	601a      	str	r2, [r3, #0]
		printf("TIM4定时器编码器模式捕获脉冲 = %d \n", encoderCount);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4619      	mov	r1, r3
 80001fe:	4807      	ldr	r0, [pc, #28]	; (800021c <_ZN7Encoder15getEncoderCountEv+0x3c>)
 8000200:	f002 f98e 	bl	8002520 <iprintf>
		//再计数器清零
		__HAL_TIM_SET_COUNTER(htim, 0);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2200      	movs	r2, #0
 800020c:	625a      	str	r2, [r3, #36]	; 0x24
		return encoderCount;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
	}
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	080033ec 	.word	0x080033ec

08000220 <CppMain>:
 */

#include "CPPmain.h"


void CppMain(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	Button button(Button_GPIO_Port, Button_Pin);
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <CppMain+0x3c>)
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ff8b 	bl	800014c <_ZN6ButtonC1EP12GPIO_TypeDeft>
	Encoder encoder(&htim4);
 8000236:	463b      	mov	r3, r7
 8000238:	4909      	ldr	r1, [pc, #36]	; (8000260 <CppMain+0x40>)
 800023a:	4618      	mov	r0, r3
 800023c:	f7ff ffb6 	bl	80001ac <_ZN7EncoderC1EP17TIM_HandleTypeDef>
	while(1){
		button.buttonScan();
 8000240:	f107 0308 	add.w	r3, r7, #8
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ff97 	bl	8000178 <_ZN6Button10buttonScanEv>
		encoder.getEncoderCount();
 800024a:	463b      	mov	r3, r7
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ffc7 	bl	80001e0 <_ZN7Encoder15getEncoderCountEv>
		HAL_Delay(1000);
 8000252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000256:	f000 fb89 	bl	800096c <HAL_Delay>
		button.buttonScan();
 800025a:	e7f1      	b.n	8000240 <CppMain+0x20>
 800025c:	40010800 	.word	0x40010800
 8000260:	2000009c 	.word	0x2000009c

08000264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <MX_GPIO_Init+0xd0>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a2d      	ldr	r2, [pc, #180]	; (8000334 <MX_GPIO_Init+0xd0>)
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_GPIO_Init+0xd0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b28      	ldr	r3, [pc, #160]	; (8000334 <MX_GPIO_Init+0xd0>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a27      	ldr	r2, [pc, #156]	; (8000334 <MX_GPIO_Init+0xd0>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <MX_GPIO_Init+0xd0>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a21      	ldr	r2, [pc, #132]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b19      	ldr	r3, [pc, #100]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002de:	4816      	ldr	r0, [pc, #88]	; (8000338 <MX_GPIO_Init+0xd4>)
 80002e0:	f000 fe5b 	bl	8000f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f2:	2303      	movs	r3, #3
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	480e      	ldr	r0, [pc, #56]	; (8000338 <MX_GPIO_Init+0xd4>)
 80002fe:	f000 fcdb 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_GPIO_Init+0xd8>)
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800030c:	2301      	movs	r3, #1
 800030e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <MX_GPIO_Init+0xdc>)
 8000318:	f000 fcce 	bl	8000cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	2017      	movs	r0, #23
 8000322:	f000 fc1c 	bl	8000b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000326:	2017      	movs	r0, #23
 8000328:	f000 fc35 	bl	8000b96 <HAL_NVIC_EnableIRQ>

}
 800032c:	bf00      	nop
 800032e:	3720      	adds	r7, #32
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	40010c00 	.word	0x40010c00
 800033c:	10210000 	.word	0x10210000
 8000340:	40010800 	.word	0x40010800

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 faae 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f809 	bl	8000362 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f7ff ff88 	bl	8000264 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000354:	f000 f9f2 	bl	800073c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000358:	f000 f95e 	bl	8000618 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	CppMain();
 800035c:	f7ff ff60 	bl	8000220 <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000360:	e7fe      	b.n	8000360 <main+0x1c>

08000362 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b090      	sub	sp, #64	; 0x40
 8000366:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000368:	f107 0318 	add.w	r3, r7, #24
 800036c:	2228      	movs	r2, #40	; 0x28
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f002 f8cd 	bl	8002510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000384:	2301      	movs	r3, #1
 8000386:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fe3e 	bl	800102c <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003b6:	f000 f819 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2102      	movs	r1, #2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 f8a9 	bl	800152c <HAL_RCC_ClockConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e0:	f000 f804 	bl	80003ec <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3740      	adds	r7, #64	; 0x40
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003f2:	e7fe      	b.n	80003f2 <Error_Handler+0x6>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler+0x4>

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049e:	f000 fa49 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80004aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004ae:	f000 fda5 	bl	8000ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <USART1_IRQHandler+0x10>)
 80004be:	f001 fcc5 	bl	8001e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000e4 	.word	0x200000e4

080004cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	e00a      	b.n	80004f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004de:	f3af 8000 	nop.w
 80004e2:	4601      	mov	r1, r0
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	b2ca      	uxtb	r2, r1
 80004ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbf0      	blt.n	80004de <_read+0x12>
	}

return len;
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b086      	sub	sp, #24
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	e009      	b.n	800052c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	60ba      	str	r2, [r7, #8]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f989 	bl	8000838 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf1      	blt.n	8000518 <_write+0x12>
	}
	return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000564:	605a      	str	r2, [r3, #4]
	return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
	return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f001 ff74 	bl	80024bc <__errno>
 80005d4:	4602      	mov	r2, r0
 80005d6:	230c      	movs	r3, #12
 80005d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	2000008c 	.word	0x2000008c
 8000608:	20000130 	.word	0x20000130

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2224      	movs	r2, #36	; 0x24
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ff72 	bl	8002510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_TIM4_Init+0xa4>)
 8000638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_TIM4_Init+0xa0>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800065a:	2303      	movs	r3, #3
 800065c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000672:	2301      	movs	r3, #1
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_TIM4_Init+0xa0>)
 8000686:	f001 f8ed 	bl	8001864 <HAL_TIM_Encoder_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000690:	f7ff feac 	bl	80003ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_TIM4_Init+0xa0>)
 80006a2:	f001 fa95 	bl	8001bd0 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80006ac:	f7ff fe9e 	bl	80003ec <Error_Handler>
  }

}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	40000800 	.word	0x40000800

080006c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_TIM_Encoder_MspInit+0x70>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d123      	bne.n	8000728 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_TIM_Encoder_MspInit+0x74>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	; 0xc0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <HAL_TIM_Encoder_MspInit+0x78>)
 8000724:	f000 fac8 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40000800 	.word	0x40000800
 8000734:	40021000 	.word	0x40021000
 8000738:	40010c00 	.word	0x40010c00

0800073c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f001 fa8a 	bl	8001c8c <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f7ff fe35 	bl	80003ec <Error_Handler>
  }

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000e4 	.word	0x200000e4
 800078c:	40013800 	.word	0x40013800

08000790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a20      	ldr	r2, [pc, #128]	; (800082c <HAL_UART_MspInit+0x9c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d139      	bne.n	8000824 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a18      	ldr	r2, [pc, #96]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <HAL_UART_MspInit+0xa4>)
 80007f6:	f000 fa5f 	bl	8000cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <HAL_UART_MspInit+0xa4>)
 8000810:	f000 fa52 	bl	8000cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	; 0x25
 800081a:	f000 f9a0 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f000 f9b9 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40013800 	.word	0x40013800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010800 	.word	0x40010800

08000838 <__io_putchar>:
* @brief  Retargets the C library printf function to the USART.
* @param  None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000840:	1d39      	adds	r1, r7, #4
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	2201      	movs	r2, #1
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <__io_putchar+0x20>)
 800084a:	f001 fa6c 	bl	8001d26 <HAL_UART_Transmit>

    return ch;
 800084e:	687b      	ldr	r3, [r7, #4]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000e4 	.word	0x200000e4

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800085c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800085e:	e003      	b.n	8000868 <LoopCopyDataInit>

08000860 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000862:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000864:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000866:	3104      	adds	r1, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800086c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800086e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000870:	d3f6      	bcc.n	8000860 <CopyDataInit>
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000874:	e002      	b.n	800087c <LoopFillZerobss>

08000876 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000878:	f842 3b04 	str.w	r3, [r2], #4

0800087c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800087e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000880:	d3f9      	bcc.n	8000876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff fec3 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fe1f 	bl	80024c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fd5b 	bl	8000344 <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r3, =_sidata
 8000890:	080034e8 	.word	0x080034e8
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000898:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800089c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008a0:	2000012c 	.word	0x2000012c

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f945 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fd96 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f95d 	bl	8000bb2 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f925 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	20000124 	.word	0x20000124

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000124 	.word	0x20000124

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_Delay+0x40>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <__NVIC_EnableIRQ+0x34>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff2d 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff42 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff35 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d005      	beq.n	8000bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2204      	movs	r2, #4
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e051      	b.n	8000c92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 020e 	bic.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_DMA_Abort_IT+0xd0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d029      	beq.n	8000c6c <HAL_DMA_Abort_IT+0xa0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_DMA_Abort_IT+0xd4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d022      	beq.n	8000c68 <HAL_DMA_Abort_IT+0x9c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_DMA_Abort_IT+0xd8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01a      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x96>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_DMA_Abort_IT+0xdc>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d012      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x90>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_DMA_Abort_IT+0xe0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00a      	beq.n	8000c56 <HAL_DMA_Abort_IT+0x8a>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HAL_DMA_Abort_IT+0xe4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d102      	bne.n	8000c50 <HAL_DMA_Abort_IT+0x84>
 8000c4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c4e:	e00e      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c54:	e00b      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5a:	e008      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	e005      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	e002      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c68:	2310      	movs	r3, #16
 8000c6a:	e000      	b.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_DMA_Abort_IT+0xe8>)
 8000c70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
    } 
  }
  return status;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020008 	.word	0x40020008
 8000ca0:	4002001c 	.word	0x4002001c
 8000ca4:	40020030 	.word	0x40020030
 8000ca8:	40020044 	.word	0x40020044
 8000cac:	40020058 	.word	0x40020058
 8000cb0:	4002006c 	.word	0x4002006c
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e127      	b.n	8000f1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8116 	bne.w	8000f16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d034      	beq.n	8000d5c <HAL_GPIO_Init+0xa4>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d80d      	bhi.n	8000d12 <HAL_GPIO_Init+0x5a>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_GPIO_Init+0x9a>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d804      	bhi.n	8000d08 <HAL_GPIO_Init+0x50>
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d031      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d01c      	beq.n	8000d40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d06:	e048      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d043      	beq.n	8000d94 <HAL_GPIO_Init+0xdc>
 8000d0c:	2b11      	cmp	r3, #17
 8000d0e:	d01b      	beq.n	8000d48 <HAL_GPIO_Init+0x90>
          break;
 8000d10:	e043      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d12:	4a89      	ldr	r2, [pc, #548]	; (8000f38 <HAL_GPIO_Init+0x280>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d026      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
 8000d18:	4a87      	ldr	r2, [pc, #540]	; (8000f38 <HAL_GPIO_Init+0x280>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d806      	bhi.n	8000d2c <HAL_GPIO_Init+0x74>
 8000d1e:	4a87      	ldr	r2, [pc, #540]	; (8000f3c <HAL_GPIO_Init+0x284>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d020      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
 8000d24:	4a86      	ldr	r2, [pc, #536]	; (8000f40 <HAL_GPIO_Init+0x288>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01d      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
          break;
 8000d2a:	e036      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d2c:	4a85      	ldr	r2, [pc, #532]	; (8000f44 <HAL_GPIO_Init+0x28c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
 8000d32:	4a85      	ldr	r2, [pc, #532]	; (8000f48 <HAL_GPIO_Init+0x290>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d016      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
 8000d38:	4a84      	ldr	r2, [pc, #528]	; (8000f4c <HAL_GPIO_Init+0x294>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d013      	beq.n	8000d66 <HAL_GPIO_Init+0xae>
          break;
 8000d3e:	e02c      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e028      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e023      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	3308      	adds	r3, #8
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e01e      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	330c      	adds	r3, #12
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e019      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e012      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d105      	bne.n	8000d88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	611a      	str	r2, [r3, #16]
          break;
 8000d86:	e008      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	615a      	str	r2, [r3, #20]
          break;
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d801      	bhi.n	8000da4 <HAL_GPIO_Init+0xec>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	e001      	b.n	8000da8 <HAL_GPIO_Init+0xf0>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3304      	adds	r3, #4
 8000da8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d802      	bhi.n	8000db6 <HAL_GPIO_Init+0xfe>
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x104>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	3b08      	subs	r3, #8
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	401a      	ands	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 8096 	beq.w	8000f16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dea:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <HAL_GPIO_Init+0x298>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a58      	ldr	r2, [pc, #352]	; (8000f50 <HAL_GPIO_Init+0x298>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <HAL_GPIO_Init+0x298>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e02:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_GPIO_Init+0x29c>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x19e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x19a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x196>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a48      	ldr	r2, [pc, #288]	; (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x192>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x1a0>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x1a0>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x1a0>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x1a0>
 8000e56:	2300      	movs	r3, #0
 8000e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e68:	493a      	ldr	r1, [pc, #232]	; (8000f54 <HAL_GPIO_Init+0x29c>)
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e82:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4938      	ldr	r1, [pc, #224]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4933      	ldr	r1, [pc, #204]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	492e      	ldr	r1, [pc, #184]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4929      	ldr	r1, [pc, #164]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	4924      	ldr	r1, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	491f      	ldr	r1, [pc, #124]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	491a      	ldr	r1, [pc, #104]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60cb      	str	r3, [r1, #12]
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4915      	ldr	r1, [pc, #84]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	3301      	adds	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	fa22 f303 	lsr.w	r3, r2, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f47f aed0 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	372c      	adds	r7, #44	; 0x2c
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	10210000 	.word	0x10210000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	10120000 	.word	0x10120000
 8000f44:	10310000 	.word	0x10310000
 8000f48:	10320000 	.word	0x10320000
 8000f4c:	10220000 	.word	0x10220000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010000 	.word	0x40010000
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40011400 	.word	0x40011400
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e001      	b.n	8000f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000faa:	787b      	ldrb	r3, [r7, #1]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	041a      	lsls	r2, r3, #16
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	611a      	str	r2, [r3, #16]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	041a      	lsls	r2, r3, #16
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	400b      	ands	r3, r1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	611a      	str	r2, [r3, #16]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fa22 	bl	8002464 <HAL_GPIO_EXTI_Callback>
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e26c      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8087 	beq.w	800115a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800104c:	4b92      	ldr	r3, [pc, #584]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00c      	beq.n	8001072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001058:	4b8f      	ldr	r3, [pc, #572]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d112      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
 8001064:	4b8c      	ldr	r3, [pc, #560]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d06c      	beq.n	8001158 <HAL_RCC_OscConfig+0x12c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d168      	bne.n	8001158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e246      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x76>
 8001094:	4b80      	ldr	r3, [pc, #512]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a7f      	ldr	r2, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e02e      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x98>
 80010aa:	4b7b      	ldr	r3, [pc, #492]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7a      	ldr	r2, [pc, #488]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b78      	ldr	r3, [pc, #480]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a77      	ldr	r2, [pc, #476]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0xbc>
 80010ce:	4b72      	ldr	r3, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a71      	ldr	r2, [pc, #452]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xd4>
 80010e8:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a67      	ldr	r2, [pc, #412]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fc26 	bl	8000958 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc22 	bl	8000958 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1fa      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xe4>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fc12 	bl	8000958 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fc0e 	bl	8000958 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1e6      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x10c>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d063      	beq.n	800122e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e1ba      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4939      	ldr	r1, [pc, #228]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e03a      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_RCC_OscConfig+0x270>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fbc7 	bl	8000958 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff fbc3 	bl	8000958 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e19b      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4927      	ldr	r1, [pc, #156]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e015      	b.n	800122e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x270>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fba6 	bl	8000958 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff fba2 	bl	8000958 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e17a      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03a      	beq.n	80012b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d019      	beq.n	8001276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fb86 	bl	8000958 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001250:	f7ff fb82 	bl	8000958 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e15a      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_RCC_OscConfig+0x26c>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f000 fada 	bl	8001828 <RCC_Delay>
 8001274:	e01c      	b.n	80012b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_RCC_OscConfig+0x274>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb6c 	bl	8000958 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001282:	e00f      	b.n	80012a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fb68 	bl	8000958 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d908      	bls.n	80012a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e140      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	42420000 	.word	0x42420000
 80012a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b9e      	ldr	r3, [pc, #632]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e9      	bne.n	8001284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a6 	beq.w	800140a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b97      	ldr	r3, [pc, #604]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b94      	ldr	r3, [pc, #592]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a93      	ldr	r2, [pc, #588]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b91      	ldr	r3, [pc, #580]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b8e      	ldr	r3, [pc, #568]	; (8001524 <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x4f8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a8a      	ldr	r2, [pc, #552]	; (8001524 <HAL_RCC_OscConfig+0x4f8>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb29 	bl	8000958 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fb25 	bl	8000958 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	; 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0fd      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x4f8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x312>
 8001330:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a7a      	ldr	r2, [pc, #488]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	e02d      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x334>
 8001346:	4b76      	ldr	r3, [pc, #472]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a75      	ldr	r2, [pc, #468]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a72      	ldr	r2, [pc, #456]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	e01c      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x356>
 8001368:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a6c      	ldr	r2, [pc, #432]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a69      	ldr	r2, [pc, #420]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0x36e>
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a66      	ldr	r2, [pc, #408]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a63      	ldr	r2, [pc, #396]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d015      	beq.n	80013ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fad9 	bl	8000958 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fad5 	bl	8000958 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e0ab      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0ee      	beq.n	80013aa <HAL_RCC_OscConfig+0x37e>
 80013cc:	e014      	b.n	80013f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fac3 	bl	8000958 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fabf 	bl	8000958 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e095      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ee      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a47      	ldr	r2, [pc, #284]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8081 	beq.w	8001516 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d061      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d146      	bne.n	80014b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_OscConfig+0x4fc>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fa93 	bl	8000958 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff fa8f 	bl	8000958 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e067      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d108      	bne.n	8001470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	492d      	ldr	r1, [pc, #180]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a19      	ldr	r1, [r3, #32]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	430b      	orrs	r3, r1
 8001482:	4927      	ldr	r1, [pc, #156]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_RCC_OscConfig+0x4fc>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fa63 	bl	8000958 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fa5f 	bl	8000958 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e037      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x46a>
 80014b4:	e02f      	b.n	8001516 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_RCC_OscConfig+0x4fc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fa4c 	bl	8000958 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fa48 	bl	8000958 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e020      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x498>
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e013      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	429a      	cmp	r2, r3
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
 8001528:	42420060 	.word	0x42420060

0800152c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0d0      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d910      	bls.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0207 	bic.w	r2, r3, #7
 8001556:	4965      	ldr	r1, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d040      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d115      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e073      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06b      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4936      	ldr	r1, [pc, #216]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff f99c 	bl	8000958 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff f998 	bl	8000958 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e053      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d210      	bcs.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4601      	mov	r1, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	fa21 f303 	lsr.w	r3, r1, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1cc>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f8fa 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08003430 	.word	0x08003430
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b490      	push	{r4, r7}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001708:	1d3c      	adds	r4, r7, #4
 800170a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800170c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x40>
 800173a:	2b08      	cmp	r3, #8
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x46>
 800173e:	e02d      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001742:	623b      	str	r3, [r7, #32]
      break;
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001752:	4413      	add	r3, r2
 8001754:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001758:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0c5b      	lsrs	r3, r3, #17
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001772:	4413      	add	r3, r2
 8001774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800177e:	fb02 f203 	mul.w	r2, r2, r3
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
 800178a:	e004      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	623b      	str	r3, [r7, #32]
      break;
 800179a:	e002      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800179e:	623b      	str	r3, [r7, #32]
      break;
 80017a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a2:	6a3b      	ldr	r3, [r7, #32]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc90      	pop	{r4, r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	0800341c 	.word	0x0800341c
 80017b4:	0800342c 	.word	0x0800342c
 80017b8:	40021000 	.word	0x40021000
 80017bc:	007a1200 	.word	0x007a1200
 80017c0:	003d0900 	.word	0x003d0900

080017c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017dc:	f7ff fff2 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80017e0:	4601      	mov	r1, r0
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08003440 	.word	0x08003440

08001800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001804:	f7ff ffde 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 8001808:	4601      	mov	r1, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0adb      	lsrs	r3, r3, #11
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	08003440 	.word	0x08003440

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e093      	b.n	80019a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7fe ff17 	bl	80006c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a8:	f023 0307 	bic.w	r3, r3, #7
 80018ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f000 f903 	bl	8001ac4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e6:	f023 0303 	bic.w	r3, r3, #3
 80018ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	4313      	orrs	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001904:	f023 030c 	bic.w	r3, r3, #12
 8001908:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	4313      	orrs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	011a      	lsls	r2, r3, #4
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	031b      	lsls	r3, r3, #12
 8001934:	4313      	orrs	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001942:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4313      	orrs	r3, r2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80019d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d110      	bne.n	80019fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80019de:	7b7b      	ldrb	r3, [r7, #13]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d001      	beq.n	80019e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e068      	b.n	8001aba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019f8:	e031      	b.n	8001a5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d110      	bne.n	8001a22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a06:	7b3b      	ldrb	r3, [r7, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d001      	beq.n	8001a10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e054      	b.n	8001aba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a20:	e01d      	b.n	8001a5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a2e:	7b7b      	ldrb	r3, [r7, #13]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e03d      	b.n	8001aba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_TIM_Encoder_Start+0xc2>
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d008      	beq.n	8001a7a <HAL_TIM_Encoder_Start+0xd2>
 8001a68:	e00f      	b.n	8001a8a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f888 	bl	8001b88 <TIM_CCxChannelCmd>
      break;
 8001a78:	e016      	b.n	8001aa8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2104      	movs	r1, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f880 	bl	8001b88 <TIM_CCxChannelCmd>
      break;
 8001a88:	e00e      	b.n	8001aa8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f878 	bl	8001b88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f871 	bl	8001b88 <TIM_CCxChannelCmd>
      break;
 8001aa6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <TIM_Base_SetConfig+0xb8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00b      	beq.n	8001af4 <TIM_Base_SetConfig+0x30>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae2:	d007      	beq.n	8001af4 <TIM_Base_SetConfig+0x30>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <TIM_Base_SetConfig+0xbc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d003      	beq.n	8001af4 <TIM_Base_SetConfig+0x30>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <TIM_Base_SetConfig+0xc0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d108      	bne.n	8001b06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <TIM_Base_SetConfig+0xb8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00b      	beq.n	8001b26 <TIM_Base_SetConfig+0x62>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d007      	beq.n	8001b26 <TIM_Base_SetConfig+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <TIM_Base_SetConfig+0xbc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d003      	beq.n	8001b26 <TIM_Base_SetConfig+0x62>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <TIM_Base_SetConfig+0xc0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d108      	bne.n	8001b38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <TIM_Base_SetConfig+0xb8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d103      	bne.n	8001b6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	621a      	str	r2, [r3, #32]
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e046      	b.n	8001c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00e      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d009      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10c      	bne.n	8001c64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40000800 	.word	0x40000800

08001c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e03f      	b.n	8001d1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fd6c 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fb39 	bl	8002348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b08a      	sub	sp, #40	; 0x28
 8001d2a:	af02      	add	r7, sp, #8
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d17c      	bne.n	8001e40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_UART_Transmit+0x2c>
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e075      	b.n	8001e42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_UART_Transmit+0x3e>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e06e      	b.n	8001e42 <HAL_UART_Transmit+0x11c>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2221      	movs	r2, #33	; 0x21
 8001d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d7a:	f7fe fded 	bl	8000958 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d94:	d108      	bne.n	8001da8 <HAL_UART_Transmit+0x82>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d104      	bne.n	8001da8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	e003      	b.n	8001db0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001db8:	e02a      	b.n	8001e10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f95c 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e036      	b.n	8001e42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10b      	bne.n	8001df2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	3302      	adds	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	e007      	b.n	8001e02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1cf      	bne.n	8001dba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2200      	movs	r2, #0
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f92c 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_UART_IRQHandler+0x52>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f9d5 	bl	8002246 <UART_Receive_IT>
      return;
 8001e9c:	e0d1      	b.n	8002042 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80b0 	beq.w	8002006 <HAL_UART_IRQHandler+0x1ba>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_UART_IRQHandler+0x70>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a5 	beq.w	8002006 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_UART_IRQHandler+0x90>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_UART_IRQHandler+0xb0>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	f043 0202 	orr.w	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_UART_IRQHandler+0xd0>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	f043 0204 	orr.w	r2, r3, #4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <HAL_UART_IRQHandler+0xfa>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <HAL_UART_IRQHandler+0xee>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	f043 0208 	orr.w	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d078      	beq.n	8002040 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_UART_IRQHandler+0x11c>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f96f 	bl	8002246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_UART_IRQHandler+0x144>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d031      	beq.n	8001ff4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8c0 	bl	8002116 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_UART_IRQHandler+0x1fc>)
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fdff 	bl	8000bcc <HAL_DMA_Abort_IT>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d016      	beq.n	8002002 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe2:	e00e      	b.n	8002002 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f843 	bl	8002070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fea:	e00a      	b.n	8002002 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f83f 	bl	8002070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff2:	e006      	b.n	8002002 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f83b 	bl	8002070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002000:	e01e      	b.n	8002040 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002002:	bf00      	nop
    return;
 8002004:	e01c      	b.n	8002040 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_UART_IRQHandler+0x1d6>
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8ac 	bl	8002178 <UART_Transmit_IT>
    return;
 8002020:	e00f      	b.n	8002042 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_UART_IRQHandler+0x1f6>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8ed 	bl	8002216 <UART_EndTransmit_IT>
    return;
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002040:	bf00      	nop
  }
}
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	08002151 	.word	0x08002151

0800204c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002092:	e02c      	b.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d028      	beq.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a2:	f7fe fc59 	bl	8000958 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d21d      	bcs.n	80020ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e00f      	b.n	800210e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	429a      	cmp	r2, r3
 800210a:	d0c3      	beq.n	8002094 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800212c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff80 	bl	8002070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b21      	cmp	r3, #33	; 0x21
 800218a:	d13e      	bne.n	800220a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	d114      	bne.n	80021c0 <UART_Transmit_IT+0x48>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d110      	bne.n	80021c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	621a      	str	r2, [r3, #32]
 80021be:	e008      	b.n	80021d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	1c59      	adds	r1, r3, #1
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6211      	str	r1, [r2, #32]
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4619      	mov	r1, r3
 80021e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff08 	bl	800204c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b22      	cmp	r3, #34	; 0x22
 8002258:	d170      	bne.n	800233c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d117      	bne.n	8002294 <UART_Receive_IT+0x4e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d113      	bne.n	8002294 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	b29a      	uxth	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
 8002292:	e026      	b.n	80022e2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a6:	d007      	beq.n	80022b8 <UART_Receive_IT+0x72>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <UART_Receive_IT+0x80>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e008      	b.n	80022d8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4619      	mov	r1, r3
 80022f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d120      	bne.n	8002338 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0220 	bic.w	r2, r2, #32
 8002304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002314:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fe95 	bl	800205e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e002      	b.n	800233e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002382:	f023 030c 	bic.w	r3, r3, #12
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	430b      	orrs	r3, r1
 800238e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2c      	ldr	r2, [pc, #176]	; (800245c <UART_SetConfig+0x114>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d103      	bne.n	80023b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7ff fa26 	bl	8001800 <HAL_RCC_GetPCLK2Freq>
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	e002      	b.n	80023be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023b8:	f7ff fa0e 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <UART_SetConfig+0x118>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	0119      	lsls	r1, r3, #4
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009a      	lsls	r2, r3, #2
 80023e8:	441a      	add	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <UART_SetConfig+0x118>)
 80023f6:	fba3 0302 	umull	r0, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	fb00 f303 	mul.w	r3, r0, r3
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	3332      	adds	r3, #50	; 0x32
 8002408:	4a15      	ldr	r2, [pc, #84]	; (8002460 <UART_SetConfig+0x118>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002414:	4419      	add	r1, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f2f3 	udiv	r2, r2, r3
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <UART_SetConfig+0x118>)
 800242e:	fba3 0302 	umull	r0, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	fb00 f303 	mul.w	r3, r0, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	3332      	adds	r3, #50	; 0x32
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <UART_SetConfig+0x118>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	440a      	add	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013800 	.word	0x40013800
 8002460:	51eb851f 	.word	0x51eb851f

08002464 <HAL_GPIO_EXTI_Callback>:
bool buttonDownFlag;
/*
 * @brief: 当检测到外部中断触发并确定其为按键按下时，翻转led灯，按下标记被确定
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002474:	d117      	bne.n	80024a6 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_Delay(5);
 8002476:	2005      	movs	r0, #5
 8002478:	f7fe fa78 	bl	800096c <HAL_Delay>
		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET) {
 800247c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002482:	f7fe fd73 	bl	8000f6c <HAL_GPIO_ReadPin>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <HAL_GPIO_EXTI_Callback+0x50>)
 800249c:	f7fe fd95 	bl	8000fca <HAL_GPIO_TogglePin>
			buttonDownFlag = true;
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_GPIO_EXTI_Callback+0x54>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	20000090 	.word	0x20000090

080024bc <__errno>:
 80024bc:	4b01      	ldr	r3, [pc, #4]	; (80024c4 <__errno+0x8>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c

080024c8 <__libc_init_array>:
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	2500      	movs	r5, #0
 80024cc:	4e0c      	ldr	r6, [pc, #48]	; (8002500 <__libc_init_array+0x38>)
 80024ce:	4c0d      	ldr	r4, [pc, #52]	; (8002504 <__libc_init_array+0x3c>)
 80024d0:	1ba4      	subs	r4, r4, r6
 80024d2:	10a4      	asrs	r4, r4, #2
 80024d4:	42a5      	cmp	r5, r4
 80024d6:	d109      	bne.n	80024ec <__libc_init_array+0x24>
 80024d8:	f000 ff74 	bl	80033c4 <_init>
 80024dc:	2500      	movs	r5, #0
 80024de:	4e0a      	ldr	r6, [pc, #40]	; (8002508 <__libc_init_array+0x40>)
 80024e0:	4c0a      	ldr	r4, [pc, #40]	; (800250c <__libc_init_array+0x44>)
 80024e2:	1ba4      	subs	r4, r4, r6
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	42a5      	cmp	r5, r4
 80024e8:	d105      	bne.n	80024f6 <__libc_init_array+0x2e>
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f0:	4798      	blx	r3
 80024f2:	3501      	adds	r5, #1
 80024f4:	e7ee      	b.n	80024d4 <__libc_init_array+0xc>
 80024f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024fa:	4798      	blx	r3
 80024fc:	3501      	adds	r5, #1
 80024fe:	e7f2      	b.n	80024e6 <__libc_init_array+0x1e>
 8002500:	080034e0 	.word	0x080034e0
 8002504:	080034e0 	.word	0x080034e0
 8002508:	080034e0 	.word	0x080034e0
 800250c:	080034e4 	.word	0x080034e4

08002510 <memset>:
 8002510:	4603      	mov	r3, r0
 8002512:	4402      	add	r2, r0
 8002514:	4293      	cmp	r3, r2
 8002516:	d100      	bne.n	800251a <memset+0xa>
 8002518:	4770      	bx	lr
 800251a:	f803 1b01 	strb.w	r1, [r3], #1
 800251e:	e7f9      	b.n	8002514 <memset+0x4>

08002520 <iprintf>:
 8002520:	b40f      	push	{r0, r1, r2, r3}
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <iprintf+0x2c>)
 8002524:	b513      	push	{r0, r1, r4, lr}
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	b124      	cbz	r4, 8002534 <iprintf+0x14>
 800252a:	69a3      	ldr	r3, [r4, #24]
 800252c:	b913      	cbnz	r3, 8002534 <iprintf+0x14>
 800252e:	4620      	mov	r0, r4
 8002530:	f000 fa22 	bl	8002978 <__sinit>
 8002534:	ab05      	add	r3, sp, #20
 8002536:	9a04      	ldr	r2, [sp, #16]
 8002538:	68a1      	ldr	r1, [r4, #8]
 800253a:	4620      	mov	r0, r4
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	f000 fbd7 	bl	8002cf0 <_vfiprintf_r>
 8002542:	b002      	add	sp, #8
 8002544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002548:	b004      	add	sp, #16
 800254a:	4770      	bx	lr
 800254c:	2000000c 	.word	0x2000000c

08002550 <_puts_r>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	460e      	mov	r6, r1
 8002554:	4605      	mov	r5, r0
 8002556:	b118      	cbz	r0, 8002560 <_puts_r+0x10>
 8002558:	6983      	ldr	r3, [r0, #24]
 800255a:	b90b      	cbnz	r3, 8002560 <_puts_r+0x10>
 800255c:	f000 fa0c 	bl	8002978 <__sinit>
 8002560:	69ab      	ldr	r3, [r5, #24]
 8002562:	68ac      	ldr	r4, [r5, #8]
 8002564:	b913      	cbnz	r3, 800256c <_puts_r+0x1c>
 8002566:	4628      	mov	r0, r5
 8002568:	f000 fa06 	bl	8002978 <__sinit>
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <_puts_r+0xac>)
 800256e:	429c      	cmp	r4, r3
 8002570:	d117      	bne.n	80025a2 <_puts_r+0x52>
 8002572:	686c      	ldr	r4, [r5, #4]
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	071b      	lsls	r3, r3, #28
 8002578:	d51d      	bpl.n	80025b6 <_puts_r+0x66>
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	b1db      	cbz	r3, 80025b6 <_puts_r+0x66>
 800257e:	3e01      	subs	r6, #1
 8002580:	68a3      	ldr	r3, [r4, #8]
 8002582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002586:	3b01      	subs	r3, #1
 8002588:	60a3      	str	r3, [r4, #8]
 800258a:	b9e9      	cbnz	r1, 80025c8 <_puts_r+0x78>
 800258c:	2b00      	cmp	r3, #0
 800258e:	da2e      	bge.n	80025ee <_puts_r+0x9e>
 8002590:	4622      	mov	r2, r4
 8002592:	210a      	movs	r1, #10
 8002594:	4628      	mov	r0, r5
 8002596:	f000 f83f 	bl	8002618 <__swbuf_r>
 800259a:	3001      	adds	r0, #1
 800259c:	d011      	beq.n	80025c2 <_puts_r+0x72>
 800259e:	200a      	movs	r0, #10
 80025a0:	e011      	b.n	80025c6 <_puts_r+0x76>
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <_puts_r+0xb0>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	d101      	bne.n	80025ac <_puts_r+0x5c>
 80025a8:	68ac      	ldr	r4, [r5, #8]
 80025aa:	e7e3      	b.n	8002574 <_puts_r+0x24>
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <_puts_r+0xb4>)
 80025ae:	429c      	cmp	r4, r3
 80025b0:	bf08      	it	eq
 80025b2:	68ec      	ldreq	r4, [r5, #12]
 80025b4:	e7de      	b.n	8002574 <_puts_r+0x24>
 80025b6:	4621      	mov	r1, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	f000 f87f 	bl	80026bc <__swsetup_r>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d0dd      	beq.n	800257e <_puts_r+0x2e>
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da04      	bge.n	80025d6 <_puts_r+0x86>
 80025cc:	69a2      	ldr	r2, [r4, #24]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dc06      	bgt.n	80025e0 <_puts_r+0x90>
 80025d2:	290a      	cmp	r1, #10
 80025d4:	d004      	beq.n	80025e0 <_puts_r+0x90>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	6022      	str	r2, [r4, #0]
 80025dc:	7019      	strb	r1, [r3, #0]
 80025de:	e7cf      	b.n	8002580 <_puts_r+0x30>
 80025e0:	4622      	mov	r2, r4
 80025e2:	4628      	mov	r0, r5
 80025e4:	f000 f818 	bl	8002618 <__swbuf_r>
 80025e8:	3001      	adds	r0, #1
 80025ea:	d1c9      	bne.n	8002580 <_puts_r+0x30>
 80025ec:	e7e9      	b.n	80025c2 <_puts_r+0x72>
 80025ee:	200a      	movs	r0, #10
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	6022      	str	r2, [r4, #0]
 80025f6:	7018      	strb	r0, [r3, #0]
 80025f8:	e7e5      	b.n	80025c6 <_puts_r+0x76>
 80025fa:	bf00      	nop
 80025fc:	0800346c 	.word	0x0800346c
 8002600:	0800348c 	.word	0x0800348c
 8002604:	0800344c 	.word	0x0800344c

08002608 <puts>:
 8002608:	4b02      	ldr	r3, [pc, #8]	; (8002614 <puts+0xc>)
 800260a:	4601      	mov	r1, r0
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f7ff bf9f 	b.w	8002550 <_puts_r>
 8002612:	bf00      	nop
 8002614:	2000000c 	.word	0x2000000c

08002618 <__swbuf_r>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	460e      	mov	r6, r1
 800261c:	4614      	mov	r4, r2
 800261e:	4605      	mov	r5, r0
 8002620:	b118      	cbz	r0, 800262a <__swbuf_r+0x12>
 8002622:	6983      	ldr	r3, [r0, #24]
 8002624:	b90b      	cbnz	r3, 800262a <__swbuf_r+0x12>
 8002626:	f000 f9a7 	bl	8002978 <__sinit>
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <__swbuf_r+0x98>)
 800262c:	429c      	cmp	r4, r3
 800262e:	d12a      	bne.n	8002686 <__swbuf_r+0x6e>
 8002630:	686c      	ldr	r4, [r5, #4]
 8002632:	69a3      	ldr	r3, [r4, #24]
 8002634:	60a3      	str	r3, [r4, #8]
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	071a      	lsls	r2, r3, #28
 800263a:	d52e      	bpl.n	800269a <__swbuf_r+0x82>
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	b363      	cbz	r3, 800269a <__swbuf_r+0x82>
 8002640:	6923      	ldr	r3, [r4, #16]
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	b2f6      	uxtb	r6, r6
 8002646:	1ac0      	subs	r0, r0, r3
 8002648:	6963      	ldr	r3, [r4, #20]
 800264a:	4637      	mov	r7, r6
 800264c:	4283      	cmp	r3, r0
 800264e:	dc04      	bgt.n	800265a <__swbuf_r+0x42>
 8002650:	4621      	mov	r1, r4
 8002652:	4628      	mov	r0, r5
 8002654:	f000 f926 	bl	80028a4 <_fflush_r>
 8002658:	bb28      	cbnz	r0, 80026a6 <__swbuf_r+0x8e>
 800265a:	68a3      	ldr	r3, [r4, #8]
 800265c:	3001      	adds	r0, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	60a3      	str	r3, [r4, #8]
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	6022      	str	r2, [r4, #0]
 8002668:	701e      	strb	r6, [r3, #0]
 800266a:	6963      	ldr	r3, [r4, #20]
 800266c:	4283      	cmp	r3, r0
 800266e:	d004      	beq.n	800267a <__swbuf_r+0x62>
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	07db      	lsls	r3, r3, #31
 8002674:	d519      	bpl.n	80026aa <__swbuf_r+0x92>
 8002676:	2e0a      	cmp	r6, #10
 8002678:	d117      	bne.n	80026aa <__swbuf_r+0x92>
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	f000 f911 	bl	80028a4 <_fflush_r>
 8002682:	b190      	cbz	r0, 80026aa <__swbuf_r+0x92>
 8002684:	e00f      	b.n	80026a6 <__swbuf_r+0x8e>
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <__swbuf_r+0x9c>)
 8002688:	429c      	cmp	r4, r3
 800268a:	d101      	bne.n	8002690 <__swbuf_r+0x78>
 800268c:	68ac      	ldr	r4, [r5, #8]
 800268e:	e7d0      	b.n	8002632 <__swbuf_r+0x1a>
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <__swbuf_r+0xa0>)
 8002692:	429c      	cmp	r4, r3
 8002694:	bf08      	it	eq
 8002696:	68ec      	ldreq	r4, [r5, #12]
 8002698:	e7cb      	b.n	8002632 <__swbuf_r+0x1a>
 800269a:	4621      	mov	r1, r4
 800269c:	4628      	mov	r0, r5
 800269e:	f000 f80d 	bl	80026bc <__swsetup_r>
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d0cc      	beq.n	8002640 <__swbuf_r+0x28>
 80026a6:	f04f 37ff 	mov.w	r7, #4294967295
 80026aa:	4638      	mov	r0, r7
 80026ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800346c 	.word	0x0800346c
 80026b4:	0800348c 	.word	0x0800348c
 80026b8:	0800344c 	.word	0x0800344c

080026bc <__swsetup_r>:
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <__swsetup_r+0xcc>)
 80026be:	b570      	push	{r4, r5, r6, lr}
 80026c0:	681d      	ldr	r5, [r3, #0]
 80026c2:	4606      	mov	r6, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	b125      	cbz	r5, 80026d2 <__swsetup_r+0x16>
 80026c8:	69ab      	ldr	r3, [r5, #24]
 80026ca:	b913      	cbnz	r3, 80026d2 <__swsetup_r+0x16>
 80026cc:	4628      	mov	r0, r5
 80026ce:	f000 f953 	bl	8002978 <__sinit>
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <__swsetup_r+0xd0>)
 80026d4:	429c      	cmp	r4, r3
 80026d6:	d10f      	bne.n	80026f8 <__swsetup_r+0x3c>
 80026d8:	686c      	ldr	r4, [r5, #4]
 80026da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	0715      	lsls	r5, r2, #28
 80026e2:	d42c      	bmi.n	800273e <__swsetup_r+0x82>
 80026e4:	06d0      	lsls	r0, r2, #27
 80026e6:	d411      	bmi.n	800270c <__swsetup_r+0x50>
 80026e8:	2209      	movs	r2, #9
 80026ea:	6032      	str	r2, [r6, #0]
 80026ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	f04f 30ff 	mov.w	r0, #4294967295
 80026f6:	e03e      	b.n	8002776 <__swsetup_r+0xba>
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <__swsetup_r+0xd4>)
 80026fa:	429c      	cmp	r4, r3
 80026fc:	d101      	bne.n	8002702 <__swsetup_r+0x46>
 80026fe:	68ac      	ldr	r4, [r5, #8]
 8002700:	e7eb      	b.n	80026da <__swsetup_r+0x1e>
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <__swsetup_r+0xd8>)
 8002704:	429c      	cmp	r4, r3
 8002706:	bf08      	it	eq
 8002708:	68ec      	ldreq	r4, [r5, #12]
 800270a:	e7e6      	b.n	80026da <__swsetup_r+0x1e>
 800270c:	0751      	lsls	r1, r2, #29
 800270e:	d512      	bpl.n	8002736 <__swsetup_r+0x7a>
 8002710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002712:	b141      	cbz	r1, 8002726 <__swsetup_r+0x6a>
 8002714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002718:	4299      	cmp	r1, r3
 800271a:	d002      	beq.n	8002722 <__swsetup_r+0x66>
 800271c:	4630      	mov	r0, r6
 800271e:	f000 fa19 	bl	8002b54 <_free_r>
 8002722:	2300      	movs	r3, #0
 8002724:	6363      	str	r3, [r4, #52]	; 0x34
 8002726:	89a3      	ldrh	r3, [r4, #12]
 8002728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800272c:	81a3      	strh	r3, [r4, #12]
 800272e:	2300      	movs	r3, #0
 8002730:	6063      	str	r3, [r4, #4]
 8002732:	6923      	ldr	r3, [r4, #16]
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	6923      	ldr	r3, [r4, #16]
 8002740:	b94b      	cbnz	r3, 8002756 <__swsetup_r+0x9a>
 8002742:	89a3      	ldrh	r3, [r4, #12]
 8002744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274c:	d003      	beq.n	8002756 <__swsetup_r+0x9a>
 800274e:	4621      	mov	r1, r4
 8002750:	4630      	mov	r0, r6
 8002752:	f000 f9bf 	bl	8002ad4 <__smakebuf_r>
 8002756:	89a2      	ldrh	r2, [r4, #12]
 8002758:	f012 0301 	ands.w	r3, r2, #1
 800275c:	d00c      	beq.n	8002778 <__swsetup_r+0xbc>
 800275e:	2300      	movs	r3, #0
 8002760:	60a3      	str	r3, [r4, #8]
 8002762:	6963      	ldr	r3, [r4, #20]
 8002764:	425b      	negs	r3, r3
 8002766:	61a3      	str	r3, [r4, #24]
 8002768:	6923      	ldr	r3, [r4, #16]
 800276a:	b953      	cbnz	r3, 8002782 <__swsetup_r+0xc6>
 800276c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002770:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002774:	d1ba      	bne.n	80026ec <__swsetup_r+0x30>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	0792      	lsls	r2, r2, #30
 800277a:	bf58      	it	pl
 800277c:	6963      	ldrpl	r3, [r4, #20]
 800277e:	60a3      	str	r3, [r4, #8]
 8002780:	e7f2      	b.n	8002768 <__swsetup_r+0xac>
 8002782:	2000      	movs	r0, #0
 8002784:	e7f7      	b.n	8002776 <__swsetup_r+0xba>
 8002786:	bf00      	nop
 8002788:	2000000c 	.word	0x2000000c
 800278c:	0800346c 	.word	0x0800346c
 8002790:	0800348c 	.word	0x0800348c
 8002794:	0800344c 	.word	0x0800344c

08002798 <__sflush_r>:
 8002798:	898a      	ldrh	r2, [r1, #12]
 800279a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800279e:	4605      	mov	r5, r0
 80027a0:	0710      	lsls	r0, r2, #28
 80027a2:	460c      	mov	r4, r1
 80027a4:	d458      	bmi.n	8002858 <__sflush_r+0xc0>
 80027a6:	684b      	ldr	r3, [r1, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	dc05      	bgt.n	80027b8 <__sflush_r+0x20>
 80027ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dc02      	bgt.n	80027b8 <__sflush_r+0x20>
 80027b2:	2000      	movs	r0, #0
 80027b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027ba:	2e00      	cmp	r6, #0
 80027bc:	d0f9      	beq.n	80027b2 <__sflush_r+0x1a>
 80027be:	2300      	movs	r3, #0
 80027c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027c4:	682f      	ldr	r7, [r5, #0]
 80027c6:	6a21      	ldr	r1, [r4, #32]
 80027c8:	602b      	str	r3, [r5, #0]
 80027ca:	d032      	beq.n	8002832 <__sflush_r+0x9a>
 80027cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	075a      	lsls	r2, r3, #29
 80027d2:	d505      	bpl.n	80027e0 <__sflush_r+0x48>
 80027d4:	6863      	ldr	r3, [r4, #4]
 80027d6:	1ac0      	subs	r0, r0, r3
 80027d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027da:	b10b      	cbz	r3, 80027e0 <__sflush_r+0x48>
 80027dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027de:	1ac0      	subs	r0, r0, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	4602      	mov	r2, r0
 80027e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027e6:	6a21      	ldr	r1, [r4, #32]
 80027e8:	4628      	mov	r0, r5
 80027ea:	47b0      	blx	r6
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	d106      	bne.n	8002800 <__sflush_r+0x68>
 80027f2:	6829      	ldr	r1, [r5, #0]
 80027f4:	291d      	cmp	r1, #29
 80027f6:	d848      	bhi.n	800288a <__sflush_r+0xf2>
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <__sflush_r+0x108>)
 80027fa:	40ca      	lsrs	r2, r1
 80027fc:	07d6      	lsls	r6, r2, #31
 80027fe:	d544      	bpl.n	800288a <__sflush_r+0xf2>
 8002800:	2200      	movs	r2, #0
 8002802:	6062      	str	r2, [r4, #4]
 8002804:	6922      	ldr	r2, [r4, #16]
 8002806:	04d9      	lsls	r1, r3, #19
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	d504      	bpl.n	8002816 <__sflush_r+0x7e>
 800280c:	1c42      	adds	r2, r0, #1
 800280e:	d101      	bne.n	8002814 <__sflush_r+0x7c>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	b903      	cbnz	r3, 8002816 <__sflush_r+0x7e>
 8002814:	6560      	str	r0, [r4, #84]	; 0x54
 8002816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002818:	602f      	str	r7, [r5, #0]
 800281a:	2900      	cmp	r1, #0
 800281c:	d0c9      	beq.n	80027b2 <__sflush_r+0x1a>
 800281e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002822:	4299      	cmp	r1, r3
 8002824:	d002      	beq.n	800282c <__sflush_r+0x94>
 8002826:	4628      	mov	r0, r5
 8002828:	f000 f994 	bl	8002b54 <_free_r>
 800282c:	2000      	movs	r0, #0
 800282e:	6360      	str	r0, [r4, #52]	; 0x34
 8002830:	e7c0      	b.n	80027b4 <__sflush_r+0x1c>
 8002832:	2301      	movs	r3, #1
 8002834:	4628      	mov	r0, r5
 8002836:	47b0      	blx	r6
 8002838:	1c41      	adds	r1, r0, #1
 800283a:	d1c8      	bne.n	80027ce <__sflush_r+0x36>
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0c5      	beq.n	80027ce <__sflush_r+0x36>
 8002842:	2b1d      	cmp	r3, #29
 8002844:	d001      	beq.n	800284a <__sflush_r+0xb2>
 8002846:	2b16      	cmp	r3, #22
 8002848:	d101      	bne.n	800284e <__sflush_r+0xb6>
 800284a:	602f      	str	r7, [r5, #0]
 800284c:	e7b1      	b.n	80027b2 <__sflush_r+0x1a>
 800284e:	89a3      	ldrh	r3, [r4, #12]
 8002850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002854:	81a3      	strh	r3, [r4, #12]
 8002856:	e7ad      	b.n	80027b4 <__sflush_r+0x1c>
 8002858:	690f      	ldr	r7, [r1, #16]
 800285a:	2f00      	cmp	r7, #0
 800285c:	d0a9      	beq.n	80027b2 <__sflush_r+0x1a>
 800285e:	0793      	lsls	r3, r2, #30
 8002860:	bf18      	it	ne
 8002862:	2300      	movne	r3, #0
 8002864:	680e      	ldr	r6, [r1, #0]
 8002866:	bf08      	it	eq
 8002868:	694b      	ldreq	r3, [r1, #20]
 800286a:	eba6 0807 	sub.w	r8, r6, r7
 800286e:	600f      	str	r7, [r1, #0]
 8002870:	608b      	str	r3, [r1, #8]
 8002872:	f1b8 0f00 	cmp.w	r8, #0
 8002876:	dd9c      	ble.n	80027b2 <__sflush_r+0x1a>
 8002878:	4643      	mov	r3, r8
 800287a:	463a      	mov	r2, r7
 800287c:	6a21      	ldr	r1, [r4, #32]
 800287e:	4628      	mov	r0, r5
 8002880:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002882:	47b0      	blx	r6
 8002884:	2800      	cmp	r0, #0
 8002886:	dc06      	bgt.n	8002896 <__sflush_r+0xfe>
 8002888:	89a3      	ldrh	r3, [r4, #12]
 800288a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288e:	81a3      	strh	r3, [r4, #12]
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	e78e      	b.n	80027b4 <__sflush_r+0x1c>
 8002896:	4407      	add	r7, r0
 8002898:	eba8 0800 	sub.w	r8, r8, r0
 800289c:	e7e9      	b.n	8002872 <__sflush_r+0xda>
 800289e:	bf00      	nop
 80028a0:	20400001 	.word	0x20400001

080028a4 <_fflush_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	690b      	ldr	r3, [r1, #16]
 80028a8:	4605      	mov	r5, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	b1db      	cbz	r3, 80028e6 <_fflush_r+0x42>
 80028ae:	b118      	cbz	r0, 80028b8 <_fflush_r+0x14>
 80028b0:	6983      	ldr	r3, [r0, #24]
 80028b2:	b90b      	cbnz	r3, 80028b8 <_fflush_r+0x14>
 80028b4:	f000 f860 	bl	8002978 <__sinit>
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <_fflush_r+0x48>)
 80028ba:	429c      	cmp	r4, r3
 80028bc:	d109      	bne.n	80028d2 <_fflush_r+0x2e>
 80028be:	686c      	ldr	r4, [r5, #4]
 80028c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c4:	b17b      	cbz	r3, 80028e6 <_fflush_r+0x42>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4628      	mov	r0, r5
 80028ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028ce:	f7ff bf63 	b.w	8002798 <__sflush_r>
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_fflush_r+0x4c>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d101      	bne.n	80028dc <_fflush_r+0x38>
 80028d8:	68ac      	ldr	r4, [r5, #8]
 80028da:	e7f1      	b.n	80028c0 <_fflush_r+0x1c>
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <_fflush_r+0x50>)
 80028de:	429c      	cmp	r4, r3
 80028e0:	bf08      	it	eq
 80028e2:	68ec      	ldreq	r4, [r5, #12]
 80028e4:	e7ec      	b.n	80028c0 <_fflush_r+0x1c>
 80028e6:	2000      	movs	r0, #0
 80028e8:	bd38      	pop	{r3, r4, r5, pc}
 80028ea:	bf00      	nop
 80028ec:	0800346c 	.word	0x0800346c
 80028f0:	0800348c 	.word	0x0800348c
 80028f4:	0800344c 	.word	0x0800344c

080028f8 <std>:
 80028f8:	2300      	movs	r3, #0
 80028fa:	b510      	push	{r4, lr}
 80028fc:	4604      	mov	r4, r0
 80028fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002902:	6083      	str	r3, [r0, #8]
 8002904:	8181      	strh	r1, [r0, #12]
 8002906:	6643      	str	r3, [r0, #100]	; 0x64
 8002908:	81c2      	strh	r2, [r0, #14]
 800290a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800290e:	6183      	str	r3, [r0, #24]
 8002910:	4619      	mov	r1, r3
 8002912:	2208      	movs	r2, #8
 8002914:	305c      	adds	r0, #92	; 0x5c
 8002916:	f7ff fdfb 	bl	8002510 <memset>
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <std+0x38>)
 800291c:	6224      	str	r4, [r4, #32]
 800291e:	6263      	str	r3, [r4, #36]	; 0x24
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <std+0x3c>)
 8002922:	62a3      	str	r3, [r4, #40]	; 0x28
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <std+0x40>)
 8002926:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <std+0x44>)
 800292a:	6323      	str	r3, [r4, #48]	; 0x30
 800292c:	bd10      	pop	{r4, pc}
 800292e:	bf00      	nop
 8002930:	0800324d 	.word	0x0800324d
 8002934:	0800326f 	.word	0x0800326f
 8002938:	080032a7 	.word	0x080032a7
 800293c:	080032cb 	.word	0x080032cb

08002940 <_cleanup_r>:
 8002940:	4901      	ldr	r1, [pc, #4]	; (8002948 <_cleanup_r+0x8>)
 8002942:	f000 b885 	b.w	8002a50 <_fwalk_reent>
 8002946:	bf00      	nop
 8002948:	080028a5 	.word	0x080028a5

0800294c <__sfmoreglue>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	2568      	movs	r5, #104	; 0x68
 8002950:	1e4a      	subs	r2, r1, #1
 8002952:	4355      	muls	r5, r2
 8002954:	460e      	mov	r6, r1
 8002956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800295a:	f000 f947 	bl	8002bec <_malloc_r>
 800295e:	4604      	mov	r4, r0
 8002960:	b140      	cbz	r0, 8002974 <__sfmoreglue+0x28>
 8002962:	2100      	movs	r1, #0
 8002964:	e9c0 1600 	strd	r1, r6, [r0]
 8002968:	300c      	adds	r0, #12
 800296a:	60a0      	str	r0, [r4, #8]
 800296c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002970:	f7ff fdce 	bl	8002510 <memset>
 8002974:	4620      	mov	r0, r4
 8002976:	bd70      	pop	{r4, r5, r6, pc}

08002978 <__sinit>:
 8002978:	6983      	ldr	r3, [r0, #24]
 800297a:	b510      	push	{r4, lr}
 800297c:	4604      	mov	r4, r0
 800297e:	bb33      	cbnz	r3, 80029ce <__sinit+0x56>
 8002980:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002984:	6503      	str	r3, [r0, #80]	; 0x50
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <__sinit+0x58>)
 8002988:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <__sinit+0x5c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6282      	str	r2, [r0, #40]	; 0x28
 800298e:	4298      	cmp	r0, r3
 8002990:	bf04      	itt	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	6183      	streq	r3, [r0, #24]
 8002996:	f000 f81f 	bl	80029d8 <__sfp>
 800299a:	6060      	str	r0, [r4, #4]
 800299c:	4620      	mov	r0, r4
 800299e:	f000 f81b 	bl	80029d8 <__sfp>
 80029a2:	60a0      	str	r0, [r4, #8]
 80029a4:	4620      	mov	r0, r4
 80029a6:	f000 f817 	bl	80029d8 <__sfp>
 80029aa:	2200      	movs	r2, #0
 80029ac:	60e0      	str	r0, [r4, #12]
 80029ae:	2104      	movs	r1, #4
 80029b0:	6860      	ldr	r0, [r4, #4]
 80029b2:	f7ff ffa1 	bl	80028f8 <std>
 80029b6:	2201      	movs	r2, #1
 80029b8:	2109      	movs	r1, #9
 80029ba:	68a0      	ldr	r0, [r4, #8]
 80029bc:	f7ff ff9c 	bl	80028f8 <std>
 80029c0:	2202      	movs	r2, #2
 80029c2:	2112      	movs	r1, #18
 80029c4:	68e0      	ldr	r0, [r4, #12]
 80029c6:	f7ff ff97 	bl	80028f8 <std>
 80029ca:	2301      	movs	r3, #1
 80029cc:	61a3      	str	r3, [r4, #24]
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	08003448 	.word	0x08003448
 80029d4:	08002941 	.word	0x08002941

080029d8 <__sfp>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <__sfp+0x70>)
 80029dc:	4607      	mov	r7, r0
 80029de:	681e      	ldr	r6, [r3, #0]
 80029e0:	69b3      	ldr	r3, [r6, #24]
 80029e2:	b913      	cbnz	r3, 80029ea <__sfp+0x12>
 80029e4:	4630      	mov	r0, r6
 80029e6:	f7ff ffc7 	bl	8002978 <__sinit>
 80029ea:	3648      	adds	r6, #72	; 0x48
 80029ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	d503      	bpl.n	80029fc <__sfp+0x24>
 80029f4:	6833      	ldr	r3, [r6, #0]
 80029f6:	b133      	cbz	r3, 8002a06 <__sfp+0x2e>
 80029f8:	6836      	ldr	r6, [r6, #0]
 80029fa:	e7f7      	b.n	80029ec <__sfp+0x14>
 80029fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a00:	b16d      	cbz	r5, 8002a1e <__sfp+0x46>
 8002a02:	3468      	adds	r4, #104	; 0x68
 8002a04:	e7f4      	b.n	80029f0 <__sfp+0x18>
 8002a06:	2104      	movs	r1, #4
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f7ff ff9f 	bl	800294c <__sfmoreglue>
 8002a0e:	6030      	str	r0, [r6, #0]
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d1f1      	bne.n	80029f8 <__sfp+0x20>
 8002a14:	230c      	movs	r3, #12
 8002a16:	4604      	mov	r4, r0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <__sfp+0x74>)
 8002a20:	6665      	str	r5, [r4, #100]	; 0x64
 8002a22:	e9c4 5500 	strd	r5, r5, [r4]
 8002a26:	60a5      	str	r5, [r4, #8]
 8002a28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002a2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002a30:	2208      	movs	r2, #8
 8002a32:	4629      	mov	r1, r5
 8002a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a38:	f7ff fd6a 	bl	8002510 <memset>
 8002a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a44:	e7e9      	b.n	8002a1a <__sfp+0x42>
 8002a46:	bf00      	nop
 8002a48:	08003448 	.word	0x08003448
 8002a4c:	ffff0001 	.word	0xffff0001

08002a50 <_fwalk_reent>:
 8002a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a54:	4680      	mov	r8, r0
 8002a56:	4689      	mov	r9, r1
 8002a58:	2600      	movs	r6, #0
 8002a5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a5e:	b914      	cbnz	r4, 8002a66 <_fwalk_reent+0x16>
 8002a60:	4630      	mov	r0, r6
 8002a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002a6a:	3f01      	subs	r7, #1
 8002a6c:	d501      	bpl.n	8002a72 <_fwalk_reent+0x22>
 8002a6e:	6824      	ldr	r4, [r4, #0]
 8002a70:	e7f5      	b.n	8002a5e <_fwalk_reent+0xe>
 8002a72:	89ab      	ldrh	r3, [r5, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d907      	bls.n	8002a88 <_fwalk_reent+0x38>
 8002a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	d003      	beq.n	8002a88 <_fwalk_reent+0x38>
 8002a80:	4629      	mov	r1, r5
 8002a82:	4640      	mov	r0, r8
 8002a84:	47c8      	blx	r9
 8002a86:	4306      	orrs	r6, r0
 8002a88:	3568      	adds	r5, #104	; 0x68
 8002a8a:	e7ee      	b.n	8002a6a <_fwalk_reent+0x1a>

08002a8c <__swhatbuf_r>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	460e      	mov	r6, r1
 8002a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a94:	b096      	sub	sp, #88	; 0x58
 8002a96:	2900      	cmp	r1, #0
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	da07      	bge.n	8002aae <__swhatbuf_r+0x22>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	602b      	str	r3, [r5, #0]
 8002aa2:	89b3      	ldrh	r3, [r6, #12]
 8002aa4:	061a      	lsls	r2, r3, #24
 8002aa6:	d410      	bmi.n	8002aca <__swhatbuf_r+0x3e>
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	e00e      	b.n	8002acc <__swhatbuf_r+0x40>
 8002aae:	466a      	mov	r2, sp
 8002ab0:	f000 fc32 	bl	8003318 <_fstat_r>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	dbf2      	blt.n	8002a9e <__swhatbuf_r+0x12>
 8002ab8:	9a01      	ldr	r2, [sp, #4]
 8002aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ac2:	425a      	negs	r2, r3
 8002ac4:	415a      	adcs	r2, r3
 8002ac6:	602a      	str	r2, [r5, #0]
 8002ac8:	e7ee      	b.n	8002aa8 <__swhatbuf_r+0x1c>
 8002aca:	2340      	movs	r3, #64	; 0x40
 8002acc:	2000      	movs	r0, #0
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	b016      	add	sp, #88	; 0x58
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}

08002ad4 <__smakebuf_r>:
 8002ad4:	898b      	ldrh	r3, [r1, #12]
 8002ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ad8:	079d      	lsls	r5, r3, #30
 8002ada:	4606      	mov	r6, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	d507      	bpl.n	8002af0 <__smakebuf_r+0x1c>
 8002ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ae4:	6023      	str	r3, [r4, #0]
 8002ae6:	6123      	str	r3, [r4, #16]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	6163      	str	r3, [r4, #20]
 8002aec:	b002      	add	sp, #8
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	ab01      	add	r3, sp, #4
 8002af2:	466a      	mov	r2, sp
 8002af4:	f7ff ffca 	bl	8002a8c <__swhatbuf_r>
 8002af8:	9900      	ldr	r1, [sp, #0]
 8002afa:	4605      	mov	r5, r0
 8002afc:	4630      	mov	r0, r6
 8002afe:	f000 f875 	bl	8002bec <_malloc_r>
 8002b02:	b948      	cbnz	r0, 8002b18 <__smakebuf_r+0x44>
 8002b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b08:	059a      	lsls	r2, r3, #22
 8002b0a:	d4ef      	bmi.n	8002aec <__smakebuf_r+0x18>
 8002b0c:	f023 0303 	bic.w	r3, r3, #3
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	81a3      	strh	r3, [r4, #12]
 8002b16:	e7e3      	b.n	8002ae0 <__smakebuf_r+0xc>
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <__smakebuf_r+0x7c>)
 8002b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	6020      	str	r0, [r4, #0]
 8002b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	9b00      	ldr	r3, [sp, #0]
 8002b28:	6120      	str	r0, [r4, #16]
 8002b2a:	6163      	str	r3, [r4, #20]
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	b15b      	cbz	r3, 8002b48 <__smakebuf_r+0x74>
 8002b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b34:	4630      	mov	r0, r6
 8002b36:	f000 fc01 	bl	800333c <_isatty_r>
 8002b3a:	b128      	cbz	r0, 8002b48 <__smakebuf_r+0x74>
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	81a3      	strh	r3, [r4, #12]
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	431d      	orrs	r5, r3
 8002b4c:	81a5      	strh	r5, [r4, #12]
 8002b4e:	e7cd      	b.n	8002aec <__smakebuf_r+0x18>
 8002b50:	08002941 	.word	0x08002941

08002b54 <_free_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4605      	mov	r5, r0
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d043      	beq.n	8002be4 <_free_r+0x90>
 8002b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b60:	1f0c      	subs	r4, r1, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfb8      	it	lt
 8002b66:	18e4      	addlt	r4, r4, r3
 8002b68:	f000 fc18 	bl	800339c <__malloc_lock>
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <_free_r+0x94>)
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	4610      	mov	r0, r2
 8002b72:	b933      	cbnz	r3, 8002b82 <_free_r+0x2e>
 8002b74:	6063      	str	r3, [r4, #4]
 8002b76:	6014      	str	r4, [r2, #0]
 8002b78:	4628      	mov	r0, r5
 8002b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b7e:	f000 bc0e 	b.w	800339e <__malloc_unlock>
 8002b82:	42a3      	cmp	r3, r4
 8002b84:	d90b      	bls.n	8002b9e <_free_r+0x4a>
 8002b86:	6821      	ldr	r1, [r4, #0]
 8002b88:	1862      	adds	r2, r4, r1
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	bf01      	itttt	eq
 8002b8e:	681a      	ldreq	r2, [r3, #0]
 8002b90:	685b      	ldreq	r3, [r3, #4]
 8002b92:	1852      	addeq	r2, r2, r1
 8002b94:	6022      	streq	r2, [r4, #0]
 8002b96:	6063      	str	r3, [r4, #4]
 8002b98:	6004      	str	r4, [r0, #0]
 8002b9a:	e7ed      	b.n	8002b78 <_free_r+0x24>
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	b10a      	cbz	r2, 8002ba6 <_free_r+0x52>
 8002ba2:	42a2      	cmp	r2, r4
 8002ba4:	d9fa      	bls.n	8002b9c <_free_r+0x48>
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	1858      	adds	r0, r3, r1
 8002baa:	42a0      	cmp	r0, r4
 8002bac:	d10b      	bne.n	8002bc6 <_free_r+0x72>
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	4401      	add	r1, r0
 8002bb2:	1858      	adds	r0, r3, r1
 8002bb4:	4282      	cmp	r2, r0
 8002bb6:	6019      	str	r1, [r3, #0]
 8002bb8:	d1de      	bne.n	8002b78 <_free_r+0x24>
 8002bba:	6810      	ldr	r0, [r2, #0]
 8002bbc:	6852      	ldr	r2, [r2, #4]
 8002bbe:	4401      	add	r1, r0
 8002bc0:	6019      	str	r1, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e7d8      	b.n	8002b78 <_free_r+0x24>
 8002bc6:	d902      	bls.n	8002bce <_free_r+0x7a>
 8002bc8:	230c      	movs	r3, #12
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	e7d4      	b.n	8002b78 <_free_r+0x24>
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	1821      	adds	r1, r4, r0
 8002bd2:	428a      	cmp	r2, r1
 8002bd4:	bf01      	itttt	eq
 8002bd6:	6811      	ldreq	r1, [r2, #0]
 8002bd8:	6852      	ldreq	r2, [r2, #4]
 8002bda:	1809      	addeq	r1, r1, r0
 8002bdc:	6021      	streq	r1, [r4, #0]
 8002bde:	6062      	str	r2, [r4, #4]
 8002be0:	605c      	str	r4, [r3, #4]
 8002be2:	e7c9      	b.n	8002b78 <_free_r+0x24>
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	20000094 	.word	0x20000094

08002bec <_malloc_r>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	1ccd      	adds	r5, r1, #3
 8002bf0:	f025 0503 	bic.w	r5, r5, #3
 8002bf4:	3508      	adds	r5, #8
 8002bf6:	2d0c      	cmp	r5, #12
 8002bf8:	bf38      	it	cc
 8002bfa:	250c      	movcc	r5, #12
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	4606      	mov	r6, r0
 8002c00:	db01      	blt.n	8002c06 <_malloc_r+0x1a>
 8002c02:	42a9      	cmp	r1, r5
 8002c04:	d903      	bls.n	8002c0e <_malloc_r+0x22>
 8002c06:	230c      	movs	r3, #12
 8002c08:	6033      	str	r3, [r6, #0]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	f000 fbc5 	bl	800339c <__malloc_lock>
 8002c12:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <_malloc_r+0xac>)
 8002c14:	6814      	ldr	r4, [r2, #0]
 8002c16:	4621      	mov	r1, r4
 8002c18:	b991      	cbnz	r1, 8002c40 <_malloc_r+0x54>
 8002c1a:	4c20      	ldr	r4, [pc, #128]	; (8002c9c <_malloc_r+0xb0>)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	b91b      	cbnz	r3, 8002c28 <_malloc_r+0x3c>
 8002c20:	4630      	mov	r0, r6
 8002c22:	f000 fb03 	bl	800322c <_sbrk_r>
 8002c26:	6020      	str	r0, [r4, #0]
 8002c28:	4629      	mov	r1, r5
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f000 fafe 	bl	800322c <_sbrk_r>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d124      	bne.n	8002c7e <_malloc_r+0x92>
 8002c34:	230c      	movs	r3, #12
 8002c36:	4630      	mov	r0, r6
 8002c38:	6033      	str	r3, [r6, #0]
 8002c3a:	f000 fbb0 	bl	800339e <__malloc_unlock>
 8002c3e:	e7e4      	b.n	8002c0a <_malloc_r+0x1e>
 8002c40:	680b      	ldr	r3, [r1, #0]
 8002c42:	1b5b      	subs	r3, r3, r5
 8002c44:	d418      	bmi.n	8002c78 <_malloc_r+0x8c>
 8002c46:	2b0b      	cmp	r3, #11
 8002c48:	d90f      	bls.n	8002c6a <_malloc_r+0x7e>
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	18cc      	adds	r4, r1, r3
 8002c4e:	50cd      	str	r5, [r1, r3]
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 fba4 	bl	800339e <__malloc_unlock>
 8002c56:	f104 000b 	add.w	r0, r4, #11
 8002c5a:	1d23      	adds	r3, r4, #4
 8002c5c:	f020 0007 	bic.w	r0, r0, #7
 8002c60:	1ac3      	subs	r3, r0, r3
 8002c62:	d0d3      	beq.n	8002c0c <_malloc_r+0x20>
 8002c64:	425a      	negs	r2, r3
 8002c66:	50e2      	str	r2, [r4, r3]
 8002c68:	e7d0      	b.n	8002c0c <_malloc_r+0x20>
 8002c6a:	684b      	ldr	r3, [r1, #4]
 8002c6c:	428c      	cmp	r4, r1
 8002c6e:	bf16      	itet	ne
 8002c70:	6063      	strne	r3, [r4, #4]
 8002c72:	6013      	streq	r3, [r2, #0]
 8002c74:	460c      	movne	r4, r1
 8002c76:	e7eb      	b.n	8002c50 <_malloc_r+0x64>
 8002c78:	460c      	mov	r4, r1
 8002c7a:	6849      	ldr	r1, [r1, #4]
 8002c7c:	e7cc      	b.n	8002c18 <_malloc_r+0x2c>
 8002c7e:	1cc4      	adds	r4, r0, #3
 8002c80:	f024 0403 	bic.w	r4, r4, #3
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d005      	beq.n	8002c94 <_malloc_r+0xa8>
 8002c88:	1a21      	subs	r1, r4, r0
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f000 face 	bl	800322c <_sbrk_r>
 8002c90:	3001      	adds	r0, #1
 8002c92:	d0cf      	beq.n	8002c34 <_malloc_r+0x48>
 8002c94:	6025      	str	r5, [r4, #0]
 8002c96:	e7db      	b.n	8002c50 <_malloc_r+0x64>
 8002c98:	20000094 	.word	0x20000094
 8002c9c:	20000098 	.word	0x20000098

08002ca0 <__sfputc_r>:
 8002ca0:	6893      	ldr	r3, [r2, #8]
 8002ca2:	b410      	push	{r4}
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	da07      	bge.n	8002cbc <__sfputc_r+0x1c>
 8002cac:	6994      	ldr	r4, [r2, #24]
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	db01      	blt.n	8002cb6 <__sfputc_r+0x16>
 8002cb2:	290a      	cmp	r1, #10
 8002cb4:	d102      	bne.n	8002cbc <__sfputc_r+0x1c>
 8002cb6:	bc10      	pop	{r4}
 8002cb8:	f7ff bcae 	b.w	8002618 <__swbuf_r>
 8002cbc:	6813      	ldr	r3, [r2, #0]
 8002cbe:	1c58      	adds	r0, r3, #1
 8002cc0:	6010      	str	r0, [r2, #0]
 8002cc2:	7019      	strb	r1, [r3, #0]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	bc10      	pop	{r4}
 8002cc8:	4770      	bx	lr

08002cca <__sfputs_r>:
 8002cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ccc:	4606      	mov	r6, r0
 8002cce:	460f      	mov	r7, r1
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	18d5      	adds	r5, r2, r3
 8002cd4:	42ac      	cmp	r4, r5
 8002cd6:	d101      	bne.n	8002cdc <__sfputs_r+0x12>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e007      	b.n	8002cec <__sfputs_r+0x22>
 8002cdc:	463a      	mov	r2, r7
 8002cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	f7ff ffdc 	bl	8002ca0 <__sfputc_r>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d1f3      	bne.n	8002cd4 <__sfputs_r+0xa>
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cf0 <_vfiprintf_r>:
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	b09d      	sub	sp, #116	; 0x74
 8002cf8:	4617      	mov	r7, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4606      	mov	r6, r0
 8002cfe:	b118      	cbz	r0, 8002d08 <_vfiprintf_r+0x18>
 8002d00:	6983      	ldr	r3, [r0, #24]
 8002d02:	b90b      	cbnz	r3, 8002d08 <_vfiprintf_r+0x18>
 8002d04:	f7ff fe38 	bl	8002978 <__sinit>
 8002d08:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <_vfiprintf_r+0x20c>)
 8002d0a:	429c      	cmp	r4, r3
 8002d0c:	d158      	bne.n	8002dc0 <_vfiprintf_r+0xd0>
 8002d0e:	6874      	ldr	r4, [r6, #4]
 8002d10:	89a3      	ldrh	r3, [r4, #12]
 8002d12:	0718      	lsls	r0, r3, #28
 8002d14:	d55e      	bpl.n	8002dd4 <_vfiprintf_r+0xe4>
 8002d16:	6923      	ldr	r3, [r4, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05b      	beq.n	8002dd4 <_vfiprintf_r+0xe4>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d20:	2320      	movs	r3, #32
 8002d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d26:	2330      	movs	r3, #48	; 0x30
 8002d28:	f04f 0b01 	mov.w	fp, #1
 8002d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d30:	9503      	str	r5, [sp, #12]
 8002d32:	46b8      	mov	r8, r7
 8002d34:	4645      	mov	r5, r8
 8002d36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d3a:	b10b      	cbz	r3, 8002d40 <_vfiprintf_r+0x50>
 8002d3c:	2b25      	cmp	r3, #37	; 0x25
 8002d3e:	d154      	bne.n	8002dea <_vfiprintf_r+0xfa>
 8002d40:	ebb8 0a07 	subs.w	sl, r8, r7
 8002d44:	d00b      	beq.n	8002d5e <_vfiprintf_r+0x6e>
 8002d46:	4653      	mov	r3, sl
 8002d48:	463a      	mov	r2, r7
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f7ff ffbc 	bl	8002cca <__sfputs_r>
 8002d52:	3001      	adds	r0, #1
 8002d54:	f000 80c2 	beq.w	8002edc <_vfiprintf_r+0x1ec>
 8002d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d5a:	4453      	add	r3, sl
 8002d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d5e:	f898 3000 	ldrb.w	r3, [r8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80ba 	beq.w	8002edc <_vfiprintf_r+0x1ec>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d72:	9304      	str	r3, [sp, #16]
 8002d74:	9307      	str	r3, [sp, #28]
 8002d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d7c:	46a8      	mov	r8, r5
 8002d7e:	2205      	movs	r2, #5
 8002d80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002d84:	485e      	ldr	r0, [pc, #376]	; (8002f00 <_vfiprintf_r+0x210>)
 8002d86:	f000 fafb 	bl	8003380 <memchr>
 8002d8a:	9b04      	ldr	r3, [sp, #16]
 8002d8c:	bb78      	cbnz	r0, 8002dee <_vfiprintf_r+0xfe>
 8002d8e:	06d9      	lsls	r1, r3, #27
 8002d90:	bf44      	itt	mi
 8002d92:	2220      	movmi	r2, #32
 8002d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d98:	071a      	lsls	r2, r3, #28
 8002d9a:	bf44      	itt	mi
 8002d9c:	222b      	movmi	r2, #43	; 0x2b
 8002d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002da2:	782a      	ldrb	r2, [r5, #0]
 8002da4:	2a2a      	cmp	r2, #42	; 0x2a
 8002da6:	d02a      	beq.n	8002dfe <_vfiprintf_r+0x10e>
 8002da8:	46a8      	mov	r8, r5
 8002daa:	2000      	movs	r0, #0
 8002dac:	250a      	movs	r5, #10
 8002dae:	9a07      	ldr	r2, [sp, #28]
 8002db0:	4641      	mov	r1, r8
 8002db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002db6:	3b30      	subs	r3, #48	; 0x30
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d969      	bls.n	8002e90 <_vfiprintf_r+0x1a0>
 8002dbc:	b360      	cbz	r0, 8002e18 <_vfiprintf_r+0x128>
 8002dbe:	e024      	b.n	8002e0a <_vfiprintf_r+0x11a>
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <_vfiprintf_r+0x214>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d101      	bne.n	8002dca <_vfiprintf_r+0xda>
 8002dc6:	68b4      	ldr	r4, [r6, #8]
 8002dc8:	e7a2      	b.n	8002d10 <_vfiprintf_r+0x20>
 8002dca:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <_vfiprintf_r+0x218>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	bf08      	it	eq
 8002dd0:	68f4      	ldreq	r4, [r6, #12]
 8002dd2:	e79d      	b.n	8002d10 <_vfiprintf_r+0x20>
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	4630      	mov	r0, r6
 8002dd8:	f7ff fc70 	bl	80026bc <__swsetup_r>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d09d      	beq.n	8002d1c <_vfiprintf_r+0x2c>
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	b01d      	add	sp, #116	; 0x74
 8002de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dea:	46a8      	mov	r8, r5
 8002dec:	e7a2      	b.n	8002d34 <_vfiprintf_r+0x44>
 8002dee:	4a44      	ldr	r2, [pc, #272]	; (8002f00 <_vfiprintf_r+0x210>)
 8002df0:	4645      	mov	r5, r8
 8002df2:	1a80      	subs	r0, r0, r2
 8002df4:	fa0b f000 	lsl.w	r0, fp, r0
 8002df8:	4318      	orrs	r0, r3
 8002dfa:	9004      	str	r0, [sp, #16]
 8002dfc:	e7be      	b.n	8002d7c <_vfiprintf_r+0x8c>
 8002dfe:	9a03      	ldr	r2, [sp, #12]
 8002e00:	1d11      	adds	r1, r2, #4
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	9103      	str	r1, [sp, #12]
 8002e06:	2a00      	cmp	r2, #0
 8002e08:	db01      	blt.n	8002e0e <_vfiprintf_r+0x11e>
 8002e0a:	9207      	str	r2, [sp, #28]
 8002e0c:	e004      	b.n	8002e18 <_vfiprintf_r+0x128>
 8002e0e:	4252      	negs	r2, r2
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	9207      	str	r2, [sp, #28]
 8002e16:	9304      	str	r3, [sp, #16]
 8002e18:	f898 3000 	ldrb.w	r3, [r8]
 8002e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e1e:	d10e      	bne.n	8002e3e <_vfiprintf_r+0x14e>
 8002e20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002e24:	2b2a      	cmp	r3, #42	; 0x2a
 8002e26:	d138      	bne.n	8002e9a <_vfiprintf_r+0x1aa>
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	f108 0802 	add.w	r8, r8, #2
 8002e2e:	1d1a      	adds	r2, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	9203      	str	r2, [sp, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bfb8      	it	lt
 8002e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e3c:	9305      	str	r3, [sp, #20]
 8002e3e:	4d33      	ldr	r5, [pc, #204]	; (8002f0c <_vfiprintf_r+0x21c>)
 8002e40:	2203      	movs	r2, #3
 8002e42:	f898 1000 	ldrb.w	r1, [r8]
 8002e46:	4628      	mov	r0, r5
 8002e48:	f000 fa9a 	bl	8003380 <memchr>
 8002e4c:	b140      	cbz	r0, 8002e60 <_vfiprintf_r+0x170>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	1b40      	subs	r0, r0, r5
 8002e52:	fa03 f000 	lsl.w	r0, r3, r0
 8002e56:	9b04      	ldr	r3, [sp, #16]
 8002e58:	f108 0801 	add.w	r8, r8, #1
 8002e5c:	4303      	orrs	r3, r0
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	f898 1000 	ldrb.w	r1, [r8]
 8002e64:	2206      	movs	r2, #6
 8002e66:	482a      	ldr	r0, [pc, #168]	; (8002f10 <_vfiprintf_r+0x220>)
 8002e68:	f108 0701 	add.w	r7, r8, #1
 8002e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e70:	f000 fa86 	bl	8003380 <memchr>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d037      	beq.n	8002ee8 <_vfiprintf_r+0x1f8>
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <_vfiprintf_r+0x224>)
 8002e7a:	bb1b      	cbnz	r3, 8002ec4 <_vfiprintf_r+0x1d4>
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	3307      	adds	r3, #7
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	3308      	adds	r3, #8
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8a:	444b      	add	r3, r9
 8002e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8e:	e750      	b.n	8002d32 <_vfiprintf_r+0x42>
 8002e90:	fb05 3202 	mla	r2, r5, r2, r3
 8002e94:	2001      	movs	r0, #1
 8002e96:	4688      	mov	r8, r1
 8002e98:	e78a      	b.n	8002db0 <_vfiprintf_r+0xc0>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	250a      	movs	r5, #10
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f108 0801 	add.w	r8, r8, #1
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eac:	3a30      	subs	r2, #48	; 0x30
 8002eae:	2a09      	cmp	r2, #9
 8002eb0:	d903      	bls.n	8002eba <_vfiprintf_r+0x1ca>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0c3      	beq.n	8002e3e <_vfiprintf_r+0x14e>
 8002eb6:	9105      	str	r1, [sp, #20]
 8002eb8:	e7c1      	b.n	8002e3e <_vfiprintf_r+0x14e>
 8002eba:	fb05 2101 	mla	r1, r5, r1, r2
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4680      	mov	r8, r0
 8002ec2:	e7f0      	b.n	8002ea6 <_vfiprintf_r+0x1b6>
 8002ec4:	ab03      	add	r3, sp, #12
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4622      	mov	r2, r4
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_vfiprintf_r+0x228>)
 8002ecc:	a904      	add	r1, sp, #16
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ed8:	4681      	mov	r9, r0
 8002eda:	d1d5      	bne.n	8002e88 <_vfiprintf_r+0x198>
 8002edc:	89a3      	ldrh	r3, [r4, #12]
 8002ede:	065b      	lsls	r3, r3, #25
 8002ee0:	f53f af7e 	bmi.w	8002de0 <_vfiprintf_r+0xf0>
 8002ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ee6:	e77d      	b.n	8002de4 <_vfiprintf_r+0xf4>
 8002ee8:	ab03      	add	r3, sp, #12
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4622      	mov	r2, r4
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <_vfiprintf_r+0x228>)
 8002ef0:	a904      	add	r1, sp, #16
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f000 f888 	bl	8003008 <_printf_i>
 8002ef8:	e7ec      	b.n	8002ed4 <_vfiprintf_r+0x1e4>
 8002efa:	bf00      	nop
 8002efc:	0800346c 	.word	0x0800346c
 8002f00:	080034ac 	.word	0x080034ac
 8002f04:	0800348c 	.word	0x0800348c
 8002f08:	0800344c 	.word	0x0800344c
 8002f0c:	080034b2 	.word	0x080034b2
 8002f10:	080034b6 	.word	0x080034b6
 8002f14:	00000000 	.word	0x00000000
 8002f18:	08002ccb 	.word	0x08002ccb

08002f1c <_printf_common>:
 8002f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f20:	4691      	mov	r9, r2
 8002f22:	461f      	mov	r7, r3
 8002f24:	688a      	ldr	r2, [r1, #8]
 8002f26:	690b      	ldr	r3, [r1, #16]
 8002f28:	4606      	mov	r6, r0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	bfb8      	it	lt
 8002f2e:	4613      	movlt	r3, r2
 8002f30:	f8c9 3000 	str.w	r3, [r9]
 8002f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f3e:	b112      	cbz	r2, 8002f46 <_printf_common+0x2a>
 8002f40:	3301      	adds	r3, #1
 8002f42:	f8c9 3000 	str.w	r3, [r9]
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	0699      	lsls	r1, r3, #26
 8002f4a:	bf42      	ittt	mi
 8002f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f50:	3302      	addmi	r3, #2
 8002f52:	f8c9 3000 	strmi.w	r3, [r9]
 8002f56:	6825      	ldr	r5, [r4, #0]
 8002f58:	f015 0506 	ands.w	r5, r5, #6
 8002f5c:	d107      	bne.n	8002f6e <_printf_common+0x52>
 8002f5e:	f104 0a19 	add.w	sl, r4, #25
 8002f62:	68e3      	ldr	r3, [r4, #12]
 8002f64:	f8d9 2000 	ldr.w	r2, [r9]
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	42ab      	cmp	r3, r5
 8002f6c:	dc29      	bgt.n	8002fc2 <_printf_common+0xa6>
 8002f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	3300      	adds	r3, #0
 8002f76:	bf18      	it	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	0692      	lsls	r2, r2, #26
 8002f7c:	d42e      	bmi.n	8002fdc <_printf_common+0xc0>
 8002f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f82:	4639      	mov	r1, r7
 8002f84:	4630      	mov	r0, r6
 8002f86:	47c0      	blx	r8
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d021      	beq.n	8002fd0 <_printf_common+0xb4>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	68e5      	ldr	r5, [r4, #12]
 8002f90:	f003 0306 	and.w	r3, r3, #6
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	bf18      	it	ne
 8002f98:	2500      	movne	r5, #0
 8002f9a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f9e:	f04f 0900 	mov.w	r9, #0
 8002fa2:	bf08      	it	eq
 8002fa4:	1aad      	subeq	r5, r5, r2
 8002fa6:	68a3      	ldr	r3, [r4, #8]
 8002fa8:	6922      	ldr	r2, [r4, #16]
 8002faa:	bf08      	it	eq
 8002fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bfc4      	itt	gt
 8002fb4:	1a9b      	subgt	r3, r3, r2
 8002fb6:	18ed      	addgt	r5, r5, r3
 8002fb8:	341a      	adds	r4, #26
 8002fba:	454d      	cmp	r5, r9
 8002fbc:	d11a      	bne.n	8002ff4 <_printf_common+0xd8>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e008      	b.n	8002fd4 <_printf_common+0xb8>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	4630      	mov	r0, r6
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_printf_common+0xbc>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7c2      	b.n	8002f62 <_printf_common+0x46>
 8002fdc:	2030      	movs	r0, #48	; 0x30
 8002fde:	18e1      	adds	r1, r4, r3
 8002fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fea:	4422      	add	r2, r4
 8002fec:	3302      	adds	r3, #2
 8002fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ff2:	e7c4      	b.n	8002f7e <_printf_common+0x62>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xb4>
 8003002:	f109 0901 	add.w	r9, r9, #1
 8003006:	e7d8      	b.n	8002fba <_printf_common+0x9e>

08003008 <_printf_i>:
 8003008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800300c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003010:	460c      	mov	r4, r1
 8003012:	7e09      	ldrb	r1, [r1, #24]
 8003014:	b085      	sub	sp, #20
 8003016:	296e      	cmp	r1, #110	; 0x6e
 8003018:	4617      	mov	r7, r2
 800301a:	4606      	mov	r6, r0
 800301c:	4698      	mov	r8, r3
 800301e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003020:	f000 80b3 	beq.w	800318a <_printf_i+0x182>
 8003024:	d822      	bhi.n	800306c <_printf_i+0x64>
 8003026:	2963      	cmp	r1, #99	; 0x63
 8003028:	d036      	beq.n	8003098 <_printf_i+0x90>
 800302a:	d80a      	bhi.n	8003042 <_printf_i+0x3a>
 800302c:	2900      	cmp	r1, #0
 800302e:	f000 80b9 	beq.w	80031a4 <_printf_i+0x19c>
 8003032:	2958      	cmp	r1, #88	; 0x58
 8003034:	f000 8083 	beq.w	800313e <_printf_i+0x136>
 8003038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003040:	e032      	b.n	80030a8 <_printf_i+0xa0>
 8003042:	2964      	cmp	r1, #100	; 0x64
 8003044:	d001      	beq.n	800304a <_printf_i+0x42>
 8003046:	2969      	cmp	r1, #105	; 0x69
 8003048:	d1f6      	bne.n	8003038 <_printf_i+0x30>
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	6813      	ldr	r3, [r2, #0]
 800304e:	0605      	lsls	r5, r0, #24
 8003050:	f103 0104 	add.w	r1, r3, #4
 8003054:	d52a      	bpl.n	80030ac <_printf_i+0xa4>
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da03      	bge.n	8003066 <_printf_i+0x5e>
 800305e:	222d      	movs	r2, #45	; 0x2d
 8003060:	425b      	negs	r3, r3
 8003062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003066:	486f      	ldr	r0, [pc, #444]	; (8003224 <_printf_i+0x21c>)
 8003068:	220a      	movs	r2, #10
 800306a:	e039      	b.n	80030e0 <_printf_i+0xd8>
 800306c:	2973      	cmp	r1, #115	; 0x73
 800306e:	f000 809d 	beq.w	80031ac <_printf_i+0x1a4>
 8003072:	d808      	bhi.n	8003086 <_printf_i+0x7e>
 8003074:	296f      	cmp	r1, #111	; 0x6f
 8003076:	d020      	beq.n	80030ba <_printf_i+0xb2>
 8003078:	2970      	cmp	r1, #112	; 0x70
 800307a:	d1dd      	bne.n	8003038 <_printf_i+0x30>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	e003      	b.n	800308e <_printf_i+0x86>
 8003086:	2975      	cmp	r1, #117	; 0x75
 8003088:	d017      	beq.n	80030ba <_printf_i+0xb2>
 800308a:	2978      	cmp	r1, #120	; 0x78
 800308c:	d1d4      	bne.n	8003038 <_printf_i+0x30>
 800308e:	2378      	movs	r3, #120	; 0x78
 8003090:	4865      	ldr	r0, [pc, #404]	; (8003228 <_printf_i+0x220>)
 8003092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003096:	e055      	b.n	8003144 <_printf_i+0x13c>
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800309e:	1d19      	adds	r1, r3, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6011      	str	r1, [r2, #0]
 80030a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030a8:	2301      	movs	r3, #1
 80030aa:	e08c      	b.n	80031c6 <_printf_i+0x1be>
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030b2:	6011      	str	r1, [r2, #0]
 80030b4:	bf18      	it	ne
 80030b6:	b21b      	sxthne	r3, r3
 80030b8:	e7cf      	b.n	800305a <_printf_i+0x52>
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	6825      	ldr	r5, [r4, #0]
 80030be:	1d18      	adds	r0, r3, #4
 80030c0:	6010      	str	r0, [r2, #0]
 80030c2:	0628      	lsls	r0, r5, #24
 80030c4:	d501      	bpl.n	80030ca <_printf_i+0xc2>
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	e002      	b.n	80030d0 <_printf_i+0xc8>
 80030ca:	0668      	lsls	r0, r5, #25
 80030cc:	d5fb      	bpl.n	80030c6 <_printf_i+0xbe>
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	296f      	cmp	r1, #111	; 0x6f
 80030d2:	bf14      	ite	ne
 80030d4:	220a      	movne	r2, #10
 80030d6:	2208      	moveq	r2, #8
 80030d8:	4852      	ldr	r0, [pc, #328]	; (8003224 <_printf_i+0x21c>)
 80030da:	2100      	movs	r1, #0
 80030dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030e0:	6865      	ldr	r5, [r4, #4]
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	60a5      	str	r5, [r4, #8]
 80030e6:	f2c0 8095 	blt.w	8003214 <_printf_i+0x20c>
 80030ea:	6821      	ldr	r1, [r4, #0]
 80030ec:	f021 0104 	bic.w	r1, r1, #4
 80030f0:	6021      	str	r1, [r4, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d13d      	bne.n	8003172 <_printf_i+0x16a>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	f040 808e 	bne.w	8003218 <_printf_i+0x210>
 80030fc:	4665      	mov	r5, ip
 80030fe:	2a08      	cmp	r2, #8
 8003100:	d10b      	bne.n	800311a <_printf_i+0x112>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07db      	lsls	r3, r3, #31
 8003106:	d508      	bpl.n	800311a <_printf_i+0x112>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	bfde      	ittt	le
 8003110:	2330      	movle	r3, #48	; 0x30
 8003112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800311a:	ebac 0305 	sub.w	r3, ip, r5
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	f8cd 8000 	str.w	r8, [sp]
 8003124:	463b      	mov	r3, r7
 8003126:	aa03      	add	r2, sp, #12
 8003128:	4621      	mov	r1, r4
 800312a:	4630      	mov	r0, r6
 800312c:	f7ff fef6 	bl	8002f1c <_printf_common>
 8003130:	3001      	adds	r0, #1
 8003132:	d14d      	bne.n	80031d0 <_printf_i+0x1c8>
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	b005      	add	sp, #20
 800313a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800313e:	4839      	ldr	r0, [pc, #228]	; (8003224 <_printf_i+0x21c>)
 8003140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	6821      	ldr	r1, [r4, #0]
 8003148:	1d1d      	adds	r5, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6015      	str	r5, [r2, #0]
 800314e:	060a      	lsls	r2, r1, #24
 8003150:	d50b      	bpl.n	800316a <_printf_i+0x162>
 8003152:	07ca      	lsls	r2, r1, #31
 8003154:	bf44      	itt	mi
 8003156:	f041 0120 	orrmi.w	r1, r1, #32
 800315a:	6021      	strmi	r1, [r4, #0]
 800315c:	b91b      	cbnz	r3, 8003166 <_printf_i+0x15e>
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	f022 0220 	bic.w	r2, r2, #32
 8003164:	6022      	str	r2, [r4, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	e7b7      	b.n	80030da <_printf_i+0xd2>
 800316a:	064d      	lsls	r5, r1, #25
 800316c:	bf48      	it	mi
 800316e:	b29b      	uxthmi	r3, r3
 8003170:	e7ef      	b.n	8003152 <_printf_i+0x14a>
 8003172:	4665      	mov	r5, ip
 8003174:	fbb3 f1f2 	udiv	r1, r3, r2
 8003178:	fb02 3311 	mls	r3, r2, r1, r3
 800317c:	5cc3      	ldrb	r3, [r0, r3]
 800317e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003182:	460b      	mov	r3, r1
 8003184:	2900      	cmp	r1, #0
 8003186:	d1f5      	bne.n	8003174 <_printf_i+0x16c>
 8003188:	e7b9      	b.n	80030fe <_printf_i+0xf6>
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	6825      	ldr	r5, [r4, #0]
 800318e:	1d18      	adds	r0, r3, #4
 8003190:	6961      	ldr	r1, [r4, #20]
 8003192:	6010      	str	r0, [r2, #0]
 8003194:	0628      	lsls	r0, r5, #24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	d501      	bpl.n	800319e <_printf_i+0x196>
 800319a:	6019      	str	r1, [r3, #0]
 800319c:	e002      	b.n	80031a4 <_printf_i+0x19c>
 800319e:	066a      	lsls	r2, r5, #25
 80031a0:	d5fb      	bpl.n	800319a <_printf_i+0x192>
 80031a2:	8019      	strh	r1, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	4665      	mov	r5, ip
 80031a8:	6123      	str	r3, [r4, #16]
 80031aa:	e7b9      	b.n	8003120 <_printf_i+0x118>
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	1d19      	adds	r1, r3, #4
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	681d      	ldr	r5, [r3, #0]
 80031b4:	6862      	ldr	r2, [r4, #4]
 80031b6:	2100      	movs	r1, #0
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f8e1 	bl	8003380 <memchr>
 80031be:	b108      	cbz	r0, 80031c4 <_printf_i+0x1bc>
 80031c0:	1b40      	subs	r0, r0, r5
 80031c2:	6060      	str	r0, [r4, #4]
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	2300      	movs	r3, #0
 80031ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ce:	e7a7      	b.n	8003120 <_printf_i+0x118>
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	462a      	mov	r2, r5
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	47c0      	blx	r8
 80031da:	3001      	adds	r0, #1
 80031dc:	d0aa      	beq.n	8003134 <_printf_i+0x12c>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	079b      	lsls	r3, r3, #30
 80031e2:	d413      	bmi.n	800320c <_printf_i+0x204>
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	4298      	cmp	r0, r3
 80031ea:	bfb8      	it	lt
 80031ec:	4618      	movlt	r0, r3
 80031ee:	e7a3      	b.n	8003138 <_printf_i+0x130>
 80031f0:	2301      	movs	r3, #1
 80031f2:	464a      	mov	r2, r9
 80031f4:	4639      	mov	r1, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	47c0      	blx	r8
 80031fa:	3001      	adds	r0, #1
 80031fc:	d09a      	beq.n	8003134 <_printf_i+0x12c>
 80031fe:	3501      	adds	r5, #1
 8003200:	68e3      	ldr	r3, [r4, #12]
 8003202:	9a03      	ldr	r2, [sp, #12]
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	42ab      	cmp	r3, r5
 8003208:	dcf2      	bgt.n	80031f0 <_printf_i+0x1e8>
 800320a:	e7eb      	b.n	80031e4 <_printf_i+0x1dc>
 800320c:	2500      	movs	r5, #0
 800320e:	f104 0919 	add.w	r9, r4, #25
 8003212:	e7f5      	b.n	8003200 <_printf_i+0x1f8>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ac      	bne.n	8003172 <_printf_i+0x16a>
 8003218:	7803      	ldrb	r3, [r0, #0]
 800321a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003222:	e76c      	b.n	80030fe <_printf_i+0xf6>
 8003224:	080034bd 	.word	0x080034bd
 8003228:	080034ce 	.word	0x080034ce

0800322c <_sbrk_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	2300      	movs	r3, #0
 8003230:	4c05      	ldr	r4, [pc, #20]	; (8003248 <_sbrk_r+0x1c>)
 8003232:	4605      	mov	r5, r0
 8003234:	4608      	mov	r0, r1
 8003236:	6023      	str	r3, [r4, #0]
 8003238:	f7fd f9b2 	bl	80005a0 <_sbrk>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_sbrk_r+0x1a>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	b103      	cbz	r3, 8003246 <_sbrk_r+0x1a>
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000128 	.word	0x20000128

0800324c <__sread>:
 800324c:	b510      	push	{r4, lr}
 800324e:	460c      	mov	r4, r1
 8003250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003254:	f000 f8a4 	bl	80033a0 <_read_r>
 8003258:	2800      	cmp	r0, #0
 800325a:	bfab      	itete	ge
 800325c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800325e:	89a3      	ldrhlt	r3, [r4, #12]
 8003260:	181b      	addge	r3, r3, r0
 8003262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003266:	bfac      	ite	ge
 8003268:	6563      	strge	r3, [r4, #84]	; 0x54
 800326a:	81a3      	strhlt	r3, [r4, #12]
 800326c:	bd10      	pop	{r4, pc}

0800326e <__swrite>:
 800326e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003272:	461f      	mov	r7, r3
 8003274:	898b      	ldrh	r3, [r1, #12]
 8003276:	4605      	mov	r5, r0
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	460c      	mov	r4, r1
 800327c:	4616      	mov	r6, r2
 800327e:	d505      	bpl.n	800328c <__swrite+0x1e>
 8003280:	2302      	movs	r3, #2
 8003282:	2200      	movs	r2, #0
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	f000 f868 	bl	800335c <_lseek_r>
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	4632      	mov	r2, r6
 8003290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003294:	81a3      	strh	r3, [r4, #12]
 8003296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800329a:	463b      	mov	r3, r7
 800329c:	4628      	mov	r0, r5
 800329e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032a2:	f000 b817 	b.w	80032d4 <_write_r>

080032a6 <__sseek>:
 80032a6:	b510      	push	{r4, lr}
 80032a8:	460c      	mov	r4, r1
 80032aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ae:	f000 f855 	bl	800335c <_lseek_r>
 80032b2:	1c43      	adds	r3, r0, #1
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	bf15      	itete	ne
 80032b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032c2:	81a3      	strheq	r3, [r4, #12]
 80032c4:	bf18      	it	ne
 80032c6:	81a3      	strhne	r3, [r4, #12]
 80032c8:	bd10      	pop	{r4, pc}

080032ca <__sclose>:
 80032ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ce:	f000 b813 	b.w	80032f8 <_close_r>
	...

080032d4 <_write_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4605      	mov	r5, r0
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	4c05      	ldr	r4, [pc, #20]	; (80032f4 <_write_r+0x20>)
 80032e0:	6022      	str	r2, [r4, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7fd f90f 	bl	8000506 <_write>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_write_r+0x1e>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_write_r+0x1e>
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	20000128 	.word	0x20000128

080032f8 <_close_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	2300      	movs	r3, #0
 80032fc:	4c05      	ldr	r4, [pc, #20]	; (8003314 <_close_r+0x1c>)
 80032fe:	4605      	mov	r5, r0
 8003300:	4608      	mov	r0, r1
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	f7fd f91b 	bl	800053e <_close>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_close_r+0x1a>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	b103      	cbz	r3, 8003312 <_close_r+0x1a>
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000128 	.word	0x20000128

08003318 <_fstat_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	2300      	movs	r3, #0
 800331c:	4c06      	ldr	r4, [pc, #24]	; (8003338 <_fstat_r+0x20>)
 800331e:	4605      	mov	r5, r0
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	f7fd f915 	bl	8000554 <_fstat>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	d102      	bne.n	8003334 <_fstat_r+0x1c>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	b103      	cbz	r3, 8003334 <_fstat_r+0x1c>
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	bf00      	nop
 8003338:	20000128 	.word	0x20000128

0800333c <_isatty_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	2300      	movs	r3, #0
 8003340:	4c05      	ldr	r4, [pc, #20]	; (8003358 <_isatty_r+0x1c>)
 8003342:	4605      	mov	r5, r0
 8003344:	4608      	mov	r0, r1
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	f7fd f913 	bl	8000572 <_isatty>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_isatty_r+0x1a>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	b103      	cbz	r3, 8003356 <_isatty_r+0x1a>
 8003354:	602b      	str	r3, [r5, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000128 	.word	0x20000128

0800335c <_lseek_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4605      	mov	r5, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	2200      	movs	r2, #0
 8003366:	4c05      	ldr	r4, [pc, #20]	; (800337c <_lseek_r+0x20>)
 8003368:	6022      	str	r2, [r4, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7fd f90b 	bl	8000586 <_lseek>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_lseek_r+0x1e>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	b103      	cbz	r3, 800337a <_lseek_r+0x1e>
 8003378:	602b      	str	r3, [r5, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	20000128 	.word	0x20000128

08003380 <memchr>:
 8003380:	b510      	push	{r4, lr}
 8003382:	b2c9      	uxtb	r1, r1
 8003384:	4402      	add	r2, r0
 8003386:	4290      	cmp	r0, r2
 8003388:	4603      	mov	r3, r0
 800338a:	d101      	bne.n	8003390 <memchr+0x10>
 800338c:	2300      	movs	r3, #0
 800338e:	e003      	b.n	8003398 <memchr+0x18>
 8003390:	781c      	ldrb	r4, [r3, #0]
 8003392:	3001      	adds	r0, #1
 8003394:	428c      	cmp	r4, r1
 8003396:	d1f6      	bne.n	8003386 <memchr+0x6>
 8003398:	4618      	mov	r0, r3
 800339a:	bd10      	pop	{r4, pc}

0800339c <__malloc_lock>:
 800339c:	4770      	bx	lr

0800339e <__malloc_unlock>:
 800339e:	4770      	bx	lr

080033a0 <_read_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4605      	mov	r5, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	4c05      	ldr	r4, [pc, #20]	; (80033c0 <_read_r+0x20>)
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fd f88c 	bl	80004cc <_read>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_read_r+0x1e>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	b103      	cbz	r3, 80033be <_read_r+0x1e>
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000128 	.word	0x20000128

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
