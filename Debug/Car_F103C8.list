
Car_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800419c  0800419c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08004214  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004214  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f67b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260d  00000000  00000000  0002f714  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d58  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b431  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c334  00000000  00000000  0004ead1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bdea  00000000  00000000  0005ae05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6bef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d9c  00000000  00000000  000e6c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004070 	.word	0x08004070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004070 	.word	0x08004070

0800014c <_ZN6ButtonC1EP12GPIO_TypeDeft>:
	/*
	 * @brief initialize button
	 * @para GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin
	 * @retral none
	 */
	Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
		isButtonDown = false;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	2200      	movs	r2, #0
 800015e:	719a      	strb	r2, [r3, #6]
		this->GPIOx = GPIOx;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	601a      	str	r2, [r3, #0]
		this->GPIO_Pin = GPIO_Pin;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	88fa      	ldrh	r2, [r7, #6]
 800016a:	809a      	strh	r2, [r3, #4]
	}
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4618      	mov	r0, r3
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr

08000178 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
	/*
	 * @brief initialize encoder
	 * @para TIM_HandleTypeDef *htim
	 * @retral none
	 */
	Encoder(TIM_HandleTypeDef *htim) {
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	6039      	str	r1, [r7, #0]
		this->encoderCount = 0;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
		this->htim = htim;
 8000188:	683a      	ldr	r2, [r7, #0]
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	605a      	str	r2, [r3, #4]
		//启动定时编码器
		HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	213c      	movs	r1, #60	; 0x3c
 8000192:	4618      	mov	r0, r3
 8000194:	f001 fe88 	bl	8001ea8 <HAL_TIM_Encoder_Start>
		//计数器清零
		__HAL_TIM_SET_COUNTER(htim, 0);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2200      	movs	r2, #0
 800019e:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <_ZN7Encoder15getEncoderCountEv>:
	/*
	 * @brief get encoder number and set it zero
	 * @para none
	 * @retral int
	 */
	int getEncoderCount() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
		//先读取脉冲数
		this->encoderCount = (short) (__HAL_TIM_GET_COUNTER(htim));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001bc:	b21b      	sxth	r3, r3
 80001be:	461a      	mov	r2, r3
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	601a      	str	r2, [r3, #0]
		printf("TIM4定时器编码器模式捕获脉冲 = %d \n", encoderCount);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4619      	mov	r1, r3
 80001ca:	4807      	ldr	r0, [pc, #28]	; (80001e8 <_ZN7Encoder15getEncoderCountEv+0x3c>)
 80001cc:	f003 f8a4 	bl	8003318 <iprintf>
		//再计数器清零
		__HAL_TIM_SET_COUNTER(htim, 0);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	625a      	str	r2, [r3, #36]	; 0x24
		return encoderCount;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
	}
 80001de:	4618      	mov	r0, r3
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	08004088 	.word	0x08004088

080001ec <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftt>:
	uint32_t TIM_CHANNEL_NUMBER;
	GPIO_TypeDef *GPIOx;
	uint16_t GPIO_Pin1;
	uint16_t GPIO_Pin2;
public:
	Motor(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL_NUMBER,
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
 80001f8:	603b      	str	r3, [r7, #0]
			GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin1, uint16_t GPIO_Pin2) {
 80001fa:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftt+0x4c>)
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	601a      	str	r2, [r3, #0]
		this->htim = htim;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68ba      	ldr	r2, [r7, #8]
 8000204:	605a      	str	r2, [r3, #4]
		this->TIM_CHANNEL_NUMBER = TIM_CHANNEL_NUMBER;
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	609a      	str	r2, [r3, #8]
		this->GPIOx = GPIOx;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	683a      	ldr	r2, [r7, #0]
 8000210:	60da      	str	r2, [r3, #12]
		this->GPIO_Pin1 = GPIO_Pin1;
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	8b3a      	ldrh	r2, [r7, #24]
 8000216:	821a      	strh	r2, [r3, #16]
		this->GPIO_Pin2 = GPIO_Pin2;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	8bba      	ldrh	r2, [r7, #28]
 800021c:	825a      	strh	r2, [r3, #18]
		HAL_TIM_PWM_Start(this->htim, this->TIM_CHANNEL_NUMBER); //开启TIM3_CH2的PWM输出
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4619      	mov	r1, r3
 8000228:	4610      	mov	r0, r2
 800022a:	f001 fcf9 	bl	8001c20 <HAL_TIM_PWM_Start>
	}
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	4618      	mov	r0, r3
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	080040e4 	.word	0x080040e4

0800023c <_ZN5Motor8frontRunEv>:
	void frontRun() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin1, GPIO_PIN_SET); //初始化BIN1引脚为低电平
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	68d8      	ldr	r0, [r3, #12]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	8a1b      	ldrh	r3, [r3, #16]
 800024c:	2201      	movs	r2, #1
 800024e:	4619      	mov	r1, r3
 8000250:	f000 ffd9 	bl	8001206 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin2, GPIO_PIN_RESET); //初始化BIN2引脚为高电平
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68d8      	ldr	r0, [r3, #12]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	8a5b      	ldrh	r3, [r3, #18]
 800025c:	2200      	movs	r2, #0
 800025e:	4619      	mov	r1, r3
 8000260:	f000 ffd1 	bl	8001206 <HAL_GPIO_WritePin>
	}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN5MotorD1Ev>:
	}
	void stop() {
		HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin1, GPIO_PIN_RESET); //初始化BIN1引脚为低电平
		HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin2, GPIO_PIN_RESET); //初始化BIN2引脚为高电平
	}
	virtual ~Motor(){};
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <_ZN5MotorD1Ev+0x1c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	080040e4 	.word	0x080040e4

0800028c <_ZN5MotorD0Ev>:
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f7ff ffe9 	bl	800026c <_ZN5MotorD1Ev>
 800029a:	2114      	movs	r1, #20
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f002 ff57 	bl	8003150 <_ZdlPvj>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <CppMain>:
 *      Author: LuYidan
 */

#include "CPPmain.h"

void CppMain() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08c      	sub	sp, #48	; 0x30
 80002b0:	af02      	add	r7, sp, #8
	Button button(Button_GPIO_Port, Button_Pin);
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ba:	4914      	ldr	r1, [pc, #80]	; (800030c <CppMain+0x60>)
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff45 	bl	800014c <_ZN6ButtonC1EP12GPIO_TypeDeft>
	Encoder encoder(&htim4);
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	4912      	ldr	r1, [pc, #72]	; (8000310 <CppMain+0x64>)
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff55 	bl	8000178 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
	Motor motor(&htim3, TIM_CHANNEL_2, BIN2_GPIO_Port, BIN1_Pin, BIN2_Pin);
 80002ce:	1d38      	adds	r0, r7, #4
 80002d0:	2310      	movs	r3, #16
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	2308      	movs	r3, #8
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <CppMain+0x60>)
 80002da:	2204      	movs	r2, #4
 80002dc:	490d      	ldr	r1, [pc, #52]	; (8000314 <CppMain+0x68>)
 80002de:	f7ff ff85 	bl	80001ec <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftt>
	motor.frontRun();
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ffa9 	bl	800023c <_ZN5Motor8frontRunEv>
	while (1) {
		encoder.getEncoderCount();
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ff5c 	bl	80001ac <_ZN7Encoder15getEncoderCountEv>
		button.buttonScan(&motor);
 80002f4:	1d3a      	adds	r2, r7, #4
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fedd 	bl	80030bc <_ZN6Button10buttonScanEP5Motor>
		HAL_Delay(1000);
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f000 fc67 	bl	8000bd8 <HAL_Delay>
		encoder.getEncoderCount();
 800030a:	e7ee      	b.n	80002ea <CppMain+0x3e>
 800030c:	40010800 	.word	0x40010800
 8000310:	2000009c 	.word	0x2000009c
 8000314:	200000e4 	.word	0x200000e4

08000318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	4b38      	ldr	r3, [pc, #224]	; (8000410 <MX_GPIO_Init+0xf8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a37      	ldr	r2, [pc, #220]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <MX_GPIO_Init+0xf8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b32      	ldr	r3, [pc, #200]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a31      	ldr	r2, [pc, #196]	; (8000410 <MX_GPIO_Init+0xf8>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_GPIO_Init+0xf8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_GPIO_Init+0xf8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a25      	ldr	r2, [pc, #148]	; (8000410 <MX_GPIO_Init+0xf8>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2118      	movs	r1, #24
 8000390:	4820      	ldr	r0, [pc, #128]	; (8000414 <MX_GPIO_Init+0xfc>)
 8000392:	f000 ff38 	bl	8001206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039c:	481e      	ldr	r0, [pc, #120]	; (8000418 <MX_GPIO_Init+0x100>)
 800039e:	f000 ff32 	bl	8001206 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 80003a2:	2318      	movs	r3, #24
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ae:	2303      	movs	r3, #3
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003ba:	f000 fdb3 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4810      	ldr	r0, [pc, #64]	; (8000418 <MX_GPIO_Init+0x100>)
 80003d8:	f000 fda4 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80003dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_GPIO_Init+0x104>)
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4808      	ldr	r0, [pc, #32]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003f2:	f000 fd97 	bl	8000f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	2017      	movs	r0, #23
 80003fc:	f000 fce5 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000400:	2017      	movs	r0, #23
 8000402:	f000 fcfe 	bl	8000e02 <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800
 8000418:	40010c00 	.word	0x40010c00
 800041c:	10210000 	.word	0x10210000

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 fb76 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f80b 	bl	8000442 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042c:	f7ff ff74 	bl	8000318 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000430:	f000 faba 	bl	80009a8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000434:	f000 f9d6 	bl	80007e4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000438:	f000 f95e 	bl	80006f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	CppMain();
 800043c:	f7ff ff36 	bl	80002ac <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000440:	e7fe      	b.n	8000440 <main+0x20>

08000442 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b090      	sub	sp, #64	; 0x40
 8000446:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	2228      	movs	r2, #40	; 0x28
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f002 feb3 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2302      	movs	r3, #2
 8000478:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000484:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0318 	add.w	r3, r7, #24
 800048a:	4618      	mov	r0, r3
 800048c:	f000 ff04 	bl	8001298 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000496:	f000 f819 	bl	80004cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2102      	movs	r1, #2
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 f96f 	bl	8001798 <HAL_RCC_ClockConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004c0:	f000 f804 	bl	80004cc <Error_Handler>
  }
}
 80004c4:	bf00      	nop
 80004c6:	3740      	adds	r7, #64	; 0x40
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004d2:	e7fe      	b.n	80004d2 <Error_Handler+0x6>

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_MspInit+0x5c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_MspInit+0x5c>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x60>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_MspInit+0x60>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057e:	f000 fb0f 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}

08000586 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800058a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800058e:	f000 fe6b 	bl	8001268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <USART1_IRQHandler+0x10>)
 800059e:	f002 fa69 	bl	8002a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000012c 	.word	0x2000012c

080005ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
	}

return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fa4f 	bl	8000aa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x12>
	}
	return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_close>:

int _close(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000644:	605a      	str	r2, [r3, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <_isatty>:

int _isatty(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f002 fd52 	bl	8003158 <__errno>
 80006b4:	4602      	mov	r2, r0
 80006b6:	230c      	movs	r3, #12
 80006b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000178 	.word	0x20000178

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_TIM3_Init+0xe4>)
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <MX_TIM3_Init+0xe8>)
 800072c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM3_Init+0xe4>)
 8000730:	2248      	movs	r2, #72	; 0x48
 8000732:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_TIM3_Init+0xe4>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_TIM3_Init+0xe4>)
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_TIM3_Init+0xe4>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_TIM3_Init+0xe4>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <MX_TIM3_Init+0xe4>)
 800074e:	f001 f9bf 	bl	8001ad0 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000758:	f7ff feb8 	bl	80004cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000766:	4619      	mov	r1, r3
 8000768:	481c      	ldr	r0, [pc, #112]	; (80007dc <MX_TIM3_Init+0xe4>)
 800076a:	f001 fce9 	bl	8002140 <HAL_TIM_ConfigClockSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000774:	f7ff feaa 	bl	80004cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000778:	4818      	ldr	r0, [pc, #96]	; (80007dc <MX_TIM3_Init+0xe4>)
 800077a:	f001 f9f8 	bl	8001b6e <HAL_TIM_PWM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000784:	f7ff fea2 	bl	80004cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_TIM3_Init+0xe4>)
 8000798:	f002 f82e 	bl	80027f8 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80007a2:	f7ff fe93 	bl	80004cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a6:	2360      	movs	r3, #96	; 0x60
 80007a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2204      	movs	r2, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM3_Init+0xe4>)
 80007be:	f001 fc01 	bl	8001fc4 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007c8:	f7ff fe80 	bl	80004cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM3_Init+0xe4>)
 80007ce:	f000 f8b9 	bl	8000944 <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3738      	adds	r7, #56	; 0x38
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000e4 	.word	0x200000e4
 80007e0:	40000400 	.word	0x40000400

080007e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2224      	movs	r2, #36	; 0x24
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fce2 	bl	80031bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_TIM4_Init+0xa0>)
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_TIM4_Init+0xa4>)
 8000804:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM4_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM4_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM4_Init+0xa0>)
 8000814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000818:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM4_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_TIM4_Init+0xa0>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000826:	2303      	movs	r3, #3
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083e:	2301      	movs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_TIM4_Init+0xa0>)
 8000852:	f001 fa87 	bl	8001d64 <HAL_TIM_Encoder_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800085c:	f7ff fe36 	bl	80004cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_TIM4_Init+0xa0>)
 800086e:	f001 ffc3 	bl	80027f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000878:	f7ff fe28 	bl	80004cc <Error_Handler>
  }

}
 800087c:	bf00      	nop
 800087e:	3730      	adds	r7, #48	; 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000009c 	.word	0x2000009c
 8000888:	40000800 	.word	0x40000800

0800088c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_TIM_Base_MspInit+0x34>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40000400 	.word	0x40000400
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <HAL_TIM_Encoder_MspInit+0x70>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d123      	bne.n	8000930 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_TIM_Encoder_MspInit+0x74>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000918:	23c0      	movs	r3, #192	; 0xc0
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_TIM_Encoder_MspInit+0x78>)
 800092c:	f000 fafa 	bl	8000f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40000800 	.word	0x40000800
 800093c:	40021000 	.word	0x40021000
 8000940:	40010c00 	.word	0x40010c00

08000944 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_TIM_MspPostInit+0x58>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d117      	bne.n	8000994 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_TIM_MspPostInit+0x5c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <HAL_TIM_MspPostInit+0x5c>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_TIM_MspPostInit+0x5c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_TIM_MspPostInit+0x60>)
 8000990:	f000 fac8 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40000400 	.word	0x40000400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800

080009a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART1_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f001 ff68 	bl	80028b4 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f7ff fd6f 	bl	80004cc <Error_Handler>
  }

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000012c 	.word	0x2000012c
 80009f8:	40013800 	.word	0x40013800

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d139      	bne.n	8000a90 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0xa0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <HAL_UART_MspInit+0xa4>)
 8000a62:	f000 fa5f 	bl	8000f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <HAL_UART_MspInit+0xa4>)
 8000a7c:	f000 fa52 	bl	8000f24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2025      	movs	r0, #37	; 0x25
 8000a86:	f000 f9a0 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a8a:	2025      	movs	r0, #37	; 0x25
 8000a8c:	f000 f9b9 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <__io_putchar>:
* @brief  Retargets the C library printf function to the USART.
* @param  None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <__io_putchar+0x20>)
 8000ab6:	f001 ff4a 	bl	800294e <HAL_UART_Transmit>

    return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000012c 	.word	0x2000012c

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ac8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aca:	e003      	b.n	8000ad4 <LoopCopyDataInit>

08000acc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ace:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ad0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ad2:	3104      	adds	r1, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ad8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ada:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000adc:	d3f6      	bcc.n	8000acc <CopyDataInit>
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ae0:	e002      	b.n	8000ae8 <LoopFillZerobss>

08000ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ae4:	f842 3b04 	str.w	r3, [r2], #4

08000ae8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000aec:	d3f9      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff fdfd 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 fb37 	bl	8003164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fc93 	bl	8000420 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r3, =_sidata
 8000afc:	080041a4 	.word	0x080041a4
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b04:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b0c:	20000174 	.word	0x20000174

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f945 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fcd0 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f95d 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f925 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000016c 	.word	0x2000016c

08000bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	2000016c 	.word	0x2000016c

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff fff0 	bl	8000bc4 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_Delay+0x40>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffe0 	bl	8000bc4 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000008 	.word	0x20000008

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <__NVIC_EnableIRQ+0x34>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff90 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff2d 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff42 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff35 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d005      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2204      	movs	r2, #4
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e051      	b.n	8000efe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 020e 	bic.w	r2, r2, #14
 8000e68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0201 	bic.w	r2, r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <HAL_DMA_Abort_IT+0xd0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d029      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0xa0>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_DMA_Abort_IT+0xd4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d022      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x9c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_DMA_Abort_IT+0xd8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d01a      	beq.n	8000ece <HAL_DMA_Abort_IT+0x96>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_DMA_Abort_IT+0xdc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d012      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x90>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <HAL_DMA_Abort_IT+0xe0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00a      	beq.n	8000ec2 <HAL_DMA_Abort_IT+0x8a>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_DMA_Abort_IT+0xe4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d102      	bne.n	8000ebc <HAL_DMA_Abort_IT+0x84>
 8000eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eba:	e00e      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec0:	e00b      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec6:	e008      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	e005      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	e002      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	e000      	b.n	8000eda <HAL_DMA_Abort_IT+0xa2>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_DMA_Abort_IT+0xe8>)
 8000edc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	4798      	blx	r3
    } 
  }
  return status;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020008 	.word	0x40020008
 8000f0c:	4002001c 	.word	0x4002001c
 8000f10:	40020030 	.word	0x40020030
 8000f14:	40020044 	.word	0x40020044
 8000f18:	40020058 	.word	0x40020058
 8000f1c:	4002006c 	.word	0x4002006c
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e127      	b.n	8001188 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8116 	bne.w	8001182 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d034      	beq.n	8000fc8 <HAL_GPIO_Init+0xa4>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d80d      	bhi.n	8000f7e <HAL_GPIO_Init+0x5a>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d02b      	beq.n	8000fbe <HAL_GPIO_Init+0x9a>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d804      	bhi.n	8000f74 <HAL_GPIO_Init+0x50>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d031      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d01c      	beq.n	8000fac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e048      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d043      	beq.n	8001000 <HAL_GPIO_Init+0xdc>
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d01b      	beq.n	8000fb4 <HAL_GPIO_Init+0x90>
          break;
 8000f7c:	e043      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f7e:	4a89      	ldr	r2, [pc, #548]	; (80011a4 <HAL_GPIO_Init+0x280>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d026      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f84:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_GPIO_Init+0x280>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d806      	bhi.n	8000f98 <HAL_GPIO_Init+0x74>
 8000f8a:	4a87      	ldr	r2, [pc, #540]	; (80011a8 <HAL_GPIO_Init+0x284>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d020      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f90:	4a86      	ldr	r2, [pc, #536]	; (80011ac <HAL_GPIO_Init+0x288>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01d      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
          break;
 8000f96:	e036      	b.n	8001006 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f98:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_GPIO_Init+0x28c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000f9e:	4a85      	ldr	r2, [pc, #532]	; (80011b4 <HAL_GPIO_Init+0x290>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d016      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
 8000fa4:	4a84      	ldr	r2, [pc, #528]	; (80011b8 <HAL_GPIO_Init+0x294>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0xae>
          break;
 8000faa:	e02c      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e028      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e023      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e01e      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	330c      	adds	r3, #12
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e019      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e012      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d105      	bne.n	8000ff4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	611a      	str	r2, [r3, #16]
          break;
 8000ff2:	e008      	b.n	8001006 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	615a      	str	r2, [r3, #20]
          break;
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2bff      	cmp	r3, #255	; 0xff
 800100a:	d801      	bhi.n	8001010 <HAL_GPIO_Init+0xec>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	e001      	b.n	8001014 <HAL_GPIO_Init+0xf0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3304      	adds	r3, #4
 8001014:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d802      	bhi.n	8001022 <HAL_GPIO_Init+0xfe>
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x104>
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3b08      	subs	r3, #8
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	210f      	movs	r1, #15
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	401a      	ands	r2, r3
 800103a:	6a39      	ldr	r1, [r7, #32]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	431a      	orrs	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 8096 	beq.w	8001182 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_GPIO_Init+0x298>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a58      	ldr	r2, [pc, #352]	; (80011bc <HAL_GPIO_Init+0x298>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x298>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106e:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x29c>)
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <HAL_GPIO_Init+0x2a0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x19e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	; (80011c8 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x19a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	; (80011cc <HAL_GPIO_Init+0x2a8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x196>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <HAL_GPIO_Init+0x2ac>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x192>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x1a0>
 80010c2:	2300      	movs	r3, #0
 80010c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d4:	493a      	ldr	r1, [pc, #232]	; (80011c0 <HAL_GPIO_Init+0x29c>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4938      	ldr	r1, [pc, #224]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4933      	ldr	r1, [pc, #204]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	492e      	ldr	r1, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	4929      	ldr	r1, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800112e:	4013      	ands	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4924      	ldr	r1, [pc, #144]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	43db      	mvns	r3, r3
 8001154:	491f      	ldr	r1, [pc, #124]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001156:	4013      	ands	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	491a      	ldr	r1, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4915      	ldr	r1, [pc, #84]	; (80011d4 <HAL_GPIO_Init+0x2b0>)
 800117e:	4013      	ands	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	3301      	adds	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f aed0 	bne.w	8000f38 <HAL_GPIO_Init+0x14>
  }
}
 8001198:	bf00      	nop
 800119a:	372c      	adds	r7, #44	; 0x2c
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	10120000 	.word	0x10120000
 80011b0:	10310000 	.word	0x10310000
 80011b4:	10320000 	.word	0x10320000
 80011b8:	10220000 	.word	0x10220000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001216:	787b      	ldrb	r3, [r7, #1]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001222:	e003      	b.n	800122c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 ff36 	bl	80030f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e26c      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8087 	beq.w	80013c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b8:	4b92      	ldr	r3, [pc, #584]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00c      	beq.n	80012de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d112      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
 80012d0:	4b8c      	ldr	r3, [pc, #560]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d10b      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d06c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x12c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d168      	bne.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e246      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x76>
 8001300:	4b80      	ldr	r3, [pc, #512]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a7f      	ldr	r2, [pc, #508]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e02e      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b7b      	ldr	r3, [pc, #492]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7a      	ldr	r2, [pc, #488]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b78      	ldr	r3, [pc, #480]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a77      	ldr	r2, [pc, #476]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0xbc>
 800133a:	4b72      	ldr	r3, [pc, #456]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a71      	ldr	r2, [pc, #452]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6e      	ldr	r2, [pc, #440]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6a      	ldr	r2, [pc, #424]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a67      	ldr	r2, [pc, #412]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc26 	bl	8000bc4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc22 	bl	8000bc4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1fa      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xe4>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc12 	bl	8000bc4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc0e 	bl	8000bc4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1e6      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x10c>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1ba      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4939      	ldr	r1, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fbc7 	bl	8000bc4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fbc3 	bl	8000bc4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e19b      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4927      	ldr	r1, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fba6 	bl	8000bc4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fba2 	bl	8000bc4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e17a      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03a      	beq.n	800151c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_RCC_OscConfig+0x274>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fb86 	bl	8000bc4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb82 	bl	8000bc4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e15a      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f000 fada 	bl	8001a94 <RCC_Delay>
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_OscConfig+0x274>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb6c 	bl	8000bc4 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb68 	bl	8000bc4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d908      	bls.n	8001510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e140      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420000 	.word	0x42420000
 800150c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b9e      	ldr	r3, [pc, #632]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e9      	bne.n	80014f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a6 	beq.w	8001676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b97      	ldr	r3, [pc, #604]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b94      	ldr	r3, [pc, #592]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a93      	ldr	r2, [pc, #588]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b91      	ldr	r3, [pc, #580]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b8e      	ldr	r3, [pc, #568]	; (8001790 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <HAL_RCC_OscConfig+0x4f8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb29 	bl	8000bc4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fb25 	bl	8000bc4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0fd      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 800159c:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x356>
 80015d4:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a69      	ldr	r2, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a66      	ldr	r2, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a63      	ldr	r2, [pc, #396]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fad9 	bl	8000bc4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fad5 	bl	8000bc4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0ab      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x37e>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fac3 	bl	8000bc4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fabf 	bl	8000bc4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e095      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a47      	ldr	r2, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8081 	beq.w	8001782 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b42      	ldr	r3, [pc, #264]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d061      	beq.n	8001750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d146      	bne.n	8001722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_OscConfig+0x4fc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fa93 	bl	8000bc4 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fa8f 	bl	8000bc4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e067      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	492d      	ldr	r1, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a19      	ldr	r1, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	430b      	orrs	r3, r1
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4fc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa63 	bl	8000bc4 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa5f 	bl	8000bc4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e037      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
 8001720:	e02f      	b.n	8001782 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_RCC_OscConfig+0x4fc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa4c 	bl	8000bc4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa48 	bl	8000bc4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e020      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x498>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x4f4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	429a      	cmp	r2, r3
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	42420060 	.word	0x42420060

08001798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0d0      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d910      	bls.n	80017dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0207 	bic.w	r2, r3, #7
 80017c2:	4965      	ldr	r1, [pc, #404]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b8      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001816:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	494d      	ldr	r1, [pc, #308]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d040      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d115      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e07f      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e073      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06b      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4936      	ldr	r1, [pc, #216]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f99c 	bl	8000bc4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f998 	bl	8000bc4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e053      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d210      	bcs.n	80018e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 0207 	bic.w	r2, r3, #7
 80018ce:	4922      	ldr	r1, [pc, #136]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e032      	b.n	800194e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4916      	ldr	r1, [pc, #88]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001926:	f000 f821 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800192a:	4601      	mov	r1, r0
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	fa21 f303 	lsr.w	r3, r1, r3
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1cc>)
 8001940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f8fa 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000
 800195c:	40021000 	.word	0x40021000
 8001960:	080040ec 	.word	0x080040ec
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b490      	push	{r4, r7}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001974:	1d3c      	adds	r4, r7, #4
 8001976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb4>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x40>
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x46>
 80019aa:	e02d      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	e02d      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019be:	4413      	add	r3, r2
 80019c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	0c5b      	lsrs	r3, r3, #17
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019de:	4413      	add	r3, r2
 80019e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ea:	fb02 f203 	mul.w	r2, r2, r3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e004      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	623b      	str	r3, [r7, #32]
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a0a:	623b      	str	r3, [r7, #32]
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc90      	pop	{r4, r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	080040b8 	.word	0x080040b8
 8001a20:	080040c8 	.word	0x080040c8
 8001a24:	40021000 	.word	0x40021000
 8001a28:	007a1200 	.word	0x007a1200
 8001a2c:	003d0900 	.word	0x003d0900

08001a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000000 	.word	0x20000000

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a48:	f7ff fff2 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	080040fc 	.word	0x080040fc

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a74:	4601      	mov	r1, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0adb      	lsrs	r3, r3, #11
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080040fc 	.word	0x080040fc

08001a94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <RCC_Delay+0x34>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <RCC_Delay+0x38>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0a5b      	lsrs	r3, r3, #9
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ab0:	bf00      	nop
  }
  while (Delay --);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	60fa      	str	r2, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <RCC_Delay+0x1c>
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	10624dd3 	.word	0x10624dd3

08001ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e041      	b.n	8001b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fec8 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f000 fbce 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e041      	b.n	8001c04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f839 	bl	8001c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f000 fb7f 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <HAL_TIM_PWM_Start+0x24>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e022      	b.n	8001c8a <HAL_TIM_PWM_Start+0x6a>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d109      	bne.n	8001c5e <HAL_TIM_PWM_Start+0x3e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	e015      	b.n	8001c8a <HAL_TIM_PWM_Start+0x6a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d109      	bne.n	8001c78 <HAL_TIM_PWM_Start+0x58>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e008      	b.n	8001c8a <HAL_TIM_PWM_Start+0x6a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e05e      	b.n	8001d50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0x82>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	e013      	b.n	8001cca <HAL_TIM_PWM_Start+0xaa>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d104      	bne.n	8001cb2 <HAL_TIM_PWM_Start+0x92>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb0:	e00b      	b.n	8001cca <HAL_TIM_PWM_Start+0xaa>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d104      	bne.n	8001cc2 <HAL_TIM_PWM_Start+0xa2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	e003      	b.n	8001cca <HAL_TIM_PWM_Start+0xaa>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fd6c 	bl	80027b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_TIM_PWM_Start+0x138>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_TIM_PWM_Start+0x138>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00e      	beq.n	8001d1a <HAL_TIM_PWM_Start+0xfa>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d04:	d009      	beq.n	8001d1a <HAL_TIM_PWM_Start+0xfa>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_TIM_PWM_Start+0x13c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d004      	beq.n	8001d1a <HAL_TIM_PWM_Start+0xfa>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_TIM_PWM_Start+0x140>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d111      	bne.n	8001d3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b06      	cmp	r3, #6
 8001d2a:	d010      	beq.n	8001d4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	e007      	b.n	8001d4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800

08001d64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e093      	b.n	8001ea0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fd9b 	bl	80008c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da8:	f023 0307 	bic.w	r3, r3, #7
 8001dac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3304      	adds	r3, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f000 fa79 	bl	80022b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	4313      	orrs	r3, r2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e04:	f023 030c 	bic.w	r3, r3, #12
 8001e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4313      	orrs	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	011a      	lsls	r2, r3, #4
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	031b      	lsls	r3, r3, #12
 8001e34:	4313      	orrs	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ec0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ec8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ed0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d110      	bne.n	8001efa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ede:	7b7b      	ldrb	r3, [r7, #13]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d001      	beq.n	8001ee8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e068      	b.n	8001fba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef8:	e031      	b.n	8001f5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d110      	bne.n	8001f22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f06:	7b3b      	ldrb	r3, [r7, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e054      	b.n	8001fba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f20:	e01d      	b.n	8001f5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e03d      	b.n	8001fba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_TIM_Encoder_Start+0xc2>
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d008      	beq.n	8001f7a <HAL_TIM_Encoder_Start+0xd2>
 8001f68:	e00f      	b.n	8001f8a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fc1c 	bl	80027b0 <TIM_CCxChannelCmd>
      break;
 8001f78:	e016      	b.n	8001fa8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2104      	movs	r1, #4
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fc14 	bl	80027b0 <TIM_CCxChannelCmd>
      break;
 8001f88:	e00e      	b.n	8001fa8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fc0c 	bl	80027b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fc05 	bl	80027b0 <TIM_CCxChannelCmd>
      break;
 8001fa6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0ac      	b.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	f200 809f 	bhi.w	800212c <HAL_TIM_PWM_ConfigChannel+0x168>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	0800212d 	.word	0x0800212d
 8001ffc:	0800212d 	.word	0x0800212d
 8002000:	0800212d 	.word	0x0800212d
 8002004:	08002069 	.word	0x08002069
 8002008:	0800212d 	.word	0x0800212d
 800200c:	0800212d 	.word	0x0800212d
 8002010:	0800212d 	.word	0x0800212d
 8002014:	080020ab 	.word	0x080020ab
 8002018:	0800212d 	.word	0x0800212d
 800201c:	0800212d 	.word	0x0800212d
 8002020:	0800212d 	.word	0x0800212d
 8002024:	080020eb 	.word	0x080020eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9a0 	bl	8002374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0208 	orr.w	r2, r2, #8
 8002042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6999      	ldr	r1, [r3, #24]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	619a      	str	r2, [r3, #24]
      break;
 8002066:	e062      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f9e6 	bl	8002440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      break;
 80020a8:	e041      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa2f 	bl	8002514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0208 	orr.w	r2, r2, #8
 80020c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69d9      	ldr	r1, [r3, #28]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]
      break;
 80020e8:	e021      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fa79 	bl	80025e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	61da      	str	r2, [r3, #28]
      break;
 800212a:	e000      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800212c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_TIM_ConfigClockSource+0x18>
 8002154:	2302      	movs	r3, #2
 8002156:	e0a6      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x166>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800217e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d067      	beq.n	8002260 <HAL_TIM_ConfigClockSource+0x120>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d80b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x6c>
 8002194:	2b10      	cmp	r3, #16
 8002196:	d073      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
 8002198:	2b10      	cmp	r3, #16
 800219a:	d802      	bhi.n	80021a2 <HAL_TIM_ConfigClockSource+0x62>
 800219c:	2b00      	cmp	r3, #0
 800219e:	d06f      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021a0:	e078      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d06c      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d06a      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021aa:	e073      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d00d      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x8c>
 80021b0:	2b70      	cmp	r3, #112	; 0x70
 80021b2:	d804      	bhi.n	80021be <HAL_TIM_ConfigClockSource+0x7e>
 80021b4:	2b50      	cmp	r3, #80	; 0x50
 80021b6:	d033      	beq.n	8002220 <HAL_TIM_ConfigClockSource+0xe0>
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d041      	beq.n	8002240 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021bc:	e06a      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	d066      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x152>
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d017      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021ca:	e063      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f000 fac9 	bl	8002772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
      break;
 80021f8:	e04c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f000 fab2 	bl	8002772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800221c:	609a      	str	r2, [r3, #8]
      break;
 800221e:	e039      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	461a      	mov	r2, r3
 800222e:	f000 fa29 	bl	8002684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2150      	movs	r1, #80	; 0x50
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fa80 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800223e:	e029      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	461a      	mov	r2, r3
 800224e:	f000 fa47 	bl	80026e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2160      	movs	r1, #96	; 0x60
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa70 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800225e:	e019      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	461a      	mov	r2, r3
 800226e:	f000 fa09 	bl	8002684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa60 	bl	800273e <TIM_ITRx_SetConfig>
      break;
 800227e:	e009      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 fa57 	bl	800273e <TIM_ITRx_SetConfig>
        break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a29      	ldr	r2, [pc, #164]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00b      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d007      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <TIM_Base_SetConfig+0xbc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <TIM_Base_SetConfig+0xbc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400
 8002370:	40000800 	.word	0x40000800

08002374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0201 	bic.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <TIM_OC1_SetConfig+0xc8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10c      	bne.n	80023ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f023 0308 	bic.w	r3, r3, #8
 80023d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a13      	ldr	r2, [pc, #76]	; (800243c <TIM_OC1_SetConfig+0xc8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d111      	bne.n	8002416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
}
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00

08002440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f023 0210 	bic.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0320 	bic.w	r3, r3, #32
 800248a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <TIM_OC2_SetConfig+0xd0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d10d      	bne.n	80024bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <TIM_OC2_SetConfig+0xd0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d113      	bne.n	80024ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012c00 	.word	0x40012c00

08002514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800255c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <TIM_OC3_SetConfig+0xd0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10d      	bne.n	800258e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <TIM_OC3_SetConfig+0xd0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d113      	bne.n	80025be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800259c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	621a      	str	r2, [r3, #32]
}
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40012c00 	.word	0x40012c00

080025e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	031b      	lsls	r3, r3, #12
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <TIM_OC4_SetConfig+0x98>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d109      	bne.n	800265c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00

08002684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 030a 	bic.w	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 0210 	bic.w	r2, r3, #16
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	031b      	lsls	r3, r3, #12
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800271c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	621a      	str	r2, [r3, #32]
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	f043 0307 	orr.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800278c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2201      	movs	r2, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800280c:	2302      	movs	r3, #2
 800280e:	e046      	b.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d009      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800

080028b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e03f      	b.n	8002946 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f88e 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fb39 	bl	8002f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af02      	add	r7, sp, #8
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d17c      	bne.n	8002a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Transmit+0x2c>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e075      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x3e>
 8002988:	2302      	movs	r3, #2
 800298a:	e06e      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	; 0x21
 800299e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029a2:	f7fe f90f 	bl	8000bc4 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029e0:	e02a      	b.n	8002a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f95c 	bl	8002caa <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e036      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e007      	b.n	8002a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cf      	bne.n	80029e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f92c 	bl	8002caa <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x52>
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9d5 	bl	8002e6e <UART_Receive_IT>
      return;
 8002ac4:	e0d1      	b.n	8002c6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80b0 	beq.w	8002c2e <HAL_UART_IRQHandler+0x1ba>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_UART_IRQHandler+0x70>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a5 	beq.w	8002c2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_UART_IRQHandler+0x90>
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_UART_IRQHandler+0xb0>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	f043 0202 	orr.w	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_UART_IRQHandler+0xd0>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	f043 0204 	orr.w	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00f      	beq.n	8002b6e <HAL_UART_IRQHandler+0xfa>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_UART_IRQHandler+0xee>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d078      	beq.n	8002c68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_UART_IRQHandler+0x11c>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f96f 	bl	8002e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf14      	ite	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	2300      	moveq	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_UART_IRQHandler+0x144>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d031      	beq.n	8002c1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8c0 	bl	8002d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d023      	beq.n	8002c14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_UART_IRQHandler+0x1fc>)
 8002bea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f921 	bl	8000e38 <HAL_DMA_Abort_IT>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d016      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c06:	4610      	mov	r0, r2
 8002c08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	e00e      	b.n	8002c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f843 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c12:	e00a      	b.n	8002c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f83f 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f83b 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c28:	e01e      	b.n	8002c68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	bf00      	nop
    return;
 8002c2c:	e01c      	b.n	8002c68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1d6>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8ac 	bl	8002da0 <UART_Transmit_IT>
    return;
 8002c48:	e00f      	b.n	8002c6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_UART_IRQHandler+0x1f6>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8ed 	bl	8002e3e <UART_EndTransmit_IT>
    return;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c68:	bf00      	nop
  }
}
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08002d79 	.word	0x08002d79

08002c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cba:	e02c      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d028      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0x30>
 8002cca:	f7fd ff7b 	bl	8000bc4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d21d      	bcs.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ce8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e00f      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d0c3      	beq.n	8002cbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff ff80 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b21      	cmp	r3, #33	; 0x21
 8002db2:	d13e      	bne.n	8002e32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d114      	bne.n	8002de8 <UART_Transmit_IT+0x48>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d110      	bne.n	8002de8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]
 8002de6:	e008      	b.n	8002dfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6211      	str	r1, [r2, #32]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4619      	mov	r1, r3
 8002e08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff08 	bl	8002c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b22      	cmp	r3, #34	; 0x22
 8002e80:	d170      	bne.n	8002f64 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d117      	bne.n	8002ebc <UART_Receive_IT+0x4e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d113      	bne.n	8002ebc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eba:	e026      	b.n	8002f0a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d007      	beq.n	8002ee0 <UART_Receive_IT+0x72>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <UART_Receive_IT+0x80>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e008      	b.n	8002f00 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4619      	mov	r1, r3
 8002f18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d120      	bne.n	8002f60 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0220 	bic.w	r2, r2, #32
 8002f2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fe95 	bl	8002c86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e002      	b.n	8002f66 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <UART_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7fe fd48 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	e002      	b.n	8002fe6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7fe fd30 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002fe4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <UART_SetConfig+0x118>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	0119      	lsls	r1, r3, #4
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <UART_SetConfig+0x118>)
 800301e:	fba3 0302 	umull	r0, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x118>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303c:	4419      	add	r1, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fbb2 f2f3 	udiv	r2, r2, r3
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <UART_SetConfig+0x118>)
 8003056:	fba3 0302 	umull	r0, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2064      	movs	r0, #100	; 0x64
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <UART_SetConfig+0x118>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	440a      	add	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40013800 	.word	0x40013800
 8003088:	51eb851f 	.word	0x51eb851f

0800308c <_ZN5Motor9toggleRunEv>:
	void toggleRun() {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(this->GPIOx, this->GPIO_Pin1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8a1b      	ldrh	r3, [r3, #16]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fe f8c9 	bl	8001236 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(this->GPIOx, this->GPIO_Pin2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8a5b      	ldrh	r3, [r3, #18]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fe f8c1 	bl	8001236 <HAL_GPIO_TogglePin>
	}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZN6Button10buttonScanEP5Motor>:

#include "Button.h"

bool buttonDownFlag;

void Button::buttonScan(Motor *motor) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
	isButtonDown = buttonDownFlag;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <_ZN6Button10buttonScanEP5Motor+0x34>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	719a      	strb	r2, [r3, #6]
	if (isButtonDown) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	799b      	ldrb	r3, [r3, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <_ZN6Button10buttonScanEP5Motor+0x26>
		printf("button is down\r\n");
 80030d6:	4807      	ldr	r0, [pc, #28]	; (80030f4 <_ZN6Button10buttonScanEP5Motor+0x38>)
 80030d8:	f000 f992 	bl	8003400 <puts>
		motor->toggleRun();
 80030dc:	6838      	ldr	r0, [r7, #0]
 80030de:	f7ff ffd5 	bl	800308c <_ZN5Motor9toggleRunEv>
	}
	buttonDownFlag = false;
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <_ZN6Button10buttonScanEP5Motor+0x34>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000090 	.word	0x20000090
 80030f4:	080040cc 	.word	0x080040cc

080030f8 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief: 当检测到外部中断触发并确定其为按键按下时，翻转led灯，按下标记被确定
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d117      	bne.n	800313a <HAL_GPIO_EXTI_Callback+0x42>
		HAL_Delay(5);
 800310a:	2005      	movs	r0, #5
 800310c:	f7fd fd64 	bl	8000bd8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET) {
 8003110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003116:	f7fe f85f 	bl	80011d8 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_GPIO_EXTI_Callback+0x42>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800312a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800312e:	4806      	ldr	r0, [pc, #24]	; (8003148 <HAL_GPIO_EXTI_Callback+0x50>)
 8003130:	f7fe f881 	bl	8001236 <HAL_GPIO_TogglePin>
			buttonDownFlag = true;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_GPIO_EXTI_Callback+0x54>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40010800 	.word	0x40010800
 8003148:	40010c00 	.word	0x40010c00
 800314c:	20000090 	.word	0x20000090

08003150 <_ZdlPvj>:
 8003150:	f000 b800 	b.w	8003154 <_ZdlPv>

08003154 <_ZdlPv>:
 8003154:	f000 b82a 	b.w	80031ac <free>

08003158 <__errno>:
 8003158:	4b01      	ldr	r3, [pc, #4]	; (8003160 <__errno+0x8>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2000000c 	.word	0x2000000c

08003164 <__libc_init_array>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	2500      	movs	r5, #0
 8003168:	4e0c      	ldr	r6, [pc, #48]	; (800319c <__libc_init_array+0x38>)
 800316a:	4c0d      	ldr	r4, [pc, #52]	; (80031a0 <__libc_init_array+0x3c>)
 800316c:	1ba4      	subs	r4, r4, r6
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	42a5      	cmp	r5, r4
 8003172:	d109      	bne.n	8003188 <__libc_init_array+0x24>
 8003174:	f000 ff7c 	bl	8004070 <_init>
 8003178:	2500      	movs	r5, #0
 800317a:	4e0a      	ldr	r6, [pc, #40]	; (80031a4 <__libc_init_array+0x40>)
 800317c:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <__libc_init_array+0x44>)
 800317e:	1ba4      	subs	r4, r4, r6
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	42a5      	cmp	r5, r4
 8003184:	d105      	bne.n	8003192 <__libc_init_array+0x2e>
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800318c:	4798      	blx	r3
 800318e:	3501      	adds	r5, #1
 8003190:	e7ee      	b.n	8003170 <__libc_init_array+0xc>
 8003192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003196:	4798      	blx	r3
 8003198:	3501      	adds	r5, #1
 800319a:	e7f2      	b.n	8003182 <__libc_init_array+0x1e>
 800319c:	0800419c 	.word	0x0800419c
 80031a0:	0800419c 	.word	0x0800419c
 80031a4:	0800419c 	.word	0x0800419c
 80031a8:	080041a0 	.word	0x080041a0

080031ac <free>:
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <free+0xc>)
 80031ae:	4601      	mov	r1, r0
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	f000 b80b 	b.w	80031cc <_free_r>
 80031b6:	bf00      	nop
 80031b8:	2000000c 	.word	0x2000000c

080031bc <memset>:
 80031bc:	4603      	mov	r3, r0
 80031be:	4402      	add	r2, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <_free_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4605      	mov	r5, r0
 80031d0:	2900      	cmp	r1, #0
 80031d2:	d043      	beq.n	800325c <_free_r+0x90>
 80031d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d8:	1f0c      	subs	r4, r1, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfb8      	it	lt
 80031de:	18e4      	addlt	r4, r4, r3
 80031e0:	f000 fbc4 	bl	800396c <__malloc_lock>
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <_free_r+0x94>)
 80031e6:	6813      	ldr	r3, [r2, #0]
 80031e8:	4610      	mov	r0, r2
 80031ea:	b933      	cbnz	r3, 80031fa <_free_r+0x2e>
 80031ec:	6063      	str	r3, [r4, #4]
 80031ee:	6014      	str	r4, [r2, #0]
 80031f0:	4628      	mov	r0, r5
 80031f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f6:	f000 bbba 	b.w	800396e <__malloc_unlock>
 80031fa:	42a3      	cmp	r3, r4
 80031fc:	d90b      	bls.n	8003216 <_free_r+0x4a>
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	1862      	adds	r2, r4, r1
 8003202:	4293      	cmp	r3, r2
 8003204:	bf01      	itttt	eq
 8003206:	681a      	ldreq	r2, [r3, #0]
 8003208:	685b      	ldreq	r3, [r3, #4]
 800320a:	1852      	addeq	r2, r2, r1
 800320c:	6022      	streq	r2, [r4, #0]
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6004      	str	r4, [r0, #0]
 8003212:	e7ed      	b.n	80031f0 <_free_r+0x24>
 8003214:	4613      	mov	r3, r2
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	b10a      	cbz	r2, 800321e <_free_r+0x52>
 800321a:	42a2      	cmp	r2, r4
 800321c:	d9fa      	bls.n	8003214 <_free_r+0x48>
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	1858      	adds	r0, r3, r1
 8003222:	42a0      	cmp	r0, r4
 8003224:	d10b      	bne.n	800323e <_free_r+0x72>
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	4401      	add	r1, r0
 800322a:	1858      	adds	r0, r3, r1
 800322c:	4282      	cmp	r2, r0
 800322e:	6019      	str	r1, [r3, #0]
 8003230:	d1de      	bne.n	80031f0 <_free_r+0x24>
 8003232:	6810      	ldr	r0, [r2, #0]
 8003234:	6852      	ldr	r2, [r2, #4]
 8003236:	4401      	add	r1, r0
 8003238:	6019      	str	r1, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	e7d8      	b.n	80031f0 <_free_r+0x24>
 800323e:	d902      	bls.n	8003246 <_free_r+0x7a>
 8003240:	230c      	movs	r3, #12
 8003242:	602b      	str	r3, [r5, #0]
 8003244:	e7d4      	b.n	80031f0 <_free_r+0x24>
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	1821      	adds	r1, r4, r0
 800324a:	428a      	cmp	r2, r1
 800324c:	bf01      	itttt	eq
 800324e:	6811      	ldreq	r1, [r2, #0]
 8003250:	6852      	ldreq	r2, [r2, #4]
 8003252:	1809      	addeq	r1, r1, r0
 8003254:	6021      	streq	r1, [r4, #0]
 8003256:	6062      	str	r2, [r4, #4]
 8003258:	605c      	str	r4, [r3, #4]
 800325a:	e7c9      	b.n	80031f0 <_free_r+0x24>
 800325c:	bd38      	pop	{r3, r4, r5, pc}
 800325e:	bf00      	nop
 8003260:	20000094 	.word	0x20000094

08003264 <_malloc_r>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	1ccd      	adds	r5, r1, #3
 8003268:	f025 0503 	bic.w	r5, r5, #3
 800326c:	3508      	adds	r5, #8
 800326e:	2d0c      	cmp	r5, #12
 8003270:	bf38      	it	cc
 8003272:	250c      	movcc	r5, #12
 8003274:	2d00      	cmp	r5, #0
 8003276:	4606      	mov	r6, r0
 8003278:	db01      	blt.n	800327e <_malloc_r+0x1a>
 800327a:	42a9      	cmp	r1, r5
 800327c:	d903      	bls.n	8003286 <_malloc_r+0x22>
 800327e:	230c      	movs	r3, #12
 8003280:	6033      	str	r3, [r6, #0]
 8003282:	2000      	movs	r0, #0
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	f000 fb71 	bl	800396c <__malloc_lock>
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <_malloc_r+0xac>)
 800328c:	6814      	ldr	r4, [r2, #0]
 800328e:	4621      	mov	r1, r4
 8003290:	b991      	cbnz	r1, 80032b8 <_malloc_r+0x54>
 8003292:	4c20      	ldr	r4, [pc, #128]	; (8003314 <_malloc_r+0xb0>)
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	b91b      	cbnz	r3, 80032a0 <_malloc_r+0x3c>
 8003298:	4630      	mov	r0, r6
 800329a:	f000 f8b9 	bl	8003410 <_sbrk_r>
 800329e:	6020      	str	r0, [r4, #0]
 80032a0:	4629      	mov	r1, r5
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f8b4 	bl	8003410 <_sbrk_r>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d124      	bne.n	80032f6 <_malloc_r+0x92>
 80032ac:	230c      	movs	r3, #12
 80032ae:	4630      	mov	r0, r6
 80032b0:	6033      	str	r3, [r6, #0]
 80032b2:	f000 fb5c 	bl	800396e <__malloc_unlock>
 80032b6:	e7e4      	b.n	8003282 <_malloc_r+0x1e>
 80032b8:	680b      	ldr	r3, [r1, #0]
 80032ba:	1b5b      	subs	r3, r3, r5
 80032bc:	d418      	bmi.n	80032f0 <_malloc_r+0x8c>
 80032be:	2b0b      	cmp	r3, #11
 80032c0:	d90f      	bls.n	80032e2 <_malloc_r+0x7e>
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	18cc      	adds	r4, r1, r3
 80032c6:	50cd      	str	r5, [r1, r3]
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 fb50 	bl	800396e <__malloc_unlock>
 80032ce:	f104 000b 	add.w	r0, r4, #11
 80032d2:	1d23      	adds	r3, r4, #4
 80032d4:	f020 0007 	bic.w	r0, r0, #7
 80032d8:	1ac3      	subs	r3, r0, r3
 80032da:	d0d3      	beq.n	8003284 <_malloc_r+0x20>
 80032dc:	425a      	negs	r2, r3
 80032de:	50e2      	str	r2, [r4, r3]
 80032e0:	e7d0      	b.n	8003284 <_malloc_r+0x20>
 80032e2:	684b      	ldr	r3, [r1, #4]
 80032e4:	428c      	cmp	r4, r1
 80032e6:	bf16      	itet	ne
 80032e8:	6063      	strne	r3, [r4, #4]
 80032ea:	6013      	streq	r3, [r2, #0]
 80032ec:	460c      	movne	r4, r1
 80032ee:	e7eb      	b.n	80032c8 <_malloc_r+0x64>
 80032f0:	460c      	mov	r4, r1
 80032f2:	6849      	ldr	r1, [r1, #4]
 80032f4:	e7cc      	b.n	8003290 <_malloc_r+0x2c>
 80032f6:	1cc4      	adds	r4, r0, #3
 80032f8:	f024 0403 	bic.w	r4, r4, #3
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	d005      	beq.n	800330c <_malloc_r+0xa8>
 8003300:	1a21      	subs	r1, r4, r0
 8003302:	4630      	mov	r0, r6
 8003304:	f000 f884 	bl	8003410 <_sbrk_r>
 8003308:	3001      	adds	r0, #1
 800330a:	d0cf      	beq.n	80032ac <_malloc_r+0x48>
 800330c:	6025      	str	r5, [r4, #0]
 800330e:	e7db      	b.n	80032c8 <_malloc_r+0x64>
 8003310:	20000094 	.word	0x20000094
 8003314:	20000098 	.word	0x20000098

08003318 <iprintf>:
 8003318:	b40f      	push	{r0, r1, r2, r3}
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <iprintf+0x2c>)
 800331c:	b513      	push	{r0, r1, r4, lr}
 800331e:	681c      	ldr	r4, [r3, #0]
 8003320:	b124      	cbz	r4, 800332c <iprintf+0x14>
 8003322:	69a3      	ldr	r3, [r4, #24]
 8003324:	b913      	cbnz	r3, 800332c <iprintf+0x14>
 8003326:	4620      	mov	r0, r4
 8003328:	f000 fa32 	bl	8003790 <__sinit>
 800332c:	ab05      	add	r3, sp, #20
 800332e:	9a04      	ldr	r2, [sp, #16]
 8003330:	68a1      	ldr	r1, [r4, #8]
 8003332:	4620      	mov	r0, r4
 8003334:	9301      	str	r3, [sp, #4]
 8003336:	f000 fb43 	bl	80039c0 <_vfiprintf_r>
 800333a:	b002      	add	sp, #8
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003340:	b004      	add	sp, #16
 8003342:	4770      	bx	lr
 8003344:	2000000c 	.word	0x2000000c

08003348 <_puts_r>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	460e      	mov	r6, r1
 800334c:	4605      	mov	r5, r0
 800334e:	b118      	cbz	r0, 8003358 <_puts_r+0x10>
 8003350:	6983      	ldr	r3, [r0, #24]
 8003352:	b90b      	cbnz	r3, 8003358 <_puts_r+0x10>
 8003354:	f000 fa1c 	bl	8003790 <__sinit>
 8003358:	69ab      	ldr	r3, [r5, #24]
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	b913      	cbnz	r3, 8003364 <_puts_r+0x1c>
 800335e:	4628      	mov	r0, r5
 8003360:	f000 fa16 	bl	8003790 <__sinit>
 8003364:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <_puts_r+0xac>)
 8003366:	429c      	cmp	r4, r3
 8003368:	d117      	bne.n	800339a <_puts_r+0x52>
 800336a:	686c      	ldr	r4, [r5, #4]
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	d51d      	bpl.n	80033ae <_puts_r+0x66>
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	b1db      	cbz	r3, 80033ae <_puts_r+0x66>
 8003376:	3e01      	subs	r6, #1
 8003378:	68a3      	ldr	r3, [r4, #8]
 800337a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800337e:	3b01      	subs	r3, #1
 8003380:	60a3      	str	r3, [r4, #8]
 8003382:	b9e9      	cbnz	r1, 80033c0 <_puts_r+0x78>
 8003384:	2b00      	cmp	r3, #0
 8003386:	da2e      	bge.n	80033e6 <_puts_r+0x9e>
 8003388:	4622      	mov	r2, r4
 800338a:	210a      	movs	r1, #10
 800338c:	4628      	mov	r0, r5
 800338e:	f000 f84f 	bl	8003430 <__swbuf_r>
 8003392:	3001      	adds	r0, #1
 8003394:	d011      	beq.n	80033ba <_puts_r+0x72>
 8003396:	200a      	movs	r0, #10
 8003398:	e011      	b.n	80033be <_puts_r+0x76>
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <_puts_r+0xb0>)
 800339c:	429c      	cmp	r4, r3
 800339e:	d101      	bne.n	80033a4 <_puts_r+0x5c>
 80033a0:	68ac      	ldr	r4, [r5, #8]
 80033a2:	e7e3      	b.n	800336c <_puts_r+0x24>
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <_puts_r+0xb4>)
 80033a6:	429c      	cmp	r4, r3
 80033a8:	bf08      	it	eq
 80033aa:	68ec      	ldreq	r4, [r5, #12]
 80033ac:	e7de      	b.n	800336c <_puts_r+0x24>
 80033ae:	4621      	mov	r1, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f88f 	bl	80034d4 <__swsetup_r>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d0dd      	beq.n	8003376 <_puts_r+0x2e>
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da04      	bge.n	80033ce <_puts_r+0x86>
 80033c4:	69a2      	ldr	r2, [r4, #24]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	dc06      	bgt.n	80033d8 <_puts_r+0x90>
 80033ca:	290a      	cmp	r1, #10
 80033cc:	d004      	beq.n	80033d8 <_puts_r+0x90>
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	6022      	str	r2, [r4, #0]
 80033d4:	7019      	strb	r1, [r3, #0]
 80033d6:	e7cf      	b.n	8003378 <_puts_r+0x30>
 80033d8:	4622      	mov	r2, r4
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 f828 	bl	8003430 <__swbuf_r>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d1c9      	bne.n	8003378 <_puts_r+0x30>
 80033e4:	e7e9      	b.n	80033ba <_puts_r+0x72>
 80033e6:	200a      	movs	r0, #10
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	6022      	str	r2, [r4, #0]
 80033ee:	7018      	strb	r0, [r3, #0]
 80033f0:	e7e5      	b.n	80033be <_puts_r+0x76>
 80033f2:	bf00      	nop
 80033f4:	08004128 	.word	0x08004128
 80033f8:	08004148 	.word	0x08004148
 80033fc:	08004108 	.word	0x08004108

08003400 <puts>:
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <puts+0xc>)
 8003402:	4601      	mov	r1, r0
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	f7ff bf9f 	b.w	8003348 <_puts_r>
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c

08003410 <_sbrk_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	2300      	movs	r3, #0
 8003414:	4c05      	ldr	r4, [pc, #20]	; (800342c <_sbrk_r+0x1c>)
 8003416:	4605      	mov	r5, r0
 8003418:	4608      	mov	r0, r1
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	f7fd f930 	bl	8000680 <_sbrk>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d102      	bne.n	800342a <_sbrk_r+0x1a>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	b103      	cbz	r3, 800342a <_sbrk_r+0x1a>
 8003428:	602b      	str	r3, [r5, #0]
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	20000170 	.word	0x20000170

08003430 <__swbuf_r>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	460e      	mov	r6, r1
 8003434:	4614      	mov	r4, r2
 8003436:	4605      	mov	r5, r0
 8003438:	b118      	cbz	r0, 8003442 <__swbuf_r+0x12>
 800343a:	6983      	ldr	r3, [r0, #24]
 800343c:	b90b      	cbnz	r3, 8003442 <__swbuf_r+0x12>
 800343e:	f000 f9a7 	bl	8003790 <__sinit>
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <__swbuf_r+0x98>)
 8003444:	429c      	cmp	r4, r3
 8003446:	d12a      	bne.n	800349e <__swbuf_r+0x6e>
 8003448:	686c      	ldr	r4, [r5, #4]
 800344a:	69a3      	ldr	r3, [r4, #24]
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	071a      	lsls	r2, r3, #28
 8003452:	d52e      	bpl.n	80034b2 <__swbuf_r+0x82>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	b363      	cbz	r3, 80034b2 <__swbuf_r+0x82>
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	b2f6      	uxtb	r6, r6
 800345e:	1ac0      	subs	r0, r0, r3
 8003460:	6963      	ldr	r3, [r4, #20]
 8003462:	4637      	mov	r7, r6
 8003464:	4283      	cmp	r3, r0
 8003466:	dc04      	bgt.n	8003472 <__swbuf_r+0x42>
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f926 	bl	80036bc <_fflush_r>
 8003470:	bb28      	cbnz	r0, 80034be <__swbuf_r+0x8e>
 8003472:	68a3      	ldr	r3, [r4, #8]
 8003474:	3001      	adds	r0, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	60a3      	str	r3, [r4, #8]
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	6022      	str	r2, [r4, #0]
 8003480:	701e      	strb	r6, [r3, #0]
 8003482:	6963      	ldr	r3, [r4, #20]
 8003484:	4283      	cmp	r3, r0
 8003486:	d004      	beq.n	8003492 <__swbuf_r+0x62>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	07db      	lsls	r3, r3, #31
 800348c:	d519      	bpl.n	80034c2 <__swbuf_r+0x92>
 800348e:	2e0a      	cmp	r6, #10
 8003490:	d117      	bne.n	80034c2 <__swbuf_r+0x92>
 8003492:	4621      	mov	r1, r4
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f911 	bl	80036bc <_fflush_r>
 800349a:	b190      	cbz	r0, 80034c2 <__swbuf_r+0x92>
 800349c:	e00f      	b.n	80034be <__swbuf_r+0x8e>
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <__swbuf_r+0x9c>)
 80034a0:	429c      	cmp	r4, r3
 80034a2:	d101      	bne.n	80034a8 <__swbuf_r+0x78>
 80034a4:	68ac      	ldr	r4, [r5, #8]
 80034a6:	e7d0      	b.n	800344a <__swbuf_r+0x1a>
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <__swbuf_r+0xa0>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	bf08      	it	eq
 80034ae:	68ec      	ldreq	r4, [r5, #12]
 80034b0:	e7cb      	b.n	800344a <__swbuf_r+0x1a>
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 f80d 	bl	80034d4 <__swsetup_r>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d0cc      	beq.n	8003458 <__swbuf_r+0x28>
 80034be:	f04f 37ff 	mov.w	r7, #4294967295
 80034c2:	4638      	mov	r0, r7
 80034c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08004128 	.word	0x08004128
 80034cc:	08004148 	.word	0x08004148
 80034d0:	08004108 	.word	0x08004108

080034d4 <__swsetup_r>:
 80034d4:	4b32      	ldr	r3, [pc, #200]	; (80035a0 <__swsetup_r+0xcc>)
 80034d6:	b570      	push	{r4, r5, r6, lr}
 80034d8:	681d      	ldr	r5, [r3, #0]
 80034da:	4606      	mov	r6, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	b125      	cbz	r5, 80034ea <__swsetup_r+0x16>
 80034e0:	69ab      	ldr	r3, [r5, #24]
 80034e2:	b913      	cbnz	r3, 80034ea <__swsetup_r+0x16>
 80034e4:	4628      	mov	r0, r5
 80034e6:	f000 f953 	bl	8003790 <__sinit>
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <__swsetup_r+0xd0>)
 80034ec:	429c      	cmp	r4, r3
 80034ee:	d10f      	bne.n	8003510 <__swsetup_r+0x3c>
 80034f0:	686c      	ldr	r4, [r5, #4]
 80034f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	0715      	lsls	r5, r2, #28
 80034fa:	d42c      	bmi.n	8003556 <__swsetup_r+0x82>
 80034fc:	06d0      	lsls	r0, r2, #27
 80034fe:	d411      	bmi.n	8003524 <__swsetup_r+0x50>
 8003500:	2209      	movs	r2, #9
 8003502:	6032      	str	r2, [r6, #0]
 8003504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	e03e      	b.n	800358e <__swsetup_r+0xba>
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <__swsetup_r+0xd4>)
 8003512:	429c      	cmp	r4, r3
 8003514:	d101      	bne.n	800351a <__swsetup_r+0x46>
 8003516:	68ac      	ldr	r4, [r5, #8]
 8003518:	e7eb      	b.n	80034f2 <__swsetup_r+0x1e>
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <__swsetup_r+0xd8>)
 800351c:	429c      	cmp	r4, r3
 800351e:	bf08      	it	eq
 8003520:	68ec      	ldreq	r4, [r5, #12]
 8003522:	e7e6      	b.n	80034f2 <__swsetup_r+0x1e>
 8003524:	0751      	lsls	r1, r2, #29
 8003526:	d512      	bpl.n	800354e <__swsetup_r+0x7a>
 8003528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800352a:	b141      	cbz	r1, 800353e <__swsetup_r+0x6a>
 800352c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003530:	4299      	cmp	r1, r3
 8003532:	d002      	beq.n	800353a <__swsetup_r+0x66>
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff fe49 	bl	80031cc <_free_r>
 800353a:	2300      	movs	r3, #0
 800353c:	6363      	str	r3, [r4, #52]	; 0x34
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003544:	81a3      	strh	r3, [r4, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	6063      	str	r3, [r4, #4]
 800354a:	6923      	ldr	r3, [r4, #16]
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	f043 0308 	orr.w	r3, r3, #8
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	6923      	ldr	r3, [r4, #16]
 8003558:	b94b      	cbnz	r3, 800356e <__swsetup_r+0x9a>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003564:	d003      	beq.n	800356e <__swsetup_r+0x9a>
 8003566:	4621      	mov	r1, r4
 8003568:	4630      	mov	r0, r6
 800356a:	f000 f9bf 	bl	80038ec <__smakebuf_r>
 800356e:	89a2      	ldrh	r2, [r4, #12]
 8003570:	f012 0301 	ands.w	r3, r2, #1
 8003574:	d00c      	beq.n	8003590 <__swsetup_r+0xbc>
 8003576:	2300      	movs	r3, #0
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	6963      	ldr	r3, [r4, #20]
 800357c:	425b      	negs	r3, r3
 800357e:	61a3      	str	r3, [r4, #24]
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	b953      	cbnz	r3, 800359a <__swsetup_r+0xc6>
 8003584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800358c:	d1ba      	bne.n	8003504 <__swsetup_r+0x30>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	0792      	lsls	r2, r2, #30
 8003592:	bf58      	it	pl
 8003594:	6963      	ldrpl	r3, [r4, #20]
 8003596:	60a3      	str	r3, [r4, #8]
 8003598:	e7f2      	b.n	8003580 <__swsetup_r+0xac>
 800359a:	2000      	movs	r0, #0
 800359c:	e7f7      	b.n	800358e <__swsetup_r+0xba>
 800359e:	bf00      	nop
 80035a0:	2000000c 	.word	0x2000000c
 80035a4:	08004128 	.word	0x08004128
 80035a8:	08004148 	.word	0x08004148
 80035ac:	08004108 	.word	0x08004108

080035b0 <__sflush_r>:
 80035b0:	898a      	ldrh	r2, [r1, #12]
 80035b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b6:	4605      	mov	r5, r0
 80035b8:	0710      	lsls	r0, r2, #28
 80035ba:	460c      	mov	r4, r1
 80035bc:	d458      	bmi.n	8003670 <__sflush_r+0xc0>
 80035be:	684b      	ldr	r3, [r1, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	dc05      	bgt.n	80035d0 <__sflush_r+0x20>
 80035c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dc02      	bgt.n	80035d0 <__sflush_r+0x20>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	d0f9      	beq.n	80035ca <__sflush_r+0x1a>
 80035d6:	2300      	movs	r3, #0
 80035d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035dc:	682f      	ldr	r7, [r5, #0]
 80035de:	6a21      	ldr	r1, [r4, #32]
 80035e0:	602b      	str	r3, [r5, #0]
 80035e2:	d032      	beq.n	800364a <__sflush_r+0x9a>
 80035e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	075a      	lsls	r2, r3, #29
 80035ea:	d505      	bpl.n	80035f8 <__sflush_r+0x48>
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	1ac0      	subs	r0, r0, r3
 80035f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035f2:	b10b      	cbz	r3, 80035f8 <__sflush_r+0x48>
 80035f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035f6:	1ac0      	subs	r0, r0, r3
 80035f8:	2300      	movs	r3, #0
 80035fa:	4602      	mov	r2, r0
 80035fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035fe:	6a21      	ldr	r1, [r4, #32]
 8003600:	4628      	mov	r0, r5
 8003602:	47b0      	blx	r6
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	d106      	bne.n	8003618 <__sflush_r+0x68>
 800360a:	6829      	ldr	r1, [r5, #0]
 800360c:	291d      	cmp	r1, #29
 800360e:	d848      	bhi.n	80036a2 <__sflush_r+0xf2>
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <__sflush_r+0x108>)
 8003612:	40ca      	lsrs	r2, r1
 8003614:	07d6      	lsls	r6, r2, #31
 8003616:	d544      	bpl.n	80036a2 <__sflush_r+0xf2>
 8003618:	2200      	movs	r2, #0
 800361a:	6062      	str	r2, [r4, #4]
 800361c:	6922      	ldr	r2, [r4, #16]
 800361e:	04d9      	lsls	r1, r3, #19
 8003620:	6022      	str	r2, [r4, #0]
 8003622:	d504      	bpl.n	800362e <__sflush_r+0x7e>
 8003624:	1c42      	adds	r2, r0, #1
 8003626:	d101      	bne.n	800362c <__sflush_r+0x7c>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b903      	cbnz	r3, 800362e <__sflush_r+0x7e>
 800362c:	6560      	str	r0, [r4, #84]	; 0x54
 800362e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003630:	602f      	str	r7, [r5, #0]
 8003632:	2900      	cmp	r1, #0
 8003634:	d0c9      	beq.n	80035ca <__sflush_r+0x1a>
 8003636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800363a:	4299      	cmp	r1, r3
 800363c:	d002      	beq.n	8003644 <__sflush_r+0x94>
 800363e:	4628      	mov	r0, r5
 8003640:	f7ff fdc4 	bl	80031cc <_free_r>
 8003644:	2000      	movs	r0, #0
 8003646:	6360      	str	r0, [r4, #52]	; 0x34
 8003648:	e7c0      	b.n	80035cc <__sflush_r+0x1c>
 800364a:	2301      	movs	r3, #1
 800364c:	4628      	mov	r0, r5
 800364e:	47b0      	blx	r6
 8003650:	1c41      	adds	r1, r0, #1
 8003652:	d1c8      	bne.n	80035e6 <__sflush_r+0x36>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0c5      	beq.n	80035e6 <__sflush_r+0x36>
 800365a:	2b1d      	cmp	r3, #29
 800365c:	d001      	beq.n	8003662 <__sflush_r+0xb2>
 800365e:	2b16      	cmp	r3, #22
 8003660:	d101      	bne.n	8003666 <__sflush_r+0xb6>
 8003662:	602f      	str	r7, [r5, #0]
 8003664:	e7b1      	b.n	80035ca <__sflush_r+0x1a>
 8003666:	89a3      	ldrh	r3, [r4, #12]
 8003668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	e7ad      	b.n	80035cc <__sflush_r+0x1c>
 8003670:	690f      	ldr	r7, [r1, #16]
 8003672:	2f00      	cmp	r7, #0
 8003674:	d0a9      	beq.n	80035ca <__sflush_r+0x1a>
 8003676:	0793      	lsls	r3, r2, #30
 8003678:	bf18      	it	ne
 800367a:	2300      	movne	r3, #0
 800367c:	680e      	ldr	r6, [r1, #0]
 800367e:	bf08      	it	eq
 8003680:	694b      	ldreq	r3, [r1, #20]
 8003682:	eba6 0807 	sub.w	r8, r6, r7
 8003686:	600f      	str	r7, [r1, #0]
 8003688:	608b      	str	r3, [r1, #8]
 800368a:	f1b8 0f00 	cmp.w	r8, #0
 800368e:	dd9c      	ble.n	80035ca <__sflush_r+0x1a>
 8003690:	4643      	mov	r3, r8
 8003692:	463a      	mov	r2, r7
 8003694:	6a21      	ldr	r1, [r4, #32]
 8003696:	4628      	mov	r0, r5
 8003698:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800369a:	47b0      	blx	r6
 800369c:	2800      	cmp	r0, #0
 800369e:	dc06      	bgt.n	80036ae <__sflush_r+0xfe>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	e78e      	b.n	80035cc <__sflush_r+0x1c>
 80036ae:	4407      	add	r7, r0
 80036b0:	eba8 0800 	sub.w	r8, r8, r0
 80036b4:	e7e9      	b.n	800368a <__sflush_r+0xda>
 80036b6:	bf00      	nop
 80036b8:	20400001 	.word	0x20400001

080036bc <_fflush_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	4605      	mov	r5, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	b1db      	cbz	r3, 80036fe <_fflush_r+0x42>
 80036c6:	b118      	cbz	r0, 80036d0 <_fflush_r+0x14>
 80036c8:	6983      	ldr	r3, [r0, #24]
 80036ca:	b90b      	cbnz	r3, 80036d0 <_fflush_r+0x14>
 80036cc:	f000 f860 	bl	8003790 <__sinit>
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <_fflush_r+0x48>)
 80036d2:	429c      	cmp	r4, r3
 80036d4:	d109      	bne.n	80036ea <_fflush_r+0x2e>
 80036d6:	686c      	ldr	r4, [r5, #4]
 80036d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036dc:	b17b      	cbz	r3, 80036fe <_fflush_r+0x42>
 80036de:	4621      	mov	r1, r4
 80036e0:	4628      	mov	r0, r5
 80036e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e6:	f7ff bf63 	b.w	80035b0 <__sflush_r>
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <_fflush_r+0x4c>)
 80036ec:	429c      	cmp	r4, r3
 80036ee:	d101      	bne.n	80036f4 <_fflush_r+0x38>
 80036f0:	68ac      	ldr	r4, [r5, #8]
 80036f2:	e7f1      	b.n	80036d8 <_fflush_r+0x1c>
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <_fflush_r+0x50>)
 80036f6:	429c      	cmp	r4, r3
 80036f8:	bf08      	it	eq
 80036fa:	68ec      	ldreq	r4, [r5, #12]
 80036fc:	e7ec      	b.n	80036d8 <_fflush_r+0x1c>
 80036fe:	2000      	movs	r0, #0
 8003700:	bd38      	pop	{r3, r4, r5, pc}
 8003702:	bf00      	nop
 8003704:	08004128 	.word	0x08004128
 8003708:	08004148 	.word	0x08004148
 800370c:	08004108 	.word	0x08004108

08003710 <std>:
 8003710:	2300      	movs	r3, #0
 8003712:	b510      	push	{r4, lr}
 8003714:	4604      	mov	r4, r0
 8003716:	e9c0 3300 	strd	r3, r3, [r0]
 800371a:	6083      	str	r3, [r0, #8]
 800371c:	8181      	strh	r1, [r0, #12]
 800371e:	6643      	str	r3, [r0, #100]	; 0x64
 8003720:	81c2      	strh	r2, [r0, #14]
 8003722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003726:	6183      	str	r3, [r0, #24]
 8003728:	4619      	mov	r1, r3
 800372a:	2208      	movs	r2, #8
 800372c:	305c      	adds	r0, #92	; 0x5c
 800372e:	f7ff fd45 	bl	80031bc <memset>
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <std+0x38>)
 8003734:	6224      	str	r4, [r4, #32]
 8003736:	6263      	str	r3, [r4, #36]	; 0x24
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <std+0x3c>)
 800373a:	62a3      	str	r3, [r4, #40]	; 0x28
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <std+0x40>)
 800373e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <std+0x44>)
 8003742:	6323      	str	r3, [r4, #48]	; 0x30
 8003744:	bd10      	pop	{r4, pc}
 8003746:	bf00      	nop
 8003748:	08003efd 	.word	0x08003efd
 800374c:	08003f1f 	.word	0x08003f1f
 8003750:	08003f57 	.word	0x08003f57
 8003754:	08003f7b 	.word	0x08003f7b

08003758 <_cleanup_r>:
 8003758:	4901      	ldr	r1, [pc, #4]	; (8003760 <_cleanup_r+0x8>)
 800375a:	f000 b885 	b.w	8003868 <_fwalk_reent>
 800375e:	bf00      	nop
 8003760:	080036bd 	.word	0x080036bd

08003764 <__sfmoreglue>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	2568      	movs	r5, #104	; 0x68
 8003768:	1e4a      	subs	r2, r1, #1
 800376a:	4355      	muls	r5, r2
 800376c:	460e      	mov	r6, r1
 800376e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003772:	f7ff fd77 	bl	8003264 <_malloc_r>
 8003776:	4604      	mov	r4, r0
 8003778:	b140      	cbz	r0, 800378c <__sfmoreglue+0x28>
 800377a:	2100      	movs	r1, #0
 800377c:	e9c0 1600 	strd	r1, r6, [r0]
 8003780:	300c      	adds	r0, #12
 8003782:	60a0      	str	r0, [r4, #8]
 8003784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003788:	f7ff fd18 	bl	80031bc <memset>
 800378c:	4620      	mov	r0, r4
 800378e:	bd70      	pop	{r4, r5, r6, pc}

08003790 <__sinit>:
 8003790:	6983      	ldr	r3, [r0, #24]
 8003792:	b510      	push	{r4, lr}
 8003794:	4604      	mov	r4, r0
 8003796:	bb33      	cbnz	r3, 80037e6 <__sinit+0x56>
 8003798:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800379c:	6503      	str	r3, [r0, #80]	; 0x50
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <__sinit+0x58>)
 80037a0:	4a12      	ldr	r2, [pc, #72]	; (80037ec <__sinit+0x5c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6282      	str	r2, [r0, #40]	; 0x28
 80037a6:	4298      	cmp	r0, r3
 80037a8:	bf04      	itt	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	6183      	streq	r3, [r0, #24]
 80037ae:	f000 f81f 	bl	80037f0 <__sfp>
 80037b2:	6060      	str	r0, [r4, #4]
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 f81b 	bl	80037f0 <__sfp>
 80037ba:	60a0      	str	r0, [r4, #8]
 80037bc:	4620      	mov	r0, r4
 80037be:	f000 f817 	bl	80037f0 <__sfp>
 80037c2:	2200      	movs	r2, #0
 80037c4:	60e0      	str	r0, [r4, #12]
 80037c6:	2104      	movs	r1, #4
 80037c8:	6860      	ldr	r0, [r4, #4]
 80037ca:	f7ff ffa1 	bl	8003710 <std>
 80037ce:	2201      	movs	r2, #1
 80037d0:	2109      	movs	r1, #9
 80037d2:	68a0      	ldr	r0, [r4, #8]
 80037d4:	f7ff ff9c 	bl	8003710 <std>
 80037d8:	2202      	movs	r2, #2
 80037da:	2112      	movs	r1, #18
 80037dc:	68e0      	ldr	r0, [r4, #12]
 80037de:	f7ff ff97 	bl	8003710 <std>
 80037e2:	2301      	movs	r3, #1
 80037e4:	61a3      	str	r3, [r4, #24]
 80037e6:	bd10      	pop	{r4, pc}
 80037e8:	08004104 	.word	0x08004104
 80037ec:	08003759 	.word	0x08003759

080037f0 <__sfp>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <__sfp+0x70>)
 80037f4:	4607      	mov	r7, r0
 80037f6:	681e      	ldr	r6, [r3, #0]
 80037f8:	69b3      	ldr	r3, [r6, #24]
 80037fa:	b913      	cbnz	r3, 8003802 <__sfp+0x12>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f7ff ffc7 	bl	8003790 <__sinit>
 8003802:	3648      	adds	r6, #72	; 0x48
 8003804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003808:	3b01      	subs	r3, #1
 800380a:	d503      	bpl.n	8003814 <__sfp+0x24>
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	b133      	cbz	r3, 800381e <__sfp+0x2e>
 8003810:	6836      	ldr	r6, [r6, #0]
 8003812:	e7f7      	b.n	8003804 <__sfp+0x14>
 8003814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003818:	b16d      	cbz	r5, 8003836 <__sfp+0x46>
 800381a:	3468      	adds	r4, #104	; 0x68
 800381c:	e7f4      	b.n	8003808 <__sfp+0x18>
 800381e:	2104      	movs	r1, #4
 8003820:	4638      	mov	r0, r7
 8003822:	f7ff ff9f 	bl	8003764 <__sfmoreglue>
 8003826:	6030      	str	r0, [r6, #0]
 8003828:	2800      	cmp	r0, #0
 800382a:	d1f1      	bne.n	8003810 <__sfp+0x20>
 800382c:	230c      	movs	r3, #12
 800382e:	4604      	mov	r4, r0
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4620      	mov	r0, r4
 8003834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <__sfp+0x74>)
 8003838:	6665      	str	r5, [r4, #100]	; 0x64
 800383a:	e9c4 5500 	strd	r5, r5, [r4]
 800383e:	60a5      	str	r5, [r4, #8]
 8003840:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003844:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003848:	2208      	movs	r2, #8
 800384a:	4629      	mov	r1, r5
 800384c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003850:	f7ff fcb4 	bl	80031bc <memset>
 8003854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800385c:	e7e9      	b.n	8003832 <__sfp+0x42>
 800385e:	bf00      	nop
 8003860:	08004104 	.word	0x08004104
 8003864:	ffff0001 	.word	0xffff0001

08003868 <_fwalk_reent>:
 8003868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800386c:	4680      	mov	r8, r0
 800386e:	4689      	mov	r9, r1
 8003870:	2600      	movs	r6, #0
 8003872:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003876:	b914      	cbnz	r4, 800387e <_fwalk_reent+0x16>
 8003878:	4630      	mov	r0, r6
 800387a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003882:	3f01      	subs	r7, #1
 8003884:	d501      	bpl.n	800388a <_fwalk_reent+0x22>
 8003886:	6824      	ldr	r4, [r4, #0]
 8003888:	e7f5      	b.n	8003876 <_fwalk_reent+0xe>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d907      	bls.n	80038a0 <_fwalk_reent+0x38>
 8003890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003894:	3301      	adds	r3, #1
 8003896:	d003      	beq.n	80038a0 <_fwalk_reent+0x38>
 8003898:	4629      	mov	r1, r5
 800389a:	4640      	mov	r0, r8
 800389c:	47c8      	blx	r9
 800389e:	4306      	orrs	r6, r0
 80038a0:	3568      	adds	r5, #104	; 0x68
 80038a2:	e7ee      	b.n	8003882 <_fwalk_reent+0x1a>

080038a4 <__swhatbuf_r>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	460e      	mov	r6, r1
 80038a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ac:	b096      	sub	sp, #88	; 0x58
 80038ae:	2900      	cmp	r1, #0
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	da07      	bge.n	80038c6 <__swhatbuf_r+0x22>
 80038b6:	2300      	movs	r3, #0
 80038b8:	602b      	str	r3, [r5, #0]
 80038ba:	89b3      	ldrh	r3, [r6, #12]
 80038bc:	061a      	lsls	r2, r3, #24
 80038be:	d410      	bmi.n	80038e2 <__swhatbuf_r+0x3e>
 80038c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c4:	e00e      	b.n	80038e4 <__swhatbuf_r+0x40>
 80038c6:	466a      	mov	r2, sp
 80038c8:	f000 fb7e 	bl	8003fc8 <_fstat_r>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	dbf2      	blt.n	80038b6 <__swhatbuf_r+0x12>
 80038d0:	9a01      	ldr	r2, [sp, #4]
 80038d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038da:	425a      	negs	r2, r3
 80038dc:	415a      	adcs	r2, r3
 80038de:	602a      	str	r2, [r5, #0]
 80038e0:	e7ee      	b.n	80038c0 <__swhatbuf_r+0x1c>
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	2000      	movs	r0, #0
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	b016      	add	sp, #88	; 0x58
 80038ea:	bd70      	pop	{r4, r5, r6, pc}

080038ec <__smakebuf_r>:
 80038ec:	898b      	ldrh	r3, [r1, #12]
 80038ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038f0:	079d      	lsls	r5, r3, #30
 80038f2:	4606      	mov	r6, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	d507      	bpl.n	8003908 <__smakebuf_r+0x1c>
 80038f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	2301      	movs	r3, #1
 8003902:	6163      	str	r3, [r4, #20]
 8003904:	b002      	add	sp, #8
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	ab01      	add	r3, sp, #4
 800390a:	466a      	mov	r2, sp
 800390c:	f7ff ffca 	bl	80038a4 <__swhatbuf_r>
 8003910:	9900      	ldr	r1, [sp, #0]
 8003912:	4605      	mov	r5, r0
 8003914:	4630      	mov	r0, r6
 8003916:	f7ff fca5 	bl	8003264 <_malloc_r>
 800391a:	b948      	cbnz	r0, 8003930 <__smakebuf_r+0x44>
 800391c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003920:	059a      	lsls	r2, r3, #22
 8003922:	d4ef      	bmi.n	8003904 <__smakebuf_r+0x18>
 8003924:	f023 0303 	bic.w	r3, r3, #3
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	e7e3      	b.n	80038f8 <__smakebuf_r+0xc>
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <__smakebuf_r+0x7c>)
 8003932:	62b3      	str	r3, [r6, #40]	; 0x28
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	6020      	str	r0, [r4, #0]
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	9b00      	ldr	r3, [sp, #0]
 8003940:	6120      	str	r0, [r4, #16]
 8003942:	6163      	str	r3, [r4, #20]
 8003944:	9b01      	ldr	r3, [sp, #4]
 8003946:	b15b      	cbz	r3, 8003960 <__smakebuf_r+0x74>
 8003948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800394c:	4630      	mov	r0, r6
 800394e:	f000 fb4d 	bl	8003fec <_isatty_r>
 8003952:	b128      	cbz	r0, 8003960 <__smakebuf_r+0x74>
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	81a3      	strh	r3, [r4, #12]
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	431d      	orrs	r5, r3
 8003964:	81a5      	strh	r5, [r4, #12]
 8003966:	e7cd      	b.n	8003904 <__smakebuf_r+0x18>
 8003968:	08003759 	.word	0x08003759

0800396c <__malloc_lock>:
 800396c:	4770      	bx	lr

0800396e <__malloc_unlock>:
 800396e:	4770      	bx	lr

08003970 <__sfputc_r>:
 8003970:	6893      	ldr	r3, [r2, #8]
 8003972:	b410      	push	{r4}
 8003974:	3b01      	subs	r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	6093      	str	r3, [r2, #8]
 800397a:	da07      	bge.n	800398c <__sfputc_r+0x1c>
 800397c:	6994      	ldr	r4, [r2, #24]
 800397e:	42a3      	cmp	r3, r4
 8003980:	db01      	blt.n	8003986 <__sfputc_r+0x16>
 8003982:	290a      	cmp	r1, #10
 8003984:	d102      	bne.n	800398c <__sfputc_r+0x1c>
 8003986:	bc10      	pop	{r4}
 8003988:	f7ff bd52 	b.w	8003430 <__swbuf_r>
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	1c58      	adds	r0, r3, #1
 8003990:	6010      	str	r0, [r2, #0]
 8003992:	7019      	strb	r1, [r3, #0]
 8003994:	4608      	mov	r0, r1
 8003996:	bc10      	pop	{r4}
 8003998:	4770      	bx	lr

0800399a <__sfputs_r>:
 800399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399c:	4606      	mov	r6, r0
 800399e:	460f      	mov	r7, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	18d5      	adds	r5, r2, r3
 80039a4:	42ac      	cmp	r4, r5
 80039a6:	d101      	bne.n	80039ac <__sfputs_r+0x12>
 80039a8:	2000      	movs	r0, #0
 80039aa:	e007      	b.n	80039bc <__sfputs_r+0x22>
 80039ac:	463a      	mov	r2, r7
 80039ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff ffdc 	bl	8003970 <__sfputc_r>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d1f3      	bne.n	80039a4 <__sfputs_r+0xa>
 80039bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c0 <_vfiprintf_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	460c      	mov	r4, r1
 80039c6:	b09d      	sub	sp, #116	; 0x74
 80039c8:	4617      	mov	r7, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4606      	mov	r6, r0
 80039ce:	b118      	cbz	r0, 80039d8 <_vfiprintf_r+0x18>
 80039d0:	6983      	ldr	r3, [r0, #24]
 80039d2:	b90b      	cbnz	r3, 80039d8 <_vfiprintf_r+0x18>
 80039d4:	f7ff fedc 	bl	8003790 <__sinit>
 80039d8:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <_vfiprintf_r+0x20c>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d158      	bne.n	8003a90 <_vfiprintf_r+0xd0>
 80039de:	6874      	ldr	r4, [r6, #4]
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	0718      	lsls	r0, r3, #28
 80039e4:	d55e      	bpl.n	8003aa4 <_vfiprintf_r+0xe4>
 80039e6:	6923      	ldr	r3, [r4, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <_vfiprintf_r+0xe4>
 80039ec:	2300      	movs	r3, #0
 80039ee:	9309      	str	r3, [sp, #36]	; 0x24
 80039f0:	2320      	movs	r3, #32
 80039f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039f6:	2330      	movs	r3, #48	; 0x30
 80039f8:	f04f 0b01 	mov.w	fp, #1
 80039fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a00:	9503      	str	r5, [sp, #12]
 8003a02:	46b8      	mov	r8, r7
 8003a04:	4645      	mov	r5, r8
 8003a06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a0a:	b10b      	cbz	r3, 8003a10 <_vfiprintf_r+0x50>
 8003a0c:	2b25      	cmp	r3, #37	; 0x25
 8003a0e:	d154      	bne.n	8003aba <_vfiprintf_r+0xfa>
 8003a10:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a14:	d00b      	beq.n	8003a2e <_vfiprintf_r+0x6e>
 8003a16:	4653      	mov	r3, sl
 8003a18:	463a      	mov	r2, r7
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff ffbc 	bl	800399a <__sfputs_r>
 8003a22:	3001      	adds	r0, #1
 8003a24:	f000 80c2 	beq.w	8003bac <_vfiprintf_r+0x1ec>
 8003a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2a:	4453      	add	r3, sl
 8003a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2e:	f898 3000 	ldrb.w	r3, [r8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80ba 	beq.w	8003bac <_vfiprintf_r+0x1ec>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	9307      	str	r3, [sp, #28]
 8003a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a4c:	46a8      	mov	r8, r5
 8003a4e:	2205      	movs	r2, #5
 8003a50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003a54:	485e      	ldr	r0, [pc, #376]	; (8003bd0 <_vfiprintf_r+0x210>)
 8003a56:	f000 faeb 	bl	8004030 <memchr>
 8003a5a:	9b04      	ldr	r3, [sp, #16]
 8003a5c:	bb78      	cbnz	r0, 8003abe <_vfiprintf_r+0xfe>
 8003a5e:	06d9      	lsls	r1, r3, #27
 8003a60:	bf44      	itt	mi
 8003a62:	2220      	movmi	r2, #32
 8003a64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a68:	071a      	lsls	r2, r3, #28
 8003a6a:	bf44      	itt	mi
 8003a6c:	222b      	movmi	r2, #43	; 0x2b
 8003a6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a72:	782a      	ldrb	r2, [r5, #0]
 8003a74:	2a2a      	cmp	r2, #42	; 0x2a
 8003a76:	d02a      	beq.n	8003ace <_vfiprintf_r+0x10e>
 8003a78:	46a8      	mov	r8, r5
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	250a      	movs	r5, #10
 8003a7e:	9a07      	ldr	r2, [sp, #28]
 8003a80:	4641      	mov	r1, r8
 8003a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a86:	3b30      	subs	r3, #48	; 0x30
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d969      	bls.n	8003b60 <_vfiprintf_r+0x1a0>
 8003a8c:	b360      	cbz	r0, 8003ae8 <_vfiprintf_r+0x128>
 8003a8e:	e024      	b.n	8003ada <_vfiprintf_r+0x11a>
 8003a90:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <_vfiprintf_r+0x214>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d101      	bne.n	8003a9a <_vfiprintf_r+0xda>
 8003a96:	68b4      	ldr	r4, [r6, #8]
 8003a98:	e7a2      	b.n	80039e0 <_vfiprintf_r+0x20>
 8003a9a:	4b4f      	ldr	r3, [pc, #316]	; (8003bd8 <_vfiprintf_r+0x218>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	bf08      	it	eq
 8003aa0:	68f4      	ldreq	r4, [r6, #12]
 8003aa2:	e79d      	b.n	80039e0 <_vfiprintf_r+0x20>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f7ff fd14 	bl	80034d4 <__swsetup_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d09d      	beq.n	80039ec <_vfiprintf_r+0x2c>
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	b01d      	add	sp, #116	; 0x74
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	46a8      	mov	r8, r5
 8003abc:	e7a2      	b.n	8003a04 <_vfiprintf_r+0x44>
 8003abe:	4a44      	ldr	r2, [pc, #272]	; (8003bd0 <_vfiprintf_r+0x210>)
 8003ac0:	4645      	mov	r5, r8
 8003ac2:	1a80      	subs	r0, r0, r2
 8003ac4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ac8:	4318      	orrs	r0, r3
 8003aca:	9004      	str	r0, [sp, #16]
 8003acc:	e7be      	b.n	8003a4c <_vfiprintf_r+0x8c>
 8003ace:	9a03      	ldr	r2, [sp, #12]
 8003ad0:	1d11      	adds	r1, r2, #4
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	9103      	str	r1, [sp, #12]
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	db01      	blt.n	8003ade <_vfiprintf_r+0x11e>
 8003ada:	9207      	str	r2, [sp, #28]
 8003adc:	e004      	b.n	8003ae8 <_vfiprintf_r+0x128>
 8003ade:	4252      	negs	r2, r2
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	9207      	str	r2, [sp, #28]
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	f898 3000 	ldrb.w	r3, [r8]
 8003aec:	2b2e      	cmp	r3, #46	; 0x2e
 8003aee:	d10e      	bne.n	8003b0e <_vfiprintf_r+0x14e>
 8003af0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003af4:	2b2a      	cmp	r3, #42	; 0x2a
 8003af6:	d138      	bne.n	8003b6a <_vfiprintf_r+0x1aa>
 8003af8:	9b03      	ldr	r3, [sp, #12]
 8003afa:	f108 0802 	add.w	r8, r8, #2
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	9203      	str	r2, [sp, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bfb8      	it	lt
 8003b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b0c:	9305      	str	r3, [sp, #20]
 8003b0e:	4d33      	ldr	r5, [pc, #204]	; (8003bdc <_vfiprintf_r+0x21c>)
 8003b10:	2203      	movs	r2, #3
 8003b12:	f898 1000 	ldrb.w	r1, [r8]
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fa8a 	bl	8004030 <memchr>
 8003b1c:	b140      	cbz	r0, 8003b30 <_vfiprintf_r+0x170>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	1b40      	subs	r0, r0, r5
 8003b22:	fa03 f000 	lsl.w	r0, r3, r0
 8003b26:	9b04      	ldr	r3, [sp, #16]
 8003b28:	f108 0801 	add.w	r8, r8, #1
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	f898 1000 	ldrb.w	r1, [r8]
 8003b34:	2206      	movs	r2, #6
 8003b36:	482a      	ldr	r0, [pc, #168]	; (8003be0 <_vfiprintf_r+0x220>)
 8003b38:	f108 0701 	add.w	r7, r8, #1
 8003b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b40:	f000 fa76 	bl	8004030 <memchr>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d037      	beq.n	8003bb8 <_vfiprintf_r+0x1f8>
 8003b48:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <_vfiprintf_r+0x224>)
 8003b4a:	bb1b      	cbnz	r3, 8003b94 <_vfiprintf_r+0x1d4>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	3307      	adds	r3, #7
 8003b50:	f023 0307 	bic.w	r3, r3, #7
 8003b54:	3308      	adds	r3, #8
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5a:	444b      	add	r3, r9
 8003b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5e:	e750      	b.n	8003a02 <_vfiprintf_r+0x42>
 8003b60:	fb05 3202 	mla	r2, r5, r2, r3
 8003b64:	2001      	movs	r0, #1
 8003b66:	4688      	mov	r8, r1
 8003b68:	e78a      	b.n	8003a80 <_vfiprintf_r+0xc0>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	250a      	movs	r5, #10
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f108 0801 	add.w	r8, r8, #1
 8003b74:	9305      	str	r3, [sp, #20]
 8003b76:	4640      	mov	r0, r8
 8003b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7c:	3a30      	subs	r2, #48	; 0x30
 8003b7e:	2a09      	cmp	r2, #9
 8003b80:	d903      	bls.n	8003b8a <_vfiprintf_r+0x1ca>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0c3      	beq.n	8003b0e <_vfiprintf_r+0x14e>
 8003b86:	9105      	str	r1, [sp, #20]
 8003b88:	e7c1      	b.n	8003b0e <_vfiprintf_r+0x14e>
 8003b8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4680      	mov	r8, r0
 8003b92:	e7f0      	b.n	8003b76 <_vfiprintf_r+0x1b6>
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <_vfiprintf_r+0x228>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ba8:	4681      	mov	r9, r0
 8003baa:	d1d5      	bne.n	8003b58 <_vfiprintf_r+0x198>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	065b      	lsls	r3, r3, #25
 8003bb0:	f53f af7e 	bmi.w	8003ab0 <_vfiprintf_r+0xf0>
 8003bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb6:	e77d      	b.n	8003ab4 <_vfiprintf_r+0xf4>
 8003bb8:	ab03      	add	r3, sp, #12
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <_vfiprintf_r+0x228>)
 8003bc0:	a904      	add	r1, sp, #16
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f888 	bl	8003cd8 <_printf_i>
 8003bc8:	e7ec      	b.n	8003ba4 <_vfiprintf_r+0x1e4>
 8003bca:	bf00      	nop
 8003bcc:	08004128 	.word	0x08004128
 8003bd0:	08004168 	.word	0x08004168
 8003bd4:	08004148 	.word	0x08004148
 8003bd8:	08004108 	.word	0x08004108
 8003bdc:	0800416e 	.word	0x0800416e
 8003be0:	08004172 	.word	0x08004172
 8003be4:	00000000 	.word	0x00000000
 8003be8:	0800399b 	.word	0x0800399b

08003bec <_printf_common>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	4691      	mov	r9, r2
 8003bf2:	461f      	mov	r7, r3
 8003bf4:	688a      	ldr	r2, [r1, #8]
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	bfb8      	it	lt
 8003bfe:	4613      	movlt	r3, r2
 8003c00:	f8c9 3000 	str.w	r3, [r9]
 8003c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c08:	460c      	mov	r4, r1
 8003c0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c0e:	b112      	cbz	r2, 8003c16 <_printf_common+0x2a>
 8003c10:	3301      	adds	r3, #1
 8003c12:	f8c9 3000 	str.w	r3, [r9]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	0699      	lsls	r1, r3, #26
 8003c1a:	bf42      	ittt	mi
 8003c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c20:	3302      	addmi	r3, #2
 8003c22:	f8c9 3000 	strmi.w	r3, [r9]
 8003c26:	6825      	ldr	r5, [r4, #0]
 8003c28:	f015 0506 	ands.w	r5, r5, #6
 8003c2c:	d107      	bne.n	8003c3e <_printf_common+0x52>
 8003c2e:	f104 0a19 	add.w	sl, r4, #25
 8003c32:	68e3      	ldr	r3, [r4, #12]
 8003c34:	f8d9 2000 	ldr.w	r2, [r9]
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	42ab      	cmp	r3, r5
 8003c3c:	dc29      	bgt.n	8003c92 <_printf_common+0xa6>
 8003c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	3300      	adds	r3, #0
 8003c46:	bf18      	it	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	0692      	lsls	r2, r2, #26
 8003c4c:	d42e      	bmi.n	8003cac <_printf_common+0xc0>
 8003c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c52:	4639      	mov	r1, r7
 8003c54:	4630      	mov	r0, r6
 8003c56:	47c0      	blx	r8
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d021      	beq.n	8003ca0 <_printf_common+0xb4>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	68e5      	ldr	r5, [r4, #12]
 8003c60:	f003 0306 	and.w	r3, r3, #6
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	bf18      	it	ne
 8003c68:	2500      	movne	r5, #0
 8003c6a:	f8d9 2000 	ldr.w	r2, [r9]
 8003c6e:	f04f 0900 	mov.w	r9, #0
 8003c72:	bf08      	it	eq
 8003c74:	1aad      	subeq	r5, r5, r2
 8003c76:	68a3      	ldr	r3, [r4, #8]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	bf08      	it	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bfc4      	itt	gt
 8003c84:	1a9b      	subgt	r3, r3, r2
 8003c86:	18ed      	addgt	r5, r5, r3
 8003c88:	341a      	adds	r4, #26
 8003c8a:	454d      	cmp	r5, r9
 8003c8c:	d11a      	bne.n	8003cc4 <_printf_common+0xd8>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e008      	b.n	8003ca4 <_printf_common+0xb8>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4652      	mov	r2, sl
 8003c96:	4639      	mov	r1, r7
 8003c98:	4630      	mov	r0, r6
 8003c9a:	47c0      	blx	r8
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d103      	bne.n	8003ca8 <_printf_common+0xbc>
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca8:	3501      	adds	r5, #1
 8003caa:	e7c2      	b.n	8003c32 <_printf_common+0x46>
 8003cac:	2030      	movs	r0, #48	; 0x30
 8003cae:	18e1      	adds	r1, r4, r3
 8003cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cba:	4422      	add	r2, r4
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc2:	e7c4      	b.n	8003c4e <_printf_common+0x62>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4639      	mov	r1, r7
 8003cca:	4630      	mov	r0, r6
 8003ccc:	47c0      	blx	r8
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d0e6      	beq.n	8003ca0 <_printf_common+0xb4>
 8003cd2:	f109 0901 	add.w	r9, r9, #1
 8003cd6:	e7d8      	b.n	8003c8a <_printf_common+0x9e>

08003cd8 <_printf_i>:
 8003cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	7e09      	ldrb	r1, [r1, #24]
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	296e      	cmp	r1, #110	; 0x6e
 8003ce8:	4617      	mov	r7, r2
 8003cea:	4606      	mov	r6, r0
 8003cec:	4698      	mov	r8, r3
 8003cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cf0:	f000 80b3 	beq.w	8003e5a <_printf_i+0x182>
 8003cf4:	d822      	bhi.n	8003d3c <_printf_i+0x64>
 8003cf6:	2963      	cmp	r1, #99	; 0x63
 8003cf8:	d036      	beq.n	8003d68 <_printf_i+0x90>
 8003cfa:	d80a      	bhi.n	8003d12 <_printf_i+0x3a>
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	f000 80b9 	beq.w	8003e74 <_printf_i+0x19c>
 8003d02:	2958      	cmp	r1, #88	; 0x58
 8003d04:	f000 8083 	beq.w	8003e0e <_printf_i+0x136>
 8003d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d10:	e032      	b.n	8003d78 <_printf_i+0xa0>
 8003d12:	2964      	cmp	r1, #100	; 0x64
 8003d14:	d001      	beq.n	8003d1a <_printf_i+0x42>
 8003d16:	2969      	cmp	r1, #105	; 0x69
 8003d18:	d1f6      	bne.n	8003d08 <_printf_i+0x30>
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	0605      	lsls	r5, r0, #24
 8003d20:	f103 0104 	add.w	r1, r3, #4
 8003d24:	d52a      	bpl.n	8003d7c <_printf_i+0xa4>
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da03      	bge.n	8003d36 <_printf_i+0x5e>
 8003d2e:	222d      	movs	r2, #45	; 0x2d
 8003d30:	425b      	negs	r3, r3
 8003d32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d36:	486f      	ldr	r0, [pc, #444]	; (8003ef4 <_printf_i+0x21c>)
 8003d38:	220a      	movs	r2, #10
 8003d3a:	e039      	b.n	8003db0 <_printf_i+0xd8>
 8003d3c:	2973      	cmp	r1, #115	; 0x73
 8003d3e:	f000 809d 	beq.w	8003e7c <_printf_i+0x1a4>
 8003d42:	d808      	bhi.n	8003d56 <_printf_i+0x7e>
 8003d44:	296f      	cmp	r1, #111	; 0x6f
 8003d46:	d020      	beq.n	8003d8a <_printf_i+0xb2>
 8003d48:	2970      	cmp	r1, #112	; 0x70
 8003d4a:	d1dd      	bne.n	8003d08 <_printf_i+0x30>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f043 0320 	orr.w	r3, r3, #32
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	e003      	b.n	8003d5e <_printf_i+0x86>
 8003d56:	2975      	cmp	r1, #117	; 0x75
 8003d58:	d017      	beq.n	8003d8a <_printf_i+0xb2>
 8003d5a:	2978      	cmp	r1, #120	; 0x78
 8003d5c:	d1d4      	bne.n	8003d08 <_printf_i+0x30>
 8003d5e:	2378      	movs	r3, #120	; 0x78
 8003d60:	4865      	ldr	r0, [pc, #404]	; (8003ef8 <_printf_i+0x220>)
 8003d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d66:	e055      	b.n	8003e14 <_printf_i+0x13c>
 8003d68:	6813      	ldr	r3, [r2, #0]
 8003d6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6e:	1d19      	adds	r1, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6011      	str	r1, [r2, #0]
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e08c      	b.n	8003e96 <_printf_i+0x1be>
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d82:	6011      	str	r1, [r2, #0]
 8003d84:	bf18      	it	ne
 8003d86:	b21b      	sxthne	r3, r3
 8003d88:	e7cf      	b.n	8003d2a <_printf_i+0x52>
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	6825      	ldr	r5, [r4, #0]
 8003d8e:	1d18      	adds	r0, r3, #4
 8003d90:	6010      	str	r0, [r2, #0]
 8003d92:	0628      	lsls	r0, r5, #24
 8003d94:	d501      	bpl.n	8003d9a <_printf_i+0xc2>
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	e002      	b.n	8003da0 <_printf_i+0xc8>
 8003d9a:	0668      	lsls	r0, r5, #25
 8003d9c:	d5fb      	bpl.n	8003d96 <_printf_i+0xbe>
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	296f      	cmp	r1, #111	; 0x6f
 8003da2:	bf14      	ite	ne
 8003da4:	220a      	movne	r2, #10
 8003da6:	2208      	moveq	r2, #8
 8003da8:	4852      	ldr	r0, [pc, #328]	; (8003ef4 <_printf_i+0x21c>)
 8003daa:	2100      	movs	r1, #0
 8003dac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003db0:	6865      	ldr	r5, [r4, #4]
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	60a5      	str	r5, [r4, #8]
 8003db6:	f2c0 8095 	blt.w	8003ee4 <_printf_i+0x20c>
 8003dba:	6821      	ldr	r1, [r4, #0]
 8003dbc:	f021 0104 	bic.w	r1, r1, #4
 8003dc0:	6021      	str	r1, [r4, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d13d      	bne.n	8003e42 <_printf_i+0x16a>
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	f040 808e 	bne.w	8003ee8 <_printf_i+0x210>
 8003dcc:	4665      	mov	r5, ip
 8003dce:	2a08      	cmp	r2, #8
 8003dd0:	d10b      	bne.n	8003dea <_printf_i+0x112>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	07db      	lsls	r3, r3, #31
 8003dd6:	d508      	bpl.n	8003dea <_printf_i+0x112>
 8003dd8:	6923      	ldr	r3, [r4, #16]
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bfde      	ittt	le
 8003de0:	2330      	movle	r3, #48	; 0x30
 8003de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dea:	ebac 0305 	sub.w	r3, ip, r5
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	f8cd 8000 	str.w	r8, [sp]
 8003df4:	463b      	mov	r3, r7
 8003df6:	aa03      	add	r2, sp, #12
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7ff fef6 	bl	8003bec <_printf_common>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d14d      	bne.n	8003ea0 <_printf_i+0x1c8>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	b005      	add	sp, #20
 8003e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e0e:	4839      	ldr	r0, [pc, #228]	; (8003ef4 <_printf_i+0x21c>)
 8003e10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	6821      	ldr	r1, [r4, #0]
 8003e18:	1d1d      	adds	r5, r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6015      	str	r5, [r2, #0]
 8003e1e:	060a      	lsls	r2, r1, #24
 8003e20:	d50b      	bpl.n	8003e3a <_printf_i+0x162>
 8003e22:	07ca      	lsls	r2, r1, #31
 8003e24:	bf44      	itt	mi
 8003e26:	f041 0120 	orrmi.w	r1, r1, #32
 8003e2a:	6021      	strmi	r1, [r4, #0]
 8003e2c:	b91b      	cbnz	r3, 8003e36 <_printf_i+0x15e>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	f022 0220 	bic.w	r2, r2, #32
 8003e34:	6022      	str	r2, [r4, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	e7b7      	b.n	8003daa <_printf_i+0xd2>
 8003e3a:	064d      	lsls	r5, r1, #25
 8003e3c:	bf48      	it	mi
 8003e3e:	b29b      	uxthmi	r3, r3
 8003e40:	e7ef      	b.n	8003e22 <_printf_i+0x14a>
 8003e42:	4665      	mov	r5, ip
 8003e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e48:	fb02 3311 	mls	r3, r2, r1, r3
 8003e4c:	5cc3      	ldrb	r3, [r0, r3]
 8003e4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e52:	460b      	mov	r3, r1
 8003e54:	2900      	cmp	r1, #0
 8003e56:	d1f5      	bne.n	8003e44 <_printf_i+0x16c>
 8003e58:	e7b9      	b.n	8003dce <_printf_i+0xf6>
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	6825      	ldr	r5, [r4, #0]
 8003e5e:	1d18      	adds	r0, r3, #4
 8003e60:	6961      	ldr	r1, [r4, #20]
 8003e62:	6010      	str	r0, [r2, #0]
 8003e64:	0628      	lsls	r0, r5, #24
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	d501      	bpl.n	8003e6e <_printf_i+0x196>
 8003e6a:	6019      	str	r1, [r3, #0]
 8003e6c:	e002      	b.n	8003e74 <_printf_i+0x19c>
 8003e6e:	066a      	lsls	r2, r5, #25
 8003e70:	d5fb      	bpl.n	8003e6a <_printf_i+0x192>
 8003e72:	8019      	strh	r1, [r3, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	4665      	mov	r5, ip
 8003e78:	6123      	str	r3, [r4, #16]
 8003e7a:	e7b9      	b.n	8003df0 <_printf_i+0x118>
 8003e7c:	6813      	ldr	r3, [r2, #0]
 8003e7e:	1d19      	adds	r1, r3, #4
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	681d      	ldr	r5, [r3, #0]
 8003e84:	6862      	ldr	r2, [r4, #4]
 8003e86:	2100      	movs	r1, #0
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 f8d1 	bl	8004030 <memchr>
 8003e8e:	b108      	cbz	r0, 8003e94 <_printf_i+0x1bc>
 8003e90:	1b40      	subs	r0, r0, r5
 8003e92:	6060      	str	r0, [r4, #4]
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	6123      	str	r3, [r4, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9e:	e7a7      	b.n	8003df0 <_printf_i+0x118>
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d0aa      	beq.n	8003e04 <_printf_i+0x12c>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	079b      	lsls	r3, r3, #30
 8003eb2:	d413      	bmi.n	8003edc <_printf_i+0x204>
 8003eb4:	68e0      	ldr	r0, [r4, #12]
 8003eb6:	9b03      	ldr	r3, [sp, #12]
 8003eb8:	4298      	cmp	r0, r3
 8003eba:	bfb8      	it	lt
 8003ebc:	4618      	movlt	r0, r3
 8003ebe:	e7a3      	b.n	8003e08 <_printf_i+0x130>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	464a      	mov	r2, r9
 8003ec4:	4639      	mov	r1, r7
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	47c0      	blx	r8
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d09a      	beq.n	8003e04 <_printf_i+0x12c>
 8003ece:	3501      	adds	r5, #1
 8003ed0:	68e3      	ldr	r3, [r4, #12]
 8003ed2:	9a03      	ldr	r2, [sp, #12]
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	42ab      	cmp	r3, r5
 8003ed8:	dcf2      	bgt.n	8003ec0 <_printf_i+0x1e8>
 8003eda:	e7eb      	b.n	8003eb4 <_printf_i+0x1dc>
 8003edc:	2500      	movs	r5, #0
 8003ede:	f104 0919 	add.w	r9, r4, #25
 8003ee2:	e7f5      	b.n	8003ed0 <_printf_i+0x1f8>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ac      	bne.n	8003e42 <_printf_i+0x16a>
 8003ee8:	7803      	ldrb	r3, [r0, #0]
 8003eea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef2:	e76c      	b.n	8003dce <_printf_i+0xf6>
 8003ef4:	08004179 	.word	0x08004179
 8003ef8:	0800418a 	.word	0x0800418a

08003efc <__sread>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	460c      	mov	r4, r1
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	f000 f8a2 	bl	800404c <_read_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	bfab      	itete	ge
 8003f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f10:	181b      	addge	r3, r3, r0
 8003f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f16:	bfac      	ite	ge
 8003f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f1a:	81a3      	strhlt	r3, [r4, #12]
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <__swrite>:
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	461f      	mov	r7, r3
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	4605      	mov	r5, r0
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	d505      	bpl.n	8003f3c <__swrite+0x1e>
 8003f30:	2302      	movs	r3, #2
 8003f32:	2200      	movs	r2, #0
 8003f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f38:	f000 f868 	bl	800400c <_lseek_r>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	4632      	mov	r2, r6
 8003f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	f000 b817 	b.w	8003f84 <_write_r>

08003f56 <__sseek>:
 8003f56:	b510      	push	{r4, lr}
 8003f58:	460c      	mov	r4, r1
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 f855 	bl	800400c <_lseek_r>
 8003f62:	1c43      	adds	r3, r0, #1
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	bf15      	itete	ne
 8003f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f72:	81a3      	strheq	r3, [r4, #12]
 8003f74:	bf18      	it	ne
 8003f76:	81a3      	strhne	r3, [r4, #12]
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <__sclose>:
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 b813 	b.w	8003fa8 <_close_r>
	...

08003f84 <_write_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4605      	mov	r5, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4c05      	ldr	r4, [pc, #20]	; (8003fa4 <_write_r+0x20>)
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fc fb27 	bl	80005e6 <_write>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_write_r+0x1e>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_write_r+0x1e>
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	20000170 	.word	0x20000170

08003fa8 <_close_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	2300      	movs	r3, #0
 8003fac:	4c05      	ldr	r4, [pc, #20]	; (8003fc4 <_close_r+0x1c>)
 8003fae:	4605      	mov	r5, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	f7fc fb33 	bl	800061e <_close>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_close_r+0x1a>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_close_r+0x1a>
 8003fc0:	602b      	str	r3, [r5, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000170 	.word	0x20000170

08003fc8 <_fstat_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4c06      	ldr	r4, [pc, #24]	; (8003fe8 <_fstat_r+0x20>)
 8003fce:	4605      	mov	r5, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	f7fc fb2d 	bl	8000634 <_fstat>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d102      	bne.n	8003fe4 <_fstat_r+0x1c>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	b103      	cbz	r3, 8003fe4 <_fstat_r+0x1c>
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000170 	.word	0x20000170

08003fec <_isatty_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	2300      	movs	r3, #0
 8003ff0:	4c05      	ldr	r4, [pc, #20]	; (8004008 <_isatty_r+0x1c>)
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	f7fc fb2b 	bl	8000652 <_isatty>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_isatty_r+0x1a>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	b103      	cbz	r3, 8004006 <_isatty_r+0x1a>
 8004004:	602b      	str	r3, [r5, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	20000170 	.word	0x20000170

0800400c <_lseek_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	2200      	movs	r2, #0
 8004016:	4c05      	ldr	r4, [pc, #20]	; (800402c <_lseek_r+0x20>)
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f7fc fb23 	bl	8000666 <_lseek>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_lseek_r+0x1e>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	b103      	cbz	r3, 800402a <_lseek_r+0x1e>
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	20000170 	.word	0x20000170

08004030 <memchr>:
 8004030:	b510      	push	{r4, lr}
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	4402      	add	r2, r0
 8004036:	4290      	cmp	r0, r2
 8004038:	4603      	mov	r3, r0
 800403a:	d101      	bne.n	8004040 <memchr+0x10>
 800403c:	2300      	movs	r3, #0
 800403e:	e003      	b.n	8004048 <memchr+0x18>
 8004040:	781c      	ldrb	r4, [r3, #0]
 8004042:	3001      	adds	r0, #1
 8004044:	428c      	cmp	r4, r1
 8004046:	d1f6      	bne.n	8004036 <memchr+0x6>
 8004048:	4618      	mov	r0, r3
 800404a:	bd10      	pop	{r4, pc}

0800404c <_read_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4605      	mov	r5, r0
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	2200      	movs	r2, #0
 8004056:	4c05      	ldr	r4, [pc, #20]	; (800406c <_read_r+0x20>)
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	f7fc faa6 	bl	80005ac <_read>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_read_r+0x1e>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	b103      	cbz	r3, 800406a <_read_r+0x1e>
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000170 	.word	0x20000170

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr
